{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/utils/generic.ts", "../../src/columns/columnKeyCreator.ts", "../../src/utils/object.ts", "../../src/utils/function.ts", "../../src/modules/moduleNames.ts", "../../src/modules/moduleRegistry.ts", "../../src/context/context.ts", "../../src/eventService.ts", "../../src/misc/frameworkEventListenerService.ts", "../../src/entities/column.ts", "../../src/entities/providedColumnGroup.ts", "../../src/entities/defaultColumnTypes.ts", "../../src/utils/event.ts", "../../src/utils/array.ts", "../../src/context/beanStub.ts", "../../src/columns/columnFactory.ts", "../../src/entities/columnGroup.ts", "../../src/eventKeys.ts", "../../src/events.ts", "../../src/columns/groupInstanceIdCreator.ts", "../../src/columns/autoGroupColService.ts", "../../src/utils/string.ts", "../../src/utils/map.ts", "../../src/columns/columnModel.ts", "../../src/columns/columnUtils.ts", "../../src/columns/displayedGroupCreator.ts", "../../src/propertyKeys.ts", "../../src/components/componentUtil.ts", "../../src/components/agStackComponentsRegistry.ts", "../../src/utils/aria.ts", "../../src/utils/browser.ts", "../../src/utils/date.ts", "../../src/utils/number.ts", "../../src/utils/dom.ts", "../../src/utils/fuzzyMatch.ts", "../../src/utils/icon.ts", "../../src/utils/keyboard.ts", "../../src/constants/keyCode.ts", "../../src/utils/mouse.ts", "../../src/utils/rowNode.ts", "../../src/utils/set.ts", "../../src/utils/utils.ts", "../../src/utils/numberSequence.ts", "../../src/utils/promise.ts", "../../src/utils/timer.ts", "../../src/rendering/cssClassManager.ts", "../../src/widgets/tooltipStateManager.ts", "../../src/widgets/tooltipFeature.ts", "../../src/widgets/component.ts", "../../src/widgets/componentAnnotations.ts", "../../src/filter/floating/provided/readOnlyFloatingFilter.ts", "../../src/filter/provided/date/dateCompWrapper.ts", "../../src/filter/provided/optionsFactory.ts", "../../src/filter/filterLocaleText.ts", "../../src/widgets/managedFocusFeature.ts", "../../src/rendering/features/positionableFeature.ts", "../../src/filter/provided/providedFilter.ts", "../../src/widgets/agAbstractLabel.ts", "../../src/widgets/agAbstractField.ts", "../../src/widgets/agPickerField.ts", "../../src/widgets/agList.ts", "../../src/widgets/agSelect.ts", "../../src/widgets/agAbstractInputField.ts", "../../src/widgets/agCheckbox.ts", "../../src/widgets/agRadioButton.ts", "../../src/filter/provided/simpleFilter.ts", "../../src/filter/provided/scalarFilter.ts", "../../src/filter/provided/date/dateFilter.ts", "../../src/filter/floating/provided/simpleFloatingFilter.ts", "../../src/filter/provided/date/dateFloatingFilter.ts", "../../src/filter/provided/date/defaultDateComponent.ts", "../../src/widgets/agInputTextField.ts", "../../src/widgets/agInputNumberField.ts", "../../src/filter/provided/number/numberFilter.ts", "../../src/filter/provided/text/textFilter.ts", "../../src/filter/floating/provided/textInputFloatingFilter.ts", "../../src/filter/provided/number/numberFloatingFilter.ts", "../../src/filter/provided/text/textFloatingFilter.ts", "../../src/widgets/touchListener.ts", "../../src/headerRendering/cells/column/sortIndicatorComp.ts", "../../src/headerRendering/cells/column/headerComp.ts", "../../src/headerRendering/cells/columnGroup/headerGroupComp.ts", "../../src/widgets/popupComponent.ts", "../../src/rendering/cellEditors/largeTextCellEditor.ts", "../../src/rendering/cellEditors/selectCellEditor.ts", "../../src/rendering/cellEditors/simpleCellEditor.ts", "../../src/rendering/cellEditors/textCellEditor.ts", "../../src/rendering/cellRenderers/animateShowChangeCellRenderer.ts", "../../src/rendering/cellRenderers/animateSlideCellRenderer.ts", "../../src/entities/rowNode.ts", "../../src/rendering/checkboxSelectionComponent.ts", "../../src/constants/direction.ts", "../../src/dragAndDrop/dragAndDropService.ts", "../../src/rendering/row/rowDragComp.ts", "../../src/rendering/cellRenderers/groupCellRendererCtrl.ts", "../../src/rendering/cellRenderers/groupCellRenderer.ts", "../../src/rendering/cellRenderers/loadingCellRenderer.ts", "../../src/rendering/overlays/loadingOverlayComponent.ts", "../../src/rendering/overlays/noRowsOverlayComponent.ts", "../../src/rendering/tooltipComponent.ts", "../../src/rendering/cellEditors/numberCellEditor.ts", "../../src/rendering/cellEditors/dateCellEditor.ts", "../../src/rendering/cellEditors/dateStringCellEditor.ts", "../../src/rendering/cellRenderers/checkboxCellRenderer.ts", "../../src/rendering/cellEditors/checkboxCellEditor.ts", "../../src/widgets/agMenuItemRenderer.ts", "../../src/components/framework/userComponentRegistry.ts", "../../src/components/framework/componentTypes.ts", "../../src/filter/floating/floatingFilterMapper.ts", "../../src/components/framework/userComponentFactory.ts", "../../src/components/colDefUtil.ts", "../../src/interfaces/iExcelCreator.ts", "../../src/interfaces/iRowNode.ts", "../../src/autoScrollService.ts", "../../src/gridBodyComp/rowDragFeature.ts", "../../src/dragAndDrop/dragService.ts", "../../src/dragAndDrop/virtualListDragFeature.ts", "../../src/gridApi.ts", "../../src/filter/quickFilterService.ts", "../../src/filter/filterManager.ts", "../../src/headerRendering/cells/abstractCell/abstractHeaderCellComp.ts", "../../src/headerRendering/cells/floatingFilter/headerFilterCellComp.ts", "../../src/styling/layoutFeature.ts", "../../src/gridBodyComp/gridBodyScrollFeature.ts", "../../src/gridBodyComp/gridBodyCtrl.ts", "../../src/interfaces/IRangeService.ts", "../../src/rendering/cell/cellRangeFeature.ts", "../../src/rendering/cell/cellPositionFeature.ts", "../../src/rendering/cell/cellCustomStyleFeature.ts", "../../src/rendering/beans.ts", "../../src/rendering/cell/cellMouseListenerFeature.ts", "../../src/rendering/cell/cellKeyboardListenerFeature.ts", "../../src/rendering/dndSourceComp.ts", "../../src/headerRendering/cells/cssClassApplier.ts", "../../src/rendering/cell/cellCtrl.ts", "../../src/rendering/row/rowCtrl.ts", "../../src/gridBodyComp/rowContainer/rowContainerEventsFeature.ts", "../../src/gridBodyComp/viewportSizeFeature.ts", "../../src/gridBodyComp/rowContainer/setPinnedLeftWidthFeature.ts", "../../src/gridBodyComp/rowContainer/setPinnedRightWidthFeature.ts", "../../src/gridBodyComp/rowContainer/setHeightFeature.ts", "../../src/gridBodyComp/rowContainer/dragListenerFeature.ts", "../../src/gridBodyComp/centerWidthFeature.ts", "../../src/gridBodyComp/rowContainer/rowContainerCtrl.ts", "../../src/gridBodyComp/gridBodyComp.ts", "../../src/gridBodyComp/scrollVisibleService.ts", "../../src/gridBodyComp/mouseEventService.ts", "../../src/gridBodyComp/navigationService.ts", "../../src/rendering/cellEditors/popupEditorWrapper.ts", "../../src/rendering/cell/cellComp.ts", "../../src/rendering/row/rowComp.ts", "../../src/gridBodyComp/rowContainer/rowContainerComp.ts", "../../src/headerRendering/columnDrag/bodyDropPivotTarget.ts", "../../src/headerRendering/columnMoveHelper.ts", "../../src/headerRendering/columnDrag/moveColumnFeature.ts", "../../src/headerRendering/columnDrag/bodyDropTarget.ts", "../../src/headerRendering/cells/column/headerCellComp.ts", "../../src/headerRendering/cells/columnGroup/headerGroupCellComp.ts", "../../src/headerRendering/row/headerRowComp.ts", "../../src/headerRendering/cells/abstractCell/abstractHeaderCellCtrl.ts", "../../src/rendering/features/setLeftFeature.ts", "../../src/headerRendering/cells/hoverFeature.ts", "../../src/headerRendering/cells/floatingFilter/headerFilterCellCtrl.ts", "../../src/headerRendering/cells/column/resizeFeature.ts", "../../src/headerRendering/cells/column/selectAllFeature.ts", "../../src/headerRendering/cells/column/headerCellCtrl.ts", "../../src/headerRendering/cells/columnGroup/groupResizeFeature.ts", "../../src/headerRendering/cells/columnGroup/groupWidthFeature.ts", "../../src/headerRendering/cells/columnGroup/headerGroupCellCtrl.ts", "../../src/headerRendering/row/headerRowCtrl.ts", "../../src/headerRendering/rowContainer/headerRowContainerCtrl.ts", "../../src/headerRendering/rowContainer/headerRowContainerComp.ts", "../../src/headerRendering/common/headerNavigationService.ts", "../../src/headerRendering/gridHeaderCtrl.ts", "../../src/headerRendering/gridHeaderComp.ts", "../../src/headerRendering/common/horizontalResizeService.ts", "../../src/headerRendering/cells/column/standardMenu.ts", "../../src/widgets/tabGuardCtrl.ts", "../../src/widgets/tabGuardComp.ts", "../../src/layout/tabbedLayout.ts", "../../src/misc/resizeObserverService.ts", "../../src/misc/animationFrameService.ts", "../../src/interfaces/iClientSideRowModel.ts", "../../src/misc/expansionService.ts", "../../src/misc/menuService.ts", "../../src/rendering/autoWidthCalculator.ts", "../../src/rendering/features/stickyRowFeature.ts", "../../src/rendering/rowRenderer.ts", "../../src/rendering/valueFormatterService.ts", "../../src/pinnedRowModel/pinnedRowModel.ts", "../../src/interfaces/serverSideTransaction.ts", "../../src/utils/changedPath.ts", "../../src/rowNodeCache/rowNodeBlock.ts", "../../src/rowNodeCache/rowNodeBlockLoader.ts", "../../src/pagination/paginationProxy.ts", "../../src/styling/stylingService.ts", "../../src/widgets/agToggleButton.ts", "../../src/widgets/agInputTextArea.ts", "../../src/widgets/agInputDateField.ts", "../../src/widgets/agInputRange.ts", "../../src/widgets/agRichSelectRow.ts", "../../src/widgets/virtualList.ts", "../../src/widgets/agRichSelect.ts", "../../src/widgets/agSlider.ts", "../../src/widgets/agGroupComponent.ts", "../../src/widgets/agMenuList.ts", "../../src/widgets/agMenuPanel.ts", "../../src/widgets/agMenuItemComponent.ts", "../../src/widgets/agPanel.ts", "../../src/widgets/agDialog.ts", "../../src/widgets/popupService.ts", "../../src/widgets/agAutocompleteRow.ts", "../../src/widgets/agAutocompleteList.ts", "../../src/widgets/agAutocomplete.ts", "../../src/widgets/pillDragComp.ts", "../../src/widgets/pillDropZonePanel.ts", "../../src/vanillaFrameworkOverrides.ts", "../../src/cellNavigationService.ts", "../../src/alignedGridsService.ts", "../../src/selectionService.ts", "../../src/columns/columnApi.ts", "../../src/valueService/valueService.ts", "../../src/valueService/expressionService.ts", "../../src/templateService.ts", "../../src/logger.ts", "../../src/gridComp/gridCtrl.ts", "../../src/gridComp/gridComp.ts", "../../src/sortController.ts", "../../src/focusService.ts", "../../src/rendering/columnHoverService.ts", "../../src/rendering/columnAnimationService.ts", "../../src/pagination/paginationAutoPageSizeService.ts", "../../src/valueService/valueCache.ts", "../../src/valueService/changeDetectionService.ts", "../../src/components/framework/agComponentUtils.ts", "../../src/components/framework/componentMetadataProvider.ts", "../../src/environment.ts", "../../src/rendering/rowContainerHeightService.ts", "../../src/rowNodes/selectableService.ts", "../../src/pagination/paginationComp.ts", "../../src/rendering/overlays/overlayWrapperComponent.ts", "../../src/entities/rowPositionUtils.ts", "../../src/entities/cellPositionUtils.ts", "../../src/undoRedo/undoRedoStack.ts", "../../src/undoRedo/undoRedoService.ts", "../../src/headerRendering/common/headerPosition.ts", "../../src/columns/columnDefFactory.ts", "../../src/rendering/row/rowCssClassCalculator.ts", "../../src/rowNodes/rowNodeSorter.ts", "../../src/ctrlsService.ts", "../../src/ctrlsFactory.ts", "../../src/gridBodyComp/abstractFakeScrollComp.ts", "../../src/gridBodyComp/fakeHScrollComp.ts", "../../src/gridBodyComp/pinnedWidthService.ts", "../../src/entities/rowNodeEventThrottle.ts", "../../src/validation/rules/colDefValidations.ts", "../../src/validation/rules/gridOptionsValidations.ts", "../../src/gridOptionsService.ts", "../../src/localeService.ts", "../../src/gridBodyComp/fakeVScrollComp.ts", "../../src/columns/dataTypeService.ts", "../../src/valueService/valueParserService.ts", "../../src/syncService.ts", "../../src/rendering/overlays/overlayService.ts", "../../src/misc/stateService.ts", "../../src/validation/validationService.ts", "../../src/misc/apiEventService.ts", "../../src/pagination/pageSizeSelector/pageSizeSelectorComp.ts", "../../src/rendering/ariaAnnouncementService.ts", "../../src/grid.ts", "../../src/components/framework/frameworkComponentWrapper.ts", "../../src/interfaces/iAgChartOptions.ts", "../../src/interfaces/iSparklineCellRendererParams.ts"],
  "sourcesContent": ["// to satisfy server side compilation\ndeclare let global: any;\nconst globalObj = typeof global === 'undefined' ? {} : global;\nglobalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;\nglobalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;\nglobalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;\nglobalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;\nglobalObj.Node = typeof Node === 'undefined' ? {} : Node;\nglobalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent;\n\n// columns\nexport { ColumnFactory } from \"./columns/columnFactory\";\nexport { ColumnModel, ColumnState, ColumnStateParams, ApplyColumnStateParams, ISizeColumnsToFitParams, IColumnLimit } from \"./columns/columnModel\";\nexport { ColumnKeyCreator } from \"./columns/columnKeyCreator\";\nexport { ColumnUtils } from \"./columns/columnUtils\";\nexport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator\";\nexport { GroupInstanceIdCreator } from \"./columns/groupInstanceIdCreator\";\nexport { GROUP_AUTO_COLUMN_ID } from \"./columns/autoGroupColService\";\nexport {\n    SizeColumnsToFitGridColumnLimits,\n    SizeColumnsToContentStrategy,\n    SizeColumnsToFitProvidedWidthStrategy,\n    SizeColumnsToFitGridStrategy\n} from \"./interfaces/autoSizeStrategy\";\n\n// components\nexport { ComponentUtil } from \"./components/componentUtil\";\nexport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\n\nexport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nexport { UserComponentFactory, UserCompDetails } from \"./components/framework/userComponentFactory\";\nexport { ComponentType } from \"./components/framework/componentTypes\";\nexport { ColDefUtil } from \"./components/colDefUtil\";\n\n// context\nexport { BeanStub } from \"./context/beanStub\";\nexport {\n    Context,\n    ComponentMeta,\n    Autowired,\n    PostConstruct,\n    PreConstruct,\n    Optional,\n    Bean,\n    Qualifier,\n    PreDestroy\n} from \"./context/context\";\nexport { QuerySelector, RefSelector } from \"./widgets/componentAnnotations\";\n\n// excel\nexport {\n    ColumnWidthCallbackParams,\n    RowHeightCallbackParams,\n    IExcelCreator,\n    ExcelAlignment,\n    ExcelBorder,\n    ExcelBorders,\n    ExcelCell,\n    ExcelColumn,\n    ExcelContentType,\n    ExcelData,\n    ExcelDataType,\n    ExcelExportParams,\n    ExcelHeaderFooterConfig,\n    ExcelHeaderFooter,\n    ExcelHeaderFooterContent,\n    ExcelImage,\n    ExcelImagePosition,\n    ExcelSheetMargin,\n    ExcelExportMultipleSheetParams,\n    ExcelSheetPageSetup,\n    ExcelFont,\n    ExcelInterior,\n    ExcelNumberFormat,\n    ExcelOOXMLDataType,\n    ExcelOOXMLTemplate,\n    ExcelProtection,\n    ExcelRelationship,\n    ExcelFactoryMode,\n    ExcelRow,\n    ExcelStyle,\n    ExcelTable,\n    ExcelWorksheet,\n    ExcelTableConfig,\n    ExcelSheetNameGetter,\n    ExcelSheetNameGetterParams,\n} from \"./interfaces/iExcelCreator\";\n\n// dragAndDrop\nexport {\n    DragAndDropService,\n    DragSourceType,\n    DropTarget,\n    DragSource,\n    DragItem,\n    DraggingEvent\n} from \"./dragAndDrop/dragAndDropService\";\nexport { RowDropZoneParams, RowDropZoneEvents } from \"./gridBodyComp/rowDragFeature\";\nexport { DragService, DragListenerParams } from \"./dragAndDrop/dragService\";\nexport { IRowDragItem } from \"./rendering/row/rowDragComp\";\nexport { VirtualListDragFeature, VirtualListDragItem, VirtualListDragParams } from \"./dragAndDrop/virtualListDragFeature\";\n\n// entities\nexport { Column, ColumnPinnedType } from \"./entities/column\";\nexport { ColumnGroup, ColumnGroupShowType } from \"./entities/columnGroup\";\nexport { ProvidedColumnGroup } from \"./entities/providedColumnGroup\";\nexport { RowNode } from \"./entities/rowNode\";\nexport { RowHighlightPosition, RowPinnedType, IRowNode } from \"./interfaces/iRowNode\";\n\n// filter\nexport { IFilterDef, IFilterParams, IFilterOptionDef, IDoesFilterPassParams, ProvidedFilterModel, IFilter, IFilterComp, IFilterType, IFloatingFilterType, FilterModel, BaseFilter, BaseFilterParams } from \"./interfaces/iFilter\";\nexport { ISetFilter, SetFilterModel, ISetFilterParams, SetFilterParams, SetFilterValues, SetFilterModelValue, SetFilterValuesFunc, SetFilterValuesFuncParams, ISetFilterTreeListTooltipParams } from \"./interfaces/iSetFilter\";\nexport { FilterManager, FilterWrapper, FilterRequestSource } from \"./filter/filterManager\";\nexport { IMultiFilter, IMultiFilterModel, IMultiFilterComp, IMultiFilterParams, MultiFilterParams, IMultiFilterDef } from './interfaces/iMultiFilter';\n\nexport { ProvidedFilter, IProvidedFilter, IProvidedFilterParams, ProvidedFilterParams } from \"./filter/provided/providedFilter\";\nexport { ISimpleFilter, SimpleFilter, ISimpleFilterParams, SimpleFilterParams, ISimpleFilterModel, ICombinedSimpleModel, JoinOperator, IFilterPlaceholderFunctionParams, FilterPlaceholderFunction } from \"./filter/provided/simpleFilter\";\nexport { ScalarFilter, IScalarFilterParams, ScalarFilterParams } from \"./filter/provided/scalarFilter\";\n\nexport { NumberFilter, INumberFilterParams, NumberFilterParams, NumberFilterModel } from \"./filter/provided/number/numberFilter\";\nexport { TextFilter, ITextFilterParams, TextFilterParams, TextFilterModel, TextFormatter, TextMatcherParams, TextMatcher } from \"./filter/provided/text/textFilter\";\nexport { DateFilter, IDateFilterParams, DateFilterParams, DateFilterModel } from \"./filter/provided/date/dateFilter\";\n\nexport { IFloatingFilter, IFloatingFilterParams, IFloatingFilterComp, BaseFloatingFilterChange, IFloatingFilterParent, IFloatingFilterParentCallback, BaseFloatingFilter } from \"./filter/floating/floatingFilter\";\nexport { TextFloatingFilter, ITextFloatingFilterParams } from './filter/provided/text/textFloatingFilter';\nexport { INumberFloatingFilterParams } from './filter/provided/number/numberFloatingFilter';\nexport { HeaderFilterCellComp } from './headerRendering/cells/floatingFilter/headerFilterCellComp';\nexport { FloatingFilterMapper } from './filter/floating/floatingFilterMapper';\n\nexport {\n    AdvancedFilterModel,\n    JoinAdvancedFilterModel,\n    ColumnAdvancedFilterModel,\n    TextAdvancedFilterModel,\n    NumberAdvancedFilterModel,\n    BooleanAdvancedFilterModel,\n    DateAdvancedFilterModel,\n    DateStringAdvancedFilterModel,\n    ObjectAdvancedFilterModel,\n    TextAdvancedFilterModelType,\n    ScalarAdvancedFilterModelType,\n    BooleanAdvancedFilterModelType\n}  from './interfaces/advancedFilterModel';\nexport { IAdvancedFilterCtrl } from './interfaces/iAdvancedFilterCtrl';\nexport { IAdvancedFilterBuilderParams } from './interfaces/iAdvancedFilterBuilderParams';\nexport { IAdvancedFilterService } from './interfaces/iAdvancedFilterService';\n\n// gridPanel\nexport { GridBodyComp } from \"./gridBodyComp/gridBodyComp\";\nexport { GridBodyCtrl, IGridBodyComp, RowAnimationCssClasses } from \"./gridBodyComp/gridBodyCtrl\";\nexport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService\";\nexport { MouseEventService } from \"./gridBodyComp/mouseEventService\";\nexport { NavigationService } from \"./gridBodyComp/navigationService\";\n\n// rowContainer\nexport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp\";\nexport { RowContainerName, IRowContainerComp, RowContainerCtrl, RowContainerType, getRowContainerTypeForName } from \"./gridBodyComp/rowContainer/rowContainerCtrl\";\n\n// headerRendering\nexport { BodyDropPivotTarget } from \"./headerRendering/columnDrag/bodyDropPivotTarget\";\nexport { BodyDropTarget } from \"./headerRendering/columnDrag/bodyDropTarget\";\nexport { CssClassApplier } from \"./headerRendering/cells/cssClassApplier\";\nexport { HeaderRowContainerComp } from \"./headerRendering/rowContainer/headerRowContainerComp\";\nexport { GridHeaderComp } from \"./headerRendering/gridHeaderComp\";\nexport { GridHeaderCtrl, IGridHeaderComp } from \"./headerRendering/gridHeaderCtrl\";\nexport { HeaderRowComp, HeaderRowType } from \"./headerRendering/row/headerRowComp\";\nexport { HeaderRowCtrl, IHeaderRowComp } from \"./headerRendering/row/headerRowCtrl\";\nexport { HeaderCellCtrl, IHeaderCellComp } from \"./headerRendering/cells/column/headerCellCtrl\";\nexport { SortIndicatorComp } from \"./headerRendering/cells/column/sortIndicatorComp\";\nexport { HeaderFilterCellCtrl, IHeaderFilterCellComp } from \"./headerRendering/cells/floatingFilter/headerFilterCellCtrl\";\nexport { HeaderGroupCellCtrl, IHeaderGroupCellComp } from \"./headerRendering/cells/columnGroup/headerGroupCellCtrl\";\nexport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl\";\nexport { HeaderRowContainerCtrl, IHeaderRowContainerComp } from \"./headerRendering/rowContainer/headerRowContainerCtrl\";\nexport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService\";\nexport { MoveColumnFeature } from \"./headerRendering/columnDrag/moveColumnFeature\";\nexport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu\";\n\n// layout\nexport { TabbedLayout, TabbedItem } from \"./layout/tabbedLayout\";\n\n// misc\nexport { ResizeObserverService } from \"./misc/resizeObserverService\";\nexport { IImmutableService } from \"./interfaces/iImmutableService\";\nexport { AnimationFrameService } from \"./misc/animationFrameService\";\nexport { AlignedGrid } from \"./interfaces/iAlignedGrid\";\nexport { ExpansionService } from \"./misc/expansionService\";\nexport { MenuService } from \"./misc/menuService\";\n\n// editing / cellEditors\nexport { ICellEditor, ICellEditorComp, ICellEditorParams, BaseCellEditor } from \"./interfaces/iCellEditor\";\nexport { LargeTextCellEditor, ILargeTextEditorParams } from \"./rendering/cellEditors/largeTextCellEditor\";\nexport { PopupEditorWrapper } from \"./rendering/cellEditors/popupEditorWrapper\";\nexport { SelectCellEditor, ISelectCellEditorParams } from \"./rendering/cellEditors/selectCellEditor\";\nexport { TextCellEditor, ITextCellEditorParams } from \"./rendering/cellEditors/textCellEditor\";\nexport { NumberCellEditor, INumberCellEditorParams } from \"./rendering/cellEditors/numberCellEditor\";\nexport { DateCellEditor, IDateCellEditorParams } from \"./rendering/cellEditors/dateCellEditor\";\nexport { DateStringCellEditor, IDateStringCellEditorParams } from \"./rendering/cellEditors/dateStringCellEditor\";\nexport { IRichCellEditorParams, RichCellEditorValuesCallback, RichCellEditorParams } from \"./interfaces/iRichCellEditorParams\";\nexport { CheckboxCellEditor } from \"./rendering/cellEditors/checkboxCellEditor\";\n\n\n// rendering / cellRenderers\nexport { Beans } from \"./rendering/beans\";\nexport { ICellRenderer, ICellRendererFunc, ICellRendererComp, ICellRendererParams, ISetFilterCellRendererParams } from \"./rendering/cellRenderers/iCellRenderer\";\nexport { AnimateShowChangeCellRenderer } from \"./rendering/cellRenderers/animateShowChangeCellRenderer\";\nexport { AnimateSlideCellRenderer } from \"./rendering/cellRenderers/animateSlideCellRenderer\";\nexport { GroupCellRenderer, } from \"./rendering/cellRenderers/groupCellRenderer\";\nexport { GroupCellRendererParams, IGroupCellRendererParams, IGroupCellRendererFullRowParams, FooterValueGetterFunc, IGroupCellRenderer, GroupCellRendererCtrl, GroupCheckboxSelectionCallback, GroupCheckboxSelectionCallbackParams } from \"./rendering/cellRenderers/groupCellRendererCtrl\";\n\n// status bar components\nexport { StatusPanelDef, IStatusPanel, IStatusPanelComp, IStatusPanelParams, AggregationStatusPanelAggFunc, IAggregationStatusPanelParams, AggregationStatusPanelParams } from \"./interfaces/iStatusPanel\";\nexport { IStatusBarService } from \"./interfaces/iStatusBarService\";\n\n// tool panel components\nexport { IToolPanel, IToolPanelComp, IToolPanelParams, IPrimaryColsPanel, ToolPanelColumnCompParams, BaseToolPanelParams } from \"./interfaces/iToolPanel\";\nexport { IColumnToolPanel } from \"./interfaces/iColumnToolPanel\";\nexport { IFiltersToolPanel } from \"./interfaces/iFiltersToolPanel\";\n\n// overlays\nexport { ILoadingOverlayComp, ILoadingOverlayParams, ILoadingOverlay } from \"./rendering/overlays/loadingOverlayComponent\";\nexport { INoRowsOverlayComp, INoRowsOverlayParams, INoRowsOverlay } from \"./rendering/overlays/noRowsOverlayComponent\";\n\n// features\nexport { SetLeftFeature } from \"./rendering/features/setLeftFeature\";\nexport { PositionableFeature, ResizableStructure, ResizableSides, PositionableOptions } from \"./rendering/features/positionableFeature\";\n\n// rendering\nexport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nexport { CheckboxSelectionComponent } from \"./rendering/checkboxSelectionComponent\";\nexport { CellComp } from \"./rendering/cell/cellComp\";\nexport { CellCtrl, ICellComp } from \"./rendering/cell/cellCtrl\";\nexport { RowCtrl, IRowComp } from \"./rendering/row/rowCtrl\";\nexport { RowRenderer, FlashCellsParams, GetCellRendererInstancesParams, RefreshCellsParams, RedrawRowsParams, GetCellEditorInstancesParams } from \"./rendering/rowRenderer\";\nexport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nexport { ILoadingCellRenderer, ILoadingCellRendererComp, ILoadingCellRendererParams } from \"./rendering/cellRenderers/loadingCellRenderer\";\nexport { CssClassManager } from \"./rendering/cssClassManager\";\nexport { CheckboxCellRenderer, ICheckboxCellRendererParams } from \"./rendering/cellRenderers/checkboxCellRenderer\";\n\n// row models\nexport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nexport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nexport { RowDataTransaction } from \"./interfaces/rowDataTransaction\";\nexport { ServerSideTransaction, ServerSideTransactionResult, ServerSideTransactionResultStatus } from \"./interfaces/serverSideTransaction\";\nexport { ChangedPath } from \"./utils/changedPath\";\nexport { RowNodeBlock, LoadCompleteEvent, LoadSuccessParams } from \"./rowNodeCache/rowNodeBlock\";\nexport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nexport { PaginationProxy } from \"./pagination/paginationProxy\";\nexport { IClientSideRowModel, ClientSideRowModelSteps, ClientSideRowModelStep, RefreshModelParams } from \"./interfaces/iClientSideRowModel\";\nexport { IInfiniteRowModel } from \"./interfaces/iInfiniteRowModel\";\n\nexport { ColumnVO } from \"./interfaces/iColumnVO\";\n\nexport { IServerSideDatasource, IServerSideGetRowsParams, IServerSideGetRowsRequest } from \"./interfaces/iServerSideDatasource\";\nexport { IServerSideRowModel, IServerSideTransactionManager, RefreshServerSideParams } from \"./interfaces/iServerSideRowModel\";\nexport { IServerSideStore, StoreRefreshAfterParams, ServerSideGroupLevelState } from \"./interfaces/IServerSideStore\";\n\nexport { ISideBarService, ISideBar, SideBarDef, ToolPanelDef } from \"./interfaces/iSideBar\";\nexport { IGetRowsParams, IDatasource } from \"./interfaces/iDatasource\";\n\n//styling\nexport { StylingService } from \"./styling/stylingService\";\nexport { UpdateLayoutClassesParams, LayoutCssClasses } from \"./styling/layoutFeature\";\n\n// widgets\nexport { AgAbstractField, FieldElement, AgFieldParams } from \"./widgets/agAbstractField\";\nexport { AgCheckbox, AgCheckboxParams } from \"./widgets/agCheckbox\";\nexport { AgRadioButton, AgRadioButtonParams } from \"./widgets/agRadioButton\";\nexport { AgToggleButton, AgToggleButtonParams } from \"./widgets/agToggleButton\";\nexport { AgInputTextField, AgInputTextFieldParams } from \"./widgets/agInputTextField\";\nexport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nexport { AgInputNumberField, AgInputNumberFieldParams } from \"./widgets/agInputNumberField\";\nexport { AgInputDateField } from \"./widgets/agInputDateField\";\nexport { AgInputRange } from \"./widgets/agInputRange\";\nexport { AgRichSelect, RichSelectParams } from \"./widgets/agRichSelect\";\nexport { AgSelect, AgSelectParams } from \"./widgets/agSelect\";\nexport { AgSlider, AgSliderParams } from \"./widgets/agSlider\";\nexport { AgGroupComponent, AgGroupComponentParams } from \"./widgets/agGroupComponent\";\nexport { AgMenuItemRenderer } from \"./widgets/agMenuItemRenderer\";\nexport { AgMenuItemComponent, MenuItemActivatedEvent, CloseMenuEvent } from \"./widgets/agMenuItemComponent\";\nexport { AgMenuList } from \"./widgets/agMenuList\";\nexport { AgMenuPanel } from \"./widgets/agMenuPanel\";\nexport { AgDialog } from \"./widgets/agDialog\";\nexport { AgPanel } from \"./widgets/agPanel\";\nexport { ListOption } from \"./widgets/agList\";\nexport { Component, VisibleChangedEvent } from \"./widgets/component\";\nexport { ManagedFocusFeature, ManagedFocusCallbacks } from \"./widgets/managedFocusFeature\";\nexport { TabGuardComp } from \"./widgets/tabGuardComp\";\nexport { TabGuardCtrl, ITabGuard, TabGuardClassNames } from \"./widgets/tabGuardCtrl\";\nexport { PopupComponent } from \"./widgets/popupComponent\";\nexport { PopupService, AgPopup, PopupPositionParams, PopupEventParams } from \"./widgets/popupService\";\nexport { TouchListener, TapEvent, LongTapEvent } from \"./widgets/touchListener\";\nexport { VirtualList, VirtualListModel } from \"./widgets/virtualList\";\n\nexport { AgAbstractLabel, AgLabelParams } from \"./widgets/agAbstractLabel\";\nexport { AgPickerField, AgPickerFieldParams } from \"./widgets/agPickerField\";\nexport { AgAutocomplete, AutocompleteOptionSelectedEvent, AutocompleteValidChangedEvent, AutocompleteValueChangedEvent, AutocompleteValueConfirmedEvent } from \"./widgets/agAutocomplete\";\nexport { AutocompleteEntry, AutocompleteListParams } from \"./widgets/autocompleteParams\";\nexport { PillDragComp } from \"./widgets/pillDragComp\";\nexport { PillDropZonePanel, PillDropZonePanelParams } from \"./widgets/pillDropZonePanel\";\n\n// range\nexport {\n    CellRange, CellRangeParams, CellRangeType, IRangeService,\n    ISelectionHandle, SelectionHandleType, ISelectionHandleFactory, ClearCellRangeParams\n} from \"./interfaces/IRangeService\";\nexport {\n    IChartService,\n    ChartDownloadParams,\n    OpenChartToolPanelParams,\n    CloseChartToolPanelParams,\n    ChartModel,\n    GetChartImageDataUrlParams,\n    ChartModelType,\n    CreateRangeChartParams, ChartParamsCellRange, CreatePivotChartParams, CreateCrossFilterChartParams,\n    UpdateRangeChartParams, UpdatePivotChartParams, UpdateCrossFilterChartParams, UpdateChartParams\n} from './interfaces/IChartService';\n\n// master detail\nexport { IDetailCellRendererParams, GetDetailRowData, GetDetailRowDataParams, IDetailCellRenderer, IDetailCellRendererCtrl } from './interfaces/masterDetail';\n\n// exporter\nexport {\n    CsvExportParams, CsvCell, CsvCellData, CsvCustomContent, ExportParams, ExportFileNameGetter,\n    ExportFileNameGetterParams, PackageFileParams, ProcessCellForExportParams, ProcessHeaderForExportParams,\n    ProcessGroupHeaderForExportParams, ProcessRowGroupForExportParams, ShouldRowBeSkippedParams, BaseExportParams\n} from \"./interfaces/exportParams\";\nexport { HeaderElement, PrefixedXmlAttributes, XmlElement } from \"./interfaces/iXmlFactory\";\nexport { ICsvCreator } from \"./interfaces/iCsvCreator\";\n\n// root\nexport { AutoScrollService } from './autoScrollService';\nexport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nexport { CellNavigationService } from \"./cellNavigationService\";\nexport { AlignedGridsService } from \"./alignedGridsService\";\nexport { KeyCode } from \"./constants/keyCode\";\nexport { VerticalDirection, HorizontalDirection } from \"./constants/direction\";\nexport { Grid, GridParams, Params, GridCoreCreator, createGrid } from \"./grid\";\nexport { GridApi, DetailGridInfo, StartEditingCellParams } from \"./gridApi\";\nexport { Events } from \"./eventKeys\";\nexport { FocusService } from \"./focusService\";\nexport { GridOptionsService, PropertyChangedEvent } from \"./gridOptionsService\";\nexport { EventService } from \"./eventService\";\nexport { SelectableService } from \"./rowNodes/selectableService\";\nexport { RowNodeSorter, SortedRowNode, SortOption } from \"./rowNodes/rowNodeSorter\";\nexport { CtrlsService } from \"./ctrlsService\";\nexport { GridComp } from \"./gridComp/gridComp\";\nexport { GridCtrl, IGridComp } from \"./gridComp/gridCtrl\";\nexport { Logger, LoggerFactory } from \"./logger\";\nexport { SortController, SortModelItem } from \"./sortController\";\nexport { TemplateService } from \"./templateService\";\nexport { LocaleService } from './localeService';\nexport * from \"./utils/index\"; // please leave this as is - we want it to be explicit for build reasons\nexport { ColumnSortState } from \"./utils/aria\";\nexport { ValueService } from \"./valueService/valueService\";\nexport { ValueCache } from \"./valueService/valueCache\";\nexport { ExpressionService } from \"./valueService/expressionService\";\nexport { ValueParserService } from \"./valueService/valueParserService\";\n\n//state\nexport {\n    AggregationColumnState,\n    AggregationState,\n    ColumnGroupState,\n    ColumnOrderState,\n    ColumnPinningState,\n    ColumnSizeState,\n    ColumnSizingState,\n    ColumnToolPanelState,\n    ColumnVisibilityState,\n    FilterState,\n    FiltersToolPanelState,\n    FocusedCellState,\n    GridState,\n    PaginationState,\n    PivotState,\n    RangeSelectionCellState,\n    RangeSelectionState,\n    RowGroupExpansionState,\n    RowGroupState,\n    ScrollState,\n    SideBarState,\n    SortState\n} from \"./interfaces/gridState\";\n\n// uncatalogued\nexport { IRowModel, RowBounds, RowModelType } from \"./interfaces/iRowModel\";\nexport { ISelectionService, ISetNodesSelectedParams } from \"./interfaces/iSelectionService\";\nexport { IExpansionService } from \"./interfaces/iExpansionService\";\nexport { ServerSideRowSelectionState, ServerSideRowGroupSelectionState } from \"./interfaces/selectionState\";\nexport { IServerSideSelectionState, IServerSideGroupSelectionState } from \"./interfaces/iServerSideSelection\";\nexport { IAggFuncService } from \"./interfaces/iAggFuncService\";\nexport { IClipboardService, IClipboardCopyParams, IClipboardCopyRowsParams } from \"./interfaces/iClipboardService\";\nexport { IMenuFactory } from \"./interfaces/iMenuFactory\";\nexport { IColumnChooserFactory, ShowColumnChooserParams } from \"./interfaces/iColumnChooserFactory\";\nexport { CellPosition, CellPositionUtils } from \"./entities/cellPositionUtils\";\nexport { RowPosition, RowPositionUtils } from \"./entities/rowPositionUtils\";\nexport { HeaderPosition, HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nexport { HeaderNavigationService, HeaderNavigationDirection } from \"./headerRendering/common/headerNavigationService\";\nexport {\n    IAggFunc,\n    IAggFuncParams,\n    ColGroupDef,\n    ColDef,\n    ColDefField,\n    AbstractColDef,\n    ColTypeDef,\n    ValueSetterParams,\n    ValueParserParams,\n    ValueFormatterParams,\n    ValueFormatterFunc,\n    ValueParserFunc,\n    ValueGetterFunc,\n    ValueSetterFunc,\n    HeaderValueGetterFunc,\n    HeaderValueGetterParams,\n    ColSpanParams,\n    RowSpanParams,\n    SuppressKeyboardEventParams,\n    SuppressHeaderKeyboardEventParams,\n    ValueGetterParams,\n    NewValueParams,\n    CellClassParams,\n    CellClassFunc,\n    CellStyleFunc,\n    CellStyle,\n    CellClassRules,\n    CellEditorSelectorFunc,\n    CellEditorSelectorResult,\n    CellRendererSelectorFunc,\n    CellRendererSelectorResult,\n    GetQuickFilterTextParams,\n    ColumnFunctionCallbackParams,\n    CheckboxSelectionCallbackParams,\n    CheckboxSelectionCallback,\n    RowDragCallback,\n    RowDragCallbackParams,\n    DndSourceCallback,\n    DndSourceCallbackParams,\n    DndSourceOnRowDragParams,\n    EditableCallbackParams,\n    EditableCallback,\n    SuppressPasteCallback,\n    SuppressPasteCallbackParams,\n    SuppressNavigableCallback,\n    SuppressNavigableCallbackParams,\n    HeaderCheckboxSelectionCallbackParams,\n    HeaderCheckboxSelectionCallback,\n    HeaderLocation,\n    ColumnsMenuParams,\n    ColumnChooserParams,\n    ColumnMenuTab,\n    HeaderClassParams,\n    HeaderClass,\n    ToolPanelClassParams,\n    ToolPanelClass,\n    KeyCreatorParams,\n    SortDirection,\n    NestedFieldPaths\n} from \"./entities/colDef\";\nexport {\n    DataTypeDefinition,\n    TextDataTypeDefinition,\n    NumberDataTypeDefinition,\n    BooleanDataTypeDefinition,\n    DateDataTypeDefinition,\n    DateStringDataTypeDefinition,\n    ObjectDataTypeDefinition,\n    ValueFormatterLiteFunc,\n    ValueFormatterLiteParams,\n    ValueParserLiteFunc,\n    ValueParserLiteParams,\n    BaseCellDataType\n} from \"./entities/dataType\";\nexport { DataTypeService } from \"./columns/dataTypeService\";\nexport {\n    GridOptions,\n    IsApplyServerSideTransaction,\n    GetContextMenuItems,\n    GetDataPath,\n    IsRowMaster,\n    IsRowSelectable,\n    IsRowFilterable,\n    GetMainMenuItems,\n    GetRowNodeIdFunc,\n    GetRowIdFunc,\n    ChartRef,\n    ChartRefParams,\n    RowClassRules,\n    RowStyle,\n    RowClassParams,\n    ServerSideGroupLevelParams,\n    ServerSideStoreParams,\n    GetServerSideGroupKey,\n    IsServerSideGroup,\n    GetChartToolbarItems,\n    RowGroupingDisplayType,\n    TreeDataDisplayType,\n    LoadingCellRendererSelectorFunc,\n    LoadingCellRendererSelectorResult,\n    DomLayoutType,\n    UseGroupFooter,\n    GetChartMenuItems\n} from \"./entities/gridOptions\";\n\nexport {\n    FillOperationParams,\n    RowHeightParams,\n    GetRowIdParams,\n    ProcessRowParams,\n    IsServerSideGroupOpenByDefaultParams,\n    ProcessUnpinnedColumnsParams,\n    IsApplyServerSideTransactionParams,\n    IsGroupOpenByDefaultParams,\n    GetServerSideGroupLevelParamsParams,\n    PaginationNumberFormatterParams,\n    ProcessDataFromClipboardParams,\n    SendToClipboardParams,\n    GetChartToolbarItemsParams,\n    NavigateToNextHeaderParams,\n    TabToNextHeaderParams,\n    NavigateToNextCellParams,\n    TabToNextCellParams,\n    GetContextMenuItemsParams,\n    GetMainMenuItemsParams,\n    PostProcessPopupParams,\n    IsExternalFilterPresentParams,\n    InitialGroupOrderComparatorParams,\n    GetGroupRowAggParams,\n    IsFullWidthRowParams,\n    PostSortRowsParams,\n    GetLocaleTextParams,\n    GetGroupAggFilteringParams,\n    GetGroupIncludeFooterParams,\n    IMenuActionParams\n} from \"./interfaces/iCallbackParams\";\nexport {\n    WithoutGridCommon\n} from \"./interfaces/iCommon\";\n\nexport { ManagedGridOptionKey, ManagedGridOptions, PropertyKeys } from \"./propertyKeys\";\nexport { IPivotColDefService } from \"./interfaces/iPivotColDefService\";\nexport { IProvidedColumn } from \"./interfaces/iProvidedColumn\";\nexport { IHeaderColumn } from \"./interfaces/iHeaderColumn\";\nexport { IViewportDatasource, IViewportDatasourceParams } from \"./interfaces/iViewportDatasource\";\nexport { IContextMenuFactory } from \"./interfaces/iContextMenuFactory\";\nexport { IRowNodeStage, StageExecuteParams } from \"./interfaces/iRowNodeStage\";\nexport { IDateParams, IDate, IDateComp, BaseDate, BaseDateParams } from \"./rendering/dateComponent\";\nexport { IAfterGuiAttachedParams, ContainerType } from \"./interfaces/iAfterGuiAttachedParams\";\nexport { IComponent } from \"./interfaces/iComponent\";\nexport { IEventEmitter } from \"./interfaces/iEventEmitter\";\nexport { IHeaderParams, IHeaderComp, IHeader } from \"./headerRendering/cells/column/headerComp\";\nexport { IHeaderGroupParams, IHeaderGroup, IHeaderGroupComp } from \"./headerRendering/cells/columnGroup/headerGroupComp\";\nexport { ColumnApi } from \"./columns/columnApi\";\nexport { WrappableInterface, BaseComponentWrapper, FrameworkComponentWrapper } from \"./components/framework/frameworkComponentWrapper\";\nexport { IFrameworkOverrides, FrameworkOverridesIncomingSource } from \"./interfaces/iFrameworkOverrides\";\nexport { Environment } from \"./environment\";\nexport { ITooltipComp, ITooltipParams, TooltipLocation } from \"./rendering/tooltipComponent\";\nexport { TooltipFeature } from \"./widgets/tooltipFeature\";\nexport { TooltipStateManager } from \"./widgets/tooltipStateManager\";\nexport { IAggregationStage } from \"./interfaces/iAggregationStage\";\nexport { MenuItemLeafDef, MenuItemDef, IMenuConfigParams, IMenuItemParams, IMenuItem, IMenuItemComp, BaseMenuItem, BaseMenuItemParams } from \"./interfaces/menuItem\";\n\n// charts\nexport * from \"./interfaces/iChartOptions\";\nexport * from \"./interfaces/iAgChartOptions\";\n\n// sparklines\nexport * from \"./interfaces/iSparklineCellRendererParams\";\n\n// modules\nexport { Module, ModuleValidationResult } from \"./interfaces/iModule\";\nexport { ModuleNames } from \"./modules/moduleNames\";\nexport { ModuleRegistry } from \"./modules/moduleRegistry\";\n\n//  events\nexport * from \"./events\";\n", "/**\n * If value is undefined, null or blank, returns null, otherwise returns the value\n * @param {T} value\n * @returns {T | null}\n */\nexport function makeNull<T extends unknown>(value?: T): T | null {\n    if (value == null || value === '') {\n        return null;\n    }\n    return value;\n}\n\nexport function exists(value: string | null | undefined, allowEmptyString?: boolean): value is string;\nexport function exists<T>(value: T): value is NonNullable<T>;\nexport function exists(value: any, allowEmptyString = false): boolean {\n    return value != null && (value !== '' || allowEmptyString);\n}\n\nexport function missing<T>(value: T | null | undefined): value is Exclude<undefined | null, T>;\nexport function missing(value: any): boolean {\n    return !exists(value);\n}\n\nexport function missingOrEmpty<T>(value?: T[] | string | null): boolean {\n    return value == null || value.length === 0;\n}\n\nexport function toStringOrNull(value: any): string | null {\n    return value != null && typeof value.toString === 'function' ? value.toString() : null;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToNumber(value?: number | string | null): number | null | undefined {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n\n    if (value === null || value === '') {\n        // null or blank means clear\n        return null;\n    }\n\n    if (typeof value === 'number') {\n        return isNaN(value) ? undefined : value;\n    }\n\n    const valueParsed = parseInt(value, 10);\n\n    return isNaN(valueParsed) ? undefined : valueParsed;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToBoolean(value?: boolean | string | null): boolean | undefined {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n\n    if (value === null || value === '') {\n        // null means clear\n        return false;\n    }\n\n    if (typeof value === 'boolean') {\n        // if simple boolean, return the boolean\n        return value;\n    }\n\n    // if equal to the string 'true' (ignoring case) then return true\n    return (/true/i).test(value);\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToString(value?: string): string | undefined {\n    if (value == null || value === '') { return; }\n\n    return value;\n}\n\nexport function jsonEquals<T1, T2>(val1: T1, val2: T2): boolean {\n    const val1Json = val1 ? JSON.stringify(val1) : null;\n    const val2Json = val2 ? JSON.stringify(val2) : null;\n\n    return val1Json === val2Json;\n}\n\nexport function defaultComparator(valueA: any, valueB: any, accentedCompare: boolean = false): number {\n    const valueAMissing = valueA == null;\n    const valueBMissing = valueB == null;\n\n    // this is for aggregations sum and avg, where the result can be a number that is wrapped.\n    // if we didn't do this, then the toString() value would be used, which would result in\n    // the strings getting used instead of the numbers.\n    if (valueA && valueA.toNumber) {\n        valueA = valueA.toNumber();\n    }\n\n    if (valueB && valueB.toNumber) {\n        valueB = valueB.toNumber();\n    }\n\n    if (valueAMissing && valueBMissing) {\n        return 0;\n    }\n\n    if (valueAMissing) {\n        return -1;\n    }\n\n    if (valueBMissing) {\n        return 1;\n    }\n\n    function doQuickCompare<T>(a: T, b: T): number {\n        return (a > b ? 1 : (a < b ? -1 : 0));\n    }\n\n    if (typeof valueA !== 'string') {\n        return doQuickCompare(valueA, valueB);\n    }\n\n    if (!accentedCompare) {\n        return doQuickCompare(valueA, valueB);\n    }\n\n    try {\n        // using local compare also allows chinese comparisons\n        return valueA.localeCompare(valueB);\n    } catch (e) {\n        // if something wrong with localeCompare, eg not supported\n        // by browser, then just continue with the quick one\n        return doQuickCompare(valueA, valueB);\n    }\n\n}\n\nexport function values<T>(object: { [key: string]: T; } | Set<T> | Map<any, T>): T[] {\n    if (object instanceof Set || object instanceof Map) {\n        const arr: T[] = [];\n\n        object.forEach((value: T) => arr.push(value));\n\n        return arr;\n    }\n\n    return Object.values(object);\n}\n", "// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\n\nimport { toStringOrNull } from \"../utils/generic\";\n\nexport class ColumnKeyCreator {\n\n    private existingKeys: {[key: string]: boolean} = {};\n\n    public addExistingKeys(keys: string[]): void {\n        for (let i = 0; i < keys.length; i++) {\n            this.existingKeys[keys[i]] = true;\n        }\n    }\n\n    public getUniqueKey(colId?: string | null, colField?: string | null): string {\n        // in case user passed in number for colId, convert to string\n        colId = toStringOrNull(colId);\n\n        let count = 0;\n\n        while (true) {\n            let idToTry: string | number;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else {\n                // no point in stringing this, object treats it the same anyway.\n                idToTry = count;\n            }\n\n            if (!this.existingKeys[idToTry]) {\n                this.existingKeys[idToTry] = true;\n                return String(idToTry);\n            }\n\n            count++;\n        }\n    }\n\n}", "import { exists } from './generic';\n\nexport function iterateObject<T>(object: { [p: string]: T; } | T[] | null | undefined, callback: (key: string, value: T) => void) {\n    if (object == null) { return; }\n\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            callback(i.toString(), object[i]);\n        }\n        return;\n    }\n\n    for (const [key, value ] of Object.entries(object)) {\n        callback(key, value);\n    }\n}\n\nexport function cloneObject<T extends {}>(object: T): T {\n    const copy = {} as T;\n    const keys = Object.keys(object);\n\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const value = (object as any)[key];\n        (copy as any)[key] = value;\n    }\n\n    return copy;\n}\n\n// returns copy of an object, doing a deep clone of any objects with that object.\n// this is used for eg creating copies of Column Definitions, where we want to\n// deep copy all objects, but do not want to deep copy functions (eg when user provides\n// a function or class for colDef.cellRenderer)\nexport function deepCloneDefinition<T>(object: T, keysToSkip?: string[]): T | undefined {\n    if (!object) { return; }\n\n    const obj = object as any;\n    const res: any = {};\n\n    Object.keys(obj).forEach(key => {\n\n        if (keysToSkip && keysToSkip.indexOf(key) >= 0) { return; }\n\n        const value = obj[key];\n\n        // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}. it does\n        // NOT include the following:\n        // 1) arrays\n        // 2) functions or classes (eg ColumnAPI instance)\n        const sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;\n\n        if (sourceIsSimpleObject) {\n            res[key] = deepCloneDefinition(value);\n        } else {\n            res[key] = value;\n        }\n    });\n\n    return res;\n}\n\nexport function getAllValuesInObject<T extends Object>(obj: T): any[] {\n    if (!obj) { return []; }\n    const anyObject = Object as any;\n    if (typeof anyObject.values === 'function') {\n        return anyObject.values(obj);\n    }\n\n    const ret: any[] = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {\n            ret.push(obj[key]);\n        }\n    }\n\n    return ret;\n}\n\nexport function mergeDeep(dest: any, source: any, copyUndefined = true, makeCopyOfSimpleObjects = false): void {\n    if (!exists(source)) { return; }\n\n    iterateObject(source, (key: string, sourceValue: any) => {\n        let destValue: any = dest[key];\n\n        if (destValue === sourceValue) { return; }\n\n        // when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef\n        // and Column Types) would result in params getting shared between objects.\n        // by putting an empty value into destValue first, it means we end up copying over values from\n        // the source object, rather than just copying in the source object in it's entirety.\n        if (makeCopyOfSimpleObjects) {\n            const objectIsDueToBeCopied = destValue == null && sourceValue != null;\n\n            if (objectIsDueToBeCopied) {\n                // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}, as opposed\n                // to a Class instance (such as ColumnAPI instance).\n                const sourceIsSimpleObject = typeof sourceValue === 'object' && sourceValue.constructor === Object;\n                const dontCopy = sourceIsSimpleObject;\n\n                if (dontCopy) {\n                    destValue = {};\n                    dest[key] = destValue;\n                }\n            }\n        }\n\n        if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {\n            mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);\n        } else if (copyUndefined || sourceValue !== undefined) {\n            dest[key] = sourceValue;\n        }\n    });\n}\n\nexport function getValueUsingField(data: any, field: string, fieldContainsDots: boolean): any {\n    if (!field || !data) { return; }\n\n    // if no '.', then it's not a deep value\n    if (!fieldContainsDots) {\n        return data[field];\n    }\n\n    // otherwise it is a deep value, so need to dig for it\n    const fields = field.split('.');\n    let currentObject = data;\n\n    for (let i = 0; i < fields.length; i++) {\n        if (currentObject == null) {\n            return undefined;\n        }\n        currentObject = currentObject[fields[i]];\n    }\n\n    return currentObject;\n}\n\n// used by GridAPI to remove all references, so keeping grid in memory resulting in a\n// memory leak if user is not disposing of the GridAPI references\nexport function removeAllReferences<T>(obj: any, preserveKeys: (keyof T)[] = [], preDestroyLink: string): void {\n    Object.keys(obj).forEach(key => {\n        const value = obj[key];\n        // we want to replace all the @autowired services, which are objects. any simple types (boolean, string etc)\n        // we don't care about\n        if (typeof value === 'object' && !preserveKeys.includes(key as any)) {\n            obj[key] = undefined;\n        }\n    });\n    const proto = Object.getPrototypeOf(obj);\n    const properties: any = {};\n\n    const msgFunc = (key: string) =>  \n    `AG Grid: Grid API function ${key}() cannot be called as the grid has been destroyed.\n    It is recommended to remove local references to the grid api. Alternatively, check gridApi.isDestroyed() to avoid calling methods against a destroyed grid.\n    To run logic when the grid is about to be destroyed use the gridPreDestroy event. See: ${preDestroyLink}`;\n\n    Object.getOwnPropertyNames(proto).forEach(key => {\n        const value = proto[key];\n        // leave all basic types and preserveKeys this is needed for GridAPI to leave the \"destroyed: boolean\" attribute and isDestroyed() function.\n        if (typeof value === 'function' && !preserveKeys.includes(key as any)) {\n            const func = () => {\n                console.warn(msgFunc(key));\n            };\n            properties[key] = { value: func, writable: true };\n        }\n    });\n\n    Object.defineProperties(obj, properties);\n}\n\nexport function isNonNullObject(value: any): boolean {\n    return typeof value === 'object' && value !== null;\n}\n", "const doOnceFlags: { [key: string]: boolean; } = {};\n\n/**\n * If the key was passed before, then doesn't execute the func\n * @param {Function} func\n * @param {string} key\n */\nexport function doOnce(func: () => void, key: string) {\n    if (doOnceFlags[key]) { return; }\n\n    func();\n    doOnceFlags[key] = true;\n}\n\nexport function warnOnce(msg: string) {\n    doOnce(() => console.warn(\"AG Grid: \" + msg), msg);\n}\nexport function errorOnce(msg: string) {\n    doOnce(() => console.error(\"AG Grid: \" + msg), msg);\n}\n\nexport function getFunctionName(funcConstructor: any) {\n    // for every other browser in the world\n    if (funcConstructor.name) {\n        return funcConstructor.name;\n    }\n\n    // for the pestilence that is ie11\n    const matches = /function\\s+([^\\(]+)/.exec(funcConstructor.toString());\n    return matches && matches.length === 2 ? matches[1].trim() : null;\n}\n\nexport function isFunction(val: any): boolean {\n    return !!(val && val.constructor && val.call && val.apply);\n}\n\nexport function executeInAWhile(funcs: Function[]): void {\n    executeAfter(funcs, 400);\n}\n\nconst executeNextVMTurnFuncs: Function[] = [];\nlet executeNextVMTurnPending = false;\n\nexport function executeNextVMTurn(func: () => void): void {\n    executeNextVMTurnFuncs.push(func);\n\n    if (executeNextVMTurnPending) { return; }\n\n    executeNextVMTurnPending = true;\n    window.setTimeout(() => {\n        const funcsCopy = executeNextVMTurnFuncs.slice();\n        executeNextVMTurnFuncs.length = 0;\n        executeNextVMTurnPending = false;\n        funcsCopy.forEach(func => func());\n    }, 0);\n}\n\nexport function executeAfter(funcs: Function[], milliseconds = 0): void {\n    if (funcs.length > 0) {\n        window.setTimeout(() => funcs.forEach(func => func()), milliseconds);\n    }\n}\n\n/**\n * @param {Function} func The function to be debounced\n * @param {number} delay The time in ms to debounce\n * @return {Function} The debounced function\n */\nexport function debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeout: any;\n\n    // Calling debounce returns a new anonymous function\n    return function (...args: any[]) {\n        const context = this;\n        window.clearTimeout(timeout);\n\n        // Set the new timeout\n        timeout = window.setTimeout(function() {\n            func.apply(context, args);\n        }, delay);\n    };\n}\n\n/**\n * @param {Function} func The function to be throttled\n * @param {number} wait The time in ms to throttle\n * @return {Function} The throttled function\n */\nexport function throttle(func: (...args: any[]) => void, wait: number): (...args: any[]) => void {\n    let previousCall = 0;\n\n    return function(...args: any[]) {\n        const context = this;\n        const currentCall = new Date().getTime();\n\n        if (currentCall - previousCall < wait) { return; }\n\n        previousCall = currentCall;\n\n        func.apply(context, args);\n    };\n}\n\nexport function waitUntil(condition: () => boolean, callback: () => void, timeout: number = 100, timeoutMessage?: string) {\n    const timeStamp = new Date().getTime();\n\n    let interval: number | null = null;\n    let executed: boolean = false;\n\n    const internalCallback = () => {\n        const reachedTimeout = ((new Date().getTime()) - timeStamp) > timeout;\n        if (condition() || reachedTimeout) {\n            callback();\n            executed = true;\n            if (interval != null) {\n                window.clearInterval(interval);\n                interval = null;\n            }\n\n            if (reachedTimeout && timeoutMessage) {\n                console.warn(timeoutMessage);\n            }\n        }\n    };\n\n    internalCallback();\n\n    if (!executed) {\n        interval = window.setInterval(internalCallback, 10);\n    }\n}\n\nexport function compose(...fns: Function[]) {\n    return (arg: any) => fns.reduce((composed, f) => f(composed), arg);\n}\n\nexport const noop = () => { return; };\n", "export enum ModuleNames {\n\n    CommunityCoreModule = \"@ag-grid-community/core\",\n\n    // community modules\n    InfiniteRowModelModule = \"@ag-grid-community/infinite-row-model\",\n    ClientSideRowModelModule = \"@ag-grid-community/client-side-row-model\",\n    CsvExportModule = \"@ag-grid-community/csv-export\",\n\n    // enterprise core - users don't need to import on this, but other enterprise modules do\n    EnterpriseCoreModule = \"@ag-grid-enterprise/core\",\n\n    // enterprise modules\n    RowGroupingModule = \"@ag-grid-enterprise/row-grouping\",\n    ColumnsToolPanelModule = \"@ag-grid-enterprise/column-tool-panel\",\n    FiltersToolPanelModule = \"@ag-grid-enterprise/filter-tool-panel\",\n    MenuModule = \"@ag-grid-enterprise/menu\",\n    SetFilterModule = \"@ag-grid-enterprise/set-filter\",\n    MultiFilterModule = \"@ag-grid-enterprise/multi-filter\",\n    StatusBarModule = \"@ag-grid-enterprise/status-bar\",\n    SideBarModule = \"@ag-grid-enterprise/side-bar\",\n    RangeSelectionModule = \"@ag-grid-enterprise/range-selection\",\n    MasterDetailModule = \"@ag-grid-enterprise/master-detail\",\n    RichSelectModule = \"@ag-grid-enterprise/rich-select\",\n    GridChartsModule = \"@ag-grid-enterprise/charts\",\n    ViewportRowModelModule = \"@ag-grid-enterprise/viewport-row-model\",\n    ServerSideRowModelModule = \"@ag-grid-enterprise/server-side-row-model\",\n    ExcelExportModule = \"@ag-grid-enterprise/excel-export\",\n    ClipboardModule = \"@ag-grid-enterprise/clipboard\",\n    SparklinesModule = \"@ag-grid-enterprise/sparklines\",\n    AdvancedFilterModule = \"@ag-grid-enterprise/advanced-filter\",\n\n    // framework wrappers currently don't provide beans, comps etc, so no need to be modules,\n    // however i argue they should be as in theory they 'could' provide beans etc\n    AngularModule = \"@ag-grid-community/angular\",\n    ReactModule = \"@ag-grid-community/react\",\n    VueModule = \"@ag-grid-community/vue\",\n\n    // and then this, which is definitely not a grid module, as it should not have any dependency\n    // on the grid (ie shouldn't even reference the Module interface)\n    // ChartsModule = \"@ag-grid-community/charts-core\",\n}\n", "import { ChartType } from '../interfaces/iChartOptions';\nimport { Module, ModuleValidationInvalidResult } from \"../interfaces/iModule\";\nimport { ModuleNames } from \"./moduleNames\";\nimport { doOnce } from \"../utils/function\";\nimport { values } from \"../utils/generic\";\n\nexport class ModuleRegistry {\n\n    // having in a map a) removes duplicates and b) allows fast lookup\n    private static globalModulesMap: { [name: string]: Module; } = {};\n    private static gridModulesMap: { [gridId: string]: { [name: string]: Module; } } = {}\n    private static moduleBased: boolean | undefined;\n    private static currentModuleVersion: string;\n    private static isBundled: boolean | undefined;\n    private static areGridScopedModules = false;\n\n    /**\n     * Globally register the given module for all grids.\n     * @param module - module to register\n     */\n    public static register(module: Module): void {\n        ModuleRegistry.__register(module, true, undefined);\n    }\n    /**\n     * Globally register the given modules for all grids.\n     * @param modules - modules to register\n     */\n    public static registerModules(modules: Module[]): void {\n        ModuleRegistry.__registerModules(modules, true, undefined);\n    }\n\n    /** AG GRID INTERNAL - Module registration helper. */\n    public static __register(module: Module, moduleBased: boolean, gridId: string | undefined): void {\n        ModuleRegistry.runVersionChecks(module);\n\n        if (gridId !== undefined) {\n            ModuleRegistry.areGridScopedModules = true;\n            if (ModuleRegistry.gridModulesMap[gridId] === undefined) {\n                ModuleRegistry.gridModulesMap[gridId] = {};\n            }\n            ModuleRegistry.gridModulesMap[gridId][module.moduleName] = module;\n        } else {\n            ModuleRegistry.globalModulesMap[module.moduleName] = module;\n        }\n\n        ModuleRegistry.setModuleBased(moduleBased);\n    }\n\n    /** AG GRID INTERNAL - Unregister grid scoped module. */\n    public static __unRegisterGridModules(gridId: string): void {\n        delete ModuleRegistry.gridModulesMap[gridId];\n    }\n    /** AG GRID INTERNAL - Module registration helper. */\n    public static __registerModules(modules: Module[], moduleBased: boolean, gridId: string | undefined): void {\n        ModuleRegistry.setModuleBased(moduleBased);\n\n        if (!modules) {\n            return;\n        }\n        modules.forEach(module => ModuleRegistry.__register(module, moduleBased, gridId));\n    }\n\n    private static isValidModuleVersion(module: Module): boolean {\n        const [moduleMajor, moduleMinor] = module.version.split('.') || [];\n        const [currentModuleMajor, currentModuleMinor] = ModuleRegistry.currentModuleVersion.split('.') || [];\n\n        return moduleMajor === currentModuleMajor && moduleMinor === currentModuleMinor;\n    }\n\n    private static runVersionChecks(module: Module) {\n        if (!ModuleRegistry.currentModuleVersion) {\n            ModuleRegistry.currentModuleVersion = module.version;\n        }\n\n        if (!module.version) {\n            console.error(`AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '${module.moduleName}' is incompatible. Please update all modules to the same version.`);\n        } else if (!ModuleRegistry.isValidModuleVersion(module)) {\n            console.error(`AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '${module.moduleName}' is version ${module.version} but the other modules are version ${this.currentModuleVersion}. Please update all modules to the same version.`);\n        }\n\n        if (module.validate) {\n            const result = module.validate();\n            if (!result.isValid) {\n                const errorResult = result as ModuleValidationInvalidResult;\n                console.error(`AG Grid: ${errorResult.message}`);\n            }\n        }\n    }\n\n    private static setModuleBased(moduleBased: boolean) {\n        if (ModuleRegistry.moduleBased === undefined) {\n            ModuleRegistry.moduleBased = moduleBased;\n        } else {\n            if (ModuleRegistry.moduleBased !== moduleBased) {\n                doOnce(() => {\n                    console.warn(`AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.`);\n                    console.warn('Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.');\n\n                },\n                    'ModulePackageCheck');\n            }\n        }\n    }\n\n    /**\n     * AG GRID INTERNAL - Set if files are being served from a single UMD bundle to provide accurate enterprise upgrade steps.\n     */\n    public static __setIsBundled() {\n        ModuleRegistry.isBundled = true;\n    }\n\n    /** AG GRID INTERNAL - Assert a given module has been register, globally or individually with this grid. */\n    public static __assertRegistered(moduleName: ModuleNames, reason: string, gridId: string): boolean {\n        if (this.__isRegistered(moduleName, gridId)) {\n            return true;\n        }\n\n        const warningKey = reason + moduleName;\n        let warningMessage: string;\n\n        if (ModuleRegistry.isBundled) {\n            {\n                warningMessage =\n                    `AG Grid: unable to use ${reason} as 'ag-grid-enterprise' has not been loaded. Check you are using the Enterprise bundle:\n        \n        <script src=\"https://cdn.jsdelivr.net/npm/ag-grid-enterprise@AG_GRID_VERSION/dist/ag-grid-enterprise.min.js\"></script>\n        \nFor more info see: https://ag-grid.com/javascript-data-grid/getting-started/#getting-started-with-ag-grid-enterprise`;\n            }\n        }\n        else if (ModuleRegistry.moduleBased || ModuleRegistry.moduleBased === undefined) {\n            let modName = Object.entries(ModuleNames).find(([k, v]) => v === moduleName)?.[0];\n            warningMessage =\n                `AG Grid: unable to use ${reason} as the ${modName} is not registered${ModuleRegistry.areGridScopedModules ? ` for gridId: ${gridId}` : ''}. Check if you have registered the module:\n           \n    import { ModuleRegistry } from '@ag-grid-community/core';\n    import { ${modName} } from '${moduleName}';\n    \n    ModuleRegistry.registerModules([ ${modName} ]);\n\nFor more info see: https://www.ag-grid.com/javascript-grid/modules/`;\n        } else {\n            warningMessage =\n                `AG Grid: unable to use ${reason} as package 'ag-grid-enterprise' has not been imported. Check that you have imported the package:\n            \n    import 'ag-grid-enterprise';\n            \nFor more info see: https://www.ag-grid.com/javascript-grid/packages/`;\n        }\n\n        doOnce(() => {\n            console.warn(warningMessage);\n        }, warningKey);\n\n        return false;\n    }\n\n    /**\n     * AG GRID INTERNAL - Warn that a given integrated chart type is not supported under the community distribution.\n     */\n    public static __warnEnterpriseChartDisabled(chartType: ChartType): void {\n        const reason = 'ag-charts-enterprise';\n        const warningKey = reason + ':' + chartType;\n        const url = 'https://www.ag-grid.com/javascript-data-grid/integrated-charts-installation/';\n        const warningMessage = `AG Grid: the '${chartType}' chart type is not supported in AG Charts Community as 'ag-grid-charts-enterprise' or '@ag-grid-enterprise/charts-enterprise' hasn't been loaded. See ${url} for more details.`;\n\n        doOnce(() => {\n            console.warn(warningMessage);\n        }, warningKey);\n    }\n\n\n    /** AG GRID INTERNAL - Is the given module registered, globally or individually with this grid. */\n    public static __isRegistered(moduleName: ModuleNames, gridId: string): boolean {\n        return !!ModuleRegistry.globalModulesMap[moduleName] || !!ModuleRegistry.gridModulesMap[gridId]?.[moduleName];\n    }\n\n    /** AG GRID INTERNAL - Get all registered modules globally / individually for this grid. */\n    public static __getRegisteredModules(gridId: string): Module[] {\n        return [...values(ModuleRegistry.globalModulesMap), ...values(ModuleRegistry.gridModulesMap[gridId] || {})];\n    }\n\n    /** AG GRID INTERNAL - Get the list of modules registered individually for this grid. */\n    public static __getGridRegisteredModules(gridId: string): Module[] {\n        return values(ModuleRegistry.gridModulesMap[gridId] ?? {}) || [];\n    }\n\n    /** INTERNAL */\n    public static __isPackageBased(): boolean {\n        return !ModuleRegistry.moduleBased;\n    }\n}\n", "import { ILogger } from \"../iLogger\";\nimport { Component } from \"../widgets/component\";\nimport { exists, values } from \"../utils/generic\";\nimport { iterateObject } from \"../utils/object\";\nimport { getFunctionName } from \"../utils/function\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\n\n// steps in booting up:\n// 1. create all beans\n// 2. autowire all attributes\n// 3. wire all beans\n// 4. initialise the model\n// 5. initialise the view\n// 6. boot??? (not sure if this is needed)\n// each bean is responsible for initialising itself, taking items from the gridOptionsService\n\nexport interface ContextParams {\n    providedBeanInstances: any;\n    beanClasses: any[];\n    debug: boolean;\n    gridId: string;\n}\n\nexport interface ComponentMeta {\n    componentClass: new () => Object;\n    componentName: string;\n}\n\nexport interface ControllerMeta {\n    controllerClass: new () => Object;\n    controllerName: string;\n}\n\ninterface BeanWrapper {\n    bean: any;\n    beanInstance: any;\n    beanName: any;\n}\n\nexport class Context {\n\n    private beanWrappers: { [key: string]: BeanWrapper; } = {};\n    private contextParams: ContextParams;\n    private logger: ILogger;\n\n    private destroyed = false;\n\n    public constructor(params: ContextParams, logger: ILogger) {\n        if (!params || !params.beanClasses) {\n            return;\n        }\n\n        this.contextParams = params;\n\n        this.logger = logger;\n        this.logger.log(\">> creating ag-Application Context\");\n\n        this.createBeans();\n\n        const beanInstances = this.getBeanInstances();\n\n        this.wireBeans(beanInstances);\n\n        this.logger.log(\">> ag-Application Context ready - component is alive\");\n    }\n\n    private getBeanInstances(): any[] {\n        return values(this.beanWrappers).map(beanEntry => beanEntry.beanInstance);\n    }\n\n    public createBean<T extends any>(bean: T, afterPreCreateCallback?: (comp: Component) => void): T {\n        if (!bean) {\n            throw Error(`Can't wire to bean since it is null`);\n        }\n        this.wireBeans([bean], afterPreCreateCallback);\n        return bean;\n    }\n\n    private wireBeans(beanInstances: any[], afterPreCreateCallback?: (comp: Component) => void): void {\n        this.autoWireBeans(beanInstances);\n        this.methodWireBeans(beanInstances);\n\n        this.callLifeCycleMethods(beanInstances, 'preConstructMethods');\n\n        // the callback sets the attributes, so the component has access to attributes\n        // before postConstruct methods in the component are executed\n        if (exists(afterPreCreateCallback)) {\n            beanInstances.forEach(afterPreCreateCallback);\n        }\n\n        this.callLifeCycleMethods(beanInstances, 'postConstructMethods');\n    }\n\n    private createBeans(): void {\n        // register all normal beans\n        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));\n        // register override beans, these will overwrite beans above of same name\n\n        // instantiate all beans - overridden beans will be left out\n        iterateObject(this.beanWrappers, (key: string, beanEntry: BeanWrapper) => {\n            let constructorParamsMeta: any;\n            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {\n                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;\n            }\n            const constructorParams = this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);\n            const newInstance = new (beanEntry.bean.bind.apply(beanEntry.bean, [null, ...constructorParams]));\n            beanEntry.beanInstance = newInstance;\n        });\n\n        const createdBeanNames = Object.keys(this.beanWrappers).join(', ');\n        this.logger.log(`created beans: ${createdBeanNames}`);\n    }\n\n    // tslint:disable-next-line\n    private createBeanWrapper(BeanClass: new () => Object): void {\n        const metaData = (BeanClass as any).__agBeanMetaData;\n\n        if (!metaData) {\n            let beanName: string;\n            if (BeanClass.prototype.constructor) {\n                beanName = getFunctionName(BeanClass.prototype.constructor);\n            } else {\n                beanName = \"\" + BeanClass;\n            }\n            console.error(`Context item ${beanName} is not a bean`);\n            return;\n        }\n\n        const beanEntry = {\n            bean: BeanClass,\n            beanInstance: null as any,\n            beanName: metaData.beanName\n        };\n\n        this.beanWrappers[metaData.beanName] = beanEntry;\n    }\n\n    private autoWireBeans(beanInstances: any[]): void {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any, beanName: string) => {\n                const attributes = metaData.agClassAttributes;\n                if (!attributes) {\n                    return;\n                }\n\n                attributes.forEach((attribute: any) => {\n                    const otherBean = this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);\n                    beanInstance[attribute.attributeName] = otherBean;\n                });\n            });\n        });\n    }\n\n    private methodWireBeans(beanInstances: any[]): void {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any, beanName: string) => {\n                iterateObject(metaData.autowireMethods, (methodName: string, wireParams: any[]) => {\n                    // skip constructor, as this is dealt with elsewhere\n                    if (methodName === \"agConstructor\") {\n                        return;\n                    }\n                    const initParams = this.getBeansForParameters(wireParams, beanName);\n                    beanInstance[methodName].apply(beanInstance, initParams);\n                });\n            });\n        });\n    }\n\n    private forEachMetaDataInHierarchy(beanInstance: any, callback: (metaData: any, beanName: string) => void): void {\n\n        let prototype: any = Object.getPrototypeOf(beanInstance);\n        while (prototype != null) {\n\n            const constructor: any = prototype.constructor;\n\n            if (constructor.hasOwnProperty('__agBeanMetaData')) {\n                const metaData = constructor.__agBeanMetaData;\n                const beanName = this.getBeanName(constructor);\n                callback(metaData, beanName);\n            }\n\n            prototype = Object.getPrototypeOf(prototype);\n        }\n    }\n\n    private getBeanName(constructor: any): string {\n        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {\n            return constructor.__agBeanMetaData.beanName;\n        }\n\n        const constructorString = constructor.toString();\n        const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n        return beanName;\n    }\n\n    private getBeansForParameters(parameters: any, beanName: string): any[] {\n        const beansList: any[] = [];\n        if (parameters) {\n            iterateObject(parameters, (paramIndex: string, otherBeanName: string) => {\n                const otherBean = this.lookupBeanInstance(beanName, otherBeanName);\n                beansList[Number(paramIndex)] = otherBean;\n            });\n        }\n        return beansList;\n    }\n\n    private lookupBeanInstance(wiringBean: string, beanName: string, optional = false): any {\n        if (this.destroyed) {\n            this.logger.log(`AG Grid: bean reference ${beanName} is used after the grid is destroyed!`);\n            return null;\n        }\n\n        if (beanName === \"context\") {\n            return this;\n        }\n\n        if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {\n            return this.contextParams.providedBeanInstances[beanName];\n        }\n\n        const beanEntry = this.beanWrappers[beanName];\n\n        if (beanEntry) {\n            return beanEntry.beanInstance;\n        }\n\n        if (!optional) {\n            console.error(`AG Grid: unable to find bean reference ${beanName} while initialising ${wiringBean}`);\n        }\n\n        return null;\n    }\n\n    private callLifeCycleMethods(beanInstances: any[], lifeCycleMethod: string): void {\n        beanInstances.forEach(beanInstance => this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod));\n    }\n\n    private callLifeCycleMethodsOnBean(beanInstance: any, lifeCycleMethod: string, methodToIgnore?: string): void {\n        // putting all methods into a map removes duplicates\n        const allMethods: { [methodName: string]: boolean; } = {};\n\n        // dump methods from each level of the metadata hierarchy\n        this.forEachMetaDataInHierarchy(beanInstance, (metaData: any) => {\n            const methods = metaData[lifeCycleMethod] as string[];\n            if (methods) {\n                methods.forEach(methodName => {\n                    if (methodName != methodToIgnore) {\n                        allMethods[methodName] = true;\n                    }\n                });\n            }\n        });\n\n        const allMethodsList = Object.keys(allMethods);\n        allMethodsList.forEach(methodName => beanInstance[methodName]());\n    }\n\n    public getBean(name: string): any {\n        return this.lookupBeanInstance(\"getBean\", name, true);\n    }\n\n    public destroy(): void {\n        if (this.destroyed) { return; }\n\n        // Set before doing the destroy, so if context.destroy() gets called via another bean\n        // we are marked as destroyed already to prevent running destroy() twice\n        this.destroyed = true;\n\n        this.logger.log(\">> Shutting down ag-Application Context\");\n\n        const beanInstances = this.getBeanInstances();\n        this.destroyBeans(beanInstances);\n\n        this.contextParams.providedBeanInstances = null;\n\n        ModuleRegistry.__unRegisterGridModules(this.contextParams.gridId);\n\n        this.logger.log(\">> ag-Application Context shut down - component is dead\");\n    }\n\n    public destroyBean<T>(bean: T): undefined {\n        if (!bean) { return; }\n\n        this.destroyBeans([bean]);\n    }\n\n    public destroyBeans<T>(beans: T[]): T[] {\n        if (!beans) { return []; }\n\n        beans.forEach(bean => {\n            this.callLifeCycleMethodsOnBean(bean, 'preDestroyMethods', 'destroy');\n\n            // call destroy() explicitly if it exists\n            const beanAny = bean as any;\n\n            if (typeof beanAny.destroy === 'function') {\n                beanAny.destroy();\n            }\n        });\n\n        return [];\n    }\n\n    public isDestroyed(): boolean {\n        return this.destroyed;\n    }\n\n    public getGridId(): string {\n        return this.contextParams.gridId;\n    }\n}\n\nexport function PreConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preConstructMethods) {\n        props.preConstructMethods = [];\n    }\n    props.preConstructMethods.push(methodName);\n}\n\nexport function PostConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.postConstructMethods) {\n        props.postConstructMethods = [];\n    }\n    props.postConstructMethods.push(methodName);\n}\n\nexport function PreDestroy(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preDestroyMethods) {\n        props.preDestroyMethods = [];\n    }\n    props.preDestroyMethods.push(methodName);\n}\n\nexport function Bean(beanName: string): Function {\n    return (classConstructor: any) => {\n        const props = getOrCreateProps(classConstructor);\n        props.beanName = beanName;\n    };\n}\n\nexport function Autowired(name?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        autowiredFunc(target, name, false, target, propertyKey, null);\n    };\n}\n\nexport function Optional(name?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        autowiredFunc(target, name, true, target, propertyKey, null);\n    };\n}\n\nfunction autowiredFunc(target: any, name: string | undefined, optional: boolean, classPrototype: any, methodOrAttributeName: string, index: number | null) {\n    if (name === null) {\n        console.error(\"AG Grid: Autowired name should not be null\");\n        return;\n    }\n    if (typeof index === \"number\") {\n        console.error(\"AG Grid: Autowired should be on an attribute\");\n        return;\n    }\n\n    // it's an attribute on the class\n    const props = getOrCreateProps(target.constructor);\n    if (!props.agClassAttributes) {\n        props.agClassAttributes = [];\n    }\n    props.agClassAttributes.push({\n        attributeName: methodOrAttributeName,\n        beanName: name,\n        optional: optional\n    });\n}\n\nexport function Qualifier(name: string): Function {\n    return (classPrototype: any, methodOrAttributeName: string, index: number) => {\n        const constructor: any = typeof classPrototype == \"function\" ? classPrototype : classPrototype.constructor;\n        let props: any;\n\n        if (typeof index === \"number\") {\n            // it's a parameter on a method\n            let methodName: string;\n            if (methodOrAttributeName) {\n                props = getOrCreateProps(constructor);\n                methodName = methodOrAttributeName;\n            } else {\n                props = getOrCreateProps(constructor);\n                methodName = \"agConstructor\";\n            }\n            if (!props.autowireMethods) {\n                props.autowireMethods = {};\n            }\n            if (!props.autowireMethods[methodName]) {\n                props.autowireMethods[methodName] = {};\n            }\n            props.autowireMethods[methodName][index] = name;\n        }\n    };\n}\n\nfunction getOrCreateProps(target: any): any {\n    if (!target.hasOwnProperty(\"__agBeanMetaData\")) {\n        target.__agBeanMetaData = {};\n    }\n\n    return target.__agBeanMetaData;\n}\n", "import { Bean, Qualifier } from \"./context/context\";\nimport { AgEvent, AgEventListener, AgGlobalEventListener, AgGridEvent } from \"./events\";\nimport { GridOptionsService } from \"./gridOptionsService\";\nimport { IEventEmitter } from \"./interfaces/iEventEmitter\";\nimport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\n\n@Bean('eventService')\nexport class EventService implements IEventEmitter {\n\n    private allSyncListeners = new Map<string, Set<AgEventListener>>();\n    private allAsyncListeners = new Map<string, Set<AgEventListener>>();\n\n    private globalSyncListeners = new Set<AgGlobalEventListener>();\n    private globalAsyncListeners = new Set<AgGlobalEventListener>();\n\n    private frameworkOverrides: IFrameworkOverrides;\n    private gridOptionsService?: GridOptionsService;\n\n    private asyncFunctionsQueue: Function[] = [];\n    private scheduled = false;\n\n    // using an object performs better than a Set for the number of different events we have\n    private firedEvents: { [key: string]: boolean; } = {};\n\n    // because this class is used both inside the context and outside the context, we do not\n    // use autowired attributes, as that would be confusing, as sometimes the attributes\n    // would be wired, and sometimes not.\n    //\n    // the global event servers used by AG Grid is autowired by the context once, and this\n    // setBeans method gets called once.\n    //\n    // the times when this class is used outside of the context (eg RowNode has an instance of this\n    // class) then it is not a bean, and this setBeans method is not called.\n    public setBeans(\n        @Qualifier('gridOptionsService') gridOptionsService: GridOptionsService,\n        @Qualifier('frameworkOverrides') frameworkOverrides: IFrameworkOverrides,\n        @Qualifier('globalEventListener') globalEventListener: AgGlobalEventListener | null = null,\n        @Qualifier('globalSyncEventListener') globalSyncEventListener: AgGlobalEventListener | null = null\n    ) {\n        this.frameworkOverrides = frameworkOverrides;\n        this.gridOptionsService = gridOptionsService;\n\n        if (globalEventListener) {\n            const async = gridOptionsService.useAsyncEvents();\n            this.addGlobalListener(globalEventListener, async);\n        }\n\n        if (globalSyncEventListener) {\n            this.addGlobalListener(globalSyncEventListener, false);\n        }\n    }\n\n    public setFrameworkOverrides(frameworkOverrides: IFrameworkOverrides): void {\n        this.frameworkOverrides = frameworkOverrides;\n    }\n\n    private getListeners(eventType: string, async: boolean, autoCreateListenerCollection: boolean): Set<AgEventListener> | undefined {\n        const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n        let listeners = listenerMap.get(eventType);\n\n        // Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance\n        // getListeners() is also called during event dispatch even though no listeners are added. This measure protects\n        // against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after\n        // the RowComp is destroyed, see noRegisteredListenersExist() below.\n        if (!listeners && autoCreateListenerCollection) {\n            listeners = new Set<AgEventListener>();\n            listenerMap.set(eventType, listeners);\n        }\n\n        return listeners;\n    }\n\n    public noRegisteredListenersExist(): boolean {\n        return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 &&\n            this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener, async = false): void {\n        this.getListeners(eventType, async, true)!.add(listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener, async = false): void {\n        const listeners = this.getListeners(eventType, async, false);\n        if (!listeners) { return; }\n\n        listeners.delete(listener);\n\n        if (listeners.size === 0) {\n            const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n            listenerMap.delete(eventType);\n        }\n    }\n\n    public addGlobalListener(listener: AgGlobalEventListener, async = false): void {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);\n    }\n\n    public removeGlobalListener(listener: AgGlobalEventListener, async = false): void {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);\n    }\n\n    public dispatchEvent(event: AgEvent): void {\n        let agEvent = event as AgGridEvent<any>;\n        if (this.gridOptionsService) {\n            // Apply common properties to all dispatched events if this event service has had its beans set with gridOptionsService.\n            // Note there are multiple instances of EventService that are used local to components which do not set gridOptionsService.\n            this.gridOptionsService.addGridCommonParams(agEvent);\n        }\n\n        this.dispatchToListeners(agEvent, true);\n        this.dispatchToListeners(agEvent, false);\n\n        this.firedEvents[agEvent.type] = true;\n    }\n\n    public dispatchEventOnce(event: AgEvent): void {\n        if (!this.firedEvents[event.type]) {\n            this.dispatchEvent(event);\n        }\n    }\n\n    private dispatchToListeners(event: AgGridEvent, async: boolean) {\n        const eventType = event.type;\n\n        if (async && 'event' in event) {\n            const browserEvent = (event as any).event;\n            if (browserEvent instanceof Event) {\n                // AG-7893 - Persist composedPath() so that its result can still be accessed by the user asynchronously.\n                // Within an async event handler if they call composedPath() on the event it will always return an empty [].\n                (event as any).eventPath = browserEvent.composedPath();\n            }\n        }\n\n        const processEventListeners = (listeners: Set<AgEventListener>, originalListeners: Set<AgEventListener>) => listeners.forEach(listener => {\n            if (!originalListeners.has(listener)) {\n                // A listener could have been removed by a previously processed listener. In this case we don't want to call \n                return;\n            }\n            const callback = this.frameworkOverrides\n                ? () => this.frameworkOverrides.wrapIncoming(() => listener(event))\n                : () => listener(event);\n\n            if (async) {\n                this.dispatchAsync(callback)\n            } else {\n                callback();\n            }\n        });\n\n        const originalListeners = this.getListeners(eventType, async, false) ?? new Set<AgEventListener>();\n        // create a shallow copy to prevent listeners cyclically adding more listeners to capture this event\n        const listeners = new Set<AgEventListener>(originalListeners);\n        if (listeners.size > 0) {\n            processEventListeners(listeners, originalListeners);\n        }\n\n        const globalListeners = new Set(async ? this.globalAsyncListeners : this.globalSyncListeners);\n\n        globalListeners.forEach((listener) => {\n            const callback = this.frameworkOverrides\n                ? () => this.frameworkOverrides.wrapIncoming(() => listener(eventType, event))\n                : () => listener(eventType, event);\n           \n            if (async) {\n                this.dispatchAsync(callback);\n            } else {\n                callback()\n            }\n        });\n    }\n\n    // this gets called inside the grid's thread, for each event that it\n    // wants to set async. the grid then batches the events into one setTimeout()\n    // because setTimeout() is an expensive operation. ideally we would have\n    // each event in it's own setTimeout(), but we batch for performance.\n    private dispatchAsync(func: Function): void {\n        // add to the queue for executing later in the next VM turn\n        this.asyncFunctionsQueue.push(func);\n\n        // check if timeout is already scheduled. the first time the grid calls\n        // this within it's thread turn, this should be false, so it will schedule\n        // the 'flush queue' method the first time it comes here. then the flag is\n        // set to 'true' so it will know it's already scheduled for subsequent calls.\n        if (!this.scheduled) {\n            // if not scheduled, schedule one\n            this.frameworkOverrides.wrapIncoming(() => {\n                window.setTimeout(this.flushAsyncQueue.bind(this), 0);\n            });\n            // mark that it is scheduled\n            this.scheduled = true;\n        }\n    }\n\n    // this happens in the next VM turn only, and empties the queue of events\n    private flushAsyncQueue(): void {\n        this.scheduled = false;\n\n        // we take a copy, because the event listener could be using\n        // the grid, which would cause more events, which would be potentially\n        // added to the queue, so safe to take a copy, the new events will\n        // get executed in a later VM turn rather than risk updating the\n        // queue as we are flushing it.\n        const queueCopy = this.asyncFunctionsQueue.slice();\n        this.asyncFunctionsQueue = [];\n\n        // execute the queue\n        queueCopy.forEach(func => func());\n    }\n}\n", "import { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { AgEventListener, AgGlobalEventListener } from \"../events\";\n\n\nexport class FrameworkEventListenerService {\n    // Map from user listener to wrapped listener so we can remove listener provided by user\n    private wrappedListeners: Map<AgEventListener, AgEventListener> = new Map();\n    private wrappedGlobalListeners: Map<AgGlobalEventListener, AgGlobalEventListener> = new Map();\n\n    constructor(private frameworkOverrides: IFrameworkOverrides) {}\n\n    public wrap(userListener: AgEventListener): AgEventListener {\n        let listener = userListener;\n        if (this.frameworkOverrides.shouldWrapOutgoing) {\n            listener = (event: any) => {\n                this.frameworkOverrides.wrapOutgoing(() => userListener(event));\n            };\n            this.wrappedListeners.set(userListener, listener);\n        }\n        return listener;\n    }\n\n    public wrapGlobal(userListener: AgGlobalEventListener): AgGlobalEventListener {\n        let listener = userListener;\n\n        if (this.frameworkOverrides.shouldWrapOutgoing) {\n            listener = (eventType: string, event: any) => {\n                this.frameworkOverrides.wrapOutgoing(() => userListener(eventType, event));\n            };\n            this.wrappedGlobalListeners.set(userListener, listener);\n        }\n        return listener;\n    }\n\n    public unwrap(userListener: AgEventListener): AgEventListener {\n        return this.wrappedListeners.get(userListener) ?? userListener;\n    }\n    public unwrapGlobal(userListener: AgGlobalEventListener): AgGlobalEventListener {\n        return this.wrappedGlobalListeners.get(userListener) ?? userListener;\n    }\n}", "import { ColumnState } from \"../columns/columnModel\";\nimport { ColumnUtils } from \"../columns/columnUtils\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { AgEvent, AgEventListener, ColumnEvent, ColumnEventType } from \"../events\";\nimport { EventService } from \"../eventService\";\nimport { GridOptionsService } from \"../gridOptionsService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { IHeaderColumn } from \"../interfaces/iHeaderColumn\";\nimport { IProvidedColumn } from \"../interfaces/iProvidedColumn\";\nimport { IRowNode } from \"../interfaces/iRowNode\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { FrameworkEventListenerService } from \"../misc/frameworkEventListenerService\";\nimport { ColumnHoverService } from \"../rendering/columnHoverService\";\nimport { exists, missing } from \"../utils/generic\";\nimport { mergeDeep } from \"../utils/object\";\nimport {\n    AbstractColDef,\n    BaseColDefParams,\n    ColDef,\n    ColSpanParams, ColumnFunctionCallbackParams, ColumnMenuTab, IAggFunc, RowSpanParams, SortDirection\n} from \"./colDef\";\nimport { ColumnGroup, ColumnGroupShowType } from \"./columnGroup\";\nimport { ProvidedColumnGroup } from \"./providedColumnGroup\";\nimport { warnOnce } from \"../utils/function\";\n\nexport type ColumnPinnedType = 'left' | 'right' | boolean | null | undefined;\nexport type ColumnEventName =\n    'movingChanged' |\n    'leftChanged' |\n    'widthChanged' |\n    'lastLeftPinnedChanged' |\n    'firstRightPinnedChanged' |\n    'visibleChanged' |\n    'filterChanged' |\n    'filterActiveChanged' |\n    'sortChanged' |\n    'colDefChanged' |\n    'menuVisibleChanged' |\n    'columnRowGroupChanged' |\n    'columnPivotChanged' |\n    'columnValueChanged' |\n    'columnStateUpdated';\n\nconst COL_DEF_DEFAULTS: Partial<ColDef> = {\n    resizable: true,\n    sortable: true\n};\n\nlet instanceIdSequence = 0;\nexport function getNextColInstanceId() {\n    return instanceIdSequence++;\n}\n\n// Wrapper around a user provide column definition. The grid treats the column definition as ready only.\n// This class contains all the runtime information about a column, plus some logic (the definition has no logic).\n// This class implements both interfaces ColumnGroupChild and ProvidedColumnGroupChild as the class can\n// appear as a child of either the original tree or the displayed tree. However the relevant group classes\n// for each type only implements one, as each group can only appear in it's associated tree (eg ProvidedColumnGroup\n// can only appear in OriginalColumn tree).\nexport class Column<TValue = any> implements IHeaderColumn<TValue>, IProvidedColumn, IEventEmitter {\n\n    // + renderedHeaderCell - for making header cell transparent when moving\n    public static EVENT_MOVING_CHANGED: ColumnEventName = 'movingChanged';\n    // + renderedCell - changing left position\n    public static EVENT_LEFT_CHANGED: ColumnEventName = 'leftChanged';\n    // + renderedCell - changing width\n    public static EVENT_WIDTH_CHANGED: ColumnEventName = 'widthChanged';\n    // + renderedCell - for changing pinned classes\n    public static EVENT_LAST_LEFT_PINNED_CHANGED: ColumnEventName = 'lastLeftPinnedChanged';\n    public static EVENT_FIRST_RIGHT_PINNED_CHANGED: ColumnEventName = 'firstRightPinnedChanged';\n    // + renderedColumn - for changing visibility icon\n    public static EVENT_VISIBLE_CHANGED: ColumnEventName = 'visibleChanged';\n    // + every time the filter changes, used in the floating filters\n    public static EVENT_FILTER_CHANGED: ColumnEventName = 'filterChanged';\n    // + renderedHeaderCell - marks the header with filter icon\n    public static EVENT_FILTER_ACTIVE_CHANGED: ColumnEventName = 'filterActiveChanged';\n    // + renderedHeaderCell - marks the header with sort icon\n    public static EVENT_SORT_CHANGED: ColumnEventName = 'sortChanged';\n    // + renderedHeaderCell - marks the header with sort icon\n    public static EVENT_COL_DEF_CHANGED: ColumnEventName = 'colDefChanged';\n\n    public static EVENT_MENU_VISIBLE_CHANGED: ColumnEventName = 'menuVisibleChanged';\n\n    // + toolpanel, for gui updates\n    public static EVENT_ROW_GROUP_CHANGED: ColumnEventName = 'columnRowGroupChanged';\n    // + toolpanel, for gui updates\n    public static EVENT_PIVOT_CHANGED: ColumnEventName = 'columnPivotChanged';\n    // + toolpanel, for gui updates\n    public static EVENT_VALUE_CHANGED: ColumnEventName = 'columnValueChanged';\n    // + dataTypeService - when waiting to infer cell data types\n    public static EVENT_STATE_UPDATED: ColumnEventName = 'columnStateUpdated';\n\n    @Autowired('gridOptionsService') private readonly gridOptionsService: GridOptionsService;\n    @Autowired('columnUtils') private readonly columnUtils: ColumnUtils;\n    @Autowired('columnHoverService') private readonly columnHoverService: ColumnHoverService;\n    \n    @Autowired('frameworkOverrides') private readonly frameworkOverrides: IFrameworkOverrides;\n    private frameworkEventListenerService: FrameworkEventListenerService | null;\n\n    private readonly colId: any;\n    private colDef: ColDef<any, TValue>;\n\n    // used by React (and possibly other frameworks) as key for rendering. also used to\n    // identify old vs new columns for destroying cols when no longer used.\n    private instanceId = getNextColInstanceId();\n\n    // We do NOT use this anywhere, we just keep a reference. this is to check object equivalence\n    // when the user provides an updated list of columns - so we can check if we have a column already\n    // existing for a col def. we cannot use the this.colDef as that is the result of a merge.\n    // This is used in ColumnFactory\n    private userProvidedColDef: ColDef<any, TValue> | null;\n\n    private actualWidth: any;\n\n    // The measured height of this column's header when autoHeaderHeight is enabled\n    private autoHeaderHeight: number | null = null;\n\n    private visible: any;\n    private pinned: ColumnPinnedType;\n    private left: number | null;\n    private oldLeft: number | null;\n    private aggFunc: string | IAggFunc | null | undefined;\n    private sort: SortDirection | undefined;\n    private sortIndex: number | null | undefined;\n    private moving = false;\n    private menuVisible = false;\n\n    private lastLeftPinned: boolean = false;\n    private firstRightPinned: boolean = false;\n\n    private minWidth: number | null | undefined;\n    private maxWidth: number | null | undefined;\n\n    private filterActive = false;\n\n    private eventService: EventService = new EventService();\n\n    private fieldContainsDots: boolean;\n    private tooltipFieldContainsDots: boolean;\n    private tooltipEnabled = false;\n\n    private rowGroupActive = false;\n    private pivotActive = false;\n    private aggregationActive = false;\n    private flex: number | null | undefined;\n\n    private readonly primary: boolean;\n\n    private parent: ColumnGroup;\n    private originalParent: ProvidedColumnGroup | null;\n\n    constructor(colDef: ColDef<any, TValue>, userProvidedColDef: ColDef<any, TValue> | null, colId: string, primary: boolean) {\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.colId = colId;\n        this.primary = primary;\n\n        this.setState(colDef);\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    private setState(colDef: ColDef): void {\n        // sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort === 'asc' || colDef.sort === 'desc') {\n                this.sort = colDef.sort;\n            }\n        } else {\n            if (colDef.initialSort === 'asc' || colDef.initialSort === 'desc') {\n                this.sort = colDef.initialSort;\n            }\n        }\n\n        // sortIndex\n        const sortIndex = colDef.sortIndex;\n        const initialSortIndex = colDef.initialSortIndex;\n        if (sortIndex !== undefined) {\n            if (sortIndex !== null) {\n                this.sortIndex = sortIndex;\n            }\n        } else {\n            if (initialSortIndex !== null) {\n                this.sortIndex = initialSortIndex;\n            }\n        }\n\n        // hide\n        const hide = colDef.hide;\n        const initialHide = colDef.initialHide;\n\n        if (hide !== undefined) {\n            this.visible = !hide;\n        } else {\n            this.visible = !initialHide;\n        }\n\n        // pinned\n        if (colDef.pinned !== undefined) {\n            this.setPinned(colDef.pinned);\n        } else {\n            this.setPinned(colDef.initialPinned);\n        }\n\n        // flex\n        const flex = colDef.flex;\n        const initialFlex = colDef.initialFlex;\n        if (flex !== undefined) {\n            this.flex = flex;\n        } else if (initialFlex !== undefined) {\n            this.flex = initialFlex;\n        }\n    }\n\n    // gets called when user provides an alternative colDef, eg\n    public setColDef(colDef: ColDef<any, TValue>, userProvidedColDef: ColDef<any, TValue> | null, source: ColumnEventType): void {\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.initMinAndMaxWidths();\n        this.initDotNotation();\n        this.initTooltip();\n        this.eventService.dispatchEvent(this.createColumnEvent('colDefChanged', source));\n    }\n\n    /**\n     * Returns the column definition provided by the application.\n     * This may not be correct, as items can be superseded by default column options.\n     * However it's useful for comparison, eg to know which application column definition matches that column.\n     */\n    public getUserProvidedColDef(): ColDef<any, TValue> | null {\n        return this.userProvidedColDef;\n    }\n\n    public setParent(parent: ColumnGroup): void {\n        this.parent = parent;\n    }\n\n    /** Returns the parent column group, if column grouping is active. */\n    public getParent(): ColumnGroup {\n        return this.parent;\n    }\n\n    public setOriginalParent(originalParent: ProvidedColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    /**\n     * Used for marryChildren, helps with comparing when duplicate groups have been created to manage split groups.\n     * \n     * Parent may contain a duplicate but not identical group when the group is split.\n     */\n    public getOriginalParent(): ProvidedColumnGroup | null {\n        return this.originalParent;\n    }\n\n    // this is done after constructor as it uses gridOptionsService\n    @PostConstruct\n    private initialise(): void {\n        this.initMinAndMaxWidths();\n\n        this.resetActualWidth('gridInitializing');\n\n        this.initDotNotation();\n\n        this.initTooltip();\n    }\n\n    private initDotNotation(): void {\n        const suppressDotNotation = this.gridOptionsService.get('suppressFieldDotNotation');\n        this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;\n        this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;\n    }\n\n    private initMinAndMaxWidths(): void {\n        const colDef = this.colDef;\n\n        this.minWidth = this.columnUtils.calculateColMinWidth(colDef);\n        this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);\n    }\n\n    private initTooltip(): void {\n        this.tooltipEnabled = exists(this.colDef.tooltipField) ||\n            exists(this.colDef.tooltipValueGetter) ||\n            exists(this.colDef.tooltipComponent);\n    }\n\n    public resetActualWidth(source: ColumnEventType): void {\n        const initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);\n        this.setActualWidth(initialWidth, source, true);\n    }\n\n    public isEmptyGroup(): boolean {\n        return false;\n    }\n\n    public isRowGroupDisplayed(colId: string): boolean {\n        if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {\n            return false;\n        }\n\n        const showingAllGroups = this.colDef.showRowGroup === true;\n        const showingThisGroup = this.colDef.showRowGroup === colId;\n\n        return showingAllGroups || showingThisGroup;\n    }\n\n    /** Returns `true` if column is a primary column, `false` if secondary. Secondary columns are used for pivoting. */\n    public isPrimary(): boolean {\n        return this.primary;\n    }\n\n    /** Returns `true` if column filtering is allowed. */\n    public isFilterAllowed(): boolean {\n        // filter defined means it's a string, class or true.\n        // if its false, null or undefined then it's false.\n        const filterDefined = !!this.colDef.filter;\n        return filterDefined;\n    }\n\n    public isFieldContainsDots(): boolean {\n        return this.fieldContainsDots;\n    }\n\n    public isTooltipEnabled(): boolean {\n        return this.tooltipEnabled;\n    }\n\n    public isTooltipFieldContainsDots(): boolean {\n        return this.tooltipFieldContainsDots;\n    }\n\n    /** Add an event listener to the column. */\n    public addEventListener(eventType: ColumnEventName, userListener: Function): void {\n        if(this.frameworkOverrides.shouldWrapOutgoing && !this.frameworkEventListenerService) {\n            // Only construct if we need it, as it's an overhead for column construction\n            this.eventService.setFrameworkOverrides(this.frameworkOverrides);\n            this.frameworkEventListenerService = new FrameworkEventListenerService(this.frameworkOverrides);\n        }\n        const listener = this.frameworkEventListenerService?.wrap(userListener as AgEventListener) ?? userListener;\n\n        this.eventService.addEventListener(eventType, listener as AgEventListener);\n    }\n\n    /** Remove event listener from the column. */\n    public removeEventListener(eventType: ColumnEventName, userListener: Function): void {\n        const listener = this.frameworkEventListenerService?.unwrap(userListener as AgEventListener) ?? userListener;\n        this.eventService.removeEventListener(eventType, listener as AgEventListener);\n    }\n\n    public createColumnFunctionCallbackParams(rowNode: IRowNode): ColumnFunctionCallbackParams {\n        return this.gridOptionsService.addGridCommonParams({\n            node: rowNode,\n            data: rowNode.data,\n            column: this,\n            colDef: this.colDef\n        });\n    }\n\n    public isSuppressNavigable(rowNode: IRowNode): boolean {\n        // if boolean set, then just use it\n        if (typeof this.colDef.suppressNavigable === 'boolean') {\n            return this.colDef.suppressNavigable;\n        }\n\n        // if function, then call the function to find out\n        if (typeof this.colDef.suppressNavigable === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const userFunc = this.colDef.suppressNavigable;\n            return userFunc(params);\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns `true` if the cell for this column is editable for the given `rowNode`, otherwise `false`.\n     */\n    public isCellEditable(rowNode: IRowNode): boolean {\n        // only allow editing of groups if the user has this option enabled\n        if (rowNode.group && !this.gridOptionsService.get('enableGroupEdit')) {\n            return false;\n        }\n\n        return this.isColumnFunc(rowNode, this.colDef.editable);\n    }\n\n    public isSuppressFillHandle(): boolean {\n        return !!this.colDef.suppressFillHandle;\n    }\n\n    public isAutoHeight(): boolean {\n        return !!this.colDef.autoHeight;\n    }\n\n    public isAutoHeaderHeight(): boolean {\n        return !!this.colDef.autoHeaderHeight;\n    }\n\n    public isRowDrag(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.rowDrag);\n    }\n\n    public isDndSource(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.dndSource);\n    }\n\n    public isCellCheckboxSelection(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);\n    }\n\n    public isSuppressPaste(rowNode: IRowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);\n    }\n\n    public isResizable(): boolean {\n        return !!this.getColDefValue('resizable');\n    }\n    \n    /** Get value from ColDef or default if it exists. */\n    private getColDefValue<K extends keyof ColDef>(key: K): ColDef[K] {\n        return this.colDef[key] ?? COL_DEF_DEFAULTS[key];\n    }\n\n    private isColumnFunc(rowNode: IRowNode, value?: boolean | ((params: ColumnFunctionCallbackParams) => boolean) | null): boolean {\n        // if boolean set, then just use it\n        if (typeof value === 'boolean') {\n            return value;\n        }\n\n        // if function, then call the function to find out\n        if (typeof value === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const editableFunc = value;\n            return editableFunc(params);\n        }\n\n        return false;\n    }\n\n    public setMoving(moving: boolean, source: ColumnEventType): void {\n        this.moving = moving;\n        this.eventService.dispatchEvent(this.createColumnEvent('movingChanged', source));\n    }\n\n    private createColumnEvent(type: ColumnEventName, source: ColumnEventType): ColumnEvent {\n        return this.gridOptionsService.addGridCommonParams({\n            type: type,\n            column: this,\n            columns: [this],\n            source: source\n        });\n    }\n\n    public isMoving(): boolean {\n        return this.moving;\n    }\n\n    /** If sorting is active, returns the sort direction e.g. `'asc'` or `'desc'`. */\n    public getSort(): SortDirection | undefined {\n        return this.sort;\n    }\n\n    public setSort(sort: SortDirection | undefined, source: ColumnEventType): void {\n        if (this.sort !== sort) {\n            this.sort = sort;\n            this.eventService.dispatchEvent(this.createColumnEvent('sortChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('sort');\n    }\n\n    public setMenuVisible(visible: boolean, source: ColumnEventType): void {\n        if (this.menuVisible !== visible) {\n            this.menuVisible = visible;\n            this.eventService.dispatchEvent(this.createColumnEvent('menuVisibleChanged', source));\n        }\n    }\n\n    public isMenuVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public isSortable(): boolean {\n        return !!this.getColDefValue('sortable');\n    }\n\n    public isSortAscending(): boolean {\n        return this.sort === 'asc';\n    }\n\n    public isSortDescending(): boolean {\n        return this.sort === 'desc';\n    }\n\n    public isSortNone(): boolean {\n        return missing(this.sort);\n    }\n\n    public isSorting(): boolean {\n        return exists(this.sort);\n    }\n\n    public getSortIndex(): number | null | undefined {\n        return this.sortIndex;\n    }\n\n    public setSortIndex(sortOrder?: number | null): void {\n        this.sortIndex = sortOrder;\n        this.dispatchStateUpdatedEvent('sortIndex');\n    }\n\n    public setAggFunc(aggFunc: string | IAggFunc | null | undefined): void {\n        this.aggFunc = aggFunc;\n        this.dispatchStateUpdatedEvent('aggFunc');\n    }\n\n    /** If aggregation is set for the column, returns the aggregation function. */\n    public getAggFunc(): string | IAggFunc | null | undefined {\n        return this.aggFunc;\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public getRight(): number {\n        return this.left + this.actualWidth;\n    }\n\n    public setLeft(left: number | null, source: ColumnEventType) {\n        this.oldLeft = this.left;\n        if (this.left !== left) {\n            this.left = left;\n            this.eventService.dispatchEvent(this.createColumnEvent('leftChanged', source));\n        }\n    }\n\n    /** Returns `true` if filter is active on the column. */\n    public isFilterActive(): boolean {\n        return this.filterActive;\n    }\n\n    // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event\n    public setFilterActive(active: boolean, source: ColumnEventType, additionalEventAttributes?: any): void {\n        if (this.filterActive !== active) {\n            this.filterActive = active;\n            this.eventService.dispatchEvent(this.createColumnEvent('filterActiveChanged', source));\n        }\n        const filterChangedEvent = this.createColumnEvent('filterChanged', source);\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n        this.eventService.dispatchEvent(filterChangedEvent);\n    }\n\n    /** Returns `true` when this `Column` is hovered, otherwise `false` */\n    public isHovered(): boolean {\n        return this.columnHoverService.isHovered(this);\n    }\n\n    public setPinned(pinned: ColumnPinnedType): void {\n        if (pinned === true || pinned === 'left') {\n            this.pinned = 'left';\n        } else if (pinned === 'right') {\n            this.pinned = 'right';\n        } else {\n            this.pinned = null;\n        }\n        this.dispatchStateUpdatedEvent('pinned');\n    }\n\n    public setFirstRightPinned(firstRightPinned: boolean, source: ColumnEventType): void {\n        if (this.firstRightPinned !== firstRightPinned) {\n            this.firstRightPinned = firstRightPinned;\n            this.eventService.dispatchEvent(this.createColumnEvent('firstRightPinnedChanged', source));\n        }\n    }\n\n    public setLastLeftPinned(lastLeftPinned: boolean, source: ColumnEventType): void {\n        if (this.lastLeftPinned !== lastLeftPinned) {\n            this.lastLeftPinned = lastLeftPinned;\n            this.eventService.dispatchEvent(this.createColumnEvent('lastLeftPinnedChanged', source));\n        }\n    }\n\n    public isFirstRightPinned(): boolean {\n        return this.firstRightPinned;\n    }\n\n    public isLastLeftPinned(): boolean {\n        return this.lastLeftPinned;\n    }\n\n    public isPinned(): boolean {\n        return this.pinned === 'left' || this.pinned === 'right';\n    }\n\n    public isPinnedLeft(): boolean {\n        return this.pinned === 'left';\n    }\n\n    public isPinnedRight(): boolean {\n        return this.pinned === 'right';\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.pinned;\n    }\n\n    public setVisible(visible: boolean, source: ColumnEventType): void {\n        const newValue = visible === true;\n        if (this.visible !== newValue) {\n            this.visible = newValue;\n            this.eventService.dispatchEvent(this.createColumnEvent('visibleChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('hide');\n    }\n\n    public isVisible(): boolean {\n        return this.visible;\n    }\n\n    public isSpanHeaderHeight(): boolean {\n        const colDef = this.getColDef();\n        return !colDef.suppressSpanHeaderHeight && !colDef.autoHeaderHeight;\n    }\n\n    public getColumnGroupPaddingInfo(): { numberOfParents: number, isSpanningTotal: boolean } {\n        let parent = this.getParent();\n\n        if (!parent || !parent.isPadding()) { return { numberOfParents: 0, isSpanningTotal: false }; }\n\n        const numberOfParents = parent.getPaddingLevel() + 1;\n        let isSpanningTotal = true;\n\n        while (parent) {\n            if (!parent.isPadding()) {\n                isSpanningTotal = false;\n                break;\n            }\n            parent = parent.getParent();\n        }\n\n        return { numberOfParents, isSpanningTotal };\n    }\n\n    /** Returns the column definition for this column.\n     * The column definition will be the result of merging the application provided column definition with any provided defaults\n     * (e.g. `defaultColDef` grid option, or column types.\n     *\n     * Equivalent: `getDefinition` */\n    public getColDef(): ColDef<any, TValue> {\n        return this.colDef;\n    }\n\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\n        return this.colDef.columnGroupShow;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getId`, `getUniqueId` */\n    public getColId(): string {\n        return this.colId;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getColId`, `getUniqueId` */\n    public getId(): string {\n        return this.colId;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getColId`, `getId` */\n    public getUniqueId(): string {\n        return this.colId;\n    }\n\n    public getDefinition(): AbstractColDef<any, TValue> {\n        return this.colDef;\n    }\n\n    /** Returns the current width of the column. If the column is resized, the actual width is the new size. */\n    public getActualWidth(): number {\n        return this.actualWidth;\n    }\n\n    public getAutoHeaderHeight(): number | null {\n        return this.autoHeaderHeight;\n    }\n\n    /** Returns true if the header height has changed */\n    public setAutoHeaderHeight(height: number): boolean {\n        const changed = height !== this.autoHeaderHeight;\n        this.autoHeaderHeight = height;\n        return changed;\n    }\n\n    private createBaseColDefParams(rowNode: IRowNode): BaseColDefParams {\n        const params: BaseColDefParams = this.gridOptionsService.addGridCommonParams({\n            node: rowNode,\n            data: rowNode.data,\n            colDef: this.colDef,\n            column: this\n        });\n        return params;\n    }\n\n    public getColSpan(rowNode: IRowNode): number {\n        if (missing(this.colDef.colSpan)) { return 1; }\n        const params: ColSpanParams = this.createBaseColDefParams(rowNode);\n        const colSpan = this.colDef.colSpan(params);\n        // colSpan must be number equal to or greater than 1\n\n        return Math.max(colSpan, 1);\n    }\n\n    public getRowSpan(rowNode: IRowNode): number {\n        if (missing(this.colDef.rowSpan)) { return 1; }\n        const params: RowSpanParams = this.createBaseColDefParams(rowNode);\n        const rowSpan = this.colDef.rowSpan(params);\n        // rowSpan must be number equal to or greater than 1\n\n        return Math.max(rowSpan, 1);\n    }\n\n    public setActualWidth(actualWidth: number, source: ColumnEventType, silent: boolean = false): void {\n        if (this.minWidth != null) {\n            actualWidth = Math.max(actualWidth, this.minWidth);\n        }\n        if (this.maxWidth != null) {\n            actualWidth = Math.min(actualWidth, this.maxWidth);\n        }\n        if (this.actualWidth !== actualWidth) {\n            // disable flex for this column if it was manually resized.\n            this.actualWidth = actualWidth;\n            if (this.flex && source !== 'flex' && source !== 'gridInitializing') {\n                this.flex = null;\n            }\n\n            if (!silent) {\n                this.fireColumnWidthChangedEvent(source);\n            }\n        }\n        this.dispatchStateUpdatedEvent('width');\n    }\n\n    public fireColumnWidthChangedEvent(source: ColumnEventType): void {\n        this.eventService.dispatchEvent(this.createColumnEvent('widthChanged', source));\n    }\n\n    public isGreaterThanMax(width: number): boolean {\n        if (this.maxWidth != null) {\n            return width > this.maxWidth;\n        }\n        return false;\n    }\n\n    public getMinWidth(): number | null | undefined {\n        return this.minWidth;\n    }\n\n    public getMaxWidth(): number | null | undefined {\n        return this.maxWidth;\n    }\n\n    public getFlex(): number {\n        return this.flex || 0;\n    }\n\n    // this method should only be used by the columnModel to\n    // change flex when required by the applyColumnState method.\n    public setFlex(flex: number | null) {\n        if (this.flex !== flex) { this.flex = flex; }\n        this.dispatchStateUpdatedEvent('flex');\n    }\n\n    public setMinimum(source: ColumnEventType): void {\n        if (exists(this.minWidth)) {\n            this.setActualWidth(this.minWidth, source);\n        }\n    }\n\n    public setRowGroupActive(rowGroup: boolean, source: ColumnEventType): void {\n        if (this.rowGroupActive !== rowGroup) {\n            this.rowGroupActive = rowGroup;\n            this.eventService.dispatchEvent(this.createColumnEvent('columnRowGroupChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('rowGroup');\n    }\n\n    /** Returns `true` if row group is currently active for this column. */\n    public isRowGroupActive(): boolean {\n        return this.rowGroupActive;\n    }\n\n    public setPivotActive(pivot: boolean, source: ColumnEventType): void {\n        if (this.pivotActive !== pivot) {\n            this.pivotActive = pivot;\n            this.eventService.dispatchEvent(this.createColumnEvent('columnPivotChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('pivot');\n    }\n\n    /** Returns `true` if pivot is currently active for this column. */\n    public isPivotActive(): boolean {\n        return this.pivotActive;\n    }\n\n    public isAnyFunctionActive(): boolean {\n        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();\n    }\n\n    public isAnyFunctionAllowed(): boolean {\n        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();\n    }\n\n    public setValueActive(value: boolean, source: ColumnEventType): void {\n        if (this.aggregationActive !== value) {\n            this.aggregationActive = value;\n            this.eventService.dispatchEvent(this.createColumnEvent('columnValueChanged', source));\n        }\n    }\n\n    /** Returns `true` if value (aggregation) is currently active for this column. */\n    public isValueActive(): boolean {\n        return this.aggregationActive;\n    }\n\n    public isAllowPivot(): boolean {\n        return this.colDef.enablePivot === true;\n    }\n\n    public isAllowValue(): boolean {\n        return this.colDef.enableValue === true;\n    }\n\n    public isAllowRowGroup(): boolean {\n        return this.colDef.enableRowGroup === true;\n    }\n\n    /**\n     * @deprecated v31.1 Use `getColDef().menuTabs ?? defaultValues` instead.\n     */\n    public getMenuTabs(defaultValues: ColumnMenuTab[]): ColumnMenuTab[] {\n        warnOnce(`As of v31.1, 'getMenuTabs' is deprecated. Use 'getColDef().menuTabs ?? defaultValues' instead.`);\n        let menuTabs = this.getColDef().menuTabs;\n\n        if (menuTabs == null) {\n            menuTabs = defaultValues;\n        }\n\n        return menuTabs;\n    }\n\n    private dispatchStateUpdatedEvent(key: keyof ColumnState): void {\n        this.eventService.dispatchEvent({\n            type: Column.EVENT_STATE_UPDATED,\n            key\n        } as AgEvent);\n    }\n}\n", "import { IProvidedColumn } from \"../interfaces/iProvidedColumn\";\nimport { ColGroupDef } from \"./colDef\";\nimport { ColumnGroupShowType } from \"./columnGroup\";\nimport { Column, getNextColInstanceId } from \"./column\";\nimport { EventService } from \"../eventService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { AgEvent, AgEventListener } from \"../events\";\nimport { PreDestroy } from \"../context/context\";\n\nexport class ProvidedColumnGroup implements IProvidedColumn, IEventEmitter {\n\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    public static EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n\n    private localEventService = new EventService();\n\n    private colGroupDef: ColGroupDef | null;\n    private originalParent: ProvidedColumnGroup | null;\n\n    private children: IProvidedColumn[];\n    private groupId: string;\n    private expandable = false;\n\n    private expanded: boolean;\n    private padding: boolean;\n\n    private level: number;\n\n    // used by React (and possibly other frameworks) as key for rendering. also used to\n    // identify old vs new columns for destroying cols when no longer used.\n    private instanceId = getNextColInstanceId();\n\n    private expandableListenerRemoveCallback: (() => void) | null = null;\n\n    constructor(colGroupDef: ColGroupDef | null, groupId: string, padding: boolean, level: number) {\n        this.colGroupDef = colGroupDef;\n        this.groupId = groupId;\n        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;\n        this.padding = padding;\n        this.level = level;\n    }\n\n    @PreDestroy\n    private destroy() {\n        if (this.expandableListenerRemoveCallback) {\n            this.reset(null, undefined);\n        }\n    }\n\n    public reset(colGroupDef: ColGroupDef | null, level: number | undefined): void {\n        this.colGroupDef = colGroupDef;\n        this.level = level!;\n\n        this.originalParent = null;\n\n        if (this.expandableListenerRemoveCallback) {\n            this.expandableListenerRemoveCallback();\n        }\n\n        // we use ! below, as we want to set the object back to the\n        // way it was when it was first created\n        this.children = undefined!;\n        this.expandable = undefined!;\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    public setOriginalParent(originalParent: ProvidedColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    public getOriginalParent(): ProvidedColumnGroup | null {\n        return this.originalParent;\n    }\n\n    public getLevel(): number {\n        return this.level;\n    }\n\n    public isVisible(): boolean {\n        // return true if at least one child is visible\n        if (this.children) {\n            return this.children.some(child => child.isVisible());\n        }\n\n        return false;\n    }\n\n    public isPadding(): boolean {\n        return this.padding;\n    }\n\n    public setExpanded(expanded: boolean | undefined): void {\n        this.expanded = expanded === undefined ? false : expanded;\n        const event: AgEvent = {\n            type: ProvidedColumnGroup.EVENT_EXPANDED_CHANGED\n        };\n        this.localEventService.dispatchEvent(event);\n    }\n\n    public isExpandable(): boolean {\n        return this.expandable;\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getId(): string {\n        return this.getGroupId();\n    }\n\n    public setChildren(children: IProvidedColumn[]): void {\n        this.children = children;\n    }\n\n    public getChildren(): IProvidedColumn[] {\n        return this.children;\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.colGroupDef;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        if (!this.children) { return; }\n\n        this.children.forEach((child: IProvidedColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ProvidedColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\n        const colGroupDef = this.colGroupDef;\n\n        if (!colGroupDef) { return; }\n\n        return colGroupDef.columnGroupShow;\n    }\n\n    // need to check that this group has at least one col showing when both expanded and contracted.\n    // if not, then we don't allow expanding and contracting on this group\n\n    public setupExpandable() {\n        this.setExpandable();\n\n        if (this.expandableListenerRemoveCallback) { this.expandableListenerRemoveCallback(); }\n\n        const listener = this.onColumnVisibilityChanged.bind(this);\n        this.getLeafColumns().forEach(col => col.addEventListener('visibleChanged', listener));\n\n        this.expandableListenerRemoveCallback = () => {\n            this.getLeafColumns().forEach(col => col.removeEventListener('visibleChanged', listener));\n            this.expandableListenerRemoveCallback = null;\n        };\n    }\n\n    public setExpandable() {\n        if (this.isPadding()) { return; }\n        // want to make sure the group doesn't disappear when it's open\n        let atLeastOneShowingWhenOpen = false;\n        // want to make sure the group doesn't disappear when it's closed\n        let atLeastOneShowingWhenClosed = false;\n        // want to make sure the group has something to show / hide\n        let atLeastOneChangeable = false;\n\n        const children = this.findChildrenRemovingPadding();\n\n        for (let i = 0, j = children.length; i < j; i++) {\n            const abstractColumn = children[i];\n            if (!abstractColumn.isVisible()) {\n                continue;\n            }\n            // if the abstractColumn is a grid generated group, there will be no colDef\n            const headerGroupShow = abstractColumn.getColumnGroupShow();\n\n            if (headerGroupShow === 'open') {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneChangeable = true;\n            } else if (headerGroupShow === 'closed') {\n                atLeastOneShowingWhenClosed = true;\n                atLeastOneChangeable = true;\n            } else {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneShowingWhenClosed = true;\n            }\n        }\n\n        const expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n\n        if (this.expandable !== expandable) {\n            this.expandable = expandable;\n            const event: AgEvent = {\n                type: ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED\n            };\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    private findChildrenRemovingPadding(): IProvidedColumn[] {\n        const res: IProvidedColumn[] = [];\n\n        const process = (items: IProvidedColumn[]) => {\n            items.forEach(item => {\n                // if padding, we add this children instead of the padding\n                const skipBecausePadding = item instanceof ProvidedColumnGroup && item.isPadding();\n                if (skipBecausePadding) {\n                    process((item as ProvidedColumnGroup).children);\n                } else {\n                    res.push(item);\n                }\n            });\n        };\n\n        process(this.children);\n\n        return res;\n    }\n\n    private onColumnVisibilityChanged(): void {\n        this.setExpandable();\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n}\n", "import { ColDef } from \"./colDef\";\n\nexport const DefaultColumnTypes: { [key: string]: ColDef } = {\n    numericColumn: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell'\n    },\n    rightAligned: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell'\n    }\n};\n", "import { GridOptionsService } from '../gridOptionsService';\nimport { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\nimport { includes } from './array';\n\nconst AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel', 'scroll'];\nconst supports: { [key: string]: boolean; } = {};\n\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\nexport function stopPropagationForAgGrid(event: Event): void {\n    (event as any)[AG_GRID_STOP_PROPAGATION] = true;\n}\n\nexport function isStopPropagationForAgGrid(event: Event): boolean {\n    return (event as any)[AG_GRID_STOP_PROPAGATION] === true;\n}\n\nexport const isEventSupported = (() => {\n    const tags = {\n        select: 'input',\n        change: 'input',\n        submit: 'form',\n        reset: 'form',\n        error: 'img',\n        load: 'img',\n        abort: 'img'\n    } as any;\n\n    const eventChecker = (eventName: any) => {\n        if (typeof supports[eventName] === 'boolean') {\n            return supports[eventName];\n        }\n\n        const el = document.createElement(tags[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        return supports[eventName] = (eventName in el);\n    };\n\n    return eventChecker;\n})();\n\nexport function getCtrlForEventTarget<T>(gridOptionsService: GridOptionsService, eventTarget: EventTarget | null, type: string): T | null {\n    let sourceElement = eventTarget as HTMLElement;\n\n    while (sourceElement) {\n        const renderedComp = gridOptionsService.getDomData(sourceElement, type);\n\n        if (renderedComp) {\n            return renderedComp as T;\n        }\n\n        sourceElement = sourceElement.parentElement!;\n    }\n\n    return null;\n}\n\nexport function isElementInEventPath(element: HTMLElement, event: Event): boolean {\n    if (!event || !element) {\n        return false;\n    }\n\n    return getEventPath(event).indexOf(element) >= 0;\n}\n\nexport function createEventPath(event: { target: EventTarget }): EventTarget[] {\n    const res: EventTarget[] = [];\n    let pointer: any = event.target;\n\n    while (pointer) {\n        res.push(pointer);\n        pointer = pointer.parentElement;\n    }\n\n    return res;\n}\n\n/**\n * Gets the path for a browser Event or from the target on an AG Grid Event\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event| { target: EventTarget }} event\n * @returns {EventTarget[]}\n */\nexport function getEventPath(event: Event | { target: EventTarget }): EventTarget[] {\n    // This can be called with either a browser event or an AG Grid Event that has a target property.\n    const eventNoType = event as any;\n\n    if (eventNoType.path) {\n        return eventNoType.path;\n    }\n\n    if (eventNoType.composedPath) {\n        return eventNoType.composedPath();\n    }\n\n    // If this is an AG Grid event build the path ourselves\n    return createEventPath(eventNoType);\n}\n\nexport function addSafePassiveEventListener(\n    frameworkOverrides: IFrameworkOverrides,\n    eElement: HTMLElement,\n    event: string, listener: (event?: any) => void\n) {\n    const isPassive = includes(PASSIVE_EVENTS, event);\n    const options = isPassive ? {passive: true} : undefined;\n\n    // this check is here for certain scenarios where I believe the user must be destroying\n    // the grid somehow but continuing for it to be used\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\n    }\n}\n", "import { toStringOrNull } from './generic';\n\nexport function existsAndNotEmpty<T>(value?: T[]): boolean {\n    return value != null && value.length > 0;\n}\n\nexport function last<T>(arr: T[]): T;\nexport function last<T extends Node>(arr: NodeListOf<T>): T;\nexport function last(arr: any): any {\n    if (!arr || !arr.length) { return; }\n\n    return arr[arr.length - 1];\n}\n\nexport function areEqual<T>(a?: T[] | null, b?: T[] | null, comparator?: (a: T, b: T) => boolean): boolean {\n    if (a == null && b == null) {\n        return true;\n    }\n\n    return a != null &&\n        b != null &&\n        a.length === b.length &&\n        a.every((value, index) => comparator ? comparator(value, b[index]) : b[index] === value);\n}\n\nexport function shallowCompare(arr1: any[], arr2: any[]): boolean {\n    return areEqual(arr1, arr2);\n}\n\nexport function sortNumerically(array: number[]): number[] {\n    return array.sort((a, b) => a - b);\n}\n\nexport function removeRepeatsFromArray<T>(array: T[], object: T) {\n    if (!array) { return; }\n\n    for (let index = array.length - 2; index >= 0; index--) {\n        const thisOneMatches = array[index] === object;\n        const nextOneMatches = array[index + 1] === object;\n\n        if (thisOneMatches && nextOneMatches) {\n            array.splice(index + 1, 1);\n        }\n    }\n}\n\nexport function removeFromUnorderedArray<T>(array: T[], object: T) {\n    const index = array.indexOf(object);\n\n    if (index >= 0) {\n        // preserve the last element, then shorten array length by 1 to delete index\n        array[index] = array[array.length - 1];\n        array.pop();\n    }\n}\n\nexport function removeFromArray<T>(array: T[], object: T) {\n    const index = array.indexOf(object);\n\n    if (index >= 0) {\n        array.splice(index, 1);\n    }\n}\n\nexport function removeAllFromUnorderedArray<T>(array: T[], toRemove: T[]) {\n    for (let i = 0; i < toRemove.length; i++) {\n        removeFromUnorderedArray(array, toRemove[i]);\n    }\n}\n\nexport function removeAllFromArray<T>(array: T[], toRemove: T[]) {\n    for (let i = 0; i < toRemove.length; i++) {\n        removeFromArray(array, toRemove[i]);\n    }\n}\n\nexport function insertIntoArray<T>(array: T[], object: T, toIndex: number) {\n    array.splice(toIndex, 0, object);\n}\n\nexport function insertArrayIntoArray<T>(dest: T[], src: T[], toIndex: number) {\n    if (dest == null || src == null) { return; }\n\n    // put items in backwards, otherwise inserted items end up in reverse order\n    for (let i = src.length - 1; i >= 0; i--) {\n        const item = src[i];\n        insertIntoArray(dest, item, toIndex);\n    }\n}\n\nexport function moveInArray<T>(array: T[], objectsToMove: T[], toIndex: number) {\n    // first take out items from the array\n    removeAllFromArray(array, objectsToMove);\n\n    // now add the objects, in same order as provided to us, that means we start at the end\n    // as the objects will be pushed to the right as they are inserted\n    objectsToMove.slice().reverse().forEach(obj => insertIntoArray(array, obj, toIndex));\n}\n\nexport function includes<T>(array: T[], value: T): boolean {\n    return array.indexOf(value) > -1;\n}\n\nexport function flatten<T>(arrayOfArrays: (T | T[])[]): T[] {\n    return [].concat.apply([], arrayOfArrays);\n}\n\nexport function pushAll<T>(target: T[], source: T[]): void {\n    if (source == null || target == null) { return; }\n\n    source.forEach(value => target.push(value));\n}\n\nexport function toStrings<T>(array: T[]): ((string | null)[]) | null {\n    return array.map(toStringOrNull);\n}\n\nexport function forEachReverse<T>(list: T[], action: (value: T, index: number) => void): void {\n    if (list == null) {\n        return;\n    }\n\n    for (let i = list.length - 1; i >= 0; i--) {\n        action(list[i], i);\n    }\n}", "import { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { EventService } from \"../eventService\";\nimport { AgEvent, AgEventListener } from \"../events\";\nimport { Autowired, Context, PreDestroy } from \"./context\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { Component } from \"../widgets/component\";\nimport { addSafePassiveEventListener } from \"../utils/event\";\nimport { GridOptionsService, PropertyChangedEvent, PropertyChangedListener, PropertyValueChangedEvent, PropertyValueChangedListener } from \"../gridOptionsService\";\nimport { GridOptions } from \"../entities/gridOptions\";\nimport { LocaleService } from \"../localeService\";\nimport { Environment } from \"../environment\";\n\nexport class BeanStub implements IEventEmitter {\n\n    public static EVENT_DESTROYED = 'destroyed';\n\n    protected localEventService: EventService;\n\n    private destroyFunctions: (() => void)[] = [];\n    private destroyed = false;\n\n    // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive\n    // prevents vue from creating proxies for created objects and prevents identity related issues\n    public __v_skip = true;\n\n    @Autowired('frameworkOverrides') private readonly frameworkOverrides: IFrameworkOverrides;\n    @Autowired('context') protected readonly context: Context;\n    @Autowired('eventService') protected readonly eventService: EventService;\n    @Autowired('gridOptionsService') protected readonly gridOptionsService: GridOptionsService;\n    @Autowired('localeService') protected readonly localeService: LocaleService;\n    @Autowired('environment') protected readonly environment: Environment;\n\n    // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are\n    // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed\n    // points to a bean or component that was not properly disposed of.\n    // constructor() {\n    //     setTimeout(()=> {\n    //         if (this.isAlive()) {\n    //             let prototype: any = Object.getPrototypeOf(this);\n    //             const constructor: any = prototype.constructor;\n    //             const constructorString = constructor.toString();\n    //             const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n    //             console.log('is alive ' + beanName);\n    //         }\n    //     }, 5000);\n    // }\n\n    // Enable multiple grid properties to be updated together by the user but only trigger shared logic once.\n    // Closely related to logic in ComponentUtil.ts\n    private lastChangeSetIdLookup: Record<string, number> = {};\n\n    // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean\n    protected getFrameworkOverrides(): IFrameworkOverrides {\n        return this.frameworkOverrides;\n    }\n\n    public getContext(): Context {\n        return this.context;\n    }\n\n    @PreDestroy\n    protected destroy(): void {\n        // let prototype: any = Object.getPrototypeOf(this);\n        // const constructor: any = prototype.constructor;\n        // const constructorString = constructor.toString();\n        // const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n\n        this.destroyFunctions.forEach(func => func());\n        this.destroyFunctions.length = 0;\n        this.destroyed = true;\n\n        this.dispatchEvent({ type: BeanStub.EVENT_DESTROYED });\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener): void {\n        if (!this.localEventService) {\n            this.localEventService = new EventService();\n        }\n\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener): void {\n        if (this.localEventService) {\n            this.localEventService.removeEventListener(eventType, listener);\n        }\n    }\n\n    public dispatchEvent<T extends AgEvent>(event: T): void {\n        if (this.localEventService) {\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    public addManagedListener(\n        object: Window | HTMLElement | IEventEmitter,\n        event: string,\n        listener: (event?: any) => void\n    ): (() => null) | undefined {\n        if (this.destroyed) {\n            return;\n        }\n\n        if (object instanceof HTMLElement) {\n            addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);\n        } else {\n            object.addEventListener(event, listener);\n        }\n\n        const destroyFunc: () => null = () => {\n            (object as any).removeEventListener(event, listener);\n\n            this.destroyFunctions = this.destroyFunctions.filter(fn => fn !== destroyFunc);\n            return null;\n        };\n\n        this.destroyFunctions.push(destroyFunc);\n\n        return destroyFunc;\n    }\n\n    private setupGridOptionListener<K extends keyof GridOptions>(\n        event: keyof GridOptions,\n        listener: PropertyValueChangedListener<K>\n    ): (() => null) {\n        this.gridOptionsService.addEventListener(event, listener);\n        const destroyFunc: () => null = () => {\n            this.gridOptionsService.removeEventListener(event, listener);\n            this.destroyFunctions = this.destroyFunctions.filter((fn) => fn !== destroyFunc);\n            return null;\n        };\n        this.destroyFunctions.push(destroyFunc);\n        return destroyFunc;\n    }\n\n    /**\n     * Setup a managed property listener for the given GridOption property.\n     * @param event GridOption property to listen to changes for.\n     * @param listener Listener to run when property value changes\n     */\n    public addManagedPropertyListener<K extends keyof GridOptions>(\n        event: K,\n        listener: PropertyValueChangedListener<K>\n    ): (() => null) {\n        if (this.destroyed) {\n            return () => null;\n        }\n\n        return this.setupGridOptionListener(event, listener);\n    }\n\n    private propertyListenerId = 0;\n    /**\n     * Setup managed property listeners for the given set of GridOption properties.\n     * The listener will be run if any of the property changes but will only run once if\n     * multiple of the properties change within the same framework lifecycle event.\n     * Works on the basis that GridOptionsService updates all properties *before* any property change events are fired.\n     * @param events Array of GridOption properties to listen for changes too.\n     * @param listener Shared listener to run if any of the properties change\n     */\n    public addManagedPropertyListeners(\n        events: (keyof GridOptions)[],\n        listener: PropertyChangedListener\n    ): void {\n        if (this.destroyed) {\n            return;\n        }\n\n        // Ensure each set of events can run for the same changeSetId\n        const eventsKey = events.join('-') + this.propertyListenerId++;\n\n        const wrappedListener = (event: PropertyValueChangedEvent<any>) => {\n            if (event.changeSet) {\n                // ChangeSet is only set when the property change is part of a group of changes from ComponentUtils\n                // Direct api calls should always be run as \n                if (event.changeSet && event.changeSet.id === this.lastChangeSetIdLookup[eventsKey]) {\n                    // Already run the listener for this set of prop changes so don't run again\n                    return;\n                }\n                this.lastChangeSetIdLookup[eventsKey] = event.changeSet.id;\n            }\n            // Don't expose the underlying event value changes to the group listener.\n            const propertiesChangeEvent: PropertyChangedEvent = {\n                type: 'gridPropertyChanged',\n                changeSet: event.changeSet,\n                source: event.source\n            };\n            listener(propertiesChangeEvent);\n        };\n\n        events.forEach((event) => this.setupGridOptionListener(event, wrappedListener));\n    }\n\n    public isAlive = (): boolean => !this.destroyed;\n\n    public addDestroyFunc(func: () => void): void {\n        // if we are already destroyed, we execute the func now\n        if (this.isAlive()) {\n            this.destroyFunctions.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public createManagedBean<T>(bean: T, context?: Context): T {\n        const res = this.createBean(bean, context);\n        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));\n        return res;\n    }\n\n    protected createBean<T>(bean: T, context?: Context | null, afterPreCreateCallback?: (comp: Component) => void): T {\n        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);\n    }\n\n    protected destroyBean<T>(bean: T, context?: Context): undefined {\n        return (context || this.getContext()).destroyBean(bean);\n    }\n\n    protected destroyBeans<T>(beans: T[], context?: Context): T[] {\n        if (beans) {\n            beans.forEach(bean => this.destroyBean(bean, context));\n        }\n\n        return [];\n    }\n}\n", "import { Logger, LoggerFactory } from '../logger';\nimport { ColumnUtils } from './columnUtils';\nimport { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { ColumnKeyCreator } from \"./columnKeyCreator\";\nimport { IProvidedColumn } from \"../interfaces/iProvidedColumn\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, Qualifier } from \"../context/context\";\nimport { DefaultColumnTypes } from \"../entities/defaultColumnTypes\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { iterateObject, mergeDeep } from '../utils/object';\nimport { attrToNumber, attrToBoolean } from '../utils/generic';\nimport { DataTypeService } from './dataTypeService';\nimport { warnOnce } from '../utils/function';\nimport { ColumnEventType } from '../events';\n\n// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups\n@Bean('columnFactory')\nexport class ColumnFactory extends BeanStub {\n\n    @Autowired('columnUtils') private columnUtils: ColumnUtils;\n    @Autowired('dataTypeService') private dataTypeService: DataTypeService;\n\n    private logger: Logger;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('ColumnFactory');\n    }\n\n    public createColumnTree(defs: (ColDef | ColGroupDef)[] | null, primaryColumns: boolean, existingTree: IProvidedColumn[] | undefined, source: ColumnEventType)\n        : { columnTree: IProvidedColumn[], treeDept: number; } {\n\n        // column key creator dishes out unique column id's in a deterministic way,\n        // so if we have two grids (that could be master/slave) with same column definitions,\n        // then this ensures the two grids use identical id's.\n        const columnKeyCreator = new ColumnKeyCreator();\n\n        const {existingCols, existingGroups, existingColKeys} = this.extractExistingTreeData(existingTree);\n        columnKeyCreator.addExistingKeys(existingColKeys);\n\n        // create am unbalanced tree that maps the provided definitions\n        const unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns,\n            existingCols, columnKeyCreator, existingGroups, source);\n        const treeDept = this.findMaxDept(unbalancedTree, 0);\n        this.logger.log('Number of levels for grouped columns is ' + treeDept);\n        const columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);\n\n        const deptFirstCallback = (child: IProvidedColumn, parent: ProvidedColumnGroup) => {\n            if (child instanceof ProvidedColumnGroup) {\n                child.setupExpandable();\n            }\n            // we set the original parents at the end, rather than when we go along, as balancing the tree\n            // adds extra levels into the tree. so we can only set parents when balancing is done.\n            child.setOriginalParent(parent);\n        };\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);\n\n        return {\n            columnTree,\n            treeDept\n        };\n    }\n\n    private extractExistingTreeData(existingTree?: IProvidedColumn[]):\n        {\n            existingCols: Column[],\n            existingGroups: ProvidedColumnGroup[],\n            existingColKeys: string[]\n        }  {\n\n        const existingCols: Column[] = [];\n        const existingGroups: ProvidedColumnGroup[] = [];\n        const existingColKeys: string[] = [];\n\n        if (existingTree) {\n            this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, (item: IProvidedColumn) => {\n                if (item instanceof ProvidedColumnGroup) {\n                    const group = item;\n                    existingGroups.push(group);\n                } else {\n                    const col = item as Column;\n                    existingColKeys.push(col.getId());\n                    existingCols.push(col);\n                }\n            });\n        }\n\n        return {existingCols, existingGroups, existingColKeys};\n    }\n\n    public createForAutoGroups(autoGroupCols: Column[], gridBalancedTree: IProvidedColumn[]): IProvidedColumn[] {\n        return autoGroupCols.map((col) => this.createAutoGroupTreeItem(gridBalancedTree, col));\n    }\n\n    private createAutoGroupTreeItem(balancedColumnTree: IProvidedColumn[], column: Column): IProvidedColumn {\n        const dept = this.findDepth(balancedColumnTree);\n\n        // at the end, this will be the top of the tree item.\n        let nextChild: IProvidedColumn = column;\n\n        for (let i = dept - 1; i >= 0; i--) {\n            const autoGroup = new ProvidedColumnGroup(\n                null,\n                `FAKE_PATH_${column.getId()}}_${i}`,\n                true,\n                i\n            );\n            this.createBean(autoGroup);\n            autoGroup.setChildren([nextChild]);\n            nextChild.setOriginalParent(autoGroup);\n            nextChild = autoGroup;\n        }\n\n        if (dept === 0) {\n            column.setOriginalParent(null);\n        }\n\n        // at this point, the nextChild is the top most item in the tree\n        return nextChild;\n    }\n\n    private findDepth(balancedColumnTree: IProvidedColumn[]): number {\n        let dept = 0;\n        let pointer = balancedColumnTree;\n\n        while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {\n            dept++;\n            pointer = (pointer[0] as ProvidedColumnGroup).getChildren();\n        }\n        return dept;\n    }\n\n    private balanceColumnTree(\n        unbalancedTree: IProvidedColumn[],\n        currentDept: number,\n        columnDept: number,\n        columnKeyCreator: ColumnKeyCreator\n    ): IProvidedColumn[] {\n\n        const result: IProvidedColumn[] = [];\n\n        // go through each child, for groups, recurse a level deeper,\n        // for columns we need to pad\n        for (let i = 0; i < unbalancedTree.length; i++) {\n            const child = unbalancedTree[i];\n            if (child instanceof ProvidedColumnGroup) {\n                // child is a group, all we do is go to the next level of recursion\n                const originalGroup = child;\n                const newChildren = this.balanceColumnTree(originalGroup.getChildren(),\n                    currentDept + 1, columnDept, columnKeyCreator);\n                originalGroup.setChildren(newChildren);\n                result.push(originalGroup);\n            } else {\n                // child is a column - so here we add in the padded column groups if needed\n                let firstPaddedGroup: ProvidedColumnGroup | undefined;\n                let currentPaddedGroup: ProvidedColumnGroup | undefined;\n\n                // this for loop will NOT run any loops if no padded column groups are needed\n                for (let j = columnDept - 1; j >= currentDept; j--) {\n                    const newColId = columnKeyCreator.getUniqueKey(null, null);\n                    const colGroupDefMerged = this.createMergedColGroupDef(null);\n\n                    const paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);\n                    this.createBean(paddedGroup);\n\n                    if (currentPaddedGroup) {\n                        currentPaddedGroup.setChildren([paddedGroup]);\n                    }\n\n                    currentPaddedGroup = paddedGroup;\n\n                    if (!firstPaddedGroup) {\n                        firstPaddedGroup = currentPaddedGroup;\n                    }\n                }\n\n                // likewise this if statement will not run if no padded groups\n                if (firstPaddedGroup && currentPaddedGroup) {\n                    result.push(firstPaddedGroup);\n                    const hasGroups = unbalancedTree.some(leaf => leaf instanceof ProvidedColumnGroup);\n\n                    if (hasGroups) {\n                        currentPaddedGroup.setChildren([child]);\n                        continue;\n                    } else {\n                        currentPaddedGroup.setChildren(unbalancedTree);\n                        break;\n                    }\n                }\n\n                result.push(child);\n            }\n        }\n\n        return result;\n    }\n\n    private findMaxDept(treeChildren: IProvidedColumn[], dept: number): number {\n        let maxDeptThisLevel = dept;\n\n        for (let i = 0; i < treeChildren.length; i++) {\n            const abstractColumn = treeChildren[i];\n            if (abstractColumn instanceof ProvidedColumnGroup) {\n                const originalGroup = abstractColumn;\n                const newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);\n                if (maxDeptThisLevel < newDept) {\n                    maxDeptThisLevel = newDept;\n                }\n            }\n        }\n\n        return maxDeptThisLevel;\n    }\n\n    private recursivelyCreateColumns(\n        defs: (ColDef | ColGroupDef)[] | null,\n        level: number,\n        primaryColumns: boolean,\n        existingColsCopy: Column[],\n        columnKeyCreator: ColumnKeyCreator,\n        existingGroups: ProvidedColumnGroup[],\n        source: ColumnEventType\n    ): IProvidedColumn[] {\n        if (!defs) return [];\n    \n        const result = new Array(defs.length);\n        for (let i = 0; i < result.length; i++) {\n            const def = defs[i];\n            if (this.isColumnGroup(def)) {\n                result[i] = this.createColumnGroup(primaryColumns, def as ColGroupDef, level, existingColsCopy,\n                    columnKeyCreator, existingGroups, source);\n            } else {\n                result[i] = this.createColumn(primaryColumns, def as ColDef, existingColsCopy, columnKeyCreator, source);\n            }\n        }\n        return result;\n    }\n\n    private createColumnGroup(\n        primaryColumns: boolean,\n        colGroupDef: ColGroupDef,\n        level: number,\n        existingColumns: Column[],\n        columnKeyCreator: ColumnKeyCreator,\n        existingGroups: ProvidedColumnGroup[],\n        source: ColumnEventType\n    ): ProvidedColumnGroup {\n        const colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);\n        const groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);\n        const providedGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);\n        this.createBean(providedGroup);\n        const existingGroupAndIndex = this.findExistingGroup(colGroupDef, existingGroups);\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingGroupAndIndex) {\n            existingGroups.splice(existingGroupAndIndex.idx, 1);\n        }\n\n        let existingGroup = existingGroupAndIndex?.group;\n        if (existingGroup) {\n            providedGroup.setExpanded(existingGroup.isExpanded());\n        }\n\n        const children = this.recursivelyCreateColumns(colGroupDefMerged.children,\n            level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups, source);\n\n        providedGroup.setChildren(children);\n\n        return providedGroup;\n    }\n\n    private createMergedColGroupDef(colGroupDef: ColGroupDef | null): ColGroupDef {\n        const colGroupDefMerged: ColGroupDef = {} as ColGroupDef;\n        Object.assign(colGroupDefMerged, this.gridOptionsService.get('defaultColGroupDef'));\n        Object.assign(colGroupDefMerged, colGroupDef);\n\n        return colGroupDefMerged;\n    }\n\n    private createColumn(\n        primaryColumns: boolean,\n        colDef: ColDef,\n        existingColsCopy: Column[] | null,\n        columnKeyCreator: ColumnKeyCreator,\n        source: ColumnEventType\n    ): Column {\n        // see if column already exists\n        const existingColAndIndex = this.findExistingColumn(colDef, existingColsCopy);\n\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingColAndIndex) {\n            existingColsCopy?.splice(existingColAndIndex.idx, 1);\n        }\n    \n        let column = existingColAndIndex?.column;\n        if (!column) {\n            // no existing column, need to create one\n            const colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);\n            const colDefMerged = this.addColumnDefaultAndTypes(colDef, colId);\n            column = new Column(colDefMerged, colDef, colId, primaryColumns);\n            this.context.createBean(column);\n        } else {\n            const colDefMerged = this.addColumnDefaultAndTypes(colDef, column.getColId());\n            column.setColDef(colDefMerged, colDef, source);\n            this.applyColumnState(column, colDefMerged, source);\n        }\n\n        this.dataTypeService.addColumnListeners(column);\n\n        return column;\n    }\n\n    public applyColumnState(column: Column, colDef: ColDef, source: ColumnEventType): void {\n        // flex\n        const flex = attrToNumber(colDef.flex);\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n\n        // width - we only set width if column is not flexing\n        const noFlexThisCol = column.getFlex() <= 0;\n        if (noFlexThisCol) {\n            // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\n            const width = attrToNumber(colDef.width);\n            if (width != null) {\n                column.setActualWidth(width, source);\n            } else {\n                // otherwise set the width again, in case min or max width has changed,\n                // and width needs to be adjusted.\n                const widthBeforeUpdate = column.getActualWidth();\n                column.setActualWidth(widthBeforeUpdate, source);\n            }\n        }\n\n        // sort - anything but undefined will set sort, thus null or empty string will clear the sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort == 'asc' || colDef.sort == 'desc') {\n                column.setSort(colDef.sort, source);\n            } else {\n                column.setSort(undefined, source);\n            }\n        }\n\n        // sorted at - anything but undefined, thus null will clear the sortIndex\n        const sortIndex = attrToNumber(colDef.sortIndex);\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n\n        // hide - anything but undefined, thus null will clear the hide\n        const hide = attrToBoolean(colDef.hide);\n        if (hide !== undefined) {\n            column.setVisible(!hide, source);\n        }\n\n        // pinned - anything but undefined, thus null or empty string will remove pinned\n        if (colDef.pinned !== undefined) {\n            column.setPinned(colDef.pinned);\n        }\n    }\n\n    private findExistingColumn(newColDef: ColDef, existingColsCopy: Column[] | null): { idx: number, column: Column } | undefined {\n        if (!existingColsCopy) return undefined;\n\n        for (let i = 0; i < existingColsCopy.length; i++) {\n            const def = existingColsCopy[i].getUserProvidedColDef();\n            if (!def) continue;\n\n            const newHasId = newColDef.colId != null;\n            if (newHasId) {\n                if (existingColsCopy[i].getId() === newColDef.colId) {\n                    return { idx: i, column: existingColsCopy[i] };\n                }\n                continue;\n            }\n\n            const newHasField = newColDef.field != null;\n            if (newHasField) {\n                if (def.field === newColDef.field) {\n                    return { idx: i, column: existingColsCopy[i] };\n                }\n                continue;\n            }\n\n            if (def === newColDef) {\n                return { idx: i, column: existingColsCopy[i] };\n            }\n        }\n        return  undefined;\n    }\n\n    private findExistingGroup(newGroupDef: ColGroupDef, existingGroups: ProvidedColumnGroup[]): { idx: number, group: ProvidedColumnGroup } | undefined {\n        const newHasId = newGroupDef.groupId != null;\n        if (!newHasId) {\n            return undefined;\n        }\n        \n        for (let i = 0; i < existingGroups.length; i++) {\n            const existingGroup = existingGroups[i];\n            const existingDef = existingGroup.getColGroupDef();\n            if (!existingDef) { continue; }\n\n            if (existingGroup.getId() === newGroupDef.groupId) {\n                return { idx: i, group: existingGroup};\n            }\n        }\n        return undefined;\n    }\n\n    public addColumnDefaultAndTypes(colDef: ColDef, colId: string): ColDef {\n        // start with empty merged definition\n        const res: ColDef = {} as ColDef;\n\n        // merge properties from default column definitions\n        const defaultColDef = this.gridOptionsService.get('defaultColDef');\n        mergeDeep(res, defaultColDef, false, true);\n\n        const columnType = this.dataTypeService.updateColDefAndGetColumnType(res, colDef, colId);\n\n        if (columnType) {\n            this.assignColumnTypes(columnType, res);\n        }\n\n        // merge properties from column definitions\n        mergeDeep(res, colDef, false, true);\n\n        const autoGroupColDef = this.gridOptionsService.get('autoGroupColumnDef');\n        const isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {\n            // override the sort for row group columns where the autoGroupColDef defines these values.\n            mergeDeep(res, { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort } as ColDef, false, true);\n        }\n\n        this.dataTypeService.validateColDef(res);\n\n        return res;\n    }\n\n    private assignColumnTypes(typeKeys: string[], colDefMerged: ColDef) {\n        if (!typeKeys.length) {\n            return;\n        }\n\n        // merge user defined with default column types\n        const allColumnTypes = Object.assign({}, DefaultColumnTypes);\n        const userTypes = this.gridOptionsService.get('columnTypes') || {};\n\n        iterateObject(userTypes, (key, value) => {\n            if (key in allColumnTypes) {\n                console.warn(`AG Grid: the column type '${key}' is a default column type and cannot be overridden.`);\n            } else {\n                const colType = value as any;\n                if (colType.type) {\n                    warnOnce(`Column type definitions 'columnTypes' with a 'type' attribute are not supported ` +\n                        `because a column type cannot refer to another column type. Only column definitions ` +\n                        `'columnDefs' can use the 'type' attribute to refer to a column type.`);\n                }\n\n                allColumnTypes[key] = value;\n            }\n        });\n\n        typeKeys.forEach((t) => {\n            const typeColDef = allColumnTypes[t.trim()];\n            if (typeColDef) {\n                mergeDeep(colDefMerged, typeColDef, false, true);\n            } else {\n                console.warn(\"AG Grid: colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\");\n            }\n        });\n    }\n\n    // if object has children, we assume it's a group\n    private isColumnGroup(abstractColDef: ColDef | ColGroupDef): boolean {\n        return (abstractColDef as ColGroupDef).children !== undefined;\n    }\n}\n", "import { IHeaderColumn } from \"../interfaces/iHeaderColumn\";\nimport { ColGroupDef } from \"./colDef\";\nimport { Column, ColumnPinnedType } from \"./column\";\nimport { AbstractColDef } from \"./colDef\";\nimport { ProvidedColumnGroup } from \"./providedColumnGroup\";\nimport { EventService } from \"../eventService\";\nimport { Autowired } from \"../context/context\";\nimport { AgEvent, AgEventListener } from \"../events\";\nimport { last } from \"../utils/array\";\nimport { GridOptionsService } from \"../gridOptionsService\";\n\nexport type ColumnGroupShowType = 'open' | 'closed';\n\nexport class ColumnGroup implements IHeaderColumn {\n\n    public static EVENT_LEFT_CHANGED = 'leftChanged';\n    public static EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n\n    // this is static, a it is used outside of this class\n    public static createUniqueId(groupId: string, instanceId: number): string {\n        return groupId + '_' + instanceId;\n    }\n\n    @Autowired('gridOptionsService') gridOptionsService: GridOptionsService;\n\n    // all the children of this group, regardless of whether they are opened or closed\n    private children: IHeaderColumn[] | null;\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    private displayedChildren: IHeaderColumn[] | null = [];\n\n    private readonly groupId: string;\n    private readonly partId: number;\n    private readonly providedColumnGroup: ProvidedColumnGroup;\n    private readonly pinned: ColumnPinnedType;\n\n    // private moving = false\n    private left: number | null;\n    private oldLeft: number | null;\n    private localEventService: EventService = new EventService();\n\n    private parent: ColumnGroup | null;\n\n    constructor(providedColumnGroup: ProvidedColumnGroup, groupId: string, partId: number, pinned: ColumnPinnedType) {\n        this.groupId = groupId;\n        this.partId = partId;\n        this.providedColumnGroup = providedColumnGroup;\n        this.pinned = pinned;\n    }\n\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    public reset(): void {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    }\n\n    public getParent(): ColumnGroup {\n        return this.parent!;\n    }\n\n    public setParent(parent: ColumnGroup): void {\n        this.parent = parent;\n    }\n\n    public getUniqueId(): string {\n        return ColumnGroup.createUniqueId(this.groupId, this.partId);\n    }\n\n    public isEmptyGroup(): boolean {\n        return this.displayedChildren!.length === 0;\n    }\n\n    public isMoving(): boolean {\n        const allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) { return false; }\n\n        return allLeafColumns.every(col => col.isMoving());\n    }\n\n    public checkLeft(): void {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren!.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                child.checkLeft();\n            }\n        });\n\n        // set our left based on first displayed column\n        if (this.displayedChildren!.length > 0) {\n            if (this.gridOptionsService.get('enableRtl')) {\n                const lastChild = last(this.displayedChildren!);\n                const lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            } else {\n                const firstChildLeft = this.displayedChildren![0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        } else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public setLeft(left: number | null) {\n        this.oldLeft = this.left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.pinned;\n    }\n\n    private createAgEvent(type: string): AgEvent {\n        return { type };\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.localEventService.addEventListener(eventType, listener as AgEventListener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.localEventService.removeEventListener(eventType, listener as AgEventListener);\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getPartId(): number {\n        return this.partId;\n    }\n\n    public isChildInThisGroupDeepSearch(wantedChild: IHeaderColumn): boolean {\n        let result = false;\n\n        this.children!.forEach((foundChild: IHeaderColumn) => {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    public getActualWidth(): number {\n        let groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach((child: IHeaderColumn) => {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    }\n\n    public isResizable(): boolean {\n        if (!this.displayedChildren) { return false; }\n\n        // if at least one child is resizable, then the group is resizable\n        let result = false;\n        this.displayedChildren.forEach((child: IHeaderColumn) => {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    public getMinWidth(): number {\n        let result = 0;\n        this.displayedChildren!.forEach((groupChild: IHeaderColumn) => {\n            result += groupChild.getMinWidth() || 0;\n        });\n        return result;\n    }\n\n    public addChild(child: IHeaderColumn): void {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    }\n\n    public getDisplayedChildren(): IHeaderColumn[] | null {\n        return this.displayedChildren;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    public getDisplayedLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    }\n\n    public getDefinition(): AbstractColDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public isPadding(): boolean {\n        return this.providedColumnGroup.isPadding();\n    }\n\n    public isExpandable(): boolean {\n        return this.providedColumnGroup.isExpandable();\n    }\n\n    public isExpanded(): boolean {\n        return this.providedColumnGroup.isExpanded();\n    }\n\n    public setExpanded(expanded: boolean): void {\n        this.providedColumnGroup.setExpanded(expanded);\n    }\n\n    private addDisplayedLeafColumns(leafColumns: Column[]): void {\n        this.displayedChildren!.forEach((child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ColumnGroup) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        this.children!.forEach((child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getChildren(): IHeaderColumn[] | null {\n        return this.children;\n    }\n\n    public getColumnGroupShow(): ColumnGroupShowType | undefined {\n        return this.providedColumnGroup.getColumnGroupShow();\n    }\n\n    public getProvidedColumnGroup(): ProvidedColumnGroup {\n        return this.providedColumnGroup;\n    }\n\n    public getPaddingLevel(): number {\n        const parent = this.getParent();\n\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\n            return 0;\n        }\n\n        return 1 + parent.getPaddingLevel();\n    }\n\n    public calculateDisplayedColumns() {\n        // clear out last time we calculated\n        this.displayedChildren = [];\n\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        let parentWithExpansion: ColumnGroup = this;\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n            parentWithExpansion = parentWithExpansion.getParent();\n        }\n\n        const isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n            return;\n        }\n\n        // Add cols based on columnGroupShow\n        // Note - the below also adds padding groups, these are always added because they never have\n        // colDef.columnGroupShow set.\n        this.children!.forEach(child => {\n            // never add empty groups\n            const emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);\n            if (emptyGroup) { return; }\n\n            const headerGroupShow = child.getColumnGroupShow();\n            switch (headerGroupShow) {\n                case 'open':\n                    // when set to open, only show col if group is open\n                    if (parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                case 'closed':\n                    // when set to open, only show col if group is open\n                    if (!parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                default:\n                    this.displayedChildren!.push(child);\n                    break;\n            }\n        });\n\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    }\n}\n", "export class Events {\n\n    /** Everything has changed with the columns. Either complete new set of columns set, or user called applyColumnState() */\n    /** @deprecated - grid no longer uses this, and setSate() also fires individual events */\n    public static EVENT_COLUMN_EVERYTHING_CHANGED: 'columnEverythingChanged' = 'columnEverythingChanged';\n\n    /** User has set in new columns. */\n    public static EVENT_NEW_COLUMNS_LOADED: 'newColumnsLoaded' = 'newColumnsLoaded';\n\n    /** The pivot mode flag was changed */\n    public static EVENT_COLUMN_PIVOT_MODE_CHANGED: 'columnPivotModeChanged' = 'columnPivotModeChanged';\n\n    /** Exceeded the pivot limit when generating columns */\n    public static EVENT_PIVOT_MAX_COLUMNS_EXCEEDED: 'pivotMaxColumnsExceeded' = 'pivotMaxColumnsExceeded';\n\n    /** A row group column was added, removed or order changed. */\n    public static EVENT_COLUMN_ROW_GROUP_CHANGED: 'columnRowGroupChanged' = 'columnRowGroupChanged';\n\n    /** expandAll / collapseAll was called from the api. */\n    public static EVENT_EXPAND_COLLAPSE_ALL: 'expandOrCollapseAll' = 'expandOrCollapseAll';\n\n    /** A pivot column was added, removed or order changed. */\n    public static EVENT_COLUMN_PIVOT_CHANGED: 'columnPivotChanged' = 'columnPivotChanged';\n\n    /** The list of grid columns has changed. */\n    public static EVENT_GRID_COLUMNS_CHANGED: 'gridColumnsChanged' = 'gridColumnsChanged';\n\n    /** A value column was added, removed or agg function was changed. */\n    public static EVENT_COLUMN_VALUE_CHANGED: 'columnValueChanged' = 'columnValueChanged';\n\n    /** A column was moved */\n    public static EVENT_COLUMN_MOVED: 'columnMoved' = 'columnMoved';\n\n    /** One or more columns was shown / hidden */\n    public static EVENT_COLUMN_VISIBLE: 'columnVisible' = 'columnVisible';\n\n    /** One or more columns was pinned / unpinned*/\n    public static EVENT_COLUMN_PINNED: 'columnPinned' = 'columnPinned';\n\n    /** A column group was opened / closed */\n    public static EVENT_COLUMN_GROUP_OPENED: 'columnGroupOpened' = 'columnGroupOpened';\n\n    /** One or more columns was resized. If just one, the column in the event is set. */\n    public static EVENT_COLUMN_RESIZED: 'columnResized' = 'columnResized';\n\n    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */\n    public static EVENT_DISPLAYED_COLUMNS_CHANGED: 'displayedColumnsChanged' = 'displayedColumnsChanged';\n\n    /** The grid option related to suppressing movable columns has changed */\n    public static EVENT_SUPPRESS_COLUMN_MOVE_CHANGED: 'suppressMovableColumns' = 'suppressMovableColumns';\n\n    /** The grid option related to suppressing column group selection has changed */\n    public static EVENT_SUPPRESS_MENU_HIDE_CHANGED: 'suppressMenuHide' = 'suppressMenuHide';\n\n    /** The grid option related to suppressing movable columns has changed */\n    public static EVENT_SUPPRESS_FIELD_DOT_NOTATION: 'suppressFieldDotNotation' = 'suppressFieldDotNotation';\n\n    /** The list of virtual columns has changed, results from viewport changing */\n    public static EVENT_VIRTUAL_COLUMNS_CHANGED: 'virtualColumnsChanged' = 'virtualColumnsChanged';\n\n    /** Column header mouse over */\n    public static EVENT_COLUMN_HEADER_MOUSE_OVER: 'columnHeaderMouseOver' = 'columnHeaderMouseOver';\n\n    /** Column header mouse leave */\n    public static EVENT_COLUMN_HEADER_MOUSE_LEAVE: 'columnHeaderMouseLeave' = 'columnHeaderMouseLeave';\n\n    /** Column header clicked */\n    public static EVENT_COLUMN_HEADER_CLICKED: 'columnHeaderClicked' = 'columnHeaderClicked';\n\n    /** Column header context menu event, such as right-click or context menu key press */\n    public static EVENT_COLUMN_HEADER_CONTEXT_MENU: 'columnHeaderContextMenu' = 'columnHeaderContextMenu';\n\n    /** Async Transactions Executed */\n    public static EVENT_ASYNC_TRANSACTIONS_FLUSHED: 'asyncTransactionsFlushed' = 'asyncTransactionsFlushed';\n\n    /** A row group was opened / closed */\n    public static EVENT_ROW_GROUP_OPENED: 'rowGroupOpened' = 'rowGroupOpened';\n\n    /** Client-Side Row Model only. The client has updated data for the grid */\n    public static EVENT_ROW_DATA_UPDATED: 'rowDataUpdated' = 'rowDataUpdated';\n\n    /** The client has set new floating data into the grid */\n    public static EVENT_PINNED_ROW_DATA_CHANGED: 'pinnedRowDataChanged' = 'pinnedRowDataChanged';\n\n    /** Range selection has changed */\n    public static EVENT_RANGE_SELECTION_CHANGED: 'rangeSelectionChanged' = 'rangeSelectionChanged';\n\n    /** Chart was created */\n    public static EVENT_CHART_CREATED: 'chartCreated' = 'chartCreated';\n\n    /** Chart Range selection has changed */\n    public static EVENT_CHART_RANGE_SELECTION_CHANGED: 'chartRangeSelectionChanged' = 'chartRangeSelectionChanged';\n\n    /** Chart Options have changed */\n    public static EVENT_CHART_OPTIONS_CHANGED: 'chartOptionsChanged' = 'chartOptionsChanged';\n\n    /** Chart was destroyed */\n    public static EVENT_CHART_DESTROYED: 'chartDestroyed' = 'chartDestroyed';\n\n    /** For when the tool panel is shown / hidden */\n    public static EVENT_TOOL_PANEL_VISIBLE_CHANGED: 'toolPanelVisibleChanged' = 'toolPanelVisibleChanged';\n    public static EVENT_TOOL_PANEL_SIZE_CHANGED: 'toolPanelSizeChanged' = 'toolPanelSizeChanged';\n\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_START: 'columnPanelItemDragStart' = 'columnPanelItemDragStart';\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_END: 'columnPanelItemDragEnd' = 'columnPanelItemDragEnd';\n\n    /** Model was updated - grid updates the drawn rows when this happens */\n    public static EVENT_MODEL_UPDATED: 'modelUpdated' = 'modelUpdated';\n\n    public static EVENT_CUT_START: 'cutStart' = 'cutStart';\n    public static EVENT_CUT_END: 'cutEnd' = 'cutEnd';\n\n    public static EVENT_PASTE_START: 'pasteStart' = 'pasteStart';\n    public static EVENT_PASTE_END: 'pasteEnd' = 'pasteEnd';\n\n    public static EVENT_FILL_START: 'fillStart' = 'fillStart';\n    public static EVENT_FILL_END: 'fillEnd' = 'fillEnd';\n\n    public static EVENT_RANGE_DELETE_START: 'rangeDeleteStart' = 'rangeDeleteStart';\n    public static EVENT_RANGE_DELETE_END: 'rangeDeleteEnd' = 'rangeDeleteEnd';\n\n    /** Undo operation has started. */\n    public static EVENT_UNDO_STARTED: 'undoStarted' = 'undoStarted';\n    /** Undo operation has ended. */\n    public static EVENT_UNDO_ENDED: 'undoEnded' = 'undoEnded';\n    /** Redo operation has started. */\n    public static EVENT_REDO_STARTED: 'redoStarted' = 'redoStarted';\n    /** Redo operation has ended. */\n    public static EVENT_REDO_ENDED: 'redoEnded' = 'redoEnded';\n\n    public static EVENT_KEY_SHORTCUT_CHANGED_CELL_START: 'keyShortcutChangedCellStart' = 'keyShortcutChangedCellStart';\n    public static EVENT_KEY_SHORTCUT_CHANGED_CELL_END: 'keyShortcutChangedCellEnd' = 'keyShortcutChangedCellEnd';\n\n    public static EVENT_CELL_CLICKED: 'cellClicked' = 'cellClicked';\n    public static EVENT_CELL_DOUBLE_CLICKED: 'cellDoubleClicked' = 'cellDoubleClicked';\n    public static EVENT_CELL_MOUSE_DOWN: 'cellMouseDown' = 'cellMouseDown';\n    public static EVENT_CELL_CONTEXT_MENU: 'cellContextMenu' = 'cellContextMenu';\n    public static EVENT_CELL_VALUE_CHANGED: 'cellValueChanged' = 'cellValueChanged';\n    public static EVENT_CELL_EDIT_REQUEST: 'cellEditRequest' = 'cellEditRequest';\n    public static EVENT_ROW_VALUE_CHANGED: 'rowValueChanged' = 'rowValueChanged';\n    public static EVENT_CELL_FOCUSED: 'cellFocused' = 'cellFocused';\n    public static EVENT_CELL_FOCUS_CLEARED: 'cellFocusCleared' = 'cellFocusCleared';\n    public static EVENT_FULL_WIDTH_ROW_FOCUSED: 'fullWidthRowFocused' = 'fullWidthRowFocused';\n    public static EVENT_ROW_SELECTED: 'rowSelected' = 'rowSelected';\n    public static EVENT_SELECTION_CHANGED: 'selectionChanged' = 'selectionChanged';\n\n    public static EVENT_TOOLTIP_SHOW: 'tooltipShow' = 'tooltipShow';\n    public static EVENT_TOOLTIP_HIDE: 'tooltipHide' = 'tooltipHide';\n\n    public static EVENT_CELL_KEY_DOWN: 'cellKeyDown' = 'cellKeyDown';\n\n    public static EVENT_CELL_MOUSE_OVER: 'cellMouseOver' = 'cellMouseOver';\n    public static EVENT_CELL_MOUSE_OUT: 'cellMouseOut' = 'cellMouseOut';\n\n    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */\n    public static EVENT_FILTER_CHANGED: 'filterChanged' = 'filterChanged';\n\n    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */\n    public static EVENT_FILTER_MODIFIED: 'filterModified' = 'filterModified';\n    public static EVENT_FILTER_OPENED: 'filterOpened' = 'filterOpened';\n\n    public static EVENT_ADVANCED_FILTER_BUILDER_VISIBLE_CHANGED: 'advancedFilterBuilderVisibleChanged' = 'advancedFilterBuilderVisibleChanged';\n\n    public static EVENT_SORT_CHANGED: 'sortChanged' = 'sortChanged';\n\n    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */\n    public static EVENT_VIRTUAL_ROW_REMOVED: 'virtualRowRemoved' = 'virtualRowRemoved';\n\n    public static EVENT_ROW_CLICKED: 'rowClicked' = 'rowClicked';\n    public static EVENT_ROW_DOUBLE_CLICKED: 'rowDoubleClicked' = 'rowDoubleClicked';\n\n    /** Gets called once after the grid has finished initialising. */\n    public static EVENT_GRID_READY: 'gridReady' = 'gridReady';\n    /** Called once when the grid is about to get destroyed. */\n    public static EVENT_GRID_PRE_DESTROYED: 'gridPreDestroyed' = 'gridPreDestroyed';\n    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's\n     * changed, so always filling the space it was given. */\n    public static EVENT_GRID_SIZE_CHANGED: 'gridSizeChanged' = 'gridSizeChanged';\n    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */\n    public static EVENT_VIEWPORT_CHANGED: 'viewportChanged' = 'viewportChanged';\n    /* The width of the scrollbar has been calculated */\n    public static EVENT_SCROLLBAR_WIDTH_CHANGED: 'scrollbarWidthChanged' = 'scrollbarWidthChanged';\n    /** Rows were rendered for the first time (ie on async data load). */\n    public static EVENT_FIRST_DATA_RENDERED: 'firstDataRendered' = 'firstDataRendered';\n    /** A column drag has started, either resizing a column or moving a column. */\n    public static EVENT_DRAG_STARTED: 'dragStarted' = 'dragStarted';\n    /** A column drag has stopped */\n    public static EVENT_DRAG_STOPPED: 'dragStopped' = 'dragStopped';\n\n    public static EVENT_CHECKBOX_CHANGED: 'checkboxChanged' = 'checkboxChanged';\n\n    public static EVENT_ROW_EDITING_STARTED: 'rowEditingStarted' = 'rowEditingStarted';\n    public static EVENT_ROW_EDITING_STOPPED: 'rowEditingStopped' = 'rowEditingStopped';\n\n    public static EVENT_CELL_EDITING_STARTED: 'cellEditingStarted' = 'cellEditingStarted';\n    public static EVENT_CELL_EDITING_STOPPED: 'cellEditingStopped' = 'cellEditingStopped';\n\n    /** Main body of grid has scrolled, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL: 'bodyScroll' = 'bodyScroll';\n\n    /** Main body of the grid has stopped scrolling, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL_END: 'bodyScrollEnd' = 'bodyScrollEnd';\n\n    public static EVENT_HEIGHT_SCALE_CHANGED: 'heightScaleChanged' = 'heightScaleChanged';\n\n    /** The displayed page for pagination has changed. For example the data was filtered or sorted,\n     * or the user has moved to a different page. */\n    public static EVENT_PAGINATION_CHANGED: 'paginationChanged' = 'paginationChanged';\n\n    /** Only used by React, Angular, Web Components and VueJS AG Grid components\n     * (not used if doing plain JavaScript). If the grid receives changes due\n     * to bound properties, this event fires after the grid has finished processing the change. */\n    public static EVENT_COMPONENT_STATE_CHANGED: 'componentStateChanged' = 'componentStateChanged';\n\n    /** Only used by the SSRM, called when the grid has no more rows to refresh */\n    public static EVENT_STORE_REFRESHED: 'storeRefreshed' = 'storeRefreshed';\n\n    public static EVENT_STATE_UPDATED: 'stateUpdated' = 'stateUpdated';\n\n    /** The visibility of the column menu has changed. */\n    public static EVENT_COLUMN_MENU_VISIBLE_CHANGED: 'columnMenuVisibleChanged' = 'columnMenuVisibleChanged';\n\n    /*****************************  INTERNAL EVENTS: START ******************************************* */\n\n    /** Please remember to add to ComponentUtil.EXCLUDED_INTERNAL_EVENTS to not have these events exposed to framework components. */\n\n    /** All items from here down are used internally by the grid, not intended for external use. */\n    // not documented, either experimental, or we just don't want users using an depending on them\n    public static EVENT_BODY_HEIGHT_CHANGED: 'bodyHeightChanged' = 'bodyHeightChanged';\n    public static EVENT_COLUMN_CONTAINER_WIDTH_CHANGED: 'columnContainerWidthChanged' = 'columnContainerWidthChanged';\n    public static EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED: 'displayedColumnsWidthChanged' = 'displayedColumnsWidthChanged';\n    public static EVENT_SCROLL_VISIBILITY_CHANGED: 'scrollVisibilityChanged' = 'scrollVisibilityChanged';\n    public static EVENT_COLUMN_HOVER_CHANGED: 'columnHoverChanged' = 'columnHoverChanged';\n    public static EVENT_FLASH_CELLS: 'flashCells' = 'flashCells';\n    public static EVENT_PAGINATION_PIXEL_OFFSET_CHANGED: 'paginationPixelOffsetChanged' = 'paginationPixelOffsetChanged';\n    public static EVENT_DISPLAYED_ROWS_CHANGED: 'displayedRowsChanged' = 'displayedRowsChanged';\n\n    public static EVENT_LEFT_PINNED_WIDTH_CHANGED: 'leftPinnedWidthChanged' = 'leftPinnedWidthChanged';\n    public static EVENT_RIGHT_PINNED_WIDTH_CHANGED: 'rightPinnedWidthChanged' = 'rightPinnedWidthChanged';\n\n    public static EVENT_ROW_CONTAINER_HEIGHT_CHANGED: 'rowContainerHeightChanged' = 'rowContainerHeightChanged';\n    public static EVENT_HEADER_HEIGHT_CHANGED: 'headerHeightChanged' = 'headerHeightChanged';\n    public static EVENT_COLUMN_HEADER_HEIGHT_CHANGED: 'columnHeaderHeightChanged' = 'columnHeaderHeightChanged';\n\n    public static EVENT_ROW_DRAG_ENTER: 'rowDragEnter' = 'rowDragEnter';\n    public static EVENT_ROW_DRAG_MOVE: 'rowDragMove' = 'rowDragMove';\n    public static EVENT_ROW_DRAG_LEAVE: 'rowDragLeave' = 'rowDragLeave';\n    public static EVENT_ROW_DRAG_END: 'rowDragEnd' = 'rowDragEnd';\n\n    // environment\n    public static EVENT_GRID_STYLES_CHANGED: 'gridStylesChanged' = 'gridStylesChanged';\n\n    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is\n    // to design these better around server side functions and then release to general public when fully working with\n    // all the row models.\n    public static EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST: 'columnRowGroupChangeRequest' = 'columnRowGroupChangeRequest';\n    public static EVENT_COLUMN_PIVOT_CHANGE_REQUEST: 'columnPivotChangeRequest' = 'columnPivotChangeRequest';\n    public static EVENT_COLUMN_VALUE_CHANGE_REQUEST: 'columnValueChangeRequest' = 'columnValueChangeRequest';\n    public static EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST: 'columnAggFuncChangeRequest' = 'columnAggFuncChangeRequest';\n\n    public static EVENT_STORE_UPDATED: 'storeUpdated' = 'storeUpdated';\n\n    public static EVENT_FILTER_DESTROYED: 'filterDestroyed' = 'filterDestroyed';\n\n    public static EVENT_ROW_DATA_UPDATE_STARTED: 'rowDataUpdateStarted' = 'rowDataUpdateStarted';\n    public static EVENT_ROW_COUNT_READY: 'rowCountReady' = 'rowCountReady';\n\n    // Advanced Filters\n    public static EVENT_ADVANCED_FILTER_ENABLED_CHANGED: 'advancedFilterEnabledChanged' = 'advancedFilterEnabledChanged';\n    public static EVENT_DATA_TYPES_INFERRED: 'dataTypesInferred' = 'dataTypesInferred';\n\n    // Widgets\n    public static EVENT_FIELD_VALUE_CHANGED: 'fieldValueChanged' = 'fieldValueChanged';\n    public static EVENT_FIELD_PICKER_VALUE_SELECTED: 'fieldPickerValueSelected' = 'fieldPickerValueSelected';\n\n    public static EVENT_SIDE_BAR_UPDATED: 'sideBarUpdated' = 'sideBarUpdated';\n\n    /*****************************  INTERNAL EVENTS: END ******************************************* */\n}\n", "import { Column, ColumnPinnedType } from './entities/column';\nimport { ColDef } from './entities/colDef';\nimport { ProvidedColumnGroup } from './entities/providedColumnGroup';\nimport { FilterRequestSource } from './filter/filterManager';\nimport { ChartType } from './interfaces/iChartOptions';\nimport { IFilterComp } from './interfaces/iFilter';\nimport { CellRange, CellRangeParams } from './interfaces/IRangeService';\nimport { ServerSideTransactionResult } from \"./interfaces/serverSideTransaction\";\nimport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nimport { AgChartThemeOverrides } from './interfaces/iAgChartOptions';\nimport { AgGridCommon } from './interfaces/iCommon';\nimport { RowPinnedType, IRowNode } from './interfaces/iRowNode';\nimport { GridState } from './interfaces/gridState';\nimport { Events } from './eventKeys';\nexport { Events } from './eventKeys';\n\nexport interface AgEvent {\n    /** Event identifier */\n    type: string;\n}\n\nexport interface AgGridEvent<TData = any, TContext = any> extends AgGridCommon<TData, TContext>, AgEvent { }\n\nexport type AgEventListener<TData = any,TContext = any> = (event: AgGridEvent<TData, TContext>) => void\nexport type AgGlobalEventListener<TData = any, TContext = any> = (eventType: string, event: AgGridEvent<TData, TContext>) => void\n\nexport interface ModelUpdatedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** If true, the grid will try and animate the rows to the new positions */\n    animate: boolean | undefined;\n    /** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n     * it's the same data but sorted or filtered, in which case this is true, and rows\n     * can animate around (eg rowNode id 24 is the same row node as last time). */\n    keepRenderedRows: boolean | undefined;\n    /** If true, then this update was a result of setRowData() getting called. This\n     * gets the grid to scroll to the top again. */\n    newData: boolean | undefined;\n    /** True when pagination and a new page is navigated to. */\n    newPage: boolean;\n    /** True when page size changes from the page size selector. */\n    newPageSize?: boolean;\n    /** true if all we did is changed row height, data still the same, no need to clear the undo/redo stacks */\n    keepUndoRedoStack?: boolean;\n}\n\nexport interface PaginationChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** True if rows were animated to new position */\n    animate?: boolean;\n    /** True if rows were kept (otherwise complete redraw) */\n    keepRenderedRows?: boolean;\n    /** True if data was new (i.e user set new data) */\n    newData?: boolean;\n    /** True if user went to a new page */\n    newPage: boolean;\n    /** True if user changed the page size */\n    newPageSize?: boolean;\n}\n\nexport interface ToolPanelVisibleChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api';\n    /** Key of tool panel. */\n    key: string;\n    /** True if now visible; false if now hidden. */\n    visible: boolean;\n    /** True if switching between tool panels. False if showing/hiding. */\n    switchingToolPanel: boolean;\n}\n\nexport interface ToolPanelSizeChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    type: 'toolPanelSizeChanged';\n    /** True if this is the first change to the Tool Panel size. */\n    started: boolean;\n    /** True if this is the last change to the Tool Panel size. */\n    ended: boolean;\n    /** New width of the ToolPanel component. */\n    width: number;\n}\n\nexport interface ColumnPivotModeChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface VirtualColumnsChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    afterScroll: boolean;\n }\n\nexport interface ColumnEverythingChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: string;\n}\n\nexport interface NewColumnsLoadedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: ColumnEventType;\n}\n\nexport interface GridColumnsChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface DisplayedColumnsChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface RowDataUpdatedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface RowDataUpdateStartedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    firstRowData: TData | null;\n}\n\nexport interface PinnedRowDataChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\n/**\n * - `api` - from API method\n * - `apiSelectAll` - from API methods `selectAll`/`deselectAll`\n * - `apiSelectAllFiltered` - from API methods `selectAllFiltered`/`deselectAllFiltered`\n * - `apiSelectAllCurrentPage` - from API methods `selectAllOnCurrentPage`/`deselectAllOnCurrentPage`\n * - `checkboxSelected` - row selection checkbox clicked\n * - `rowClicked` - row clicked when row selection enabled\n * - `rowDataChanged` - row data updated which triggered selection updates\n * - `rowGroupChanged` - grouping changed which updated the selection\n * - `selectableChanged`- selectable status of row has changed when `groupSelectsChildren = true`\n * - `spaceKey` - space key pressed on row\n * - `uiSelectAll` - select all in header clicked\n * - `uiSelectAllFiltered` - select all in header clicked when `headerCheckboxSelectionFilteredOnly = true`\n * - `uiSelectAllCurrentPage` - select all in header clicked when `headerCheckboxSelectionCurrentPageOnly = true`\n * - 'gridInitializing' - set as part of initial state while the grid is initializing\n */\nexport type SelectionEventSourceType =\n    'api' |\n    'apiSelectAll' |\n    'apiSelectAllFiltered' |\n    'apiSelectAllCurrentPage' |\n    'checkboxSelected' |\n    'rowClicked' |\n    'rowDataChanged' |\n    'rowGroupChanged' |\n    'selectableChanged' |\n    'spaceKey' |\n    'uiSelectAll' |\n    'uiSelectAllFiltered' |\n    'uiSelectAllCurrentPage' |\n    'gridInitializing';\n\nexport interface SelectionChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: SelectionEventSourceType;\n}\n\nexport type FilterChangedEventSourceType =\n    'api' |\n    'quickFilter' |\n    'columnFilter' |\n    'advancedFilter';\n\nexport interface FilterChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /**\n     * The source that triggered the filter change event. Can be one of the following:\n     * - `api` - triggered by an API call\n     * - `quickFilter` - triggered by user filtering from Quick Filter\n     * - `columnFilter` - triggered by user filtering from Column Menu\n     * - `advancedFilter` - triggered by user filtering from Advanced Filter\n     */\n    source?: FilterChangedEventSourceType;\n    /** True if the filter was changed as a result of data changing */\n    afterDataChange?: boolean;\n    /** True if filter was changed via floating filter */\n    afterFloatingFilter?: boolean;\n    /**\n     * Columns affected by the filter change. Array contents depend on the source of the event.\n     *\n     * - Expect 1 element for UI-driven column filter changes.\n     * - Expect 0-N elements (all affected columns) for calls to `api.setFilterModel()`.\n     * - Expect 0-N elements (removed columns) for calls to `api.setColumnDefs()`.\n     * - Expect 0 elements for quick-filters and calls to `api.onFilterChanged()`.\n     */\n    columns: Column[];\n}\n\nexport interface FilterModifiedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    filterInstance: IFilterComp;\n    column: Column;\n}\n\nexport interface FilterOpenedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Column / OriginalColumnGroup that contains the filter */\n    column: Column | ProvidedColumnGroup;\n    /** Source of the open request */\n    source: FilterRequestSource;\n    /** Parent element of the filter */\n    eGui: HTMLElement;\n}\n\n// internal event\nexport interface FilterDestroyedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: 'api' | 'columnChanged' | 'gridDestroyed' | 'advancedFilterEnabled' | 'paramsUpdated';\n    column: Column;\n}\n\nexport interface AdvancedFilterBuilderVisibleChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Source of the visibility status change. */\n    source: 'api' | 'ui';\n    /** `true` if now visible. `false` if now hidden. */\n    visible: boolean\n}\n\nexport interface SortChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Source of the sort change. */\n    source: string;\n    /**\n     * The list of columns impacted by the sort change.\n     */\n    columns?: Column[];\n}\n\nexport interface GridReadyEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\nexport interface GridPreDestroyedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Current state of the grid */\n    state: GridState;\n}\n\nexport interface ColumnContainerWidthChanged<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\nexport interface DisplayedColumnsWidthChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\nexport interface ColumnHoverChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\nexport interface BodyHeightChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\n\n// this event is 'odd one out' as it should have properties for all the properties\n// in gridOptions that can be bound by the framework. for example, the gridOptions\n// has 'rowData', so this property should have 'rowData' also, so that when the row\n// data changes via the framework bound property, this event has that attribute set.\nexport interface ComponentStateChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface ColumnPanelItemDragStartEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnPanelItemDragEndEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface AgDragEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** The DOM element that started the event. */\n    target: Element;\n}\n\nexport interface DragStartedEvent<TData = any, TContext = any> extends AgDragEvent<TData, TContext> {\n    type: 'dragStarted';\n}\n\nexport interface DragStoppedEvent<TData = any, TContext = any> extends AgDragEvent<TData, TContext> {\n    type: 'dragStopped';\n}\n\n// For internal use only.\n// This event allows us to detect when other inputs in the same named group are changed, so for example we can ensure\n// that only one radio button in the same group is selected at any given time.\nexport interface CheckboxChangedEvent extends AgEvent {\n    id: string;\n    name: string;\n    selected?: boolean;\n    previousValue: boolean | undefined;\n}\n\nexport interface GridSizeChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** The grid's DIV's clientWidth */\n    clientWidth: number;\n    /** The grid's DIV's clientHeight */\n    clientHeight: number;\n}\n\nexport interface PivotMaxColumnsExceededEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    message: string;\n}\n\nexport interface RowDragEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */\n    type: string;\n    /** The row node getting dragged. Also the node that started the drag when multi-row dragging. */\n    node: IRowNode<TData>;\n    /** The list of nodes being dragged. */\n    nodes: IRowNode<TData>[];\n    /** The underlying mouse move event associated with the drag. */\n    event: MouseEvent;\n    /** The `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */\n    eventPath?: EventTarget[];\n    /** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */\n    vDirection: string;\n    /** The row index the mouse is dragging over or -1 if over no row. */\n    overIndex: number;\n    /** The row node the mouse is dragging over or undefined if over no row. */\n    overNode?: IRowNode<TData>;\n    /** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */\n    y: number;\n}\n\nexport interface RowDragEnterEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext> { }\n\nexport interface RowDragEndEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext> { }\n\nexport interface RowDragMoveEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext> { }\n\nexport interface RowDragLeaveEvent<TData = any, TContext = any> extends RowDragEvent<TData, TContext> { }\n\nexport interface CutStartEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: 'api' | 'ui' | 'contextMenu';\n}\n\nexport interface CutEndEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: 'api' | 'ui' | 'contextMenu';\n}\n\nexport interface PasteStartEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: string;\n}\n\nexport interface PasteEndEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: string;\n}\n\nexport interface FillStartEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n}\n\nexport interface FillEndEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    initialRange: CellRange;\n    finalRange: CellRange;\n}\n\nexport interface RangeDeleteStartEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: 'deleteKey';\n}\n\nexport interface RangeDeleteEndEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: 'deleteKey';\n}\n\nexport interface UndoStartedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n}\n\nexport interface UndoEndedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n    /** `true` if any undo operations were performed. */\n    operationPerformed: boolean;\n}\n\nexport interface RedoStartedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n}\n\nexport interface RedoEndedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Source of the event. `api` if via API method. `ui` if via keyboard shortcut. */\n    source: 'api' | 'ui';\n    /** `true` if any redo operations were performed. */\n    operationPerformed: boolean;\n}\n\nexport interface ViewportChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface FirstDataRenderedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface RangeSelectionChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    id?: string;\n    /** True for the first change event, otherwise false */\n    started: boolean;\n    /** True for the last change event, otherwise false */\n    finished: boolean;\n}\n\nexport interface ChartCreated<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Will always be `chartCreated`. */\n    type: string;\n    /** Id of the created chart. This can later be used to reference the chart via api methods. */\n    chartId: string;\n}\n\nexport interface ChartRangeSelectionChanged<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Will always be `chartRangeSelectionChanged`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n    /** Same as `chartId`. */\n    id: string;\n    /** New cellRange selected. */\n    cellRange: CellRangeParams;\n}\n\nexport interface ChartOptionsChanged<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Will always be `chartOptionsChanged`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n    /** ChartType */\n    chartType: ChartType;\n    /** Chart theme name of currently selected theme. */\n    chartThemeName: string;\n    /** Chart options.  */\n    chartOptions: AgChartThemeOverrides;\n}\n\nexport interface ChartDestroyed<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Will always be `chartDestroyed`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n}\n\nexport interface ColumnGroupOpenedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    columnGroup?: ProvidedColumnGroup;\n    columnGroups: ProvidedColumnGroup[];\n}\n\nexport interface ItemsAddedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    items: IRowNode<TData>[];\n}\n\nexport type ScrollDirection = 'horizontal' | 'vertical';\n\nexport interface BodyScrollEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    direction: ScrollDirection;\n    left: number;\n    top: number;\n}\n\nexport interface BodyScrollEndEvent<TData = any, TContext = any> extends BodyScrollEvent<TData, TContext> { }\n\n// not documented\nexport interface FlashCellsEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    cells: any;\n}\n\nexport interface TooltipEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    parentGui: HTMLElement;\n}\nexport interface TooltipShowEvent<TData = any, TContext = any> extends TooltipEvent<TData, TContext> {\n    tooltipGui: HTMLElement;\n}\n\nexport interface TooltipHideEvent<TData = any, TContext = any> extends TooltipEvent<TData, TContext> {}\n\nexport interface PaginationPixelOffsetChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n}\n\nexport interface CommonCellFocusParams {\n    /** Row index of the focused cell */\n    rowIndex: number | null;\n    /** Column of the focused cell */\n    column: Column | string | null;\n    /** either 'top', 'bottom' or null / undefined (if not pinned) */\n    rowPinned: RowPinnedType;\n    /** Whether the cell a full width cell or a regular cell */\n    isFullWidthCell?: boolean;\n}\n\nexport interface CellFocusClearedParams extends CommonCellFocusParams {}\n\nexport interface CellFocusedParams extends CommonCellFocusParams {\n   /** Whether browser focus is also set (false when editing) */\n   forceBrowserFocus?: boolean;\n   /** When `forceBrowserFocus` is `true`, should scroll be prevented */\n   preventScrollOnBrowserFocus?: boolean;\n   // floating is for backwards compatibility, this is the same as rowPinned.\n   // this is because the focus service doesn't keep references to rowNodes\n   // as focused cell is identified by rowIndex - thus when the user re-orders\n   // or filters, the focused cell stays with the index, but the node can change.\n   floating?: string | null;\n}\n\nexport interface CellFocusClearedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext>, CellFocusClearedParams { }\n\n// this does not extent CellEvent as the focus service doesn't keep a reference to\n// the rowNode.\nexport interface CellFocusedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext>, CellFocusedParams { }\n\nexport interface FullWidthRowFocusedEvent<TData = any> extends CellFocusedEvent<TData> {\n    fromBelow: boolean;\n}\n\nexport interface ExpandCollapseAllEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    source: string;\n}\n\n/**---------------*/\n/** COLUMN EVENTS */\n/**---------------*/\n\nexport type ColumnEventType =\n    \"sizeColumnsToFit\" |\n    \"autosizeColumns\" |\n    \"autosizeColumnHeaderHeight\" |\n    \"alignedGridChanged\" |\n    \"filterChanged\" |\n    \"filterDestroyed\" |\n    \"gridOptionsChanged\" |\n    \"gridInitializing\" |\n    \"toolPanelDragAndDrop\" |\n    \"toolPanelUi\" |\n    \"uiColumnMoved\" |\n    \"uiColumnResized\" |\n    \"uiColumnDragged\" |\n    \"uiColumnExpanded\" |\n    \"uiColumnSorted\" |\n    \"contextMenu\" |\n    \"columnMenu\" |\n    \"rowModelUpdated\" |\n    \"rowDataUpdated\" |\n    \"api\" |\n    \"flex\" |\n    \"pivotChart\" |\n    \"columnRowGroupChanged\" |\n    \"cellDataTypeInferred\" |\n    \"viewportSizeFeature\";\n\nexport interface ColumnEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** The impacted column, only set if action was on one column */\n    column: Column | null;\n    /** List of all impacted columns */\n    columns: Column[] | null;\n    /** String describing where the event is coming from */\n    source: ColumnEventType;\n}\n\nexport interface ColumnResizedEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> {\n    /** Set to true for last event in a sequence of move events */\n    finished: boolean;\n    /** Any columns resized due to flex */\n    flexColumns: Column[] | null;\n}\n\nexport interface ColumnPivotChangedEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> { }\n\nexport interface ColumnRowGroupChangedEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> { }\n\nexport interface ColumnValueChangedEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> { }\n\nexport interface ColumnMovedEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> {\n    /** The position the column was moved to */\n    toIndex?: number;\n    /** `True` when the column has finished moving. */\n    finished: boolean;\n}\n\nexport interface ColumnVisibleEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> {\n    /** True if column was set to visible, false if set to hide, undefined if in a single call some columns were shown while others hidden */\n    visible?: boolean;\n}\n\nexport interface ColumnPinnedEvent<TData = any, TContext = any> extends ColumnEvent<TData, TContext> {\n    /** Either 'left', 'right', or null (it not pinned) */\n    pinned: ColumnPinnedType;\n}\n\nexport interface ColumnHeaderMouseOverEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnHeaderMouseLeaveEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnHeaderClickedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnHeaderContextMenuEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Column or column-group related to the header that triggered the event */\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnMenuVisibleChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** True if now visible; false if now hidden. */\n    visible: boolean;\n    /** True if switching between tabs. False if showing/hiding. Only applies to legacy tabbed menu. */\n    switchingTab: boolean;\n    /**\n     * Currently displayed menu/tab.\n     * If filter launched from floating filter, will be `'floatingFilter'`.\n     * If using AG Grid Enterprise and `columnMenu = 'legacy'`,\n     * will be the tab `'generalMenuTab'`, `'filterMenuTab'` or `'columnsMenuTab'`.\n     * If using AG Grid Community and `columnMenu = 'legacy'`, will be `'columnMenu'`.\n     * If using `columnMenu = 'new'`, will be `'columnMenu'` for the column menu,\n     * `'columnFilter'` for the column filter, and `'columnChooser'` for the column chooser.\n     */\n    key: 'generalMenuTab' | 'filterMenuTab' | 'columnsMenuTab' | 'columnMenu' | 'columnFilter' | 'floatingFilter' | 'columnChooser';\n    /**\n     * Column the menu is opened for. Will be `null` if not launched from a column\n     * (e.g. column chooser from the API, or column menu via right-click on an empty header).\n     */\n    column: Column | null;\n}\n\n/**------------*/\n\n/** ROW EVENTS */\n/**------------*/\ninterface BaseRowEvent<TData, TContext> extends AgGridEvent<TData, TContext> {\n    /** The row node. */\n    node: IRowNode<TData>;\n    /** The visible row index for the row */\n    rowIndex: number | null;\n    /** Either 'top', 'bottom' or null / undefined (if not set) */\n    rowPinned: RowPinnedType;\n    /** If event was due to browser event (eg click), this is the browser event */\n    event?: Event | null;\n    /** If the browser `event` is present the `eventPath` persists the `event.composedPath()` result for access within AG Grid event handlers.  */\n    eventPath?: EventTarget[];\n}\n\nexport interface RowEvent<TData = any, TContext = any> extends BaseRowEvent<TData, TContext> {\n    /** The user provided data for the row. Data is `undefined` for row groups. */\n    data: TData | undefined;\n}\n\n/** Base interface for row events that always have data set. */\ninterface RowWithDataEvent<TData = any, TContext = any> extends BaseRowEvent<TData, TContext> {\n    /** The user provided data for the row. */\n    data: TData;\n}\n\nexport interface RowGroupOpenedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> {\n    /** True if the group is expanded. */\n    expanded: boolean;\n}\n\nexport interface RowValueChangedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\nexport interface RowSelectedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> {\n    source: SelectionEventSourceType;\n }\n\nexport interface VirtualRowRemovedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\nexport interface RowClickedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\nexport interface RowDoubleClickedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\nexport interface RowEditingStartedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\nexport interface RowEditingStoppedEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\nexport interface FullWidthCellKeyDownEvent<TData = any, TContext = any> extends RowEvent<TData, TContext> { }\n\n/**------------*/\n\n/** CELL EVENTS */\n/**------------*/\nexport interface CellEvent<TData = any, TValue = any> extends RowEvent<TData> {\n    column: Column<TValue>;\n    colDef: ColDef<TData, TValue>;\n    /** The value for the cell if available otherwise undefined. */\n    value: TValue | null | undefined;\n}\n\n/** Use for cell events that will always have a data property. */\ninterface CellWithDataEvent<TData = any, TValue = any> extends RowWithDataEvent<TData> {\n    column: Column<TValue>;\n    colDef: ColDef<TData, TValue>;\n    /** The value for the cell */\n    value: TValue | null | undefined;\n}\n\nexport interface CellKeyDownEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellClickedEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellMouseDownEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellDoubleClickedEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellMouseOverEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellMouseOutEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellContextMenuEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellEditingStartedEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellEditingStoppedEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> {\n    /** The old value before editing */\n    oldValue: TValue | null | undefined;\n    /** The new value after editing */\n    newValue: TValue | null | undefined;\n    /** Property indicating if the value of the editor has changed */\n    valueChanged: boolean;\n}\n\nexport interface CellValueChangedEvent<TData = any, TValue = any> extends CellWithDataEvent<TData, TValue> {\n    oldValue: TValue | null | undefined;\n    newValue: TValue | null | undefined;\n    source: string | undefined;\n}\n\nexport interface CellEditRequestEvent<TData = any, TValue = any> extends CellWithDataEvent<TData, TValue> {\n    oldValue: TValue | null | undefined;\n    newValue: TValue | null | undefined;\n    source: string | undefined;\n}\n\nexport interface AsyncTransactionsFlushed<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /**\n     * Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\n     * For Client-Side Row Model it's a list of `RowNodeTransaction`.\n     */\n    results: (RowNodeTransaction<TData> | ServerSideTransactionResult)[];\n}\n\n// not documented, was put in for CS - more thought needed of how server side grouping / pivoting\n// is done and how these should be used before we fully document and share with the world.\nexport interface ColumnRequestEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    columns: Column[];\n}\n\nexport interface ColumnRowGroupChangeRequestEvent<TData = any, TContext = any> extends ColumnRequestEvent<TData, TContext> { }\n\nexport interface ColumnPivotChangeRequestEvent<TData = any, TContext = any> extends ColumnRequestEvent<TData, TContext> { }\n\nexport interface ColumnValueChangeRequestEvent<TData = any, TContext = any> extends ColumnRequestEvent<TData, TContext> { }\n\nexport interface ColumnAggFuncChangeRequestEvent<TData = any, TContext = any> extends ColumnRequestEvent<TData, TContext> {\n    aggFunc: any;\n}\n\nexport interface StoreRefreshedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** The route of the store which has finished refreshing, undefined if root level */\n    route?: string[];\n}\n\nexport interface StateUpdatedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    /** Which parts of the state triggered the update, or `gridInitializing` when the state has been created during grid initialization */\n    sources: (keyof GridState | 'gridInitializing')[];\n    /** The updated state */\n    state: GridState;\n}\n\nexport interface ScrollVisibilityChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\n\nexport interface StoreUpdatedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\n\nexport interface LeftPinnedWidthChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\nexport interface RightPinnedWidthChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\n\nexport interface RowContainerHeightChanged<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\n\nexport interface DisplayedRowsChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { afterScroll: boolean } // not documented\n\nexport interface CssVariablesChanged<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { } // not documented\n\n\n/**-----------------*/\n/** Internal EVENTS */\n/**-----------------*/\n\nexport interface AdvancedFilterEnabledChangedEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    enabled: boolean;\n}\n\nexport interface DataTypesInferredEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> { }\n\nexport interface FieldValueEvent<TData = any, TContext = any> extends AgGridEvent<TData, TContext> {\n    value: any;\n}\nexport interface FieldPickerValueSelectedEvent<TData = any, TContext = any> extends FieldValueEvent {\n    fromEnterKey: boolean;\n}\n\nexport const ALWAYS_SYNC_GLOBAL_EVENTS: Set<string> = new Set([Events.EVENT_GRID_PRE_DESTROYED]);\n", "// class returns unique instance id's for columns.\n// eg, the following calls (in this order) will result in:\n//\n// getInstanceIdForKey('country') => 0\n// getInstanceIdForKey('country') => 1\n// getInstanceIdForKey('country') => 2\n// getInstanceIdForKey('country') => 3\n// getInstanceIdForKey('age') => 0\n// getInstanceIdForKey('age') => 1\n// getInstanceIdForKey('country') => 4\nexport class GroupInstanceIdCreator {\n\n    // this map contains keys to numbers, so we remember what the last call was\n    private existingIds: any = {};\n\n    public getInstanceIdForKey(key: string): number {\n        const lastResult = this.existingIds[key];\n        let result: number;\n        if (typeof lastResult !== 'number') {\n            // first time this key\n            result = 0;\n        } else {\n            result = lastResult + 1;\n        }\n\n        this.existingIds[key] = result;\n\n        return result;\n    }\n\n}", "import { Autowired, Bean } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { ColDef } from \"../entities/colDef\";\nimport { ColumnModel } from \"./columnModel\";\nimport { ColumnFactory } from \"./columnFactory\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { mergeDeep } from \"../utils/object\";\nimport { missing } from \"../utils/generic\";\nimport { ColumnEventType } from \"../events\";\n\nexport const GROUP_AUTO_COLUMN_ID: 'ag-Grid-AutoColumn' = 'ag-Grid-AutoColumn';\n@Bean('autoGroupColService')\nexport class AutoGroupColService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnFactory') private columnFactory: ColumnFactory;\n\n    public createAutoGroupColumns(rowGroupColumns: Column[]): Column[] {\n        const groupAutoColumns: Column[] = [];\n\n        const doingTreeData = this.gridOptionsService.get('treeData');\n        let doingMultiAutoColumn = this.gridOptionsService.isGroupMultiAutoColumn();\n\n        if (doingTreeData && doingMultiAutoColumn) {\n            console.warn('AG Grid: you cannot mix groupDisplayType = \"multipleColumns\" with treeData, only one column can be used to display groups when doing tree data');\n            doingMultiAutoColumn = false;\n        }\n\n        // if doing groupDisplayType = \"multipleColumns\", then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupColumns.forEach((rowGroupCol: Column, index: number) => {\n                groupAutoColumns.push(this.createOneAutoGroupColumn(rowGroupCol, index));\n            });\n        } else {\n            groupAutoColumns.push(this.createOneAutoGroupColumn());\n        }\n\n        return groupAutoColumns;\n    }\n\n    public updateAutoGroupColumns(autoGroupColumns: Column[], source: ColumnEventType) {\n        autoGroupColumns.forEach((column: Column, index: number) => this.updateOneAutoGroupColumn(column, index, source));\n    }\n\n    // rowGroupCol and index are missing if groupDisplayType != \"multipleColumns\"\n    private createOneAutoGroupColumn(rowGroupCol?: Column, index?: number): Column {\n        // if doing multi, set the field\n        let colId: string;\n        if (rowGroupCol) {\n            colId = `${GROUP_AUTO_COLUMN_ID}-${rowGroupCol.getId()}`;\n        } else {\n            colId = GROUP_AUTO_COLUMN_ID;\n        }\n\n        const colDef = this.createAutoGroupColDef(colId, rowGroupCol, index);\n        colDef.colId = colId;\n\n        const newCol = new Column(colDef, null, colId, true);\n        this.context.createBean(newCol);\n        return newCol;\n    }\n\n    /**\n     * Refreshes an auto group col to load changes from defaultColDef or autoGroupColDef\n     */\n    private updateOneAutoGroupColumn(colToUpdate: Column, index: number, source: ColumnEventType) {\n        const oldColDef = colToUpdate.getColDef();\n        const underlyingColId = typeof oldColDef.showRowGroup == 'string' ? oldColDef.showRowGroup : undefined;\n        const underlyingColumn = underlyingColId!=null ? this.columnModel.getPrimaryColumn(underlyingColId) : undefined;\n        const colDef = this.createAutoGroupColDef(colToUpdate.getId(), underlyingColumn??undefined, index);\n\n        colToUpdate.setColDef(colDef, null, source);\n        this.columnFactory.applyColumnState(colToUpdate, colDef, source);\n    }\n\n    private createAutoGroupColDef(colId: string, underlyingColumn?: Column, index?: number): ColDef {\n        // if one provided by user, use it, otherwise create one\n        let res: ColDef = this.createBaseColDef(underlyingColumn);\n\n        const autoGroupColumnDef = this.gridOptionsService.get('autoGroupColumnDef');\n        mergeDeep(res, autoGroupColumnDef);\n\n        res = this.columnFactory.addColumnDefaultAndTypes(res, colId);\n\n        // For tree data the filter is always allowed\n        if (!this.gridOptionsService.get('treeData')) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            const noFieldOrValueGetter =\n                missing(res.field) &&\n                missing(res.valueGetter) &&\n                missing(res.filterValueGetter) &&\n                res.filter !== 'agGroupColumnFilter';\n            if (noFieldOrValueGetter) {\n                res.filter = false;\n            }\n        }\n\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            res.headerCheckboxSelection = false;\n        }\n\n        const isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        const hasOwnData = res.valueGetter || res.field != null;\n        if (isSortingCoupled && !hasOwnData) {\n            // if col is coupled sorting, and has sort attribute, we want to ignore this\n            // because we only accept the sort on creation of the col\n            res.sortIndex = undefined;\n            res.initialSort = undefined;\n        }\n\n        return res;\n    }\n\n    private createBaseColDef(rowGroupCol?: Column): ColDef {\n        const userDef = this.gridOptionsService.get('autoGroupColumnDef');\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        const res: ColDef = {\n            headerName: localeTextFunc('group', 'Group')\n        };\n\n        const userHasProvidedGroupCellRenderer = userDef &&\n            (userDef.cellRenderer || userDef.cellRendererSelector);\n\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            res.cellRenderer = 'agGroupCellRenderer';\n        }\n\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n        if (rowGroupCol) {\n            const colDef = rowGroupCol.getColDef();\n            Object.assign(res, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: colDef.headerValueGetter\n            });\n\n            if (colDef.cellRenderer) {\n                Object.assign(res, {\n                    cellRendererParams: {\n                        innerRenderer: colDef.cellRenderer,\n                        innerRendererParams: colDef.cellRendererParams\n                    }\n                });\n            }\n            res.showRowGroup = rowGroupCol.getColId();\n        } else {\n            res.showRowGroup = true;\n        }\n\n        return res;\n    }\n}\n", "const reUnescapedHtml = /[&<>\"']/g;\n\n/**\n * HTML Escapes.\n */\nconst HTML_ESCAPES: { [id: string]: string; } = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\n\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\nexport function utf8_encode(s: string | null): string {\n    const stringFromCharCode = String.fromCharCode;\n\n    function ucs2decode(string: string | null): number[] {\n        const output: number[] = [];\n\n        if (!string) { return []; }\n\n        const len = string.length;\n\n        let counter = 0;\n        let value;\n        let extra;\n\n        while (counter < len) {\n            value = string.charCodeAt(counter++);\n            if (value >= 0xD800 && value <= 0xDBFF && counter < len) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                } else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                }\n            } else {\n                output.push(value);\n            }\n        }\n        return output;\n    }\n\n    function checkScalarValue(point: number) {\n        if (point >= 0xD800 && point <= 0xDFFF) {\n            throw Error(\n                'Lone surrogate U+' + point.toString(16).toUpperCase() +\n                ' is not a scalar value'\n            );\n        }\n    }\n\n    function createByte(point: number, shift: number) {\n        return stringFromCharCode(((point >> shift) & 0x3F) | 0x80);\n    }\n\n    function encodeCodePoint(point: number): string {\n        if ((point >= 0 && point <= 31 && point !== 10)) {\n            const convertedCode = point.toString(16).toUpperCase();\n            const paddedCode = convertedCode.padStart(4, '0');\n\n            return `_x${paddedCode}_`;\n        }\n\n        if ((point & 0xFFFFFF80) == 0) { // 1-byte sequence\n            return stringFromCharCode(point);\n        }\n\n        let symbol = '';\n\n        if ((point & 0xFFFFF800) == 0) { // 2-byte sequence\n            symbol = stringFromCharCode(((point >> 6) & 0x1F) | 0xC0);\n        } else if ((point & 0xFFFF0000) == 0) { // 3-byte sequence\n            checkScalarValue(point);\n            symbol = stringFromCharCode(((point >> 12) & 0x0F) | 0xE0);\n            symbol += createByte(point, 6);\n        } else if ((point & 0xFFE00000) == 0) { // 4-byte sequence\n            symbol = stringFromCharCode(((point >> 18) & 0x07) | 0xF0);\n            symbol += createByte(point, 12);\n            symbol += createByte(point, 6);\n        }\n        symbol += stringFromCharCode((point & 0x3F) | 0x80);\n        return symbol;\n    }\n\n    const codePoints = ucs2decode(s);\n    const length = codePoints.length;\n    let index = -1;\n    let codePoint;\n    let byteString = '';\n\n    while (++index < length) {\n        codePoint = codePoints[index];\n        byteString += encodeCodePoint(codePoint);\n    }\n\n    return byteString;\n}\n\nexport function capitalise(str: string): string {\n    return str[0].toUpperCase() + str.substring(1).toLowerCase();\n}\n\nexport function escapeString(toEscape?: string | null, skipEscapingHtmlChars?: boolean): string | null {\n    if (toEscape == null) {\n        return null;\n    }\n\n    // we call toString() twice, in case value is an object, where user provides\n    // a toString() method, and first call to toString() returns back something other\n    // than a string (eg a number to render)\n    const stringResult = toEscape.toString().toString();\n\n    if (skipEscapingHtmlChars) {\n        return stringResult;\n    }\n\n    // in react we don't need to escape html characters, as it's done by the framework\n    return stringResult.replace(reUnescapedHtml, chr => HTML_ESCAPES[chr]);\n}\n\n/**\n * Converts a camelCase string into startCase\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHumanText(camelCase: string | undefined): string | null {\n    if (!camelCase || camelCase == null) { return null; }\n\n    // either split on a lowercase followed by uppercase ie  asHereTo -> as Here To\n    const rex = /([a-z])([A-Z])/g;\n    // or starts with uppercase and we take all expect the last which is assumed to be part of next word if followed by lowercase HEREToThere -> HERE To There\n    const rexCaps = /([A-Z]+)([A-Z])([a-z])/g;\n    const words: string[] = camelCase\n        .replace(rex, '$1 $2')\n        .replace(rexCaps, '$1 $2$3')\n        .replace(/\\./g, ' ')\n        .split(' ');\n\n    return words.map(word => word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : '')).join(' ');\n}\n\n/**\n * Converts a camelCase string into hyphenated string\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHyphenated(camelCase: string): string {\n    return camelCase.replace(/[A-Z]/g, s => `-${s.toLocaleLowerCase()}`);\n}", "export function convertToMap<K, V>(arr: [K, V][]): Map<K, V> {\n    const map = new Map<K, V>();\n\n    arr.forEach(pair => map.set(pair[0], pair[1]));\n\n    return map;\n}\n\n// handy for organising a list into a map, where each item is mapped by an attribute, eg mapping Columns by ID\nexport function mapById<V>(arr: V[], callback: (obj: V) => string): Map<string, V> {\n    const map = new Map<string, V>();\n\n    arr.forEach(item => map.set(callback(item), item));\n\n    return map;\n}\n\nexport function keys<T>(map: Map<T, any>): T[] {\n    const arr: T[] = [];\n\n    map.forEach((_, key) => arr.push(key));\n\n    return arr;\n}", "import { ColumnGroup } from '../entities/columnGroup';\nimport { Column, ColumnPinnedType } from '../entities/column';\nimport { AbstractColDef, ColDef, ColGroupDef, IAggFunc, HeaderValueGetterParams, HeaderLocation } from '../entities/colDef';\nimport { IHeaderColumn } from '../interfaces/iHeaderColumn';\nimport { ExpressionService } from '../valueService/expressionService';\nimport { ColumnFactory } from './columnFactory';\nimport { DisplayedGroupCreator } from './displayedGroupCreator';\nimport { AutoWidthCalculator } from '../rendering/autoWidthCalculator';\nimport { IProvidedColumn } from '../interfaces/iProvidedColumn';\nimport { ColumnUtils } from './columnUtils';\nimport { Logger, LoggerFactory } from '../logger';\nimport {\n    ColumnEvent,\n    ColumnEventType,\n    ColumnEverythingChangedEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnPivotModeChangedEvent,\n    ColumnResizedEvent,\n    ColumnRowGroupChangedEvent,\n    ColumnValueChangedEvent,\n    ColumnVisibleEvent,\n    DisplayedColumnsChangedEvent,\n    DisplayedColumnsWidthChangedEvent,\n    Events,\n    GridColumnsChangedEvent,\n    NewColumnsLoadedEvent,\n    VirtualColumnsChangedEvent,\n    ColumnContainerWidthChanged\n} from '../events';\nimport { BeanStub } from \"../context/beanStub\";\nimport { ProvidedColumnGroup } from '../entities/providedColumnGroup';\nimport { GroupInstanceIdCreator } from './groupInstanceIdCreator';\nimport { Autowired, Bean, Optional, PostConstruct, PreDestroy, Qualifier } from '../context/context';\nimport { IAggFuncService } from '../interfaces/iAggFuncService';\nimport { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport { AutoGroupColService, GROUP_AUTO_COLUMN_ID } from './autoGroupColService';\nimport { RowNode } from '../entities/rowNode';\nimport { ValueCache } from '../valueService/valueCache';\nimport { areEqual, last, removeFromArray, moveInArray, includes, insertIntoArray, removeAllFromUnorderedArray, removeFromUnorderedArray } from '../utils/array';\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { SortController } from \"../sortController\";\nimport { missingOrEmpty, exists, missing, attrToBoolean, attrToNumber } from '../utils/generic';\nimport { camelCaseToHumanText } from '../utils/string';\nimport { ColumnDefFactory } from \"./columnDefFactory\";\nimport { convertToMap } from '../utils/map';\nimport { warnOnce } from '../utils/function';\nimport { CtrlsService } from '../ctrlsService';\nimport { HeaderGroupCellCtrl } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\nimport { WithoutGridCommon } from '../interfaces/iCommon';\nimport { PropertyChangedSource } from '../gridOptionsService';\n\nexport interface ColumnResizeSet {\n    columns: Column[];\n    ratios: number[];\n    width: number;\n}\n\nexport interface ColumnStateParams {\n    /** True if the column is hidden */\n    hide?: boolean | null;\n    /** Width of the column in pixels */\n    width?: number;\n    /** Column's flex if flex is set */\n    flex?: number | null;\n    /** Sort applied to the column */\n    sort?: 'asc' | 'desc' | null;\n    /** The order of the sort, if sorting by many columns */\n    sortIndex?: number | null;\n    /** The aggregation function applied */\n    aggFunc?: string | IAggFunc | null;\n    /** True if pivot active */\n    pivot?: boolean | null;\n    /** The order of the pivot, if pivoting by many columns */\n    pivotIndex?: number | null;\n    /** Set if column is pinned */\n    pinned?: ColumnPinnedType;\n    /** True if row group active */\n    rowGroup?: boolean | null;\n    /** The order of the row group, if grouping by many columns */\n    rowGroupIndex?: number | null;\n}\n\nexport interface ColumnState extends ColumnStateParams {\n    /** ID of the column */\n    colId: string;\n}\n\nexport interface ApplyColumnStateParams {\n    /** The state from `getColumnState` */\n    state?: ColumnState[];\n    /** Whether column order should be applied */\n    applyOrder?: boolean;\n    /** State to apply to columns where state is missing for those columns */\n    defaultState?: ColumnStateParams;\n}\n\nexport interface ISizeColumnsToFitParams {\n    /** Defines a default minimum width for every column (does not override the column minimum width) */\n    defaultMinWidth?: number;\n    /** Defines a default maximum width for every column (does not override the column maximum width) */\n    defaultMaxWidth?: number;\n    /** Provides a minimum and/or maximum width to specific columns */\n    columnLimits?: IColumnLimit[];\n}\n\nexport interface IColumnLimit {\n    /** Selector for the column to which these dimension limits will apply */\n    key: Column | string;\n    /** Defines a minimum width for this column (does not override the column minimum width) */\n    minWidth?: number;\n    /** Defines a maximum width for this column (does not override the column maximum width) */\n    maxWidth?: number;\n}\n\nexport type ColKey<TData = any, TValue = any> = string | ColDef<TData, TValue> | Column<TValue>;\nexport type Maybe<T> = T | null | undefined;\n\n@Bean('columnModel')\nexport class ColumnModel extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('columnFactory') private columnFactory: ColumnFactory;\n    @Autowired('displayedGroupCreator') private displayedGroupCreator: DisplayedGroupCreator;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('autoWidthCalculator') private autoWidthCalculator: AutoWidthCalculator;\n    @Autowired('columnUtils') private columnUtils: ColumnUtils;\n    @Autowired('columnAnimationService') private columnAnimationService: ColumnAnimationService;\n    @Autowired('autoGroupColService') private autoGroupColService: AutoGroupColService;\n    @Optional('aggFuncService') private aggFuncService: IAggFuncService;\n    @Optional('valueCache') private valueCache: ValueCache;\n    @Optional('animationFrameService') private animationFrameService: AnimationFrameService;\n\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('columnDefFactory') private columnDefFactory: ColumnDefFactory;\n\n    // these are the columns provided by the client. this doesn't change, even if the\n    // order or state of the columns and groups change. it will only change if the client\n    // provides a new set of column definitions. otherwise this tree is used to build up\n    // the groups for displaying.\n    private primaryColumnTree: IProvidedColumn[];\n    // header row count, based on user provided columns\n    private primaryHeaderRowCount = 0;\n    // all columns provided by the user. basically it's the leaf level nodes of the\n    // tree above (originalBalancedTree)\n    private primaryColumns: Column[] | undefined; // every column available\n    private primaryColumnsMap: { [id: string]: Column };\n\n    // if pivoting, these are the generated columns as a result of the pivot\n    private secondaryBalancedTree: IProvidedColumn[] | null;\n    private secondaryColumns: Column[] | null;\n    private secondaryColumnsMap: { [id: string]: Column };\n    private secondaryHeaderRowCount = 0;\n    // Saved when pivot is disabled, available to re-use when pivot is restored\n    private previousSecondaryColumns: IProvidedColumn[] | null;\n\n    // the columns the quick filter should use. this will be all primary columns\n    // plus the autoGroupColumns if any exist\n    private columnsForQuickFilter: Column[];\n\n    // these are all columns that are available to the grid for rendering after pivot\n    private gridBalancedTree: IProvidedColumn[];\n    private gridColumns: Column[];\n    private gridColumnsMap: { [id: string]: Column };\n\n    private groupAutoColsBalancedTree: IProvidedColumn[] | null;\n\n    // header row count, either above, or based on pivoting if we are pivoting\n    private gridHeaderRowCount = 0;\n\n    private lastPrimaryOrder: Column[];\n    private lastSecondaryOrder: Column[];\n    private gridColsArePrimary: boolean;\n\n    // primary columns -> what the user provides\n    // secondary columns -> columns generated as a result of a pivot\n    // displayed columns -> columns that are 1) visible and 2) parent groups are opened. thus can be rendered\n    // viewport columns -> centre columns only, what columns are to be rendered due to column virtualisation\n\n    // tree of columns to be displayed for each section\n    private displayedTreeLeft: IHeaderColumn[];\n    private displayedTreeRight: IHeaderColumn[];\n    private displayedTreeCentre: IHeaderColumn[];\n\n    // leave level columns of the displayed trees\n    private displayedColumnsLeft: Column[] = [];\n    private displayedColumnsRight: Column[] = [];\n    private displayedColumnsCenter: Column[] = [];\n    // all three lists above combined\n    private displayedColumns: Column[] = [];\n\n    // list of all columns (displayed and hidden) in visible order including pinned\n    private ariaOrderColumns: Column[];\n\n    // for fast lookup, to see if a column or group is still displayed\n    private displayedColumnsAndGroupsMap: { [id: string]: IHeaderColumn } = {};\n\n    // all columns to be rendered\n    private viewportColumns: Column[] = [];\n\n    // A hash key to keep track of changes in viewport columns\n    private viewportColumnsHash: string = '';\n\n    // same as viewportColumns, except we always include columns with headerAutoHeight\n    private headerViewportColumns: Column[] = [];\n\n    // all columns to be rendered in the centre\n    private viewportColumnsCenter: Column[] = [];\n    // same as viewportColumnsCenter, except we always include columns with headerAutoHeight\n    private headerViewportColumnsCenter: Column[] = [];\n\n    // all columns & groups to be rendered, index by row. used by header rows to get all items\n    // to render for that row.\n    private viewportRowLeft: { [row: number]: IHeaderColumn[]; } = {};\n    private viewportRowRight: { [row: number]: IHeaderColumn[]; } = {};\n    private viewportRowCenter: { [row: number]: IHeaderColumn[]; } = {};\n\n    // true if we are doing column spanning\n    private colSpanActive: boolean;\n\n    // grid columns that have colDef.autoHeight set\n    private displayedAutoHeightCols: Column[];\n    private autoHeightActive: boolean;\n    private autoHeightActiveAtLeastOnce = false;\n\n    private suppressColumnVirtualisation: boolean;\n\n    private rowGroupColumns: Column[] = [];\n    private valueColumns: Column[] = [];\n    private pivotColumns: Column[] = [];\n\n    private groupAutoColumns: Column[] | null;\n\n    private groupDisplayColumns: Column[];\n    private groupDisplayColumnsMap: { [originalColumnId: string]: Column };\n\n    private ready = false;\n    private changeEventsDispatching = false;\n    private logger: Logger;\n\n    private autoGroupsNeedBuilding = false;\n    private forceRecreateAutoGroups = false;\n\n    private pivotMode = false;\n\n    // for horizontal visualisation of columns\n    private scrollWidth: number;\n    private scrollPosition: number;\n\n    private bodyWidth = 0;\n    private leftWidth = 0;\n    private rightWidth = 0;\n\n    private bodyWidthDirty = true;\n\n    private viewportLeft: number;\n    private viewportRight: number;\n    private flexViewportWidth: number;\n\n    // when we're waiting for cell data types to be inferred, we need to defer column resizing\n    private shouldQueueResizeOperations: boolean = false;\n    private resizeOperationQueue: (() => void)[] = [];\n\n    private columnDefs: (ColDef | ColGroupDef)[];\n\n    @PostConstruct\n    public init(): void {\n        this.suppressColumnVirtualisation = this.gridOptionsService.get('suppressColumnVirtualisation');\n\n        const pivotMode = this.gridOptionsService.get('pivotMode');\n\n        if (this.isPivotSettingAllowed(pivotMode)) {\n            this.pivotMode = pivotMode;\n        }\n\n        this.addManagedPropertyListeners(['groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'], (event) => this.buildAutoGroupColumns(convertSourceType(event.source)));\n        this.addManagedPropertyListener('autoGroupColumnDef', (event) => this.onAutoGroupColumnDefChanged(convertSourceType(event.source)));\n        this.addManagedPropertyListeners(['defaultColDef', 'columnTypes', 'suppressFieldDotNotation'], event => this.onSharedColDefChanged(convertSourceType(event.source)));\n        this.addManagedPropertyListener('pivotMode', event => this.setPivotMode(this.gridOptionsService.get('pivotMode'), convertSourceType(event.source)));\n        this.addManagedListener(this.eventService, Events.EVENT_FIRST_DATA_RENDERED, () => this.onFirstDataRendered());\n    }\n\n    private buildAutoGroupColumns(source: ColumnEventType) {\n        // Possible for update to be called before columns are present in which case there is nothing to do here.\n        if (!this.columnDefs) { return; }\n\n        this.autoGroupsNeedBuilding = true;\n        this.forceRecreateAutoGroups = true;\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n    }\n\n    private onAutoGroupColumnDefChanged(source: ColumnEventType) {\n        if (this.groupAutoColumns) {\n            this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns, source);\n        }\n    }\n\n    private onSharedColDefChanged(source: ColumnEventType): void {\n        if (!this.gridColumns) { return; }\n\n        // if we aren't going to force, update the auto cols in place\n        if (this.groupAutoColumns) {\n            this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns, source);\n        }\n        this.createColumnsFromColumnDefs(true, source);\n    }\n\n    public setColumnDefs(columnDefs: (ColDef | ColGroupDef)[], source: ColumnEventType) {\n        const colsPreviouslyExisted = !!this.columnDefs;\n        this.columnDefs = columnDefs;\n        this.createColumnsFromColumnDefs(colsPreviouslyExisted, source);\n    }\n\n    public recreateColumnDefs(source: ColumnEventType): void {\n        this.onSharedColDefChanged(source);\n    }\n\n    private destroyOldColumns(oldTree: IProvidedColumn[] | null, newTree?: IProvidedColumn[] | null): void {\n        const oldObjectsById: {[id: number]: IProvidedColumn | null} = {};\n\n        if (!oldTree) { return; }\n\n        // add in all old columns to be destroyed\n        this.columnUtils.depthFirstOriginalTreeSearch(null, oldTree, child => {\n            oldObjectsById[child.getInstanceId()] = child;\n        });\n\n        // however we don't destroy anything in the new tree. if destroying the grid, there is no new tree\n        if (newTree) {\n            this.columnUtils.depthFirstOriginalTreeSearch(null, newTree, child => {\n                oldObjectsById[child.getInstanceId()] = null;\n            });\n        }\n\n        // what's left can be destroyed\n        const colsToDestroy = Object.values(oldObjectsById).filter(item => item != null);\n        this.destroyBeans(colsToDestroy);\n    }\n\n    @PreDestroy\n    private destroyColumns(): void {\n        this.destroyOldColumns(this.primaryColumnTree);\n        this.destroyOldColumns(this.secondaryBalancedTree);\n        this.destroyOldColumns(this.groupAutoColsBalancedTree);\n    }\n\n\n    private createColumnsFromColumnDefs(colsPreviouslyExisted: boolean, source: ColumnEventType): void {\n        // only need to dispatch before/after events if updating columns, never if setting columns for first time\n        const dispatchEventsFunc = colsPreviouslyExisted ? this.compareColumnStatesAndDispatchEvents(source) : undefined;\n\n        // always invalidate cache on changing columns, as the column id's for the new columns\n        // could overlap with the old id's, so the cache would return old values for new columns.\n        this.valueCache.expire();\n\n        // NOTE ==================\n        // we should be destroying the existing columns and groups if they exist, for example, the original column\n        // group adds a listener to the columns, it should be also removing the listeners\n        this.autoGroupsNeedBuilding = true;\n\n        const oldPrimaryColumns = this.primaryColumns;\n        const oldPrimaryTree = this.primaryColumnTree;\n        const balancedTreeResult = this.columnFactory.createColumnTree(this.columnDefs, true, oldPrimaryTree, source);\n\n        this.destroyOldColumns(this.primaryColumnTree, balancedTreeResult.columnTree);\n        this.primaryColumnTree = balancedTreeResult.columnTree;\n        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;\n\n        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);\n        this.primaryColumnsMap = {};\n        this.primaryColumns.forEach(col => this.primaryColumnsMap[col.getId()] = col);\n\n        this.extractRowGroupColumns(source, oldPrimaryColumns);\n        this.extractPivotColumns(source, oldPrimaryColumns);\n        this.extractValueColumns(source, oldPrimaryColumns);\n\n        this.ready = true;\n\n        // if we are showing secondary columns, then no need to update grid columns\n        // unless the auto column needs rebuilt, as it's the pivot service responsibility to change these\n        // if we are no longer pivoting (ie and need to revert back to primary, otherwise\n        // we shouldn't be touching the primary).\n        const gridColsNotProcessed = this.gridColsArePrimary === undefined;\n        const processGridCols = this.gridColsArePrimary || gridColsNotProcessed || this.autoGroupsNeedBuilding;\n\n        if (processGridCols) {\n            this.updateGridColumns();\n            if (colsPreviouslyExisted && this.gridColsArePrimary && !this.gridOptionsService.get('maintainColumnOrder')) {\n                this.orderGridColumnsLikePrimary();\n            }\n            this.updateDisplayedColumns(source);\n            this.checkViewportColumns();\n        }\n\n        // this event is not used by AG Grid, but left here for backwards compatibility,\n        // in case applications use it\n        this.dispatchEverythingChanged(source);\n\n        // Row Models react to all of these events as well as new columns loaded,\n        // this flag instructs row model to ignore these events to reduce refreshes.\n        this.changeEventsDispatching = true;\n        if (dispatchEventsFunc) {\n            dispatchEventsFunc();\n        }\n        this.changeEventsDispatching = false;\n\n        this.dispatchNewColumnsLoaded(source);\n    }\n\n    public shouldRowModelIgnoreRefresh(): boolean {\n        return this.changeEventsDispatching;\n    }\n\n    private dispatchNewColumnsLoaded(source: ColumnEventType): void {\n        const newColumnsLoadedEvent: WithoutGridCommon<NewColumnsLoadedEvent> = {\n            type: Events.EVENT_NEW_COLUMNS_LOADED,\n            source\n        };\n\n        this.eventService.dispatchEvent(newColumnsLoadedEvent);\n        if (source === 'gridInitializing') {\n            this.onColumnsReady();\n        }\n    }\n\n    // this event is legacy, no grid code listens to it. instead the grid listens to New Columns Loaded\n    private dispatchEverythingChanged(source: ColumnEventType): void {\n        const eventEverythingChanged: WithoutGridCommon<ColumnEverythingChangedEvent> = {\n            type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(eventEverythingChanged);\n    }\n\n    private orderGridColumnsLikePrimary(): void {\n        const primaryColumns = this.primaryColumns;\n\n        if (!primaryColumns) { return; }\n\n        const primaryColsOrdered = primaryColumns.filter(col => this.gridColumns.indexOf(col) >= 0);\n        const otherCols = this.gridColumns.filter(col => primaryColsOrdered.indexOf(col) < 0);\n\n        this.gridColumns = [...otherCols, ...primaryColsOrdered];\n        this.gridColumns = this.placeLockedColumns(this.gridColumns);\n    }\n\n    public getAllDisplayedAutoHeightCols(): Column[] {\n        return this.displayedAutoHeightCols;\n    }\n\n    private setViewport(): void {\n        if (this.gridOptionsService.get('enableRtl')) {\n            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;\n            this.viewportRight = this.bodyWidth - this.scrollPosition;\n        } else {\n            this.viewportLeft = this.scrollPosition;\n            this.viewportRight = this.scrollWidth + this.scrollPosition;\n        }\n    }\n\n    // used by clipboard service, to know what columns to paste into\n    public getDisplayedColumnsStartingAt(column: Column): Column[] {\n        let currentColumn: Column | null = column;\n        const columns: Column[] = [];\n\n        while (currentColumn != null) {\n            columns.push(currentColumn);\n            currentColumn = this.getDisplayedColAfter(currentColumn);\n        }\n\n        return columns;\n    }\n\n    // checks what columns are currently displayed due to column virtualisation. dispatches an event\n    // if the list of columns has changed.\n    // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()\n    private checkViewportColumns(afterScroll: boolean = false): void {\n        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising\n        if (this.displayedColumnsCenter == null) { return; }\n\n        const viewportColumnsChanged = this.extractViewport();\n\n        if (!viewportColumnsChanged) { return; }\n\n        const event: WithoutGridCommon<VirtualColumnsChangedEvent> = {\n            type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,\n            afterScroll,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setViewportPosition(scrollWidth: number, scrollPosition: number, afterScroll: boolean = false): void {\n        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {\n            this.scrollWidth = scrollWidth;\n            this.scrollPosition = scrollPosition;\n            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,\n            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the\n            // virtual columns again\n            this.bodyWidthDirty = true;\n            this.setViewport();\n\n            if (this.ready) {\n                this.checkViewportColumns(afterScroll);\n            }\n        }\n    }\n\n    public isPivotMode(): boolean {\n        return this.pivotMode;\n    }\n\n    private isPivotSettingAllowed(pivot: boolean): boolean {\n        if (pivot && this.gridOptionsService.get('treeData')) {\n            console.warn(\"AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'\");\n            return false;\n        }\n\n        return true;\n    }\n\n    private setPivotMode(pivotMode: boolean, source: ColumnEventType): void {\n        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) { return; }\n\n        this.pivotMode = pivotMode;\n\n        if (!this.gridColumns) { return; }\n\n        // we need to update grid columns to cover the scenario where user has groupDisplayType = 'custom', as\n        // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),\n        // so need to updateGridColumn() to check it autoGroupCol needs to be added / removed\n        this.autoGroupsNeedBuilding = true;\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n\n        const event: WithoutGridCommon<ColumnPivotModeChangedEvent> = {\n            type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getSecondaryPivotColumn(pivotKeys: string[], valueColKey: ColKey): Column | null {\n        if (missing(this.secondaryColumns)) { return null; }\n\n        const valueColumnToFind = this.getPrimaryColumn(valueColKey);\n\n        let foundColumn: Column | null = null;\n\n        this.secondaryColumns.forEach(column => {\n            const thisPivotKeys = column.getColDef().pivotKeys;\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n\n            const pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);\n            const pivotValueMatches = pivotValueColumn === valueColumnToFind;\n\n            if (pivotKeyMatches && pivotValueMatches) {\n                foundColumn = column;\n            }\n        });\n\n        return foundColumn;\n    }\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('columnModel');\n    }\n\n    private setFirstRightAndLastLeftPinned(source: ColumnEventType): void {\n        let lastLeft: Column | null;\n        let firstRight: Column | null;\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;\n            firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;\n        } else {\n            lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;\n            firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;\n        }\n\n        this.gridColumns.forEach((column: Column) => {\n            column.setLastLeftPinned(column === lastLeft, source);\n            column.setFirstRightPinned(column === firstRight, source);\n        });\n    }\n\n    public autoSizeColumns(params: {\n        columns: ColKey[];\n        skipHeader?: boolean;\n        skipHeaderGroups?: boolean;\n        stopAtGroup?: ColumnGroup;\n        source?: ColumnEventType;\n    }): void {\n        if (this.shouldQueueResizeOperations) {\n            this.resizeOperationQueue.push(() => this.autoSizeColumns(params));\n            return;\n        }\n\n        const { columns, skipHeader, skipHeaderGroups, stopAtGroup, source = 'api' } = params;\n        // because of column virtualisation, we can only do this function on columns that are\n        // actually rendered, as non-rendered columns (outside the viewport and not rendered\n        // due to column virtualisation) are not present. this can result in all rendered columns\n        // getting narrowed, which in turn introduces more rendered columns on the RHS which\n        // did not get autosized in the original run, leaving the visible grid with columns on\n        // the LHS sized, but RHS no. so we keep looping through the visible columns until\n        // no more cols are available (rendered) to be resized\n\n        // we autosize after animation frames finish in case any cell renderers need to complete first. this can\n        // happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid\n        // hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).\n        this.animationFrameService.flushAllFrames();\n\n        // keep track of which cols we have resized in here\n        const columnsAutosized: Column[] = [];\n        // initialise with anything except 0 so that while loop executes at least once\n        let changesThisTimeAround = -1;\n\n        const shouldSkipHeader = skipHeader != null ? skipHeader : this.gridOptionsService.get('skipHeaderOnAutoSize');\n        const shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;\n\n        while (changesThisTimeAround !== 0) {\n            changesThisTimeAround = 0;\n            this.actionOnGridColumns(columns, (column: Column): boolean => {\n                // if already autosized, skip it\n                if (columnsAutosized.indexOf(column) >= 0) {\n                    return false;\n                }\n                // get how wide this col should be\n                const preferredWidth = this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);\n                // preferredWidth = -1 if this col is not on the screen\n                if (preferredWidth > 0) {\n                    const newWidth = this.normaliseColumnWidth(column, preferredWidth);\n                    column.setActualWidth(newWidth, source);\n                    columnsAutosized.push(column);\n                    changesThisTimeAround++;\n                }\n                return true;\n            }, source);\n        }\n\n        if (!shouldSkipHeaderGroups) {\n            this.autoSizeColumnGroupsByColumns(columns, source, stopAtGroup);\n        }\n\n        this.dispatchColumnResizedEvent(columnsAutosized, true, 'autosizeColumns');\n    }\n\n    private dispatchColumnResizedEvent(columns: Column[] | null, finished: boolean, source: ColumnEventType, flexColumns: Column[] | null = null): void {\n        if (columns && columns.length) {\n            const event: WithoutGridCommon<ColumnResizedEvent> = {\n                type: Events.EVENT_COLUMN_RESIZED,\n                columns: columns,\n                column: columns.length === 1 ? columns[0] : null,\n                flexColumns: flexColumns,\n                finished: finished,\n                source: source\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private dispatchColumnChangedEvent(type: string, columns: Column[], source: ColumnEventType): void {\n        const event: WithoutGridCommon<ColumnValueChangedEvent> = {\n            type: type,\n            columns: columns,\n            column: (columns && columns.length == 1) ? columns[0] : null,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private dispatchColumnMovedEvent(params: {\n            movedColumns: Column[];\n            source: ColumnEventType;\n            toIndex?: number;\n            finished: boolean\n    }): void {\n        const { movedColumns, source, toIndex, finished } = params;\n\n        const event: WithoutGridCommon<ColumnMovedEvent> = {\n            type: Events.EVENT_COLUMN_MOVED,\n            columns: movedColumns,\n            column: movedColumns && movedColumns.length === 1 ?  movedColumns[0] : null,\n            toIndex,\n            finished,\n            source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private dispatchColumnPinnedEvent(changedColumns: Column[], source: ColumnEventType) {\n        if (!changedColumns.length) { return; }\n\n        // if just one column, we use this, otherwise we don't include the col\n        const column: Column | null = changedColumns.length === 1 ? changedColumns[0] : null;\n\n        // only include visible if it's common in all columns\n        const pinned = this.getCommonValue(changedColumns, col => col.getPinned());\n\n        const event: WithoutGridCommon<ColumnPinnedEvent> = {\n            type: Events.EVENT_COLUMN_PINNED,\n            // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'\n            pinned: pinned != null ? pinned : null,\n            columns: changedColumns,\n            column,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private dispatchColumnVisibleEvent(changedColumns: Column[], source: ColumnEventType) {\n        if (!changedColumns.length) { return; }\n\n        // if just one column, we use this, otherwise we don't include the col\n        const column: Column | null = changedColumns.length === 1 ? changedColumns[0] : null;\n\n        // only include visible if it's common in all columns\n        const visible = this.getCommonValue(changedColumns, col => col.isVisible());\n\n        const event: WithoutGridCommon<ColumnVisibleEvent> = {\n            type: Events.EVENT_COLUMN_VISIBLE,\n            visible,\n            columns: changedColumns,\n            column,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public autoSizeColumn(key: Maybe<ColKey>, source: ColumnEventType, skipHeader?: boolean): void {\n        if (key) {\n            this.autoSizeColumns({ columns: [key], skipHeader, skipHeaderGroups: true, source });\n        }\n    }\n\n    private autoSizeColumnGroupsByColumns(keys: ColKey[], source: ColumnEventType, stopAtGroup?: ColumnGroup): Column[] {\n        const columnGroups: Set<ColumnGroup> = new Set();\n        const columns = this.getGridColumns(keys);\n\n        columns.forEach(col => {\n            let parent: ColumnGroup = col.getParent();\n            while (parent && parent != stopAtGroup) {\n                if (!parent.isPadding()) {\n                    columnGroups.add(parent);\n                }\n                parent = parent.getParent();\n            }\n        });\n\n        let headerGroupCtrl: HeaderGroupCellCtrl | undefined;\n\n        const resizedColumns: Column[] = [];\n\n        for (const columnGroup of columnGroups) {\n            for (const headerContainerCtrl of this.ctrlsService.getHeaderRowContainerCtrls()) {\n                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);\n                if (headerGroupCtrl) { break; }\n            }\n            if (headerGroupCtrl) {\n                headerGroupCtrl.resizeLeafColumnsToFit(source);\n            }\n        }\n\n        return resizedColumns;\n    }\n\n    public autoSizeAllColumns(source: ColumnEventType, skipHeader?: boolean): void {\n        if (this.shouldQueueResizeOperations) {\n            this.resizeOperationQueue.push(() => this.autoSizeAllColumns(source, skipHeader));\n            return;\n        }\n\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        this.autoSizeColumns({ columns: allDisplayedColumns, skipHeader, source });\n    }\n\n    // Possible candidate for reuse (alot of recursive traversal duplication)\n    private getColumnsFromTree(rootColumns: IProvidedColumn[]): Column[] {\n        const result: Column[] = [];\n\n        const recursiveFindColumns = (childColumns: IProvidedColumn[]): void => {\n            for (let i = 0; i < childColumns.length; i++) {\n                const child = childColumns[i];\n                if (child instanceof Column) {\n                    result.push(child);\n                } else if (child instanceof ProvidedColumnGroup) {\n                    recursiveFindColumns(child.getChildren());\n                }\n            }\n        };\n\n        recursiveFindColumns(rootColumns);\n\n        return result;\n    }\n\n    public getAllDisplayedTrees(): IHeaderColumn[] | null {\n        if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {\n            return this.displayedTreeLeft\n                .concat(this.displayedTreeCentre)\n                .concat(this.displayedTreeRight);\n        }\n\n        return null;\n    }\n\n    // + columnSelectPanel\n    public getPrimaryColumnTree(): IProvidedColumn[] {\n        return this.primaryColumnTree;\n    }\n\n    // + gridPanel -> for resizing the body and setting top margin\n    public getHeaderRowCount(): number {\n        return this.gridHeaderRowCount;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getDisplayedTreeLeft(): IHeaderColumn[] {\n        return this.displayedTreeLeft;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getDisplayedTreeRight(): IHeaderColumn[] {\n        return this.displayedTreeRight;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getDisplayedTreeCentre(): IHeaderColumn[] {\n        return this.displayedTreeCentre;\n    }\n\n    // gridPanel -> ensureColumnVisible\n    public isColumnDisplayed(column: Column): boolean {\n        return this.getAllDisplayedColumns().indexOf(column) >= 0;\n    }\n\n    // + csvCreator\n    public getAllDisplayedColumns(): Column[] {\n        return this.displayedColumns;\n    }\n\n    public getViewportColumns(): Column[] {\n        return this.viewportColumns;\n    }\n\n    public getDisplayedLeftColumnsForRow(rowNode: RowNode): Column[] {\n        if (!this.colSpanActive) {\n            return this.displayedColumnsLeft;\n        }\n\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);\n    }\n\n    public getDisplayedRightColumnsForRow(rowNode: RowNode): Column[] {\n        if (!this.colSpanActive) {\n            return this.displayedColumnsRight;\n        }\n\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);\n    }\n\n    public isColSpanActive(): boolean {\n        return this.colSpanActive;\n    }\n\n    private getDisplayedColumnsForRow(\n        rowNode: RowNode, displayedColumns: Column[],\n        filterCallback?: (column: Column) => boolean,\n        emptySpaceBeforeColumn?: (column: Column) => boolean\n    ): Column[] {\n        const result: Column[] = [];\n        let lastConsideredCol: Column | null = null;\n\n        for (let i = 0; i < displayedColumns.length; i++) {\n            const col = displayedColumns[i];\n            const maxAllowedColSpan = displayedColumns.length - i;\n            const colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);\n            const columnsToCheckFilter: Column[] = [col];\n\n            if (colSpan > 1) {\n                const colsToRemove = colSpan - 1;\n\n                for (let j = 1; j <= colsToRemove; j++) {\n                    columnsToCheckFilter.push(displayedColumns[i + j]);\n                }\n\n                i += colsToRemove;\n            }\n\n            // see which cols we should take out for column virtualisation\n            let filterPasses: boolean;\n\n            if (filterCallback) {\n                // if user provided a callback, means some columns may not be in the viewport.\n                // the user will NOT provide a callback if we are talking about pinned areas,\n                // as pinned areas have no horizontal scroll and do not virtualise the columns.\n                // if lots of columns, that means column spanning, and we set filterPasses = true\n                // if one or more of the columns spanned pass the filter.\n                filterPasses = false;\n                columnsToCheckFilter.forEach(colForFilter => {\n                    if (filterCallback(colForFilter)) { filterPasses = true; }\n                });\n            } else {\n                filterPasses = true;\n            }\n\n            if (filterPasses) {\n                if (result.length === 0 && lastConsideredCol) {\n                    const gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;\n                    if (gapBeforeColumn) {\n                        result.push(lastConsideredCol);\n                    }\n                }\n                result.push(col);\n            }\n\n            lastConsideredCol = col;\n        }\n\n        return result;\n    }\n\n    // + rowRenderer\n    // if we are not column spanning, this just returns back the virtual centre columns,\n    // however if we are column spanning, then different rows can have different virtual\n    // columns, so we have to work out the list for each individual row.\n    public getViewportCenterColumnsForRow(rowNode: RowNode): Column[] {\n        if (!this.colSpanActive) {\n            return this.viewportColumnsCenter;\n        }\n\n        const emptySpaceBeforeColumn = (col: Column) => {\n            const left = col.getLeft();\n\n            return exists(left) && left > this.viewportLeft;\n        };\n\n        // if doing column virtualisation, then we filter based on the viewport.\n        const filterCallback = this.isColumnVirtualisationSuppressed() ? null : this.isColumnInRowViewport.bind(this);\n\n        return this.getDisplayedColumnsForRow(\n            rowNode,\n            this.displayedColumnsCenter,\n            filterCallback,\n            emptySpaceBeforeColumn\n        );\n    }\n\n    public isColumnAtEdge(col: Column | ColumnGroup, edge: 'first' | 'last'): boolean {\n        const allColumns = this.getAllDisplayedColumns();\n        if (!allColumns.length) { return false; }\n\n        const isFirst = edge === 'first';\n\n        let columnToCompare: Column;\n        if (col instanceof ColumnGroup) {\n            const leafColumns = col.getDisplayedLeafColumns();\n            if (!leafColumns.length) { return false; }\n\n            columnToCompare = isFirst ? leafColumns[0] : last(leafColumns);\n        } else {\n            columnToCompare = col;\n        }\n\n        return (isFirst ? allColumns[0] : last(allColumns)) === columnToCompare;\n    }\n\n    public getAriaColumnIndex(col: Column | ColumnGroup): number {\n        let targetColumn: Column;\n\n        if (col instanceof ColumnGroup) {\n            targetColumn = col.getLeafColumns()[0];\n        } else {\n            targetColumn = col;\n        }\n\n        return this.ariaOrderColumns.indexOf(targetColumn) + 1;\n    }\n\n    private isColumnInHeaderViewport(col: Column): boolean {\n        // for headers, we never filter out autoHeaderHeight columns, if calculating\n        if (col.isAutoHeaderHeight()) { return true; }\n\n        return this.isColumnInRowViewport(col);\n    }\n\n    private isColumnInRowViewport(col: Column): boolean {\n        // we never filter out autoHeight columns, as we need them in the DOM for calculating Auto Height\n        if (col.isAutoHeight()) { return true; }\n\n        const columnLeft = col.getLeft() || 0;\n        const columnRight = columnLeft + col.getActualWidth();\n\n        // adding 200 for buffer size, so some cols off viewport are rendered.\n        // this helps horizontal scrolling so user rarely sees white space (unless\n        // they scroll horizontally fast). however we are conservative, as the more\n        // buffer the slower the vertical redraw speed\n        const leftBounds = this.viewportLeft - 200;\n        const rightBounds = this.viewportRight + 200;\n\n        const columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;\n        const columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;\n\n        return !columnToMuchLeft && !columnToMuchRight;\n    }\n\n    // used by:\n    // + angularGrid -> setting pinned body width\n    // note: this should be cached\n    public getDisplayedColumnsLeftWidth() {\n        return this.getWidthOfColsInList(this.displayedColumnsLeft);\n    }\n\n    // note: this should be cached\n    public getDisplayedColumnsRightWidth() {\n        return this.getWidthOfColsInList(this.displayedColumnsRight);\n    }\n\n    private updatePrimaryColumnList(\n        keys: Maybe<ColKey>[] | null,\n        masterList: Column[],\n        actionIsAdd: boolean,\n        columnCallback: (column: Column) => void,\n        eventType: string,\n        source: ColumnEventType\n    ) {\n\n        if (!keys || missingOrEmpty(keys)) { return; }\n\n        let atLeastOne = false;\n\n        keys.forEach(key => {\n            if(!key) { return; }\n            const columnToAdd = this.getPrimaryColumn(key);\n            if (!columnToAdd) { return; }\n\n            if (actionIsAdd) {\n                if (masterList.indexOf(columnToAdd) >= 0) { return; }\n                masterList.push(columnToAdd);\n            } else {\n                if (masterList.indexOf(columnToAdd) < 0) { return; }\n                removeFromArray(masterList, columnToAdd);\n            }\n\n            columnCallback(columnToAdd);\n            atLeastOne = true;\n        });\n\n        if (!atLeastOne) { return; }\n\n        if (this.autoGroupsNeedBuilding) {\n            this.updateGridColumns();\n        }\n\n        this.updateDisplayedColumns(source);\n\n        const event: WithoutGridCommon<ColumnEvent> = {\n            type: eventType,\n            columns: masterList,\n            column: masterList.length === 1 ? masterList[0] : null,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setRowGroupColumns(colKeys: ColKey[], source: ColumnEventType): void {\n        this.autoGroupsNeedBuilding = true;\n        this.setPrimaryColumnList(colKeys, this.rowGroupColumns,\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED, true,\n            this.setRowGroupActive.bind(this),\n            source);\n    }\n\n    private setRowGroupActive(active: boolean, column: Column, source: ColumnEventType): void {\n        if (active === column.isRowGroupActive()) { return; }\n\n        column.setRowGroupActive(active, source);\n\n        if (active && !this.gridOptionsService.get('suppressRowGroupHidesColumns')) {\n            this.setColumnsVisible([column], false, source);\n        }\n        if (!active && !this.gridOptionsService.get('suppressMakeColumnVisibleAfterUnGroup')) {\n            this.setColumnsVisible([column], true, source);\n        }\n    }\n\n    public addRowGroupColumns(keys: Maybe<ColKey>[], source: ColumnEventType): void {\n        this.autoGroupsNeedBuilding = true;\n        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true,\n            this.setRowGroupActive.bind(this, true),\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            source\n        );\n    }\n\n    public removeRowGroupColumns(keys: Maybe<ColKey>[] | null, source: ColumnEventType): void {\n        this.autoGroupsNeedBuilding = true;\n        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false,\n            this.setRowGroupActive.bind(this, false),\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            source);\n    }\n\n    public addPivotColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updatePrimaryColumnList(keys, this.pivotColumns, true,\n            column => column.setPivotActive(true, source),\n            Events.EVENT_COLUMN_PIVOT_CHANGED, source);\n    }\n\n    public setPivotColumns(colKeys: ColKey[], source: ColumnEventType): void {\n        this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, true,\n            (added: boolean, column: Column) => {\n                column.setPivotActive(added, source);\n            }, source\n        );\n    }\n\n    public removePivotColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updatePrimaryColumnList(\n            keys,\n            this.pivotColumns,\n            false,\n            column => column.setPivotActive(false, source),\n            Events.EVENT_COLUMN_PIVOT_CHANGED,\n            source\n        );\n    }\n\n    private setPrimaryColumnList(\n        colKeys: ColKey[],\n        masterList: Column[],\n        eventName: string,\n        detectOrderChange: boolean,\n        columnCallback: (added: boolean, column: Column) => void,\n        source: ColumnEventType,\n    ): void {\n        if (!this.gridColumns) { return; }\n\n        const changes: Map<Column, number> = new Map();\n        // store all original cols and their index.\n        masterList.forEach((col, idx) => changes.set(col, idx));\n\n        masterList.length = 0;\n\n        if (exists(colKeys)) {\n            colKeys.forEach(key => {\n                const column = this.getPrimaryColumn(key);\n                if (column) {\n                    masterList.push(column);\n                }\n            });\n        }\n\n        masterList.forEach((col, idx) => {\n            const oldIndex = changes.get(col);\n            // if the column was not in the list, we add it as it's a change\n            // idx is irrelevant now.\n            if (oldIndex === undefined) {\n                changes.set(col, 0);\n                return;\n            }\n\n            if (detectOrderChange && oldIndex !== idx) {\n                // if we're detecting order changes, and the indexes differ, we retain this as it's changed\n                return;\n            }\n            \n            // otherwise remove this col, as it's unchanged.\n            changes.delete(col);\n        });\n\n        (this.primaryColumns || []).forEach(column => {\n            const added = masterList.indexOf(column) >= 0;\n            columnCallback(added, column);\n        });\n\n        if (this.autoGroupsNeedBuilding) {\n            this.updateGridColumns();\n        }\n\n        this.updateDisplayedColumns(source);\n\n        this.dispatchColumnChangedEvent(eventName, [...changes.keys()], source);\n    }\n\n    public setValueColumns(colKeys: ColKey[], source: ColumnEventType): void {\n        this.setPrimaryColumnList(colKeys, this.valueColumns,\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            false,\n            this.setValueActive.bind(this),\n            source\n        );\n    }\n\n    private setValueActive(active: boolean, column: Column, source: ColumnEventType): void {\n        if (active === column.isValueActive()) { return; }\n\n        column.setValueActive(active, source);\n\n        if (active && !column.getAggFunc()) {\n            const initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);\n            column.setAggFunc(initialAggFunc);\n        }\n    }\n\n    public addValueColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updatePrimaryColumnList(keys, this.valueColumns, true,\n            this.setValueActive.bind(this, true),\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            source\n        );\n    }\n\n    public removeValueColumns(keys: ColKey[], source: ColumnEventType): void {\n        this.updatePrimaryColumnList(keys, this.valueColumns, false,\n            this.setValueActive.bind(this, false),\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            source\n        );\n    }\n\n    // returns the width we can set to this col, taking into consideration min and max widths\n    private normaliseColumnWidth(column: Column, newWidth: number): number {\n        const minWidth = column.getMinWidth();\n\n        if (exists(minWidth) && newWidth < minWidth) {\n            newWidth = minWidth;\n        }\n\n        const maxWidth = column.getMaxWidth();\n        if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {\n            newWidth = maxWidth;\n        }\n\n        return newWidth;\n    }\n\n    private getPrimaryOrGridColumn(key: ColKey): Column | null {\n        const column = this.getPrimaryColumn(key);\n\n        return column || this.getGridColumn(key);\n    }\n\n    public setColumnWidths(\n        columnWidths: {\n            key: ColKey, // @key - the column who's size we want to change\n            newWidth: number; // @newWidth - width in pixels\n        }[],\n        shiftKey: boolean, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column\n        finished: boolean, // @finished - ends up in the event, tells the user if more events are to come\n        source: ColumnEventType\n    ): void {\n        const sets: ColumnResizeSet[] = [];\n\n        columnWidths.forEach(columnWidth => {\n            const col = this.getPrimaryOrGridColumn(columnWidth.key);\n\n            if (!col) { return; }\n\n            sets.push({\n                width: columnWidth.newWidth,\n                ratios: [1],\n                columns: [col]\n            });\n\n            // if user wants to do shift resize by default, then we invert the shift operation\n            const defaultIsShift = this.gridOptionsService.get('colResizeDefault') === 'shift';\n\n            if (defaultIsShift) {\n                shiftKey = !shiftKey;\n            }\n\n            if (shiftKey) {\n                const otherCol = this.getDisplayedColAfter(col);\n                if (!otherCol) { return; }\n\n                const widthDiff = col.getActualWidth() - columnWidth.newWidth;\n                const otherColWidth = otherCol.getActualWidth() + widthDiff;\n\n                sets.push({\n                    width: otherColWidth,\n                    ratios: [1],\n                    columns: [otherCol]\n                });\n            }\n        });\n\n        if (sets.length === 0) { return; }\n\n        this.resizeColumnSets({\n            resizeSets: sets,\n            finished,\n            source\n        });\n\n    }\n\n    private checkMinAndMaxWidthsForSet(columnResizeSet: ColumnResizeSet): boolean {\n        const { columns, width } = columnResizeSet;\n\n        // every col has a min width, so sum them all up and see if we have enough room\n        // for all the min widths\n        let minWidthAccumulated = 0;\n        let maxWidthAccumulated = 0;\n        let maxWidthActive = true;\n\n        columns.forEach(col => {\n            const minWidth = col.getMinWidth();\n            minWidthAccumulated += minWidth || 0;\n\n            const maxWidth = col.getMaxWidth();\n            if (exists(maxWidth) && maxWidth > 0) {\n                maxWidthAccumulated += maxWidth;\n            } else {\n                // if at least one columns has no max width, it means the group of columns\n                // then has no max width, as at least one column can take as much width as possible\n                maxWidthActive = false;\n            }\n        });\n\n        const minWidthPasses = width >= minWidthAccumulated;\n        const maxWidthPasses = !maxWidthActive || (width <= maxWidthAccumulated);\n\n        return minWidthPasses && maxWidthPasses;\n    }\n\n    // method takes sets of columns and resizes them. either all sets will be resized, or nothing\n    // be resized. this is used for example when user tries to resize a group and holds shift key,\n    // then both the current group (grows), and the adjacent group (shrinks), will get resized,\n    // so that's two sets for this method.\n    public resizeColumnSets(params: {\n        resizeSets: ColumnResizeSet[],\n        finished: boolean,\n        source: ColumnEventType\n    }): void {\n        const { resizeSets, finished, source } = params;\n        const passMinMaxCheck = !resizeSets || resizeSets.every(columnResizeSet => this.checkMinAndMaxWidthsForSet(columnResizeSet));\n\n        if (!passMinMaxCheck) {\n            // even though we are not going to resize beyond min/max size, we still need to dispatch event when finished\n            if (finished) {\n                const columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;\n                this.dispatchColumnResizedEvent(columns, finished, source);\n            }\n\n            return; // don't resize!\n        }\n\n        const changedCols: Column[] = [];\n        const allResizedCols: Column[] = [];\n\n        resizeSets.forEach(set => {\n            const { width, columns, ratios } = set;\n\n            // keep track of pixels used, and last column gets the remaining,\n            // to cater for rounding errors, and min width adjustments\n            const newWidths: { [colId: string]: number; } = {};\n            const finishedCols: { [colId: string]: boolean; } = {};\n\n            columns.forEach(col => allResizedCols.push(col));\n\n            // the loop below goes through each col. if a col exceeds it's min/max width,\n            // it then gets set to its min/max width and the column is removed marked as 'finished'\n            // and the calculation is done again leaving this column out. take for example columns\n            // {A, width: 50, maxWidth: 100}\n            // {B, width: 50}\n            // {C, width: 50}\n            // and then the set is set to width 600 - on the first pass the grid tries to set each column\n            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked\n            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up\n            // splitting the remaining 500 pixels.\n            let finishedColsGrew = true;\n            let loopCount = 0;\n\n            while (finishedColsGrew) {\n                loopCount++;\n                if (loopCount > 1000) {\n                    // this should never happen, but in the future, someone might introduce a bug here,\n                    // so we stop the browser from hanging and report bug properly\n                    console.error('AG Grid: infinite loop in resizeColumnSets');\n                    break;\n                }\n\n                finishedColsGrew = false;\n\n                const subsetCols: Column[] = [];\n                let subsetRatioTotal = 0;\n                let pixelsToDistribute = width;\n\n                columns.forEach((col: Column, index: number) => {\n                    const thisColFinished = finishedCols[col.getId()];\n                    if (thisColFinished) {\n                        pixelsToDistribute -= newWidths[col.getId()];\n                    } else {\n                        subsetCols.push(col);\n                        const ratioThisCol = ratios[index];\n                        subsetRatioTotal += ratioThisCol;\n                    }\n                });\n\n                // because we are not using all of the ratios (cols can be missing),\n                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,\n                // and so the ratioScale will be 1.\n                const ratioScale = 1 / subsetRatioTotal;\n\n                subsetCols.forEach((col: Column, index: number) => {\n                    const lastCol = index === (subsetCols.length - 1);\n                    let colNewWidth: number;\n\n                    if (lastCol) {\n                        colNewWidth = pixelsToDistribute;\n                    } else {\n                        colNewWidth = Math.round(ratios[index] * width * ratioScale);\n                        pixelsToDistribute -= colNewWidth;\n                    }\n\n                    const minWidth = col.getMinWidth();\n                    const maxWidth = col.getMaxWidth();\n\n                    if (exists(minWidth) && colNewWidth < minWidth) {\n                        colNewWidth = minWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {\n                        colNewWidth = maxWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    }\n\n                    newWidths[col.getId()] = colNewWidth;\n                });\n            }\n\n            columns.forEach(col => {\n                const newWidth = newWidths[col.getId()];\n                const actualWidth = col.getActualWidth();\n\n                if (actualWidth !== newWidth) {\n                    col.setActualWidth(newWidth, source);\n                    changedCols.push(col);\n                }\n            });\n        });\n\n        // if no cols changed, then no need to update more or send event.\n        const atLeastOneColChanged = changedCols.length > 0;\n\n        let flexedCols: Column[] = [];\n\n        if (atLeastOneColChanged) {\n            flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });\n            this.setLeftValues(source);\n            this.updateBodyWidths();\n            this.checkViewportColumns();\n        }\n\n        // check for change first, to avoid unnecessary firing of events\n        // however we always dispatch 'finished' events. this is important\n        // when groups are resized, as if the group is changing slowly,\n        // eg 1 pixel at a time, then each change will dispatch change events\n        // in all the columns in the group, but only one with get the pixel.\n        const colsForEvent = allResizedCols.concat(flexedCols);\n\n        if (atLeastOneColChanged || finished) {\n            this.dispatchColumnResizedEvent(colsForEvent, finished, source, flexedCols);\n        }\n    }\n\n    public setColumnAggFunc(key: Maybe<ColKey>, aggFunc: string | IAggFunc | null | undefined, source: ColumnEventType): void {\n        if (!key) { return; }\n\n        const column = this.getPrimaryColumn(key);\n        if (!column) { return; }\n\n        column.setAggFunc(aggFunc);\n\n        this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);\n    }\n\n    public moveRowGroupColumn(fromIndex: number, toIndex: number, source: ColumnEventType): void {\n        if (this.isRowGroupEmpty()) { return; }\n\n        const column = this.rowGroupColumns[fromIndex];\n\n        const impactedColumns = this.rowGroupColumns.slice(fromIndex, toIndex);\n        this.rowGroupColumns.splice(fromIndex, 1);\n        this.rowGroupColumns.splice(toIndex, 0, column);\n\n        const event: WithoutGridCommon<ColumnRowGroupChangedEvent> = {\n            type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            columns: impactedColumns,\n            column: impactedColumns.length === 1 ? impactedColumns[0] : null,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public moveColumns(columnsToMoveKeys: ColKey[], toIndex: number, source: ColumnEventType, finished: boolean = true): void {\n        if (!this.gridColumns) { return; }\n\n        this.columnAnimationService.start();\n\n        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {\n            console.warn('AG Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);\n            console.warn('AG Grid: remember that you should not count the moving columns when calculating the new index');\n            return;\n        }\n\n        // we want to pull all the columns out first and put them into an ordered list\n        const movedColumns = this.getGridColumns(columnsToMoveKeys);\n        const failedRules = !this.doesMovePassRules(movedColumns, toIndex);\n\n        if (failedRules) { return; }\n\n        moveInArray(this.gridColumns, movedColumns, toIndex);\n        this.updateDisplayedColumns(source);\n\n        this.dispatchColumnMovedEvent({ movedColumns, source, toIndex, finished });\n        this.columnAnimationService.finish();\n    }\n\n    public doesMovePassRules(columnsToMove: Column[], toIndex: number): boolean {\n        // make a copy of what the grid columns would look like after the move\n        const proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);\n        return this.doesOrderPassRules(proposedColumnOrder);\n    }\n\n    public doesOrderPassRules(gridOrder: Column[]) {\n        if (!this.doesMovePassMarryChildren(gridOrder)) {\n            return false;\n        }\n        if (!this.doesMovePassLockedPositions(gridOrder)) {\n            return false;\n        }\n        return true;\n    }\n\n    public getProposedColumnOrder(columnsToMove: Column[], toIndex: number): Column[] {\n        const proposedColumnOrder = this.gridColumns.slice();\n        moveInArray(proposedColumnOrder, columnsToMove, toIndex);\n        return proposedColumnOrder;\n    }\n\n    // returns the provided cols sorted in same order as they appear in grid columns. eg if grid columns\n    // contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]\n    public sortColumnsLikeGridColumns(cols: Column[]): void {\n        if (!cols || cols.length <= 1) { return; }\n\n        const notAllColsInGridColumns = cols.filter(c => this.gridColumns.indexOf(c) < 0).length > 0;\n        if (notAllColsInGridColumns) { return; }\n\n        cols.sort((a: Column, b: Column) => {\n            const indexA = this.gridColumns.indexOf(a);\n            const indexB = this.gridColumns.indexOf(b);\n            return indexA - indexB;\n        });\n    }\n\n    public doesMovePassLockedPositions(proposedColumnOrder: Column[]): boolean {\n         // Placement is a number indicating 'left' 'center' or 'right' as 0 1 2\n        let lastPlacement = 0;\n        let rulePassed = true;\n        const lockPositionToPlacement = (position: ColDef['lockPosition']) => {\n            if (!position) { // false or undefined\n                return 1;\n            }\n            if (position === true) {\n                return 0;\n            }\n            return position === 'left' ? 0 : 2; // Otherwise 'right'\n        };\n\n        proposedColumnOrder.forEach(col => {\n            const placement = lockPositionToPlacement(col.getColDef().lockPosition);\n            if (placement < lastPlacement) { // If placement goes down, we're not in the correct order\n                rulePassed = false;\n            }\n            lastPlacement = placement;\n        });\n\n        return rulePassed;\n    }\n\n    public doesMovePassMarryChildren(allColumnsCopy: Column[]): boolean {\n        let rulePassed = true;\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, child => {\n            if (!(child instanceof ProvidedColumnGroup)) { return; }\n\n            const columnGroup = child;\n            const colGroupDef = columnGroup.getColGroupDef();\n            const marryChildren = colGroupDef && colGroupDef.marryChildren;\n\n            if (!marryChildren) { return; }\n\n            const newIndexes: number[] = [];\n            columnGroup.getLeafColumns().forEach(col => {\n                const newColIndex = allColumnsCopy.indexOf(col);\n                newIndexes.push(newColIndex);\n            });\n\n            const maxIndex = Math.max.apply(Math, newIndexes);\n            const minIndex = Math.min.apply(Math, newIndexes);\n\n            // spread is how far the first column in this group is away from the last column\n            const spread = maxIndex - minIndex;\n            const maxSpread = columnGroup.getLeafColumns().length - 1;\n\n            // if the columns\n            if (spread > maxSpread) {\n                rulePassed = false;\n            }\n\n            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)\n            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));\n        });\n\n        return rulePassed;\n    }\n\n    public moveColumnByIndex(fromIndex: number, toIndex: number, source: ColumnEventType): void {\n        if (!this.gridColumns) { return; }\n\n        const column = this.gridColumns[fromIndex];\n        this.moveColumns([column], toIndex, source);\n    }\n\n    public getColumnDefs(): (ColDef | ColGroupDef)[] | undefined {\n        if (!this.primaryColumns) { return; }\n\n        const cols = this.primaryColumns.slice();\n\n        if (this.gridColsArePrimary) {\n            cols.sort((a: Column, b: Column) => this.gridColumns.indexOf(a) - this.gridColumns.indexOf(b));\n        } else if (this.lastPrimaryOrder) {\n            cols.sort((a: Column, b: Column) => this.lastPrimaryOrder.indexOf(a) - this.lastPrimaryOrder.indexOf(b));\n        }\n\n        return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);\n    }\n\n    // used by:\n    // + angularGrid -> for setting body width\n    // + rowController -> setting main row widths (when inserting and resizing)\n    // need to cache this\n    public getBodyContainerWidth(): number {\n        return this.bodyWidth;\n    }\n\n    public getContainerWidth(pinned: ColumnPinnedType): number {\n        switch (pinned) {\n            case 'left':\n                return this.leftWidth;\n            case 'right':\n                return this.rightWidth;\n            default:\n                return this.bodyWidth;\n        }\n    }\n\n    // after setColumnWidth or updateGroupsAndDisplayedColumns\n    private updateBodyWidths(): void {\n        const newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);\n        const newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);\n        const newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);\n\n        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed\n        // columns, due to RTL inverting the y coordinates\n        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;\n\n        const atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;\n\n        if (atLeastOneChanged) {\n            this.bodyWidth = newBodyWidth;\n            this.leftWidth = newLeftWidth;\n            this.rightWidth = newRightWidth;\n\n            // this event is fired to allow the grid viewport to resize before the\n            // scrollbar tries to update its visibility.\n            const evt: WithoutGridCommon<ColumnContainerWidthChanged> = {\n                type: Events.EVENT_COLUMN_CONTAINER_WIDTH_CHANGED,\n            };\n            this.eventService.dispatchEvent(evt);\n\n            // when this fires, it is picked up by the gridPanel, which ends up in\n            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setViewportPosition()\n            const event: WithoutGridCommon<DisplayedColumnsWidthChangedEvent> = {\n                type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // + rowController\n    public getValueColumns(): Column[] {\n        return this.valueColumns ? this.valueColumns : [];\n    }\n\n    // + rowController\n    public getPivotColumns(): Column[] {\n        return this.pivotColumns ? this.pivotColumns : [];\n    }\n\n    // + clientSideRowModel\n    public isPivotActive(): boolean {\n        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;\n    }\n\n    // + toolPanel\n    public getRowGroupColumns(): Column[] {\n        return this.rowGroupColumns ? this.rowGroupColumns : [];\n    }\n\n    // + rowController -> while inserting rows\n    public getDisplayedCenterColumns(): Column[] {\n        return this.displayedColumnsCenter;\n    }\n\n    // + rowController -> while inserting rows\n    public getDisplayedLeftColumns(): Column[] {\n        return this.displayedColumnsLeft;\n    }\n\n    public getDisplayedRightColumns(): Column[] {\n        return this.displayedColumnsRight;\n    }\n\n    public getDisplayedColumns(type: ColumnPinnedType): Column[] {\n        switch (type) {\n            case 'left':\n                return this.getDisplayedLeftColumns();\n            case 'right':\n                return this.getDisplayedRightColumns();\n            default:\n                return this.getDisplayedCenterColumns();\n        }\n    }\n\n    // used by:\n    // + clientSideRowController -> sorting, building quick filter text\n    // + headerRenderer -> sorting (clearing icon)\n    public getAllPrimaryColumns(): Column[] | null {\n        return this.primaryColumns ? this.primaryColumns : null;\n    }\n\n    public getSecondaryColumns(): Column[] | null {\n        return this.secondaryColumns ? this.secondaryColumns : null;\n    }\n\n    public getAllColumnsForQuickFilter(): Column[] {\n        return this.columnsForQuickFilter;\n    }\n\n    // + moveColumnController\n    public getAllGridColumns(): Column[] {\n        return this.gridColumns ?? [];\n    }\n\n    public isEmpty(): boolean {\n        return missingOrEmpty(this.gridColumns);\n    }\n\n    public isRowGroupEmpty(): boolean {\n        return missingOrEmpty(this.rowGroupColumns);\n    }\n\n    public setColumnsVisible(keys: (string | Column)[], visible = false, source: ColumnEventType): void {\n        this.applyColumnState({\n            state: keys.map<ColumnState>(\n                key => ({\n                    colId: typeof key === 'string' ? key : key.getColId(),\n                    hide: !visible,\n                })\n            ),\n        }, source);\n    }\n\n    public setColumnsPinned(keys: Maybe<ColKey>[], pinned: ColumnPinnedType, source: ColumnEventType): void {\n        if (!this.gridColumns) { return; }\n\n        if (this.gridOptionsService.isDomLayout('print')) {\n            console.warn(`AG Grid: Changing the column pinning status is not allowed with domLayout='print'`);\n            return;\n        }\n        this.columnAnimationService.start();\n\n        let actualPinned: ColumnPinnedType;\n        if (pinned === true || pinned === 'left') {\n            actualPinned = 'left';\n        } else if (pinned === 'right') {\n            actualPinned = 'right';\n        } else {\n            actualPinned = null;\n        }\n\n        this.actionOnGridColumns(keys, (col: Column): boolean => {\n            if (col.getPinned() !== actualPinned) {\n                col.setPinned(actualPinned);\n                return true;\n            }\n            return false;\n        }, source, () => {\n            const event: WithoutGridCommon<ColumnPinnedEvent> = {\n                type: Events.EVENT_COLUMN_PINNED,\n                pinned: actualPinned,\n                column: null,\n                columns: null,\n                source: source\n            };\n            return event;\n        });\n\n        this.columnAnimationService.finish();\n    }\n\n    // does an action on a set of columns. provides common functionality for looking up the\n    // columns based on key, getting a list of effected columns, and then updated the event\n    // with either one column (if it was just one col) or a list of columns\n    // used by: autoResize, setVisible, setPinned\n    private actionOnGridColumns(// the column keys this action will be on\n        keys: Maybe<ColKey>[],\n        // the action to do - if this returns false, the column was skipped\n        // and won't be included in the event\n        action: (column: Column) => boolean,\n        // should return back a column event of the right type\n        source: ColumnEventType,\n        createEvent?: () => WithoutGridCommon<ColumnEvent>): void {\n\n        if (missingOrEmpty(keys)) { return; }\n\n        const updatedColumns: Column[] = [];\n\n        keys.forEach(key => {\n            if(!key) { return; }\n            const column = this.getGridColumn(key);\n            if (!column) { return; }\n\n            // need to check for false with type (ie !== instead of !=)\n            // as not returning anything (undefined) would also be false\n            const resultOfAction = action(column);\n            if (resultOfAction !== false) {\n                updatedColumns.push(column);\n            }\n        });\n\n        if (!updatedColumns.length) { return; }\n\n        this.updateDisplayedColumns(source);\n\n        if (exists(createEvent) && createEvent) {\n            const event = createEvent();\n\n            event.columns = updatedColumns;\n            event.column = updatedColumns.length === 1 ? updatedColumns[0] : null;\n\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public getDisplayedColBefore(col: Column): Column | null {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const oldIndex = allDisplayedColumns.indexOf(col);\n\n        if (oldIndex > 0) {\n            return allDisplayedColumns[oldIndex - 1];\n        }\n\n        return null;\n    }\n\n    // used by:\n    // + rowRenderer -> for navigation\n    public getDisplayedColAfter(col: Column): Column | null {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const oldIndex = allDisplayedColumns.indexOf(col);\n\n        if (oldIndex < (allDisplayedColumns.length - 1)) {\n            return allDisplayedColumns[oldIndex + 1];\n        }\n\n        return null;\n    }\n\n    public getDisplayedGroupAfter(columnGroup: ColumnGroup): ColumnGroup | null {\n        return this.getDisplayedGroupAtDirection(columnGroup, 'After');\n    }\n\n    public getDisplayedGroupBefore(columnGroup: ColumnGroup): ColumnGroup | null {\n        return this.getDisplayedGroupAtDirection(columnGroup, 'Before');\n    }\n\n    public getDisplayedGroupAtDirection(columnGroup: ColumnGroup, direction: 'After' | 'Before'): ColumnGroup | null {\n        // pick the last displayed column in this group\n        const requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();\n        const colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();\n        const col: Column | null = direction === 'After' ? last(colGroupLeafColumns) : colGroupLeafColumns[0];\n        const getDisplayColMethod: 'getDisplayedColAfter' | 'getDisplayedColBefore' = `getDisplayedCol${direction}` as any;\n\n        while (true) {\n            // keep moving to the next col, until we get to another group\n            const column = this[getDisplayColMethod](col);\n\n            if (!column) { return null; }\n\n            const groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);\n\n            if (groupPointer !== columnGroup) {\n                return groupPointer;\n            }\n        }\n    }\n\n    public getColumnGroupAtLevel(column: Column, level: number): ColumnGroup | null {\n        // get group at same level as the one we are looking for\n        let groupPointer: ColumnGroup = column.getParent();\n        let originalGroupLevel: number;\n        let groupPointerLevel: number;\n\n        while (true) {\n            const groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();\n            originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();\n            groupPointerLevel = groupPointer.getPaddingLevel();\n\n            if (originalGroupLevel + groupPointerLevel <= level) { break; }\n            groupPointer = groupPointer.getParent();\n        }\n\n        return groupPointer;\n    }\n\n    public isPinningLeft(): boolean {\n        return this.displayedColumnsLeft.length > 0;\n    }\n\n    public isPinningRight(): boolean {\n        return this.displayedColumnsRight.length > 0;\n    }\n\n    public getPrimaryAndSecondaryAndAutoColumns(): Column[] {\n        return ([] as Column[]).concat(...[\n            this.primaryColumns || [],\n            this.groupAutoColumns || [],\n            this.secondaryColumns || [],\n        ]);\n    }\n\n    private createStateItemFromColumn(column: Column): ColumnState {\n        const rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;\n        const pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;\n        const aggFunc = column.isValueActive() ? column.getAggFunc() : null;\n        const sort = column.getSort() != null ? column.getSort() : null;\n        const sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;\n        const flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;\n\n        const res: ColumnState = {\n            colId: column.getColId(),\n            width: column.getActualWidth(),\n            hide: !column.isVisible(),\n            pinned: column.getPinned(),\n            sort,\n            sortIndex,\n            aggFunc,\n            rowGroup: column.isRowGroupActive(),\n            rowGroupIndex,\n            pivot: column.isPivotActive(),\n            pivotIndex: pivotIndex,\n            flex\n        };\n\n        return res;\n    }\n\n    public getColumnState(): ColumnState[] {\n        if (missing(this.primaryColumns) || !this.isAlive()) { return []; }\n\n        const colsForState = this.getPrimaryAndSecondaryAndAutoColumns();\n        const res: ColumnState[] = colsForState.map(this.createStateItemFromColumn.bind(this));\n\n        this.orderColumnStateList(res);\n\n        return res;\n    }\n\n    private orderColumnStateList(columnStateList: any[]): void {\n        // for fast looking, store the index of each column\n        const colIdToGridIndexMap = convertToMap<string, number>(this.gridColumns.map((col, index) => [col.getColId(), index]));\n\n        columnStateList.sort((itemA: any, itemB: any) => {\n            const posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;\n            const posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;\n            return posA! - posB!;\n        });\n    }\n\n    public resetColumnState(source: ColumnEventType): void {\n        if (missingOrEmpty(this.primaryColumns)) { return; }\n\n        // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,\n        // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.\n        // As a work around, developers should just put lockPosition columns first in their colDef list.\n\n        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list\n        const primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);\n        const columnStates: ColumnState[] = [];\n\n        // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.\n        // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,\n        // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000\n        let letRowGroupIndex = 1000;\n        let letPivotIndex = 1000;\n\n        let colsToProcess: Column[] = [];\n        if (this.groupAutoColumns) {\n            colsToProcess = colsToProcess.concat(this.groupAutoColumns);\n        }\n\n        if (primaryColumns) {\n            colsToProcess = colsToProcess.concat(primaryColumns);\n        }\n\n        colsToProcess.forEach(column => {\n            const stateItem = this.getColumnStateFromColDef(column);\n\n            if (missing(stateItem.rowGroupIndex) && stateItem.rowGroup) {\n                stateItem.rowGroupIndex = letRowGroupIndex++;\n            }\n\n            if (missing(stateItem.pivotIndex) && stateItem.pivot) {\n                stateItem.pivotIndex = letPivotIndex++;\n            }\n\n            columnStates.push(stateItem);\n        });\n\n        this.applyColumnState({ state: columnStates, applyOrder: true }, source);\n    }\n\n    public getColumnStateFromColDef(column: Column): ColumnState {\n        const getValueOrNull = (a: any, b: any) => a != null ? a : b != null ? b : null;\n\n        const colDef = column.getColDef();\n        const sort = getValueOrNull(colDef.sort, colDef.initialSort);\n        const sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);\n        const hide = getValueOrNull(colDef.hide, colDef.initialHide);\n        const pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);\n\n        const width = getValueOrNull(colDef.width, colDef.initialWidth);\n        const flex = getValueOrNull(colDef.flex, colDef.initialFlex);\n\n        let rowGroupIndex: number | null | undefined = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);\n        let rowGroup: boolean | null | undefined = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);\n\n        if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {\n            rowGroupIndex = null;\n            rowGroup = null;\n        }\n\n        let pivotIndex: number | null | undefined = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);\n        let pivot: boolean | null | undefined = getValueOrNull(colDef.pivot, colDef.initialPivot);\n\n        if (pivotIndex == null && (pivot == null || pivot == false)) {\n            pivotIndex = null;\n            pivot = null;\n        }\n\n        const aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);\n\n       return {\n            colId: column.getColId(),\n            sort,\n            sortIndex,\n            hide,\n            pinned,\n            width,\n            flex,\n            rowGroup,\n            rowGroupIndex,\n            pivot,\n            pivotIndex,\n            aggFunc,\n        };\n    }\n\n    public applyColumnState(params: ApplyColumnStateParams, source: ColumnEventType): boolean {\n        if (missingOrEmpty(this.primaryColumns)) { return false; }\n\n        if (params && params.state && !params.state.forEach) {\n            console.warn('AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.');\n            return false;\n        }\n\n        const applyStates = (states: ColumnState[], existingColumns: Column[], getById: (id: string) => Column | null) => {\n            const dispatchEventsFunc = this.compareColumnStatesAndDispatchEvents(source);\n            this.autoGroupsNeedBuilding = true;\n\n            // at the end below, this list will have all columns we got no state for\n            const columnsWithNoState = existingColumns.slice();\n\n            const rowGroupIndexes: { [key: string]: number; } = {};\n            const pivotIndexes: { [key: string]: number; } = {};\n            const autoGroupColumnStates: ColumnState[] = [];\n            // If pivoting is modified, these are the states we try to reapply after\n            // the secondary columns are re-generated\n            const unmatchedAndAutoStates: ColumnState[] = [];\n            let unmatchedCount = 0;\n\n            const previousRowGroupCols = this.rowGroupColumns.slice();\n            const previousPivotCols = this.pivotColumns.slice();\n\n            states.forEach((state: ColumnState) => {\n                const colId = state.colId || '';\n\n                // auto group columns are re-created so deferring syncing with ColumnState\n                const isAutoGroupColumn = colId.startsWith(GROUP_AUTO_COLUMN_ID);\n                if (isAutoGroupColumn) {\n                    autoGroupColumnStates.push(state);\n                    unmatchedAndAutoStates.push(state);\n                    return;\n                }\n\n                const column = getById(colId);\n\n                if (!column) {\n                    unmatchedAndAutoStates.push(state);\n                    unmatchedCount += 1;\n                } else {\n                    this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes,\n                        pivotIndexes, false, source);\n                    removeFromArray(columnsWithNoState, column);\n                }\n            });\n\n            // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden\n            const applyDefaultsFunc = (col: Column) =>\n                this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes,\n                    pivotIndexes, false, source);\n\n            columnsWithNoState.forEach(applyDefaultsFunc);\n\n            // sort the lists according to the indexes that were provided\n            const comparator = (indexes: { [key: string]: number; }, oldList: Column[], colA: Column, colB: Column) => {\n\n                const indexA = indexes[colA.getId()];\n                const indexB = indexes[colB.getId()];\n\n                const aHasIndex = indexA != null;\n                const bHasIndex = indexB != null;\n\n                if (aHasIndex && bHasIndex) {\n                    // both a and b are new cols with index, so sort on index\n                    return indexA - indexB;\n                }\n\n                if (aHasIndex) {\n                    // a has an index, so it should be before a\n                    return -1;\n                }\n\n                if (bHasIndex) {\n                    // b has an index, so it should be before a\n                    return 1;\n                }\n\n                const oldIndexA = oldList.indexOf(colA);\n                const oldIndexB = oldList.indexOf(colB);\n\n                const aHasOldIndex = oldIndexA >= 0;\n                const bHasOldIndex = oldIndexB >= 0;\n\n                if (aHasOldIndex && bHasOldIndex) {\n                    // both a and b are old cols, so sort based on last order\n                    return oldIndexA - oldIndexB;\n                }\n\n                if (aHasOldIndex) {\n                    // a is old, b is new, so b is first\n                    return -1;\n                }\n\n                // this bit does matter, means both are new cols\n                // but without index or that b is old and a is new\n                return 1;\n            };\n\n            this.rowGroupColumns.sort(comparator.bind(this, rowGroupIndexes, previousRowGroupCols));\n            this.pivotColumns.sort(comparator.bind(this, pivotIndexes, previousPivotCols));\n\n            this.updateGridColumns();\n\n            // sync newly created auto group columns with ColumnState\n            const autoGroupColsCopy = this.groupAutoColumns ? this.groupAutoColumns.slice() : [];\n            autoGroupColumnStates.forEach(stateItem => {\n                const autoCol = this.getAutoColumn(stateItem.colId!);\n                removeFromArray(autoGroupColsCopy, autoCol);\n                this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);\n            });\n            // autogroup cols with nothing else, apply the default\n            autoGroupColsCopy.forEach(applyDefaultsFunc);\n\n            this.applyOrderAfterApplyState(params);\n            this.updateDisplayedColumns(source);\n            this.dispatchEverythingChanged(source);\n\n            dispatchEventsFunc(); // Will trigger secondary column changes if pivoting modified\n            return { unmatchedAndAutoStates, unmatchedCount };\n        };\n\n        this.columnAnimationService.start();\n\n        let {\n            unmatchedAndAutoStates,\n            unmatchedCount,\n        } = applyStates(params.state || [], this.primaryColumns || [], (id) => this.getPrimaryColumn(id));\n\n        // If there are still states left over, see if we can apply them to newly generated\n        // secondary or auto columns. Also if defaults exist, ensure they are applied to secondary cols\n        if (unmatchedAndAutoStates.length > 0 || exists(params.defaultState)) {\n            unmatchedCount = applyStates(\n                unmatchedAndAutoStates,\n                this.secondaryColumns || [],\n                (id) => this.getSecondaryColumn(id)\n            ).unmatchedCount;\n        }\n        this.columnAnimationService.finish();\n\n        return unmatchedCount === 0; // Successful if no states unaccounted for\n    }\n\n    private applyOrderAfterApplyState(params: ApplyColumnStateParams): void {\n        if (!params.applyOrder || !params.state) { return; }\n\n        let newOrder: Column[] = [];\n        const processedColIds: { [id: string]: boolean } = {};\n\n        params.state.forEach(item => {\n            if (!item.colId || processedColIds[item.colId]) { return; }\n            const col = this.gridColumnsMap[item.colId];\n            if (col) {\n                newOrder.push(col);\n                processedColIds[item.colId] = true;\n            }\n        });\n\n        // add in all other columns\n        let autoGroupInsertIndex = 0;\n        this.gridColumns.forEach(col => {\n            const colId = col.getColId();\n            const alreadyProcessed = processedColIds[colId] != null;\n            if (alreadyProcessed) { return; }\n\n            const isAutoGroupCol = colId.startsWith(GROUP_AUTO_COLUMN_ID);\n            if (isAutoGroupCol) {\n                // auto group columns, if missing from state list, are added to the start.\n                // it's common to have autoGroup missing, as grouping could be on by default\n                // on a column, but the user could of since removed the grouping via the UI.\n                // if we don't inc the insert index, autoGroups will be inserted in reverse order\n                insertIntoArray(newOrder, col, autoGroupInsertIndex++);\n            } else {\n                // normal columns, if missing from state list, are added at the end\n                newOrder.push(col);\n            }\n        });\n\n        // this is already done in updateGridColumns, however we changed the order above (to match the order of the state\n        // columns) so we need to do it again. we could of put logic into the order above to take into account fixed\n        // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here\n        // is less sexy for the code here, but it keeps consistency.\n        newOrder = this.placeLockedColumns(newOrder);\n\n        if (!this.doesMovePassMarryChildren(newOrder)) {\n            console.warn('AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.');\n            return;\n        }\n\n        this.gridColumns = newOrder;\n    }\n\n    private compareColumnStatesAndDispatchEvents(source: ColumnEventType): () => void {\n\n        const startState = {\n            rowGroupColumns: this.rowGroupColumns.slice(),\n            pivotColumns: this.pivotColumns.slice(),\n            valueColumns: this.valueColumns.slice()\n        };\n\n        const columnStateBefore = this.getColumnState();\n        const columnStateBeforeMap: { [colId: string]: ColumnState; } = {};\n\n        columnStateBefore.forEach(col => {\n            columnStateBeforeMap[col.colId!] = col;\n        });\n\n        return () => {\n            const colsForState = this.getPrimaryAndSecondaryAndAutoColumns();\n\n            // dispatches generic ColumnEvents where all columns are returned rather than what has changed\n            const dispatchWhenListsDifferent = (eventType: string, colsBefore: Column[], colsAfter: Column[], idMapper: (column: Column) => string) => {\n                const beforeList = colsBefore.map(idMapper);\n                const afterList = colsAfter.map(idMapper);\n                const unchanged = areEqual(beforeList, afterList);\n\n                if (unchanged) { return; }\n\n                const changes = new Set(colsBefore);\n                colsAfter.forEach(id => {\n                    // if the first list had it, delete it, as it's unchanged.\n                    if (!changes.delete(id)) {\n                        // if the second list has it, and first doesn't, add it.\n                        changes.add(id);\n                    }\n                });\n                \n                const changesArr = [...changes];\n\n                const event: WithoutGridCommon<ColumnEvent> = {\n                    type: eventType,\n                    columns: changesArr,\n                    column: changesArr.length === 1 ? changesArr[0] : null,\n                    source: source\n                };\n\n                this.eventService.dispatchEvent(event);\n            };\n\n            // determines which columns have changed according to supplied predicate\n            const getChangedColumns = (changedPredicate: (cs: ColumnState, c: Column) => boolean): Column[] => {\n                const changedColumns: Column[] = [];\n\n                colsForState.forEach(column => {\n                    const colStateBefore = columnStateBeforeMap[column.getColId()];\n                    if (colStateBefore && changedPredicate(colStateBefore, column)) {\n                        changedColumns.push(column);\n                    }\n                });\n\n                return changedColumns;\n            };\n\n            const columnIdMapper = (c: Column) => c.getColId();\n\n            dispatchWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n                startState.rowGroupColumns,\n                this.rowGroupColumns,\n                columnIdMapper\n            );\n\n            dispatchWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED,\n                startState.pivotColumns,\n                this.pivotColumns,\n                columnIdMapper\n            );\n\n            const valueChangePredicate = (cs: ColumnState, c: Column) => {\n                const oldActive = cs.aggFunc != null;\n\n                const activeChanged = oldActive != c.isValueActive();\n                // we only check aggFunc if the agg is active\n                const aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();\n\n                return activeChanged || aggFuncChanged;\n            };\n            const changedValues = getChangedColumns(valueChangePredicate);\n            if (changedValues.length > 0) {\n                this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, changedValues, source);\n            }\n\n            const resizeChangePredicate = (cs: ColumnState, c: Column) => cs.width != c.getActualWidth();\n            this.dispatchColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);\n\n            const pinnedChangePredicate = (cs: ColumnState, c: Column) => cs.pinned != c.getPinned();\n            this.dispatchColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);\n\n            const visibilityChangePredicate = (cs: ColumnState, c: Column) => cs.hide == c.isVisible();\n            this.dispatchColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);\n\n            const sortChangePredicate = (cs: ColumnState, c: Column) => cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();\n            const changedColumns = getChangedColumns(sortChangePredicate);\n            if (changedColumns.length > 0) {\n                this.sortController.dispatchSortChangedEvents(source, changedColumns);\n            }\n\n            // special handling for moved column events\n            this.normaliseColumnMovedEventForColumnState(columnStateBefore, source);\n        };\n    }\n\n    private getCommonValue<T>(cols: Column[], valueGetter: ((col: Column) => T)): T | undefined {\n        if (!cols || cols.length == 0) { return undefined; }\n\n        // compare each value to the first value. if nothing differs, then value is common so return it.\n        const firstValue = valueGetter(cols[0]);\n        for (let i = 1; i < cols.length; i++) {\n            if (firstValue !== valueGetter(cols[i])) {\n                // values differ, no common value\n                return undefined;\n            }\n        }\n\n        return firstValue;\n    }\n\n    private normaliseColumnMovedEventForColumnState(colStateBefore: ColumnState[], source: ColumnEventType) {\n        // we are only interested in columns that were both present and visible before and after\n\n        const colStateAfter = this.getColumnState();\n\n        const colStateAfterMapped: { [id: string]: ColumnState; } = {};\n        colStateAfter.forEach(s => colStateAfterMapped[s.colId!] = s);\n\n        // get id's of cols in both before and after lists\n        const colsIntersectIds: { [id: string]: boolean; } = {};\n        colStateBefore.forEach(s => {\n            if (colStateAfterMapped[s.colId!]) {\n                colsIntersectIds[s.colId!] = true;\n            }\n        });\n\n        // filter state lists, so we only have cols that were present before and after\n        const beforeFiltered = colStateBefore.filter(c => colsIntersectIds[c.colId!]);\n        const afterFiltered = colStateAfter.filter(c => colsIntersectIds[c.colId!]);\n\n        // see if any cols are in a different location\n        const movedColumns: Column[] = [];\n\n        afterFiltered!.forEach((csAfter: ColumnState, index: number) => {\n            const csBefore = beforeFiltered && beforeFiltered[index];\n            if (csBefore && csBefore.colId !== csAfter.colId) {\n                const gridCol = this.getGridColumn(csBefore.colId!);\n                if (gridCol) {\n                    movedColumns.push(gridCol);\n                }\n            }\n        });\n\n        if (!movedColumns.length) { return; }\n\n        this.dispatchColumnMovedEvent({ movedColumns, source, finished: true });\n    }\n\n    private syncColumnWithStateItem(\n        column: Column | null,\n        stateItem: ColumnState | null,\n        defaultState: ColumnStateParams | undefined,\n        rowGroupIndexes: { [key: string]: number; } | null,\n        pivotIndexes: { [key: string]: number; } | null,\n        autoCol: boolean,\n        source: ColumnEventType\n    ): void {\n\n        if (!column) { return; }\n\n        const getValue = <U extends keyof ColumnStateParams, S extends keyof ColumnStateParams>(key1: U, key2?: S): { value1: ColumnStateParams[U] | undefined, value2: ColumnStateParams[S] | undefined; } => {\n            const obj: { value1: ColumnStateParams[U] | undefined, value2: ColumnStateParams[S] | undefined; } = { value1: undefined, value2: undefined };\n            let calculated: boolean = false;\n\n            if (stateItem) {\n                if (stateItem[key1] !== undefined) {\n                    obj.value1 = stateItem[key1];\n                    calculated = true;\n                }\n                if (exists(key2) && stateItem[key2] !== undefined) {\n                    obj.value2 = stateItem[key2];\n                    calculated = true;\n                }\n            }\n\n            if (!calculated && defaultState) {\n                if (defaultState[key1] !== undefined) {\n                    obj.value1 = defaultState[key1];\n                }\n                if (exists(key2) && defaultState[key2] !== undefined) {\n                    obj.value2 = defaultState[key2];\n                }\n            }\n\n            return obj;\n        };\n\n        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true\n        const hide = getValue('hide').value1;\n        if (hide !== undefined) {\n            column.setVisible(!hide, source);\n        }\n\n        // sets pinned to 'left' or 'right'\n        const pinned = getValue('pinned').value1;\n        if (pinned !== undefined) {\n            column.setPinned(pinned);\n        }\n\n        // if width provided and valid, use it, otherwise stick with the old width\n        const minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());\n\n        // flex\n        const flex = getValue('flex').value1;\n        // if flex is null or a value, set into the col\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n        \n        // if flex is null or undefined, fall back to setting width\n        if (flex == null) {\n            // if no flex, then use width if it's there\n            const width = getValue('width').value1;\n            if (width != null) {\n                if (minColWidth != null && width >= minColWidth) {\n                    column.setActualWidth(width, source);\n                }\n            }\n        }\n\n        const sort = getValue('sort').value1;\n        if (sort !== undefined) {\n            if (sort === 'desc' || sort === 'asc') {\n                column.setSort(sort, source);\n            } else {\n                column.setSort(undefined, source);\n            }\n        }\n\n        const sortIndex = getValue('sortIndex').value1;\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n\n        // we do not do aggFunc, rowGroup or pivot for auto cols or secondary cols\n        if (autoCol || !column.isPrimary()) {\n            return;\n        }\n\n        const aggFunc = getValue('aggFunc').value1;\n        if (aggFunc !== undefined) {\n            if (typeof aggFunc === 'string') {\n                column.setAggFunc(aggFunc);\n                if (!column.isValueActive()) {\n                    column.setValueActive(true, source);\n                    this.valueColumns.push(column);\n                }\n            } else {\n                if (exists(aggFunc)) {\n                    console.warn('AG Grid: stateItem.aggFunc must be a string. if using your own aggregation ' +\n                        'functions, register the functions first before using them in get/set state. This is because it is ' +\n                        'intended for the column state to be stored and retrieved as simple JSON.');\n                }\n                // Note: we do not call column.setAggFunc(null), so that next time we aggregate\n                // by this column (eg drag the column to the agg section int he toolpanel) it will\n                // default to the last aggregation function.\n\n                if (column.isValueActive()) {\n                    column.setValueActive(false, source);\n                    removeFromArray(this.valueColumns, column);\n                }\n            }\n        }\n\n        const { value1: rowGroup, value2: rowGroupIndex } = getValue('rowGroup', 'rowGroupIndex');\n        if (rowGroup !== undefined || rowGroupIndex !== undefined) {\n            if (typeof rowGroupIndex === 'number' || rowGroup) {\n                if (!column.isRowGroupActive()) {\n                    column.setRowGroupActive(true, source);\n                    this.rowGroupColumns.push(column);\n                }\n                if (rowGroupIndexes && typeof rowGroupIndex === 'number') {\n                    rowGroupIndexes[column.getId()] = rowGroupIndex;\n                }\n            } else {\n                if (column.isRowGroupActive()) {\n                    column.setRowGroupActive(false, source);\n                    removeFromArray(this.rowGroupColumns, column);\n                }\n            }\n        }\n\n        const { value1: pivot, value2: pivotIndex } = getValue('pivot', 'pivotIndex');\n        if (pivot !== undefined || pivotIndex !== undefined) {\n            if (typeof pivotIndex === 'number' || pivot) {\n                if (!column.isPivotActive()) {\n                    column.setPivotActive(true, source);\n                    this.pivotColumns.push(column);\n                }\n                if (pivotIndexes && typeof pivotIndex === 'number') {\n                    pivotIndexes[column.getId()] = pivotIndex;\n                }\n            } else {\n                if (column.isPivotActive()) {\n                    column.setPivotActive(false, source);\n                    removeFromArray(this.pivotColumns, column);\n                }\n            }\n        }\n    }\n\n    public getGridColumns(keys: ColKey[]): Column[] {\n        return this.getColumns(keys, this.getGridColumn.bind(this));\n    }\n\n    private getColumns(keys: ColKey[], columnLookupCallback: (key: ColKey) => Column): Column[] {\n        const foundColumns: Column[] = [];\n\n        if (keys) {\n            keys.forEach((key: ColKey) => {\n                const column = columnLookupCallback(key);\n                if (column) {\n                    foundColumns.push(column);\n                }\n            });\n        }\n\n        return foundColumns;\n    }\n\n    // used by growGroupPanel\n    public getColumnWithValidation(key: Maybe<ColKey>): Column | null {\n        if (key == null) { return null; }\n\n        const column = this.getGridColumn(key);\n\n        if (!column) {\n            console.warn('AG Grid: could not find column ' + key);\n        }\n\n        return column;\n    }\n\n    public getPrimaryColumn(key: ColKey): Column | null {\n        if (!this.primaryColumns) { return null; }\n\n        return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);\n    }\n\n    public getGridColumn(key: ColKey): Column | null {\n        return this.getColumn(key, this.gridColumns, this.gridColumnsMap);\n    }\n\n    public lookupGridColumn(key: string) {\n        return this.gridColumnsMap[key];\n    }\n\n    public getSecondaryColumn(key: ColKey): Column | null {\n        if (!this.secondaryColumns) { return null; }\n        return this.getColumn(key, this.secondaryColumns, this.secondaryColumnsMap);\n    }\n\n    private getColumn(key: ColKey, columnList: Column[], columnMap: { [id: string]: Column }): Column | null {\n        if (!key || !columnMap) { return null; }\n\n        // most of the time this method gets called the key is a string, so we put this shortcut in\n        // for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)\n        if (typeof key == 'string' && columnMap[key]) {\n            return columnMap[key];\n        }\n\n        for (let i = 0; i < columnList.length; i++) {\n            if (this.columnsMatch(columnList[i], key)) {\n                return columnList[i];\n            }\n        }\n\n        return this.getAutoColumn(key);\n    }\n\n    public getSourceColumnsForGroupColumn(groupCol: Column): Column[] | null {\n        const sourceColumnId = groupCol.getColDef().showRowGroup;\n        if (!sourceColumnId) {\n            return null;\n        }\n\n        if (sourceColumnId === true) {\n            return this.rowGroupColumns.slice(0);\n        }\n\n        const column = this.getPrimaryColumn(sourceColumnId);\n        return column ? [column] : null;\n    }\n\n    private getAutoColumn(key: ColKey): Column | null {\n        if (\n            !this.groupAutoColumns ||\n            !exists(this.groupAutoColumns) ||\n            missing(this.groupAutoColumns)\n        ) { return null; }\n\n        return this.groupAutoColumns.find(groupCol => this.columnsMatch(groupCol, key)) || null;\n    }\n\n    private columnsMatch(column: Column, key: ColKey): boolean {\n        const columnMatches = column === key;\n        const colDefMatches = column.getColDef() === key;\n        const idMatches = column.getColId() == key;\n\n        return columnMatches || colDefMatches || idMatches;\n    }\n\n    public getDisplayNameForColumn(column: Column | null, location: HeaderLocation, includeAggFunc = false): string | null {\n        if (!column) { return null; }\n\n        const headerName: string | null = this.getHeaderName(column.getColDef(), column, null, null, location);\n\n        if (includeAggFunc) {\n            return this.wrapHeaderNameWithAggFunc(column, headerName);\n        }\n\n        return headerName;\n    }\n\n    public getDisplayNameForProvidedColumnGroup(\n        columnGroup: ColumnGroup | null,\n        providedColumnGroup: ProvidedColumnGroup | null,\n        location: HeaderLocation\n    ): string | null {\n        const colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;\n\n        if (colGroupDef) {\n            return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);\n        }\n\n        return null;\n    }\n\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: HeaderLocation): string | null {\n        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);\n    }\n\n    // location is where the column is going to appear, ie who is calling us\n    private getHeaderName(\n        colDef: AbstractColDef,\n        column: Column | null,\n        columnGroup: ColumnGroup | null,\n        providedColumnGroup: ProvidedColumnGroup | null,\n        location: HeaderLocation\n    ): string | null {\n        const headerValueGetter = colDef.headerValueGetter;\n\n        if (headerValueGetter) {\n            const params: HeaderValueGetterParams = this.gridOptionsService.addGridCommonParams({\n                colDef: colDef,\n                column: column,\n                columnGroup: columnGroup,\n                providedColumnGroup: providedColumnGroup,\n                location: location\n            });\n\n            if (typeof headerValueGetter === 'function') {\n                // valueGetter is a function, so just call it\n                return headerValueGetter(params);\n            } else if (typeof headerValueGetter === 'string') {\n                // valueGetter is an expression, so execute the expression\n                return this.expressionService.evaluate(headerValueGetter, params);\n            }\n            console.warn('AG Grid: headerValueGetter must be a function or a string');\n            return '';\n        } else if (colDef.headerName != null) {\n            return colDef.headerName;\n        } else if ((colDef as ColDef).field) {\n            return camelCaseToHumanText((colDef as ColDef).field);\n        }\n\n        return '';\n    }\n\n    private wrapHeaderNameWithAggFunc(column: Column, headerName: string | null): string | null {\n        if (this.gridOptionsService.get('suppressAggFuncInHeader')) { return headerName; }\n\n        // only columns with aggregation active can have aggregations\n        const pivotValueColumn = column.getColDef().pivotValueColumn;\n        const pivotActiveOnThisColumn = exists(pivotValueColumn);\n        let aggFunc: string | IAggFunc | null | undefined = null;\n        let aggFuncFound: boolean;\n\n        // otherwise we have a measure that is active, and we are doing aggregation on it\n        if (pivotActiveOnThisColumn) {\n            const isCollapsedHeaderEnabled = this.gridOptionsService.get('removePivotHeaderRowWhenSingleValueColumn') && this.valueColumns.length === 1;\n            const isTotalColumn = column.getColDef().pivotTotalColumnIds !== undefined;\n            if (isCollapsedHeaderEnabled && !isTotalColumn) {\n                return headerName; // Skip decorating the header - in this case the label is the pivot key, not the value col\n            }\n            aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;\n            aggFuncFound = true;\n        } else {\n            const measureActive = column.isValueActive();\n            const aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();\n\n            if (measureActive && aggregationPresent) {\n                aggFunc = column.getAggFunc();\n                aggFuncFound = true;\n            } else {\n                aggFuncFound = false;\n            }\n        }\n\n        if (aggFuncFound) {\n            const aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'func';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n            return `${aggFuncStringTranslated}(${headerName})`;\n        }\n\n        return headerName;\n    }\n\n    // returns the group with matching colId and instanceId. If instanceId is missing,\n    // matches only on the colId.\n    public getColumnGroup(colId: string | ColumnGroup, partId?: number): ColumnGroup | null {\n        if (!colId) { return null; }\n        if (colId instanceof ColumnGroup) { return colId; }\n\n        const allColumnGroups = this.getAllDisplayedTrees();\n        const checkPartId = typeof partId === 'number';\n        let result: ColumnGroup | null = null;\n\n        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, (child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                const columnGroup = child;\n                let matched: boolean;\n\n                if (checkPartId) {\n                    matched = colId === columnGroup.getGroupId() && partId === columnGroup.getPartId();\n                } else {\n                    matched = colId === columnGroup.getGroupId();\n                }\n\n                if (matched) {\n                    result = columnGroup;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    public isReady(): boolean {\n        return this.ready;\n    }\n\n    private extractValueColumns(source: ColumnEventType, oldPrimaryColumns: Column[] | undefined): void {\n        this.valueColumns = this.extractColumns(\n            oldPrimaryColumns,\n            this.valueColumns,\n            (col: Column, flag: boolean) => col.setValueActive(flag, source),\n            // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null\n            () => undefined,\n            () => undefined,\n            // aggFunc is a string, so return it's existence\n            (colDef: ColDef) => {\n                const aggFunc = colDef.aggFunc;\n                // null or empty string means clear\n                if (aggFunc === null || aggFunc === '') {\n                    return null;\n                }\n                if (aggFunc === undefined) {\n                    return;\n                }\n\n                return !!aggFunc;\n            },\n            (colDef: ColDef) => {\n                // return false if any of the following: null, undefined, empty string\n                return colDef.initialAggFunc != null && colDef.initialAggFunc != '';\n            }\n        );\n\n        // all new columns added will have aggFunc missing, so set it to what is in the colDef\n        this.valueColumns.forEach(col => {\n            const colDef = col.getColDef();\n            // if aggFunc provided, we always override, as reactive property\n            if (colDef.aggFunc != null && colDef.aggFunc != '') {\n                col.setAggFunc(colDef.aggFunc);\n            } else {\n                // otherwise we use initialAggFunc only if no agg func set - which happens when new column only\n                if (!col.getAggFunc()) {\n                    col.setAggFunc(colDef.initialAggFunc);\n                }\n            }\n        });\n    }\n\n    private extractRowGroupColumns(source: ColumnEventType, oldPrimaryColumns: Column[] | undefined): void {\n        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns,\n            (col: Column, flag: boolean) => col.setRowGroupActive(flag, source),\n            (colDef: ColDef) => colDef.rowGroupIndex,\n            (colDef: ColDef) => colDef.initialRowGroupIndex,\n            (colDef: ColDef) => colDef.rowGroup,\n            (colDef: ColDef) => colDef.initialRowGroup,\n        );\n    }\n\n    private extractColumns(\n        oldPrimaryColumns: Column[] = [],\n        previousCols: Column[] = [],\n        setFlagFunc: (col: Column, flag: boolean) => void,\n        getIndexFunc: (colDef: ColDef) => number | null | undefined,\n        getInitialIndexFunc: (colDef: ColDef) => number | null | undefined,\n        getValueFunc: (colDef: ColDef) => boolean | null | undefined,\n        getInitialValueFunc: (colDef: ColDef) => boolean | undefined\n    ): Column[] {\n\n        const colsWithIndex: Column[] = [];\n        const colsWithValue: Column[] = [];\n\n        // go though all cols.\n        // if value, change\n        // if default only, change only if new\n        (this.primaryColumns || []).forEach(col => {\n            const colIsNew = oldPrimaryColumns.indexOf(col) < 0;\n            const colDef = col.getColDef();\n\n            const value = attrToBoolean(getValueFunc(colDef));\n            const initialValue = attrToBoolean(getInitialValueFunc(colDef));\n            const index = attrToNumber(getIndexFunc(colDef));\n            const initialIndex = attrToNumber(getInitialIndexFunc(colDef));\n\n            let include: boolean;\n\n            const valuePresent = value !== undefined;\n            const indexPresent = index !== undefined;\n            const initialValuePresent = initialValue !== undefined;\n            const initialIndexPresent = initialIndex !== undefined;\n\n            if (valuePresent) {\n                include = value!; // boolean value is guaranteed as attrToBoolean() is used above\n            } else if (indexPresent) {\n                if (index === null) {\n                    // if col is new we don't want to use the default / initial if index is set to null. Similarly,\n                    // we don't want to include the property for existing columns, i.e. we want to 'clear' it.\n                    include = false;\n                } else {\n                    // note that 'null >= 0' evaluates to true which means 'rowGroupIndex = null' would enable row\n                    // grouping if the null check didn't exist above.\n                    include = index! >= 0;\n                }\n            } else {\n                if (colIsNew) {\n                    // as no value or index is 'present' we use the default / initial when col is new\n                    if (initialValuePresent) {\n                        include = initialValue!;\n                    } else if (initialIndexPresent) {\n                        include = initialIndex != null && initialIndex >= 0;\n                    } else {\n                        include = false;\n                    }\n                } else {\n                    // otherwise include it if included last time, e.g. if we are extracting row group cols and this col\n                    // is an existing row group col (i.e. it exists in 'previousCols') then we should include it.\n                    include = previousCols.indexOf(col) >= 0;\n                }\n            }\n\n            if (include) {\n                const useIndex = colIsNew ? (index != null || initialIndex != null) : index != null;\n                useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);\n            }\n        });\n\n        const getIndexForCol = (col: Column): number => {\n            const index = getIndexFunc(col.getColDef());\n            const defaultIndex = getInitialIndexFunc(col.getColDef());\n\n            return index != null ? index : defaultIndex!;\n        };\n\n        // sort cols with index, and add these first\n        colsWithIndex.sort((colA, colB) => {\n            const indexA = getIndexForCol(colA);\n            const indexB = getIndexForCol(colB);\n\n            if (indexA === indexB) { return 0; }\n            if (indexA < indexB) { return -1; }\n\n            return 1;\n        });\n\n        const res: Column[] = ([] as Column[]).concat(colsWithIndex);\n\n        // second add columns that were there before and in the same order as they were before,\n        // so we are preserving order of current grouping of columns that simply have rowGroup=true\n        previousCols.forEach(col => {\n            if (colsWithValue.indexOf(col) >= 0) {\n                res.push(col);\n            }\n        });\n\n        // lastly put in all remaining cols\n        colsWithValue.forEach(col => {\n            if (res.indexOf(col) < 0) {\n                res.push(col);\n            }\n        });\n\n        // set flag=false for removed cols\n        previousCols.forEach(col => {\n            if (res.indexOf(col) < 0) {\n                setFlagFunc(col, false);\n            }\n        });\n        // set flag=true for newly added cols\n        res.forEach(col => {\n            if (previousCols.indexOf(col) < 0) {\n                setFlagFunc(col, true);\n            }\n        });\n\n        return res;\n    }\n\n    private extractPivotColumns(source: ColumnEventType, oldPrimaryColumns: Column[] | undefined): void {\n        this.pivotColumns = this.extractColumns(\n            oldPrimaryColumns,\n            this.pivotColumns,\n            (col: Column, flag: boolean) => col.setPivotActive(flag, source),\n            (colDef: ColDef) => colDef.pivotIndex,\n            (colDef: ColDef) => colDef.initialPivotIndex,\n            (colDef: ColDef) => colDef.pivot,\n            (colDef: ColDef) => colDef.initialPivot,\n        );\n    }\n\n    public resetColumnGroupState(source: ColumnEventType): void {\n        if (!this.primaryColumnTree) { return; }\n\n        const stateItems: { groupId: string, open: boolean | undefined; }[] = [];\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, child => {\n            if (child instanceof ProvidedColumnGroup) {\n                const colGroupDef = child.getColGroupDef();\n                const groupState = {\n                    groupId: child.getGroupId(),\n                    open: !colGroupDef ? undefined : colGroupDef.openByDefault\n                };\n                stateItems.push(groupState);\n            }\n        });\n\n        this.setColumnGroupState(stateItems, source);\n    }\n\n    public getColumnGroupState(): { groupId: string, open: boolean; }[] {\n        const columnGroupState: { groupId: string, open: boolean; }[] = [];\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, node => {\n            if (node instanceof ProvidedColumnGroup) {\n                columnGroupState.push({\n                    groupId: node.getGroupId(),\n                    open: node.isExpanded()\n                });\n            }\n        });\n\n        return columnGroupState;\n    }\n\n    public setColumnGroupState(stateItems: { groupId: string, open: boolean | undefined; }[], source: ColumnEventType): void {\n        if (!this.gridBalancedTree) { return; }\n\n        this.columnAnimationService.start();\n\n        const impactedGroups: ProvidedColumnGroup[] = [];\n\n        stateItems.forEach(stateItem => {\n            const groupKey = stateItem.groupId;\n            const newValue = stateItem.open;\n            const providedColumnGroup: ProvidedColumnGroup | null = this.getProvidedColumnGroup(groupKey);\n\n            if (!providedColumnGroup) { return; }\n            if (providedColumnGroup.isExpanded() === newValue) { return; }\n\n            this.logger.log('columnGroupOpened(' + providedColumnGroup.getGroupId() + ',' + newValue + ')');\n            providedColumnGroup.setExpanded(newValue);\n            impactedGroups.push(providedColumnGroup);\n        });\n\n        this.updateGroupsAndDisplayedColumns(source);\n        this.setFirstRightAndLastLeftPinned(source);\n\n        if (impactedGroups.length) {\n            const event: WithoutGridCommon<ColumnGroupOpenedEvent> = {\n                type: Events.EVENT_COLUMN_GROUP_OPENED,\n                columnGroup: ProvidedColumnGroup.length === 1 ? impactedGroups[0] : undefined,\n                columnGroups: impactedGroups,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        this.columnAnimationService.finish();\n    }\n\n    // called by headerRenderer - when a header is opened or closed\n    public setColumnGroupOpened(key: ProvidedColumnGroup | string | null, newValue: boolean, source: ColumnEventType): void {\n        let keyAsString: string;\n\n        if (key instanceof ProvidedColumnGroup) {\n            keyAsString = key.getId();\n        } else {\n            keyAsString = key || '';\n        }\n        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);\n    }\n\n    public getProvidedColumnGroup(key: string): ProvidedColumnGroup | null {\n        // if (key instanceof ProvidedColumnGroup) { return key; }\n\n        if (typeof key !== 'string') {\n            console.error('AG Grid: group key must be a string');\n        }\n\n        // otherwise, search for the column group by id\n        let res: ProvidedColumnGroup | null = null;\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, node => {\n            if (node instanceof ProvidedColumnGroup) {\n                if (node.getId() === key) {\n                    res = node;\n                }\n            }\n        });\n\n        return res;\n    }\n\n    private calculateColumnsForDisplay(): Column[] {\n        let columnsForDisplay: Column[];\n\n        if (this.pivotMode && missing(this.secondaryColumns)) {\n            // pivot mode is on, but we are not pivoting, so we only\n            // show columns we are aggregating on\n            columnsForDisplay = this.gridColumns.filter(column => {\n                const isAutoGroupCol = this.groupAutoColumns && includes(this.groupAutoColumns, column);\n                const isValueCol = this.valueColumns && includes(this.valueColumns, column);\n                return isAutoGroupCol || isValueCol;\n            });\n\n        } else {\n            // otherwise continue as normal. this can be working on the primary\n            // or secondary columns, whatever the gridColumns are set to\n            columnsForDisplay = this.gridColumns.filter(column => {\n                // keep col if a) it's auto-group or b) it's visible\n                const isAutoGroupCol = this.groupAutoColumns && includes(this.groupAutoColumns, column);\n                return isAutoGroupCol || column.isVisible();\n            });\n        }\n\n        return columnsForDisplay;\n    }\n\n    private checkColSpanActiveInCols(columns: Column[]): boolean {\n        let result = false;\n\n        columns.forEach(col => {\n            if (exists(col.getColDef().colSpan)) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    private calculateColumnsForGroupDisplay(): void {\n        this.groupDisplayColumns = [];\n        this.groupDisplayColumnsMap = {};\n\n        const checkFunc = (col: Column) => {\n            const colDef = col.getColDef();\n            const underlyingColumn = colDef.showRowGroup;\n            if (colDef && exists(underlyingColumn)) {\n                this.groupDisplayColumns.push(col);\n\n                if (typeof underlyingColumn === 'string') {\n                    this.groupDisplayColumnsMap[underlyingColumn] = col;\n                } else if (underlyingColumn === true) {\n                    this.getRowGroupColumns().forEach(rowGroupCol => {\n                        this.groupDisplayColumnsMap[rowGroupCol.getId()] = col;\n                    });\n                }\n            }\n        };\n\n        this.gridColumns.forEach(checkFunc);\n    }\n\n    public getGroupDisplayColumns(): Column[] {\n        return this.groupDisplayColumns;\n    }\n\n    public getGroupDisplayColumnForGroup(rowGroupColumnId: string): Column | undefined {\n        return this.groupDisplayColumnsMap[rowGroupColumnId];\n    }\n\n    private updateDisplayedColumns(source: ColumnEventType): void {\n        const columnsForDisplay = this.calculateColumnsForDisplay();\n\n        this.buildDisplayedTrees(columnsForDisplay);\n\n        // also called when group opened/closed\n        this.updateGroupsAndDisplayedColumns(source);\n\n        // also called when group opened/closed\n        this.setFirstRightAndLastLeftPinned(source);\n    }\n\n    public isSecondaryColumnsPresent(): boolean {\n        return exists(this.secondaryColumns);\n    }\n\n    public setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[] | null, source: ColumnEventType): void {\n        if (!this.gridColumns) { return; }\n\n        const newColsPresent = colDefs;\n\n        // if not cols passed, and we had no cols anyway, then do nothing\n        if (!newColsPresent && missing(this.secondaryColumns)) { return; }\n\n        if (newColsPresent) {\n            this.processSecondaryColumnDefinitions(colDefs);\n            const balancedTreeResult = this.columnFactory.createColumnTree(\n                colDefs,\n                false,\n                this.secondaryBalancedTree || this.previousSecondaryColumns || undefined,\n                source\n            );\n            this.destroyOldColumns(this.secondaryBalancedTree, balancedTreeResult.columnTree);\n            this.secondaryBalancedTree = balancedTreeResult.columnTree;\n            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;\n            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);\n\n            this.secondaryColumnsMap = {};\n            this.secondaryColumns.forEach(col => this.secondaryColumnsMap[col.getId()] = col);\n            this.previousSecondaryColumns = null;\n        } else {\n            this.previousSecondaryColumns = this.secondaryBalancedTree;\n            this.secondaryBalancedTree = null;\n            this.secondaryHeaderRowCount = -1;\n            this.secondaryColumns = null;\n            this.secondaryColumnsMap = {};\n        }\n\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n    }\n\n    private processSecondaryColumnDefinitions(colDefs: (ColDef | ColGroupDef)[] | null) {\n        const columnCallback = this.gridOptionsService.get('processPivotResultColDef');\n        const groupCallback = this.gridOptionsService.get('processPivotResultColGroupDef');\n\n        if (!columnCallback && !groupCallback) { return undefined; }\n\n        const searchForColDefs = (colDefs2: (ColDef | ColGroupDef)[]): void => {\n            colDefs2.forEach((abstractColDef: AbstractColDef) => {\n                const isGroup = exists((abstractColDef as any).children);\n                if (isGroup) {\n                    const colGroupDef = abstractColDef as ColGroupDef;\n                    if (groupCallback) {\n                        groupCallback(colGroupDef);\n                    }\n                    searchForColDefs(colGroupDef.children);\n                } else {\n                    const colDef = abstractColDef as ColDef;\n                    if (columnCallback) {\n                        columnCallback(colDef);\n                    }\n                }\n            });\n        };\n\n        if (colDefs) {\n            searchForColDefs(colDefs);\n        }\n    }\n\n    // called from: applyColumnState, setColumnDefs, setSecondaryColumns\n    private updateGridColumns(): void {\n        const prevGridCols = this.gridBalancedTree;\n        if (this.gridColsArePrimary) {\n            this.lastPrimaryOrder = this.gridColumns;\n        } else {\n            this.lastSecondaryOrder = this.gridColumns;\n        }\n\n        // create the new auto columns\n        const areAutoColsChanged = this.createGroupAutoColumnsIfNeeded();\n        // if auto group cols have changed, and we have a sort order, we need to move auto cols to the start\n        if (areAutoColsChanged) {\n            const groupAutoColsMap = convertToMap<Column, true>(this.groupAutoColumns!.map(col => [col, true]));\n\n            // if group cols have changed, remove them from any previous orders and add them to the start.\n            if (this.lastPrimaryOrder) {\n                this.lastPrimaryOrder = this.lastPrimaryOrder.filter(col => !groupAutoColsMap.has(col));\n                this.lastPrimaryOrder = [...this.groupAutoColumns!, ...this.lastPrimaryOrder];\n            }\n\n            if (this.lastSecondaryOrder) {\n                this.lastSecondaryOrder = this.lastSecondaryOrder.filter(col => !groupAutoColsMap.has(col));\n                this.lastSecondaryOrder = [...this.groupAutoColumns!, ...this.lastSecondaryOrder];\n            }\n        }\n\n        let sortOrderToRecover: Column[] | undefined;\n\n        if (this.secondaryColumns && this.secondaryBalancedTree) {\n            const hasSameColumns = this.secondaryColumns.some((col) => {\n                return this.gridColumnsMap[col.getColId()] !== undefined;\n            });\n            this.gridBalancedTree = this.secondaryBalancedTree.slice();\n            this.gridHeaderRowCount = this.secondaryHeaderRowCount;\n            this.gridColumns = this.secondaryColumns.slice();\n            this.gridColsArePrimary = false;\n\n            // If the current columns are the same or a subset of the previous\n            // we keep the previous order, otherwise we go back to the order the pivot\n            // cols are generated in\n            if (hasSameColumns) {\n                sortOrderToRecover = this.lastSecondaryOrder;\n            }\n        } else if (this.primaryColumns) {\n            this.gridBalancedTree = this.primaryColumnTree.slice();\n            this.gridHeaderRowCount = this.primaryHeaderRowCount;\n            this.gridColumns = this.primaryColumns.slice();\n            this.gridColsArePrimary = true;\n\n            // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns\n            // when this happens (eg if user moved a column) rather than revert back to the original column order.\n            // likewise if changing in/out of pivot mode, we want to maintain the order of the cols\n            sortOrderToRecover = this.lastPrimaryOrder;\n        }\n\n        this.addAutoGroupToGridColumns();\n        this.orderGridColsLike(sortOrderToRecover);\n\n        this.gridColumns = this.placeLockedColumns(this.gridColumns);\n        this.calculateColumnsForGroupDisplay();\n        this.refreshQuickFilterColumns();\n        this.clearDisplayedAndViewportColumns();\n\n        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);\n\n        this.gridColumnsMap = {};\n        this.gridColumns.forEach(col => this.gridColumnsMap[col.getId()] = col);\n\n        this.setAutoHeightActive();\n\n        if (!areEqual(prevGridCols, this.gridBalancedTree)) {\n            const event: WithoutGridCommon<GridColumnsChangedEvent> = {\n                type: Events.EVENT_GRID_COLUMNS_CHANGED\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private setAutoHeightActive(): void {\n        this.autoHeightActive = this.gridColumns.filter(col => col.isAutoHeight()).length > 0;\n\n        if (this.autoHeightActive) {\n            this.autoHeightActiveAtLeastOnce = true;\n\n            const supportedRowModel = this.gridOptionsService.isRowModelType('clientSide') || this.gridOptionsService.isRowModelType('serverSide');\n            if (!supportedRowModel) {\n                warnOnce('autoHeight columns only work with Client Side Row Model and Server Side Row Model.');\n            }\n        }\n    }\n\n    private orderGridColsLike(colsOrder: Column[] | undefined): void {\n        if (missing(colsOrder)) { return; }\n\n        const lastOrderMapped = convertToMap<Column, number>(colsOrder.map((col, index) => [col, index]));\n\n        // only do the sort if at least one column is accounted for. columns will be not accounted for\n        // if changing from secondary to primary columns\n        let noColsFound = true;\n        this.gridColumns.forEach(col => {\n            if (lastOrderMapped.has(col)) {\n                noColsFound = false;\n            }\n        });\n\n        if (noColsFound) { return; }\n\n        // order cols in the same order as before. we need to make sure that all\n        // cols still exists, so filter out any that no longer exist.\n        const gridColsMap = convertToMap<Column, boolean>(this.gridColumns.map(col => [col, true]));\n        const oldColsOrdered = colsOrder.filter(col => gridColsMap.has(col));\n        const oldColsMap = convertToMap<Column, boolean>(oldColsOrdered.map(col => [col, true]));\n        const newColsOrdered = this.gridColumns.filter(col => !oldColsMap.has(col));\n\n        // add in the new columns, at the end (if no group), or at the end of the group (if a group)\n        const newGridColumns = oldColsOrdered.slice();\n\n        newColsOrdered.forEach(newCol => {\n            let parent = newCol.getOriginalParent();\n\n            // if no parent, means we are not grouping, so just add the column to the end\n            if (!parent) {\n                newGridColumns.push(newCol);\n                return;\n            }\n\n            // find the group the column belongs to. if no siblings at the current level (eg col in group on it's\n            // own) then go up one level and look for siblings there.\n            const siblings: Column[] = [];\n            while (!siblings.length && parent) {\n                const leafCols = parent.getLeafColumns();\n                leafCols.forEach(leafCol => {\n                    const presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;\n                    const noYetInSiblings = siblings.indexOf(leafCol) < 0;\n                    if (presentInNewGriColumns && noYetInSiblings) {\n                        siblings.push(leafCol);\n                    }\n                });\n                parent = parent.getOriginalParent();\n            }\n\n            // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own\n            if (!siblings.length) {\n                newGridColumns.push(newCol);\n                return;\n            }\n\n            // find index of last column in the group\n            const indexes = siblings.map(col => newGridColumns.indexOf(col));\n            const lastIndex = Math.max(...indexes);\n\n            insertIntoArray(newGridColumns, newCol, lastIndex + 1);\n        });\n\n        this.gridColumns = newGridColumns;\n    }\n\n    public isPrimaryColumnGroupsPresent(): boolean {\n        return this.primaryHeaderRowCount > 1;\n    }\n\n    // if we are using autoGroupCols, then they should be included for quick filter. this covers the\n    // following scenarios:\n    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on\n    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this\n    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)\n    public refreshQuickFilterColumns(): void {\n        let columnsForQuickFilter = (this.isPivotMode() ? this.secondaryColumns : this.primaryColumns) ?? [];\n        if (this.groupAutoColumns) {\n            columnsForQuickFilter = columnsForQuickFilter.concat(this.groupAutoColumns);\n        }\n        this.columnsForQuickFilter = this.gridOptionsService.get('includeHiddenColumnsInQuickFilter')\n            ? columnsForQuickFilter\n            : columnsForQuickFilter.filter(col => col.isVisible() || col.isRowGroupActive());\n    }\n\n    private placeLockedColumns(cols: Column[]): Column[] {\n        const left: Column[] = [];\n        const normal: Column[] = [];\n        const right: Column[] = [];\n        cols.forEach((col) => {\n            const position = col.getColDef().lockPosition;\n            if (position === 'right') {\n                right.push(col);\n            } else if (position === 'left' || position === true) {\n                left.push(col);\n            } else {\n                normal.push(col);\n            }\n        });\n        return [...left, ...normal, ...right];\n    }\n\n    private addAutoGroupToGridColumns(): void {\n\n        if (missing(this.groupAutoColumns)) {\n            this.destroyOldColumns(this.groupAutoColsBalancedTree);\n            this.groupAutoColsBalancedTree = null;\n            return;\n        }\n\n        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;\n\n        const newAutoColsTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);\n\n        this.destroyOldColumns(this.groupAutoColsBalancedTree, newAutoColsTree);\n        this.groupAutoColsBalancedTree = newAutoColsTree;\n\n        this.gridBalancedTree = newAutoColsTree.concat(this.gridBalancedTree);\n    }\n\n    // gets called after we copy down grid columns, to make sure any part of the gui\n    // that tries to draw, eg the header, it will get empty lists of columns rather\n    // than stale columns. for example, the header will received gridColumnsChanged\n    // event, so will try and draw, but it will draw successfully when it acts on the\n    // virtualColumnsChanged event\n    private clearDisplayedAndViewportColumns(): void {\n        this.viewportRowLeft = {};\n        this.viewportRowRight = {};\n        this.viewportRowCenter = {};\n\n        this.displayedColumnsLeft = [];\n        this.displayedColumnsRight = [];\n        this.displayedColumnsCenter = [];\n        this.displayedColumns = [];\n        this.ariaOrderColumns = [];\n        this.viewportColumns = [];\n        this.headerViewportColumns = [];\n        this.viewportColumnsHash = '';\n    }\n\n    private updateGroupsAndDisplayedColumns(source: ColumnEventType) {\n\n        this.updateOpenClosedVisibilityInColumnGroups();\n        this.deriveDisplayedColumns(source);\n        this.refreshFlexedColumns();\n        this.extractViewport();\n        this.updateBodyWidths();\n        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display\n\n        const event: WithoutGridCommon<DisplayedColumnsChangedEvent> = {\n            type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private deriveDisplayedColumns(source: ColumnEventType): void {\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);\n        this.joinColumnsAriaOrder();\n        this.joinDisplayedColumns();\n        this.setLeftValues(source);\n        this.displayedAutoHeightCols = this.displayedColumns.filter(col => col.isAutoHeight());\n    }\n\n    public isAutoRowHeightActive(): boolean {\n        return this.autoHeightActive;\n    }\n\n    public wasAutoRowHeightEverActive(): boolean {\n        return this.autoHeightActiveAtLeastOnce;\n    }\n\n    private joinColumnsAriaOrder(): void {\n        const allColumns = this.getAllGridColumns();\n        const pinnedLeft: Column[] = [];\n        const center: Column[] = [];\n        const pinnedRight: Column[] = [];\n\n        for (const col of allColumns) {\n            const pinned = col.getPinned();\n            if (!pinned) {\n                center.push(col);\n            } else if (pinned === true || pinned === 'left') {\n                pinnedLeft.push(col);\n            } else {\n                pinnedRight.push(col);\n            }\n        }\n\n        this.ariaOrderColumns = pinnedLeft.concat(center).concat(pinnedRight);\n    }\n\n    private joinDisplayedColumns(): void {\n        if (this.gridOptionsService.get('enableRtl')) {\n            this.displayedColumns = this.displayedColumnsRight\n                .concat(this.displayedColumnsCenter)\n                .concat(this.displayedColumnsLeft);\n        } else {\n            this.displayedColumns = this.displayedColumnsLeft\n                .concat(this.displayedColumnsCenter)\n                .concat(this.displayedColumnsRight);\n        }\n    }\n\n    // sets the left pixel position of each column\n    private setLeftValues(source: ColumnEventType): void {\n        this.setLeftValuesOfColumns(source);\n        this.setLeftValuesOfGroups();\n    }\n\n    private setLeftValuesOfColumns(source: ColumnEventType): void {\n        if (!this.primaryColumns) { return; }\n\n        // go through each list of displayed columns\n        const allColumns = this.getPrimaryAndSecondaryAndAutoColumns().slice(0);\n\n        // let totalColumnWidth = this.getWidthOfColsInList()\n        const doingRtl = this.gridOptionsService.get('enableRtl');\n\n        [\n            this.displayedColumnsLeft,\n            this.displayedColumnsRight,\n            this.displayedColumnsCenter\n        ].forEach(columns => {\n            if (doingRtl) {\n                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards\n                let left = this.getWidthOfColsInList(columns);\n                columns.forEach(column => {\n                    left -= column.getActualWidth();\n                    column.setLeft(left, source);\n                });\n            } else {\n                // otherwise normal LTR, we start at zero\n                let left = 0;\n                columns.forEach(column => {\n                    column.setLeft(left, source);\n                    left += column.getActualWidth();\n                });\n            }\n            removeAllFromUnorderedArray(allColumns, columns);\n        });\n\n        // items left in allColumns are columns not displayed, so remove the left position. this is\n        // important for the rows, as if a col is made visible, then taken out, then made visible again,\n        // we don't want the animation of the cell floating in from the old position, whatever that was.\n        allColumns.forEach((column: Column) => {\n            column.setLeft(null, source);\n        });\n    }\n\n    private setLeftValuesOfGroups(): void {\n        // a groups left value is the lest left value of it's children\n        [\n            this.displayedTreeLeft,\n            this.displayedTreeRight,\n            this.displayedTreeCentre\n        ].forEach(columns => {\n            columns.forEach(column => {\n                if (column instanceof ColumnGroup) {\n                    const columnGroup = column;\n                    columnGroup.checkLeft();\n                }\n            });\n        });\n    }\n\n    private derivedDisplayedColumnsFromDisplayedTree(tree: IHeaderColumn[], columns: Column[]): void {\n        columns.length = 0;\n        this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, (child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                columns.push(child);\n            }\n        });\n    }\n\n    private isColumnVirtualisationSuppressed(){\n        // When running within jsdom the viewportRight is always 0, so we need to return true to allow\n        // tests to validate all the columns.\n        return this.suppressColumnVirtualisation || this.viewportRight === 0;\n    }\n\n    private extractViewportColumns(): void {\n        if (this.isColumnVirtualisationSuppressed()) {\n            // no virtualisation, so don't filter\n            this.viewportColumnsCenter = this.displayedColumnsCenter;\n            this.headerViewportColumnsCenter = this.displayedColumnsCenter;\n        } else {\n            // filter out what should be visible\n            this.viewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));\n            this.headerViewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));\n        }\n\n        this.viewportColumns = this.viewportColumnsCenter\n            .concat(this.displayedColumnsLeft)\n            .concat(this.displayedColumnsRight);\n\n        this.headerViewportColumns = this.headerViewportColumnsCenter\n            .concat(this.displayedColumnsLeft)\n            .concat(this.displayedColumnsRight);\n    }\n\n    public getVirtualHeaderGroupRow(type: ColumnPinnedType, dept: number): IHeaderColumn[] {\n        let result: IHeaderColumn[];\n\n        switch (type) {\n            case 'left':\n                result = this.viewportRowLeft[dept];\n                break;\n            case 'right':\n                result = this.viewportRowRight[dept];\n                break;\n            default:\n                result = this.viewportRowCenter[dept];\n                break;\n        }\n\n        if (missing(result)) {\n            result = [];\n        }\n\n        return result;\n    }\n\n    private calculateHeaderRows(): void {\n\n        // go through each group, see if any of it's cols are displayed, and if yes,\n        // then this group is included\n        this.viewportRowLeft = {};\n        this.viewportRowRight = {};\n        this.viewportRowCenter = {};\n\n        // for easy lookup when building the groups.\n        const virtualColIds: { [key: string]: boolean; } = {};\n        this.headerViewportColumns.forEach(col => virtualColIds[col.getId()] = true);\n\n        const testGroup = (\n            children: IHeaderColumn[],\n            result: { [row: number]: IHeaderColumn[]; },\n            dept: number): boolean => {\n\n            let returnValue = false;\n\n            for (let i = 0; i < children.length; i++) {\n                // see if this item is within viewport\n                const child = children[i];\n                let addThisItem = false;\n\n                if (child instanceof Column) {\n                    // for column, test if column is included\n                    addThisItem = virtualColIds[child.getId()] === true;\n                } else {\n                    // if group, base decision on children\n                    const columnGroup = child as ColumnGroup;\n                    const displayedChildren = columnGroup.getDisplayedChildren();\n\n                    if (displayedChildren) {\n                        addThisItem = testGroup(displayedChildren, result, dept + 1);\n                    }\n                }\n\n                if (addThisItem) {\n                    returnValue = true;\n                    if (!result[dept]) {\n                        result[dept] = [];\n                    }\n                    result[dept].push(child);\n                }\n            }\n            return returnValue;\n        };\n\n        testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);\n        testGroup(this.displayedTreeRight, this.viewportRowRight, 0);\n        testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);\n    }\n\n    private extractViewport(): boolean {\n        const hashColumn = (c: Column) => `${c.getId()}-${c.getPinned() || 'normal'}`;\n\n        this.extractViewportColumns();\n        const newHash = this.viewportColumns.map(hashColumn).join('#');\n        const changed = this.viewportColumnsHash !== newHash;\n\n        if (changed) {\n            this.viewportColumnsHash = newHash;\n            this.calculateHeaderRows();\n        }\n\n        return changed;\n    }\n\n    public refreshFlexedColumns(params: { resizingCols?: Column[], skipSetLeft?: boolean, viewportWidth?: number, source?: ColumnEventType, fireResizedEvent?: boolean, updateBodyWidths?: boolean; } = {}): Column[] {\n        const source = params.source ? params.source : 'flex';\n\n        if (params.viewportWidth != null) {\n            this.flexViewportWidth = params.viewportWidth;\n        }\n\n        if (!this.flexViewportWidth) { return []; }\n\n        // If the grid has left-over space, divide it between flexing columns in proportion to their flex value.\n        // A \"flexing column\" is one that has a 'flex' value set and is not currently being constrained by its\n        // minWidth or maxWidth rules.\n\n        let flexAfterDisplayIndex = -1;\n        if (params.resizingCols) {\n            const allResizingCols = new Set(params.resizingCols);\n            // find the last resizing col, as only cols after this one are affected by the resizing\n            let displayedCols = this.displayedColumnsCenter;\n            for (let i = displayedCols.length - 1; i >= 0; i--) {\n                if (allResizingCols.has(displayedCols[i])) {\n                    flexAfterDisplayIndex = i;\n                    break;\n                }\n            }\n        }\n\n        // the width of all of the columns for which the width has been determined\n        let knownColumnsWidth = 0;\n\n        let flexingColumns: Column[] = [];\n\n        // store the minimum width of all the flex columns, so we can determine if flex is even possible more quickly\n        let minimumFlexedWidth = 0;\n        let totalFlex = 0;\n        for (let i = 0; i < this.displayedColumnsCenter.length; i++) {\n            const isFlex = this.displayedColumnsCenter[i].getFlex() && i > flexAfterDisplayIndex;\n            if (isFlex) {\n                flexingColumns.push(this.displayedColumnsCenter[i]);\n                totalFlex += this.displayedColumnsCenter[i].getFlex();\n                minimumFlexedWidth += this.displayedColumnsCenter[i].getMinWidth() ?? 0;\n            } else {\n                knownColumnsWidth += this.displayedColumnsCenter[i].getActualWidth();\n            }\n        };\n\n        if (!flexingColumns.length) {\n            return [];\n        }\n        \n        let changedColumns: Column[] = [];\n\n        // this is for performance to prevent trying to flex when unnecessary\n        if (knownColumnsWidth + minimumFlexedWidth > this.flexViewportWidth) {\n            // known columns and the minimum width of all the flex cols are too wide for viewport\n            // so don't flex\n            flexingColumns.forEach(col => col.setActualWidth(col.getMinWidth() ?? 0, source));\n\n            // No columns should flex, but all have been changed. Swap arrays so events fire properly.\n            // Expensive logic won't execute as flex columns is empty.\n            changedColumns = flexingColumns;\n            flexingColumns = [];\n        }\n\n        const flexingColumnSizes: number[] = [];\n        let spaceForFlexingColumns: number;\n\n        outer: while (true) {\n            spaceForFlexingColumns = this.flexViewportWidth - knownColumnsWidth;\n            const spacePerFlex = spaceForFlexingColumns / totalFlex;\n            for (let i = 0; i < flexingColumns.length; i++) {\n                const col = flexingColumns[i];\n                const widthByFlexRule = spacePerFlex * col.getFlex();\n                let constrainedWidth = 0;\n\n                const minWidth = col.getMinWidth();\n                const maxWidth = col.getMaxWidth();\n\n                if (exists(minWidth) && widthByFlexRule < minWidth) {\n                    constrainedWidth = minWidth;\n                } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {\n                    constrainedWidth = maxWidth;\n                }\n\n                if (constrainedWidth) {\n                    // This column is not in fact flexing as it is being constrained to a specific size\n                    // so remove it from the list of flexing columns and start again\n                    col.setActualWidth(constrainedWidth, source);\n                    removeFromUnorderedArray(flexingColumns, col);\n                    totalFlex -= col.getFlex();\n                    changedColumns.push(col);\n                    knownColumnsWidth += col.getActualWidth();\n                    continue outer;\n                }\n\n                flexingColumnSizes[i] = Math.round(widthByFlexRule);\n            }\n            break;\n        }\n\n        let remainingSpace = spaceForFlexingColumns;\n        flexingColumns.forEach((col, i) => {\n            col.setActualWidth(Math.min(flexingColumnSizes[i], remainingSpace), source);\n            changedColumns.push(col);\n            remainingSpace -= flexingColumnSizes[i];\n        });\n\n        if (!params.skipSetLeft) {\n            this.setLeftValues(source);\n        }\n\n        if (params.updateBodyWidths) {\n            this.updateBodyWidths();\n        }\n\n        if (params.fireResizedEvent) {\n            this.dispatchColumnResizedEvent(changedColumns, true, source, flexingColumns);\n        }\n\n        return flexingColumns;\n    }\n\n    // called from api\n    public sizeColumnsToFit(\n        gridWidth: any,\n        source: ColumnEventType = \"sizeColumnsToFit\",\n        silent?: boolean,\n        params?: ISizeColumnsToFitParams,\n    ): void {\n        if (this.shouldQueueResizeOperations) {\n            this.resizeOperationQueue.push(() => this.sizeColumnsToFit(gridWidth, source, silent, params));\n            return;\n        }\n\n        const limitsMap: { [colId: string]: Omit<IColumnLimit, 'key'>} = {};\n        if (params) {\n            params?.columnLimits?.forEach(({ key, ...dimensions }) => {\n                limitsMap[typeof key === 'string' ? key : key.getColId()] = dimensions;\n            });\n        }\n\n        // avoid divide by zero\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n\n        const doColumnsAlreadyFit = gridWidth === this.getWidthOfColsInList(allDisplayedColumns);\n        if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) { return; }\n\n        const colsToSpread: Column[] = [];\n        const colsToNotSpread: Column[] = [];\n\n        allDisplayedColumns.forEach(column => {\n            if (column.getColDef().suppressSizeToFit === true) {\n                colsToNotSpread.push(column);\n            } else {\n                colsToSpread.push(column);\n            }\n        });\n\n        // make a copy of the cols that are going to be resized\n        const colsToDispatchEventFor = colsToSpread.slice(0);\n        let finishedResizing = false;\n\n        const moveToNotSpread = (column: Column) => {\n            removeFromArray(colsToSpread, column);\n            colsToNotSpread.push(column);\n        };\n\n        // resetting cols to their original width makes the sizeColumnsToFit more deterministic,\n        // rather than depending on the current size of the columns. most users call sizeColumnsToFit\n        // immediately after grid is created, so will make no difference. however if application is calling\n        // sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want\n        // the columns to start shrinking / growing over time.\n        //\n        // NOTE: the process below will assign values to `this.actualWidth` of each column without firing events\n        // for this reason we need to manually dispatch resize events after the resize has been done for each column.\n        colsToSpread.forEach(column => {\n            column.resetActualWidth(source);\n\n            const widthOverride = limitsMap?.[column.getId()];\n            const minOverride = (widthOverride?.minWidth ?? params?.defaultMinWidth);\n            const maxOverride = (widthOverride?.maxWidth ?? params?.defaultMaxWidth);\n\n            const colWidth = column.getActualWidth();\n            if (typeof minOverride === 'number' && colWidth < minOverride) {\n                column.setActualWidth(minOverride, source, true);\n            } else if (typeof maxOverride === 'number' && colWidth > maxOverride) {\n                column.setActualWidth(maxOverride, source, true);\n            }\n        });\n\n        while (!finishedResizing) {\n            finishedResizing = true;\n            const availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);\n            if (availablePixels <= 0) {\n                // no width, set everything to minimum\n                colsToSpread.forEach((column: Column) => {\n                    const widthOverride = limitsMap?.[column.getId()]?.minWidth ?? params?.defaultMinWidth;\n                    if (typeof widthOverride === 'number') {\n                        column.setActualWidth(widthOverride, source, true);\n                        return;\n                    }\n                    column.setMinimum(source);\n                });\n            } else {\n                const scale = availablePixels / this.getWidthOfColsInList(colsToSpread);\n                // we set the pixels for the last col based on what's left, as otherwise\n                // we could be a pixel or two short or extra because of rounding errors.\n                let pixelsForLastCol = availablePixels;\n                // backwards through loop, as we are removing items as we go\n                for (let i = colsToSpread.length - 1; i >= 0; i--) {\n                    const column = colsToSpread[i];\n\n                    const widthOverride = limitsMap?.[column.getId()];\n                    const minOverride = (widthOverride?.minWidth ?? params?.defaultMinWidth);\n                    const maxOverride = (widthOverride?.maxWidth ?? params?.defaultMaxWidth);\n                    const colMinWidth = column.getMinWidth() ?? 0;\n                    const colMaxWidth = column.getMaxWidth() ?? Number.MAX_VALUE;\n                    const minWidth = typeof minOverride === 'number' && minOverride > colMinWidth ? minOverride : column.getMinWidth();\n                    const maxWidth = typeof maxOverride === 'number' && maxOverride < colMaxWidth ? maxOverride : column.getMaxWidth();\n                    let newWidth = Math.round(column.getActualWidth() * scale);\n\n                    if (exists(minWidth) && newWidth < minWidth) {\n                        newWidth = minWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    } else if (exists(maxWidth) && newWidth > maxWidth) {\n                        newWidth = maxWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    } else if (i === 0) { // if this is the last column\n                        newWidth = pixelsForLastCol;\n                    }\n\n                    column.setActualWidth(newWidth, source, true);\n                    pixelsForLastCol -= newWidth;\n                }\n            }\n        }\n\n        // see notes above\n        colsToDispatchEventFor.forEach(col => {\n            col.fireColumnWidthChangedEvent(source);\n        });\n\n        this.setLeftValues(source);\n        this.updateBodyWidths();\n\n        if (silent) { return; }\n\n        this.dispatchColumnResizedEvent(colsToDispatchEventFor, true, source);\n    }\n\n    private buildDisplayedTrees(visibleColumns: Column[]) {\n        const leftVisibleColumns: Column[] = [];\n        const rightVisibleColumns: Column[] = [];\n        const centerVisibleColumns: Column[] = [];\n\n        visibleColumns.forEach(column => {\n            switch (column.getPinned()) {\n                case \"left\":\n                    leftVisibleColumns.push(column);\n                    break;\n                case \"right\":\n                    rightVisibleColumns.push(column);\n                    break;\n                default:\n                    centerVisibleColumns.push(column);\n                    break;\n            }\n        });\n\n        const groupInstanceIdCreator = new GroupInstanceIdCreator();\n\n        this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(\n            leftVisibleColumns, groupInstanceIdCreator, 'left', this.displayedTreeLeft);\n        this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(\n            rightVisibleColumns, groupInstanceIdCreator, 'right', this.displayedTreeRight);\n        this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(\n            centerVisibleColumns, groupInstanceIdCreator, null, this.displayedTreeCentre);\n\n        this.updateDisplayedMap();\n    }\n\n    private updateDisplayedMap(): void {\n        this.displayedColumnsAndGroupsMap = {};\n\n        const func = (child: IHeaderColumn) => {\n            this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;\n        };\n\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);\n    }\n\n    public isDisplayed(item: IHeaderColumn): boolean {\n        const fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];\n        // check for reference, in case new column / group with same id is now present\n        return fromMap === item;\n    }\n\n    private updateOpenClosedVisibilityInColumnGroups(): void {\n        const allColumnGroups = this.getAllDisplayedTrees();\n\n        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, child => {\n            if (child instanceof ColumnGroup) {\n                child.calculateDisplayedColumns();\n            }\n        });\n    }\n\n    public getGroupAutoColumns(): Column[] | null {\n        return this.groupAutoColumns;\n    }\n\n    /**\n     * Creates new auto group columns if required\n     * @returns whether auto cols have changed\n     */\n    private createGroupAutoColumnsIfNeeded(): boolean {\n        const forceRecreateAutoGroups = this.forceRecreateAutoGroups;\n        this.forceRecreateAutoGroups = false;\n        if (!this.autoGroupsNeedBuilding) { return false; }\n\n        this.autoGroupsNeedBuilding = false;\n\n        const groupFullWidthRow = this.gridOptionsService.isGroupUseEntireRow(this.pivotMode);\n        // we need to allow suppressing auto-column separately for group and pivot as the normal situation\n        // is CSRM and user provides group column themselves for normal view, but when they go into pivot the\n        // columns are generated by the grid so no opportunity for user to provide group column. so need a way\n        // to suppress auto-col for grouping only, and not pivot.\n        // however if using Viewport RM or SSRM and user is providing the columns, the user may wish full control\n        // of the group column in this instance.\n        const suppressAutoColumn = this.pivotMode ?\n            this.gridOptionsService.get('pivotSuppressAutoColumn') : this.isGroupSuppressAutoColumn();\n\n        const groupingActive = this.rowGroupColumns.length > 0 || this.gridOptionsService.get('treeData');\n        const needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;\n\n        if (needAutoColumns) {\n            const newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);\n            const autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);\n            // we force recreate so new group cols pick up the new\n            // definitions. otherwise we could ignore the new cols because they appear to be the same.\n            if (autoColsDifferent || forceRecreateAutoGroups) {\n                this.groupAutoColumns = newAutoGroupCols;\n                return true;\n            }\n        } else {\n            this.groupAutoColumns = null;\n        }\n        return false;\n    }\n\n    public isGroupSuppressAutoColumn() {\n        const groupDisplayType = this.gridOptionsService.get('groupDisplayType');\n        const isCustomRowGroups = groupDisplayType === 'custom';\n        if (isCustomRowGroups) { return true; }\n    \n        const treeDataDisplayType = this.gridOptionsService.get('treeDataDisplayType');\n        return treeDataDisplayType === 'custom';\n    }\n\n    private autoColsEqual(colsA: Column[] | null, colsB: Column[] | null): boolean {\n        return areEqual(colsA, colsB, (a, b) => a.getColId() === b.getColId());\n    }\n\n    private getWidthOfColsInList(columnList: Column[]) {\n        return columnList.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n\n    public getFirstDisplayedColumn(): Column | null {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const queryOrder: ('getDisplayedLeftColumns' | 'getDisplayedCenterColumns' | 'getDisplayedRightColumns')[] = [\n            'getDisplayedLeftColumns',\n            'getDisplayedCenterColumns',\n            'getDisplayedRightColumns'\n        ];\n\n        if (isRtl) {\n            queryOrder.reverse();\n        }\n\n        for (let i = 0; i < queryOrder.length; i++) {\n            const container = this[queryOrder[i]]();\n            if (container.length) {\n                return isRtl ? last(container) : container[0];\n            }\n        }\n\n        return null;\n    }\n\n    public setColumnHeaderHeight(col: Column, height: number): void {\n        const changed = col.setAutoHeaderHeight(height);\n\n        if (changed) {\n            const event: WithoutGridCommon<ColumnEvent> = {\n                type: Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,\n                column: col,\n                columns: [col],\n                source: 'autosizeColumnHeaderHeight',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public getColumnGroupHeaderRowHeight(): number {\n        if (this.isPivotMode()) {\n            return this.getPivotGroupHeaderHeight() as number;\n        }\n        return this.getGroupHeaderHeight() as number;\n    }\n\n    public getColumnHeaderRowHeight(): number {\n        const defaultHeight: number = (this.isPivotMode() ?\n            this.getPivotHeaderHeight() :\n            this.getHeaderHeight()) as number;\n\n        const displayedHeights = this.getAllDisplayedColumns()\n            .filter((col) => col.isAutoHeaderHeight())\n            .map((col) => col.getAutoHeaderHeight() || 0);\n\n        return Math.max(defaultHeight, ...displayedHeights);\n    }\n\n    public getHeaderHeight(): number {\n        return this.gridOptionsService.get('headerHeight') ?? this.environment.getFromTheme(25, 'headerHeight');\n    }\n    public getFloatingFiltersHeight(): number {\n        return this.gridOptionsService.get('floatingFiltersHeight') ?? this.getHeaderHeight();\n    }\n    public getGroupHeaderHeight(): number {\n        return this.gridOptionsService.get('groupHeaderHeight') ?? this.getHeaderHeight();\n    }\n    private getPivotHeaderHeight(): number {\n        return this.gridOptionsService.get('pivotHeaderHeight') ?? this.getHeaderHeight();\n    }\n    public getPivotGroupHeaderHeight(): number {\n        return this.gridOptionsService.get('pivotGroupHeaderHeight') ?? this.getGroupHeaderHeight();\n    }\n\n    public queueResizeOperations(): void {\n        this.shouldQueueResizeOperations = true;\n    }\n\n    public processResizeOperations(): void {\n        this.shouldQueueResizeOperations = false;\n        this.resizeOperationQueue.forEach(resizeOperation => resizeOperation());\n        this.resizeOperationQueue = [];\n    }\n\n    public resetColumnDefIntoColumn(column: Column, source: ColumnEventType): boolean {\n        const userColDef = column.getUserProvidedColDef();\n        if (!userColDef) { return false; }\n        const newColDef = this.columnFactory.addColumnDefaultAndTypes(userColDef, column.getColId());\n        column.setColDef(newColDef, userColDef, source);\n        return true;\n    }\n\n    public isColumnGroupingLocked(column: Column): boolean {\n        const groupLockGroupColumns = this.gridOptionsService.get('groupLockGroupColumns');\n        if (!column.isRowGroupActive() || groupLockGroupColumns === 0) {\n            return false;\n        }\n\n        if (groupLockGroupColumns === -1) {\n            return true;\n        }\n\n        const colIndex = this.rowGroupColumns.findIndex(groupCol => groupCol.getColId() === column.getColId());\n        return groupLockGroupColumns > colIndex;\n    }\n\n    public generateColumnStateForRowGroupAndPivotIndexes(\n        updatedRowGroupColumnState: { [colId: string]: ColumnState },\n        updatedPivotColumnState: { [colId: string]: ColumnState }\n    ): ColumnState[] {\n        // Generally columns should appear in the order they were before. For any new columns, these should appear in the original col def order.\n        // The exception is for columns that were added via `addGroupColumns`. These should appear at the end.\n        // We don't have to worry about full updates, as in this case the arrays are correct, and they won't appear in the updated lists.\n\n        let existingColumnStateUpdates: { [colId: string]: ColumnState } = {};\n\n        const orderColumns = (\n            updatedColumnState: { [colId: string]: ColumnState }, colList: Column[],\n            enableProp: 'rowGroup' | 'pivot', initialEnableProp: 'initialRowGroup' | 'initialPivot',\n            indexProp: 'rowGroupIndex' | 'pivotIndex', initialIndexProp: 'initialRowGroupIndex' | 'initialPivotIndex'\n        ) => {\n            if (!colList.length || !this.primaryColumns) { return []; }\n            const updatedColIdArray = Object.keys(updatedColumnState);\n            const updatedColIds = new Set(updatedColIdArray);\n            const newColIds = new Set(updatedColIdArray);\n            const allColIds = new Set(colList.map(column => {\n                const colId = column.getColId();\n                newColIds.delete(colId);\n                return colId;\n            }).concat(updatedColIdArray));\n\n            const colIdsInOriginalOrder: string[] = [];\n            const originalOrderMap: { [colId: string]: number } = {};\n            let orderIndex = 0;\n            for (let i = 0; i < this.primaryColumns.length; i++) {\n                const colId = this.primaryColumns[i].getColId();\n                if (allColIds.has(colId)) {\n                    colIdsInOriginalOrder.push(colId);\n                    originalOrderMap[colId] = orderIndex++;\n                }\n            }\n\n            // follow approach in `resetColumnState`\n            let index = 1000;\n            let hasAddedNewCols = false;\n            let lastIndex = 0;\n\n            const processPrecedingNewCols = (colId: string) => {\n                const originalOrderIndex = originalOrderMap[colId];\n                for (let i = lastIndex; i < originalOrderIndex; i++) {\n                    const newColId = colIdsInOriginalOrder[i];\n                    if (newColIds.has(newColId)) {\n                        updatedColumnState[newColId][indexProp] = index++;\n                        newColIds.delete(newColId);\n                    }\n                }\n                lastIndex = originalOrderIndex;\n            }\n\n            colList.forEach(column => {\n                const colId = column.getColId();\n                if (updatedColIds.has(colId)) {\n                    // New col already exists. Add any other new cols that should be before it.\n                    processPrecedingNewCols(colId);\n                    updatedColumnState[colId][indexProp] = index++;\n                } else {\n                    const colDef = column.getColDef();\n                    const missingIndex = colDef[indexProp] === null || (colDef[indexProp] === undefined && colDef[initialIndexProp] == null);\n                    if (missingIndex) {\n                        if (!hasAddedNewCols) {\n                            const propEnabled = colDef[enableProp] || (colDef[enableProp] === undefined && colDef[initialEnableProp]);\n                            if (propEnabled) {\n                                processPrecedingNewCols(colId);\n                            } else {\n                                // Reached the first manually added column. Add all the new columns now.\n                                newColIds.forEach(newColId => {\n                                    // Rather than increment the index, just use the original order index - doesn't need to be contiguous.\n                                    updatedColumnState[newColId][indexProp] = index + originalOrderMap[newColId];\n                                });\n                                index += colIdsInOriginalOrder.length;\n                                hasAddedNewCols = true;\n                            }\n                        }\n                        if (!existingColumnStateUpdates[colId]) {\n                            existingColumnStateUpdates[colId] = { colId };\n                        }\n                        existingColumnStateUpdates[colId][indexProp] = index++;\n                    }\n                }\n            });\n        }\n\n        orderColumns(updatedRowGroupColumnState, this.rowGroupColumns, 'rowGroup', 'initialRowGroup', 'rowGroupIndex', 'initialRowGroupIndex');\n        orderColumns(updatedPivotColumnState, this.pivotColumns, 'pivot', 'initialPivot', 'pivotIndex', 'initialPivotIndex');\n\n        return Object.values(existingColumnStateUpdates);\n    }\n\n    private onColumnsReady(): void {\n        const autoSizeStrategy = this.gridOptionsService.get('autoSizeStrategy');\n        if (!autoSizeStrategy) { return; }\n\n        const { type } = autoSizeStrategy;\n        // ensure things like aligned grids have linked first\n        setTimeout(() => {\n            if (type === 'fitGridWidth') {\n                const { columnLimits: propColumnLimits, defaultMinWidth, defaultMaxWidth } = autoSizeStrategy;\n                const columnLimits = propColumnLimits?.map(({ colId: key, minWidth, maxWidth }) => ({\n                    key,\n                    minWidth,\n                    maxWidth\n                }));\n                this.ctrlsService.getGridBodyCtrl().sizeColumnsToFit({\n                    defaultMinWidth,\n                    defaultMaxWidth,\n                    columnLimits\n                });\n            } else if (type === 'fitProvidedWidth') {\n                this.sizeColumnsToFit(autoSizeStrategy.width, 'sizeColumnsToFit');\n            }\n        });\n    }\n\n    private onFirstDataRendered(): void {\n        const autoSizeStrategy = this.gridOptionsService.get('autoSizeStrategy');\n        if (autoSizeStrategy?.type !== 'fitCellContents') { return; }\n\n        const { colIds: columns, skipHeader } = autoSizeStrategy;\n        // ensure render has finished\n        setTimeout(() => {\n            if (columns) {\n                this.autoSizeColumns({\n                    columns,\n                    skipHeader,\n                    source: 'autosizeColumns'\n                });\n            } else {\n                this.autoSizeAllColumns('autosizeColumns', skipHeader);\n            }\n        });\n    }\n}\n\nexport function convertSourceType(source: PropertyChangedSource): ColumnEventType {\n    // unfortunately they do not match so need to perform conversion\n    return source === 'gridOptionsUpdated' ? 'gridOptionsChanged' : source;\n}", "import { IHeaderColumn } from \"../interfaces/iHeaderColumn\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { IProvidedColumn } from \"../interfaces/iProvidedColumn\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { attrToNumber } from \"../utils/generic\";\nimport { ColDef } from \"../entities/colDef\";\n\n// takes in a list of columns, as specified by the column definitions, and returns column groups\n@Bean('columnUtils')\nexport class ColumnUtils extends BeanStub {\n\n    public calculateColMinWidth(colDef: ColDef): number {\n        return colDef.minWidth != null ? colDef.minWidth : this.environment.getMinColWidth();\n    }\n\n    public calculateColMaxWidth(colDef: ColDef): number {\n        return colDef.maxWidth != null ? colDef.maxWidth : Number.MAX_SAFE_INTEGER;\n    }\n\n    public calculateColInitialWidth(colDef: ColDef): number {\n        const minColWidth = this.calculateColMinWidth(colDef);\n        const maxColWidth = this.calculateColMaxWidth(colDef);\n\n        let width : number;\n        const colDefWidth = attrToNumber(colDef.width);\n        const colDefInitialWidth = attrToNumber(colDef.initialWidth);\n\n        if (colDefWidth != null) {\n            width = colDefWidth;\n        } else if (colDefInitialWidth != null) {\n            width = colDefInitialWidth;\n        } else {\n            width = 200;\n        }\n\n        return Math.max(Math.min(width, maxColWidth), minColWidth);\n    }\n\n    public getOriginalPathForColumn(column: Column, originalBalancedTree: IProvidedColumn[]): ProvidedColumnGroup[] | null {\n        const result: ProvidedColumnGroup[] = [];\n        let found = false;\n\n        const recursePath = (balancedColumnTree: IProvidedColumn[], dept: number): void => {\n            for (let i = 0; i < balancedColumnTree.length; i++) {\n                if (found) { return; }\n                    // quit the search, so 'result' is kept with the found result\n\n                const node = balancedColumnTree[i];\n                if (node instanceof ProvidedColumnGroup) {\n                    const nextNode = node;\n                    recursePath(nextNode.getChildren(), dept + 1);\n                    result[dept] = node;\n                } else if (node === column) {\n                    found = true;\n                }\n            }\n        };\n\n        recursePath(originalBalancedTree, 0);\n\n        // we should always find the path, but in case there is a bug somewhere, returning null\n        // will make it fail rather than provide a 'hard to track down' bug\n        return found ? result : null;\n    }\n\n    public depthFirstOriginalTreeSearch(parent: ProvidedColumnGroup | null, tree: IProvidedColumn[], callback: (treeNode: IProvidedColumn, parent: ProvidedColumnGroup | null) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IProvidedColumn) => {\n            if (child instanceof ProvidedColumnGroup) {\n                this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n            }\n            callback(child, parent);\n        });\n\n    }\n\n    public depthFirstAllColumnTreeSearch(tree: IHeaderColumn[] | null, callback: (treeNode: IHeaderColumn) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);\n            }\n            callback(child);\n        });\n\n    }\n\n    public depthFirstDisplayedColumnTreeSearch(tree: IHeaderColumn[] | null, callback: (treeNode: IHeaderColumn) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);\n            }\n            callback(child);\n        });\n    }\n}\n", "import { Column, ColumnPinnedType } from \"../entities/column\";\nimport { GroupInstanceIdCreator } from \"./groupInstanceIdCreator\";\nimport { IHeaderColumn } from \"../interfaces/iHeaderColumn\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists } from \"../utils/generic\";\n\n// takes in a list of columns, as specified by the column definitions, and returns column groups\n@Bean('displayedGroupCreator')\nexport class DisplayedGroupCreator extends BeanStub {\n\n    public createDisplayedGroups(\n        // all displayed columns sorted - this is the columns the grid should show\n        sortedVisibleColumns: Column[],\n        // creates unique id's for the group\n        groupInstanceIdCreator: GroupInstanceIdCreator,\n        // whether it's left, right or center col\n        pinned: ColumnPinnedType,\n        // we try to reuse old groups if we can, to allow gui to do animation\n        oldDisplayedGroups?: IHeaderColumn[]): IHeaderColumn[] {\n        const oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups!);\n\n        /**\n         * The following logic starts at the leaf level of columns, iterating through them to build their parent\n         * groups when the parents match.\n         * \n         * The created groups are then added to an array, and similarly iterated on until we reach the top level.\n         * \n         * When row groups have no original parent, it's added to the result.\n         */\n        const topLevelResultCols: (Column | ColumnGroup)[] = [];\n        \n        // this is an array of cols or col groups at one level of depth, starting from leaf and ending at root\n        let groupsOrColsAtCurrentLevel: (Column | ColumnGroup)[] = sortedVisibleColumns;\n        while (groupsOrColsAtCurrentLevel.length) {\n            // store what's currently iterating so the function can build the next level of col groups\n            const currentlyIterating = groupsOrColsAtCurrentLevel;\n            groupsOrColsAtCurrentLevel = [];\n\n            // store the index of the last row which was different from the previous row, this is used as a slice\n            // index for finding the children to group together\n            let lastGroupedColIdx = 0;\n\n            // create a group of children from lastGroupedColIdx to the provided `to` parameter\n            const createGroupToIndex = (to: number) => {\n                const from = lastGroupedColIdx;\n                lastGroupedColIdx = to;\n\n                const previousNode = currentlyIterating[from];\n                const previousNodeProvided = previousNode instanceof ColumnGroup ? previousNode.getProvidedColumnGroup() : previousNode;\n                const previousNodeParent = previousNodeProvided.getOriginalParent();\n\n                if (previousNodeParent == null) {\n                    // if the last node was different, and had a null parent, then we add all the nodes to the final\n                    // results)\n                    for (let i = from; i < to; i++) {\n                        topLevelResultCols.push(currentlyIterating[i]);\n                    }\n                    return;\n                }\n\n                // the parent differs from the previous node, so we create a group from the previous node\n                // and add all to the result array, except the current node.\n                const newGroup = this.createColumnGroup(\n                    previousNodeParent,\n                    groupInstanceIdCreator,\n                    oldColumnsMapped,\n                    pinned\n                );\n\n                for (let i = from; i < to; i++) {\n                    newGroup.addChild(currentlyIterating[i]);\n                }\n                groupsOrColsAtCurrentLevel.push(newGroup);\n            };\n\n            for (let i = 1; i < currentlyIterating.length; i++) {\n                const thisNode = currentlyIterating[i];\n                const thisNodeProvided = thisNode instanceof ColumnGroup ? thisNode.getProvidedColumnGroup() : thisNode;\n                const thisNodeParent = thisNodeProvided.getOriginalParent();\n\n                const previousNode = currentlyIterating[lastGroupedColIdx];\n                const previousNodeProvided = previousNode instanceof ColumnGroup ? previousNode.getProvidedColumnGroup() : previousNode;\n                const previousNodeParent = previousNodeProvided.getOriginalParent();\n\n                if (thisNodeParent !== previousNodeParent) {\n                    createGroupToIndex(i);\n                }\n            }\n\n            if (lastGroupedColIdx < currentlyIterating.length) {\n                createGroupToIndex(currentlyIterating.length);\n            }\n        }\n        this.setupParentsIntoColumns(topLevelResultCols, null);\n        return topLevelResultCols;\n    }\n\n    private createColumnGroup(\n            providedGroup: ProvidedColumnGroup,\n            groupInstanceIdCreator: GroupInstanceIdCreator,\n            oldColumnsMapped: {[key: string]: ColumnGroup},\n            pinned: ColumnPinnedType\n        ): ColumnGroup {\n\n        const groupId = providedGroup.getGroupId();\n        const instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);\n        const uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);\n\n        let columnGroup: ColumnGroup | null = oldColumnsMapped[uniqueId];\n\n        // if the user is setting new colDefs, it is possible that the id's overlap, and we\n        // would have a false match from above. so we double check we are talking about the\n        // same original column group.\n        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {\n            columnGroup = null;\n        }\n\n        if (exists(columnGroup)) {\n            // clean out the old column group here, as we will be adding children into it again\n            columnGroup.reset();\n        } else {\n            columnGroup = new ColumnGroup(providedGroup, groupId, instanceId, pinned);\n            this.context.createBean(columnGroup);\n        }\n\n        return columnGroup;\n    }\n\n    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup\n    private mapOldGroupsById(displayedGroups: IHeaderColumn[]): {[uniqueId: string]: ColumnGroup} {\n        const result: {[uniqueId: string]: ColumnGroup} = {};\n\n        const recursive = (columnsOrGroups: IHeaderColumn[] | null) => {\n            columnsOrGroups!.forEach(columnOrGroup => {\n                if (columnOrGroup instanceof ColumnGroup) {\n                    const columnGroup = columnOrGroup;\n                    result[columnOrGroup.getUniqueId()] = columnGroup;\n                    recursive(columnGroup.getChildren());\n                }\n            });\n        };\n\n        if (displayedGroups) {\n            recursive(displayedGroups);\n        }\n\n        return result;\n    }\n\n    private setupParentsIntoColumns(columnsOrGroups: IHeaderColumn[] | null, parent: ColumnGroup | null): void {\n        columnsOrGroups!.forEach(columnsOrGroup => {\n            columnsOrGroup.setParent(parent);\n            if (columnsOrGroup instanceof ColumnGroup) {\n                const columnGroup = columnsOrGroup;\n                this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);\n            }\n        });\n    }\n}\n", "import { GridOptions } from \"./entities/gridOptions\";\nimport { AgGridCommon } from \"./interfaces/iCommon\";\n\ntype GridOptionKey = keyof GridOptions;\n\ntype GetKeys<T, U> = {\n    [K in keyof T]: U extends T[K] ? K :\n    (T[K] extends U | null | undefined ? K : never) //Reverse match for string literal types\n}[keyof T];\n\n/**\n *  Get the GridProperties that are of type `any`.\n *  Works by finding the properties that can extend a non existing string.\n *  This will only be the properties of type `any`.\n */\nexport type AnyGridOptions = {\n    [K in keyof GridOptions]: GridOptions[K] extends 'NO_MATCH' ? K : never\n}[keyof GridOptions];\n\n/**\n * Get all the GridOptions properties of the provided type.\n * Will also include `any` properties. \n */\ntype KeysLike<U> = Exclude<GetKeys<GridOptions, U>, undefined>;\n/**\n * Get all the GridOption properties that strictly contain the provided type.\n * Does not include `any` properties.\n */\ntype KeysOfType<U> = Exclude<GetKeys<GridOptions, U>, AnyGridOptions>;\ntype CallbackKeys = KeysOfType<(any: AgGridCommon<any, any>) => any>;\n/** All function properties excluding those explicity match the common callback interface. */\ntype FunctionKeys = Exclude<KeysLike<Function>, CallbackKeys>;\n\nexport const INITIAL_GRID_OPTION_KEYS = {\n    enableBrowserTooltips: true,\n    tooltipTrigger: true,\n    tooltipMouseTrack: true,\n    tooltipShowMode: true,\n    tooltipInteraction: true,\n    defaultColGroupDef: true,\n    suppressAutoSize: true,\n    skipHeaderOnAutoSize: true,\n    autoSizeStrategy: true,\n    components: true,\n    stopEditingWhenCellsLoseFocus: true,\n    undoRedoCellEditing: true,\n    undoRedoCellEditingLimit: true,\n    excelStyles: true,\n    cacheQuickFilter: true,\n    excludeHiddenColumnsFromQuickFilter: true,\n    advancedFilterModel: true,\n    customChartThemes: true,\n    chartThemeOverrides: true,\n    enableChartToolPanelsButton: true,\n    suppressChartToolPanelsButton: true,\n    chartToolPanelsDef: true,\n    loadingCellRendererSelector: true,\n    localeText: true,\n    keepDetailRows: true,\n    keepDetailRowsCount: true,\n    detailRowHeight: true,\n    detailRowAutoHeight: true,\n    tabIndex: true,\n    valueCache: true,\n    valueCacheNeverExpires: true,\n    enableCellExpressions: true,\n    suppressParentsInRowNodes: true,\n    suppressTouch: true,\n    suppressAsyncEvents: true,\n    suppressBrowserResizeObserver: true,\n    suppressPropertyNamesCheck: true,\n    debug: true,\n    loadingOverlayComponent: true,\n    suppressLoadingOverlay: true,\n    noRowsOverlayComponent: true,\n    paginationPageSizeSelector: true,\n    paginateChildRows: true,\n    pivotPanelShow: true,\n    pivotSuppressAutoColumn: true,\n    suppressExpandablePivotGroups: true,\n    aggFuncs: true,\n    suppressAggFuncInHeader: true,\n    suppressAggAtRootLevel: true,\n    removePivotHeaderRowWhenSingleValueColumn: true,\n    allowShowChangeAfterFilter: true,\n    ensureDomOrder: true,\n    enableRtl: true,\n    suppressColumnVirtualisation: true,\n    suppressMaxRenderedRowRestriction: true,\n    suppressRowVirtualisation: true,\n    rowDragText: true,\n    suppressGroupMaintainValueType: true,\n    groupLockGroupColumns: true,\n    rowGroupPanelSuppressSort: true,\n    suppressGroupRowsSticky: true,\n    rowModelType: true,\n    cacheOverflowSize: true,\n    infiniteInitialRowCount: true,\n    serverSideInitialRowCount: true,\n    suppressServerSideInfiniteScroll: true,\n    maxBlocksInCache: true,\n    maxConcurrentDatasourceRequests: true,\n    blockLoadDebounceMillis: true,\n    serverSideOnlyRefreshFilteredGroups: true,\n    serverSidePivotResultFieldSeparator: true,\n    viewportRowModelPageSize: true,\n    viewportRowModelBufferSize: true,\n    debounceVerticalScrollbar: true,\n    suppressAnimationFrame: true,\n    suppressPreventDefaultOnMouseWheel: true,\n    scrollbarWidth: true,\n    icons: true,\n    suppressRowTransform: true,\n    gridId: true,\n    functionsPassive: true,\n    enableGroupEdit: true,\n    initialState: true,\n    processUnpinnedColumns: true,\n    createChartContainer: true,\n    getLocaleText: true,\n    getRowId: true,\n    reactiveCustomComponents: true,\n    columnMenu: true,\n};\n\ntype InitialGridOptionKey = keyof typeof INITIAL_GRID_OPTION_KEYS;\n\nexport type ManagedGridOptionKey = Exclude<GridOptionKey, InitialGridOptionKey>;\n\nexport type ManagedGridOptions<TData = any> = {\n    [K in (ManagedGridOptionKey)]?: GridOptions<TData>[K]\n};\n\n/**\n * These keys are used for validating properties supplied on a gridOptions object, and for code generation.\n * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.\n */\nexport class PropertyKeys {\n    public static STRING_PROPERTIES: KeysOfType<string>[] = [\n        'rowSelection', 'overlayLoadingTemplate', 'overlayNoRowsTemplate', 'gridId', 'quickFilterText', 'rowModelType', 'editType', 'domLayout', \n        'clipboardDelimiter', 'rowGroupPanelShow', 'multiSortKey', 'pivotColumnGroupTotals', 'pivotRowTotals', 'pivotPanelShow', 'fillHandleDirection',\n        'groupDisplayType', 'treeDataDisplayType', 'colResizeDefault', 'tooltipTrigger', 'serverSidePivotResultFieldSeparator', 'columnMenu', 'tooltipShowMode'\n    ];\n\n    public static OBJECT_PROPERTIES: KeysLike<object | HTMLElement>[] = [\n        'components', 'rowStyle', 'context', 'autoGroupColumnDef', 'localeText', 'icons', 'datasource', 'serverSideDatasource', 'viewportDatasource',\n        'groupRowRendererParams', 'aggFuncs', 'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultCsvExportParams',\n        'defaultExcelExportParams', 'columnTypes', 'rowClassRules', 'detailCellRendererParams', 'loadingCellRendererParams', 'loadingOverlayComponentParams',\n        'noRowsOverlayComponentParams', 'popupParent', 'statusBar', 'sideBar', 'chartThemeOverrides', 'customChartThemes', 'chartToolPanelsDef',\n        'dataTypeDefinitions', 'advancedFilterModel', 'advancedFilterParent', 'advancedFilterBuilderParams', 'initialState', 'autoSizeStrategy',\n    ];\n\n    public static ARRAY_PROPERTIES: KeysOfType<any[]>[] = [\n        'sortingOrder', 'alignedGrids', 'rowData', 'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData', 'chartThemes',\n        'rowClass', 'paginationPageSizeSelector',\n    ];\n\n    public static NUMBER_PROPERTIES: KeysOfType<number>[] = [\n        'rowHeight', 'detailRowHeight', 'rowBuffer', 'headerHeight', 'groupHeaderHeight', 'groupLockGroupColumns', 'floatingFiltersHeight',\n        'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded', 'pivotDefaultExpanded', 'viewportRowModelPageSize',\n        'viewportRowModelBufferSize', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests', 'tooltipShowDelay',\n        'tooltipHideDelay', 'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount', 'serverSideInitialRowCount',\n        'scrollbarWidth', 'asyncTransactionWaitMillis', 'blockLoadDebounceMillis', 'keepDetailRowsCount', 'undoRedoCellEditingLimit',\n        'cellFlashDelay', 'cellFadeDelay', 'cellFlashDuration', 'cellFadeDuration', 'tabIndex', 'pivotMaxGeneratedColumns',\n    ];\n\n    public static BOOLEAN_PROPERTIES: KeysOfType<boolean>[] = [\n        'suppressMakeColumnVisibleAfterUnGroup', 'suppressRowClickSelection', 'suppressCellFocus', 'suppressHeaderFocus', 'suppressHorizontalScroll', 'groupSelectsChildren',\n        'alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll', 'debug', 'enableBrowserTooltips', 'enableCellExpressions', 'groupIncludeTotalFooter',\n        'groupSuppressBlankHeader', 'suppressMenuHide', 'suppressRowDeselection', 'unSortIcon', 'suppressMultiSort', 'alwaysMultiSort', 'singleClickEdit',\n        'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize', 'skipHeaderOnAutoSize', 'suppressParentsInRowNodes', 'suppressColumnMoveAnimation',\n        'suppressMovableColumns', 'suppressFieldDotNotation', 'enableRangeSelection', 'enableRangeHandle', 'enableFillHandle', 'suppressClearOnFillReduction',\n        'deltaSort', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey', 'suppressContextMenu', 'enableCellChangeFlash', \n        'suppressDragLeaveHidesColumns', 'suppressRowGroupHidesColumns', 'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel',\n        'suppressCopyRowsToClipboard',  'copyHeadersToClipboard', 'copyGroupHeadersToClipboard', 'pivotMode', 'suppressAggFuncInHeader',\n        'suppressColumnVirtualisation', 'alwaysAggregateAtRootLevel', 'suppressAggAtRootLevel', 'suppressFocusAfterRefresh', 'functionsPassive',\n        'functionsReadOnly', 'animateRows',  'groupSelectsFiltered', 'groupRemoveSingleChildren', 'groupRemoveLowestSingleChildren', 'enableRtl',\n        'suppressClickEdit', 'rowDragEntireRow', 'rowDragManaged', 'suppressRowDrag', 'suppressMoveWhenRowDragging', 'rowDragMultiRow', 'enableGroupEdit',\n        'embedFullWidthRows', 'suppressPaginationPanel', 'groupHideOpenParents', 'groupAllowUnbalanced', 'pagination', 'paginationAutoPageSize',\n        'suppressScrollOnNewData', 'suppressScrollWhenPopupsAreOpen', 'purgeClosedRowNodes', 'cacheQuickFilter', 'includeHiddenColumnsInQuickFilter',\n        'excludeHiddenColumnsFromQuickFilter', 'ensureDomOrder', 'accentedSort', 'suppressChangeDetection', 'valueCache', 'valueCacheNeverExpires',\n        'aggregateOnlyChangedColumns', 'suppressAnimationFrame', 'suppressExcelExport', 'suppressCsvExport', 'includeHiddenColumnsInAdvancedFilter',\n        'suppressMultiRangeSelection', 'enterMovesDown', 'enterMovesDownAfterEdit', 'enterNavigatesVerticallyAfterEdit', 'enterNavigatesVertically',\n        'suppressPropertyNamesCheck', 'rowMultiSelectWithClick', 'suppressRowHoverHighlight', 'suppressRowTransform', 'suppressClipboardPaste',\n        'suppressLastEmptyLineOnPaste', 'enableCharts', 'enableChartToolPanelsButton', 'suppressChartToolPanelsButton', 'suppressMaintainUnsortedOrder',\n        'enableCellTextSelection', 'suppressBrowserResizeObserver', 'suppressMaxRenderedRowRestriction',  'excludeChildrenWhenTreeDataFiltering',\n        'tooltipMouseTrack', 'tooltipInteraction', 'keepDetailRows', 'paginateChildRows', 'preventDefaultOnContextMenu', 'undoRedoCellEditing',\n        'allowDragFromColumnsToolPanel', 'pivotSuppressAutoColumn', 'suppressExpandablePivotGroups', 'debounceVerticalScrollbar', 'detailRowAutoHeight',\n        'serverSideFilterAllLevels', 'serverSideSortAllLevels', 'serverSideEnableClientSideSort', 'serverSideOnlyRefreshFilteredGroups', 'serverSideSortOnServer', 'serverSideFilterOnServer',\n        'suppressAggFilteredOnly', 'showOpenedGroup', 'suppressClipboardApi', 'suppressModelUpdateAfterUpdateTransaction', 'stopEditingWhenCellsLoseFocus',\n        'maintainColumnOrder', 'groupMaintainOrder', 'columnHoverHighlight', 'readOnlyEdit', 'suppressRowVirtualisation', 'enableCellEditingOnBackspace',\n        'resetRowDataOnUpdate', 'removePivotHeaderRowWhenSingleValueColumn', 'suppressCopySingleCellRanges', 'suppressGroupRowsSticky', 'suppressCutToClipboard',\n        'suppressServerSideInfiniteScroll', 'rowGroupPanelSuppressSort', 'allowShowChangeAfterFilter','enableAdvancedFilter', 'masterDetail', 'treeData',\n        'suppressGroupMaintainValueType', 'reactiveCustomComponents',\n    ];\n\n    /** You do not need to include event callbacks in this list, as they are generated automatically. */\n    public static FUNCTIONAL_PROPERTIES: FunctionKeys[] = [\n        'doesExternalFilterPass', 'processPivotResultColDef', 'processPivotResultColGroupDef', 'getBusinessKeyForNode',  'isRowSelectable', 'rowDragText',\n        'groupRowRenderer', 'fullWidthCellRenderer', 'loadingCellRenderer',  'loadingOverlayComponent', 'noRowsOverlayComponent', 'detailCellRenderer',\n        'quickFilterParser', 'quickFilterMatcher'\n    ];\n\n    /** These callbacks extend AgGridCommon interface */\n    public static CALLBACK_PROPERTIES: CallbackKeys[] = [\n        'getLocaleText', 'isExternalFilterPresent', 'getRowHeight', 'getRowClass', 'getRowStyle', 'getContextMenuItems', 'getMainMenuItems',\n        'processRowPostCreate', 'processCellForClipboard', 'getGroupRowAgg', 'isFullWidthRow', 'sendToClipboard', 'navigateToNextHeader',\n        'tabToNextHeader', 'navigateToNextCell', 'tabToNextCell', 'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount',\n        'getDataPath', 'isRowMaster', 'postSortRows', 'processHeaderForClipboard', 'processUnpinnedColumns', 'processGroupHeaderForClipboard',\n        'paginationNumberFormatter', 'processDataFromClipboard', 'getServerSideGroupKey', 'isServerSideGroup', 'createChartContainer',\n        'getChartToolbarItems', 'fillOperation', 'isApplyServerSideTransaction','getServerSideGroupLevelParams', 'isServerSideGroupOpenByDefault',\n        'isGroupOpenByDefault', 'initialGroupOrderComparator', 'groupIncludeFooter', 'loadingCellRendererSelector', 'getRowId', 'groupAggFiltering',\n        'chartMenuItems'\n    ];\n\n    public static FUNCTION_PROPERTIES: GridOptionKey[] = [\n        ...PropertyKeys.FUNCTIONAL_PROPERTIES,\n        ...PropertyKeys.CALLBACK_PROPERTIES\n    ];\n\n    public static ALL_PROPERTIES: GridOptionKey[] = [\n        ...PropertyKeys.ARRAY_PROPERTIES,\n        ...PropertyKeys.OBJECT_PROPERTIES,\n        ...PropertyKeys.STRING_PROPERTIES,\n        ...PropertyKeys.NUMBER_PROPERTIES,\n        ...PropertyKeys.FUNCTION_PROPERTIES,\n        ...PropertyKeys.BOOLEAN_PROPERTIES\n    ];\n}\n", "import { GridOptions } from '../entities/gridOptions';\nimport { GridApi } from '../gridApi';\nimport { ComponentStateChangedEvent, Events } from '../events';\nimport { PropertyKeys } from '../propertyKeys';\nimport { iterateObject } from '../utils/object';\nimport { includes } from '../utils/array';\nimport { values } from '../utils/generic';\nimport { WithoutGridCommon } from '../interfaces/iCommon';\n\nexport class ComponentUtil {\n\n    // all events\n    public static EVENTS: string[] = values<any>(Events);\n\n    public static VUE_OMITTED_PROPERTY = 'AG-VUE-OMITTED-PROPERTY';\n\n    // events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components\n    /** Exclude the following internal events from code generation to prevent exposing these events via framework components */\n    public static EXCLUDED_INTERNAL_EVENTS: string[] = [\n        Events.EVENT_SCROLLBAR_WIDTH_CHANGED,\n        Events.EVENT_CHECKBOX_CHANGED,\n        Events.EVENT_HEIGHT_SCALE_CHANGED,\n        Events.EVENT_BODY_HEIGHT_CHANGED,\n        Events.EVENT_COLUMN_CONTAINER_WIDTH_CHANGED,\n        Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n        Events.EVENT_SCROLL_VISIBILITY_CHANGED,\n        Events.EVENT_COLUMN_HOVER_CHANGED,\n        Events.EVENT_FLASH_CELLS,\n        Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,\n        Events.EVENT_DISPLAYED_ROWS_CHANGED,\n        Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,\n        Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,\n        Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,\n        Events.EVENT_STORE_UPDATED,\n        Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n        Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n        Events.EVENT_FILL_START,\n        Events.EVENT_FILL_END,\n        Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START,\n        Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END,\n        Events.EVENT_FULL_WIDTH_ROW_FOCUSED,\n        Events.EVENT_HEADER_HEIGHT_CHANGED,\n        Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,\n        Events.EVENT_CELL_FOCUS_CLEARED,\n        Events.EVENT_GRID_STYLES_CHANGED,\n        Events.EVENT_FILTER_DESTROYED,\n        Events.EVENT_ROW_DATA_UPDATE_STARTED,\n        Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,\n        Events.EVENT_DATA_TYPES_INFERRED,\n        Events.EVENT_FIELD_VALUE_CHANGED,\n        Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n        Events.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED,\n        Events.EVENT_SUPPRESS_MENU_HIDE_CHANGED,\n        Events.EVENT_SUPPRESS_FIELD_DOT_NOTATION,\n        Events.EVENT_ROW_COUNT_READY,\n        Events.EVENT_SIDE_BAR_UPDATED,\n    ];\n\n    // events that are available for use by users of AG Grid and so should be documented\n    /** EVENTS that should be exposed via code generation for the framework components.  */\n    public static PUBLIC_EVENTS: string[] = ComponentUtil.EVENTS.filter(e => !includes(ComponentUtil.EXCLUDED_INTERNAL_EVENTS, e));\n\n    public static getCallbackForEvent(eventName: string): string {\n        if (!eventName || eventName.length < 2) {\n            return eventName;\n        }\n        return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n    }\n    // onXXX methods, based on the above events\n    public static EVENT_CALLBACKS: string[] = ComponentUtil.EVENTS.map(event => ComponentUtil.getCallbackForEvent(event));\n\n    public static STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;\n    public static OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;\n    public static ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;\n    public static NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;\n    public static BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;\n    public static FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;\n    public static ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;\n\n    public static ALL_PROPERTIES_AND_CALLBACKS = [...this.ALL_PROPERTIES, ...this.EVENT_CALLBACKS];\n    public static ALL_PROPERTIES_AND_CALLBACKS_SET = new Set(ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS);\n\n    private static getGridOptionKeys() {\n        // Vue does not have keys in prod so instead need to run through all the \n        // gridOptions checking for presence of a gridOption key.\n        return this.ALL_PROPERTIES_AND_CALLBACKS;\n    }\n\n    /** Combines component props / attributes with the provided gridOptions returning a new combined gridOptions object */\n    public static combineAttributesAndGridOptions(gridOptions: GridOptions | undefined, component: any): GridOptions {\n\n        // create empty grid options if none were passed\n        if (typeof gridOptions !== 'object') {\n            gridOptions = {} as GridOptions;\n        }\n        // shallow copy (so we don't change the provided object)\n        const mergedOptions = {...gridOptions} as any;\n        const keys = ComponentUtil.getGridOptionKeys();\n        // Loop through component props, if they are not undefined and a valid gridOption copy to gridOptions\n        keys.forEach(key => {\n            const value = component[key];\n            if (typeof value !== 'undefined' && value !== ComponentUtil.VUE_OMITTED_PROPERTY) {\n                mergedOptions[key] = value;\n            }\n        })\n        return mergedOptions;\n    }\n\n    public static processOnChange(changes: any, api: GridApi): void {\n        if (!changes) {\n            return;\n        }\n        \n        // Only process changes to properties that are part of the gridOptions\n        const gridChanges: any = {};\n        let hasChanges = false;\n        Object.keys(changes)\n            .filter((key) => ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS_SET.has(key))\n            .forEach((key) => {\n                gridChanges[key] = changes[key]\n                hasChanges = true;\n            });\n\n        if (!hasChanges) {\n            return;\n        }\n\n        api.__internalUpdateGridOptions(gridChanges);\n\n        // copy gridChanges into an event for dispatch\n        const event: WithoutGridCommon<ComponentStateChangedEvent> = {\n            type: Events.EVENT_COMPONENT_STATE_CHANGED\n        };\n\n        iterateObject(gridChanges, (key: string, value: any) => {\n            (event as any)[key] = value;\n        });\n\n        api.dispatchEvent(event);\n    }\n}\n", "import { Bean, ComponentMeta } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('agStackComponentsRegistry')\nexport class AgStackComponentsRegistry extends BeanStub {\n\n    private componentsMappedByName: { [key: string]: any } = {};\n\n    public setupComponents(components: ComponentMeta[]): void {\n        if (components) {\n            components.forEach(componentMeta => this.addComponent(componentMeta));\n        }\n    }\n\n    private addComponent(componentMeta: ComponentMeta): void {\n        // get name of the class as a string\n        // insert a dash after every capital letter\n        // let classEscaped = className.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n        const classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n        // put all to upper case\n        const classUpperCase = classEscaped.toUpperCase();\n        // finally store\n        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;\n    }\n\n    public getComponentClass(htmlTag: string): any {\n        return this.componentsMappedByName[htmlTag];\n    }\n\n}\n", "import { SortDirection } from '../entities/colDef';\n\nexport type ColumnSortState = 'ascending' | 'descending' | 'other' | 'none';\n\n// ARIA HELPER FUNCTIONS\nfunction toggleAriaAttribute(element: Element, attribute: string, value?: number | boolean | string | null) {\n    if (value == null || (typeof value === 'string' && value == '')) {\n        removeAriaAttribute(element, attribute);\n    } else {\n        setAriaAttribute(element, attribute, value);\n    }\n}\n\nfunction setAriaAttribute(element: Element, attribute: string, value: number | boolean | string): void {\n    element.setAttribute(ariaAttributeName(attribute), value.toString());\n}\n\nfunction removeAriaAttribute(element: Element, attribute: string): void {\n    element.removeAttribute(ariaAttributeName(attribute));\n}\n\nfunction ariaAttributeName(attribute: string) {\n    return `aria-${attribute}`;\n}\n\nexport function setAriaRole(element: Element, role?: string | null) {\n    if (role) {\n        element.setAttribute('role', role);\n    } else {\n        element.removeAttribute('role');\n    }\n}\n\nexport function getAriaSortState(sortDirection: SortDirection | 'mixed'): ColumnSortState {\n    let sort: ColumnSortState;\n\n    if (sortDirection === 'asc') {\n        sort = 'ascending';\n    } else if (sortDirection === 'desc') {\n        sort = 'descending';\n    } else if (sortDirection === 'mixed') {\n        sort = 'other';\n    } else {\n        sort = 'none';\n    }\n\n    return sort;\n}\n\n// ARIA ATTRIBUTE GETTERS\nexport function getAriaLevel(element: Element): number {\n    return parseInt(element.getAttribute('aria-level')!, 10);\n}\n\nexport function getAriaPosInSet(element: Element): number {\n    return parseInt(element.getAttribute('aria-posinset')!, 10);\n}\n\nexport function getAriaLabel(element: Element): string | null {\n    return element.getAttribute('aria-label');\n}\n\n// ARIA ATTRIBUTE SETTERS\nexport function setAriaLabel(element: Element, label?: string | null): void {\n    toggleAriaAttribute(element, 'label', label);\n}\n\nexport function setAriaLabelledBy(element: Element, labelledBy: string): void {\n    toggleAriaAttribute(element, 'labelledby', labelledBy);\n}\n\nexport function setAriaDescribedBy(element: Element, describedby?: string): void {\n    toggleAriaAttribute(element, 'describedby', describedby);\n}\n\nexport function setAriaLive(element: Element, live?: 'polite' | 'assertive' | 'off' | null) {\n    toggleAriaAttribute(element, 'live', live);\n}\n\nexport function setAriaAtomic(element: Element, atomic: boolean | null) {\n    toggleAriaAttribute(element, 'atomic', atomic);\n}\n\nexport function setAriaRelevant(element: Element, relevant:  'additions' | 'additions text' | 'all' | 'removals' | 'text' | null) {\n    toggleAriaAttribute(element, 'relevant', relevant);\n}\n\nexport function setAriaLevel(element: Element, level: number): void {\n    toggleAriaAttribute(element, 'level', level);\n}\n\nexport function setAriaDisabled(element: Element, disabled: boolean): void {\n    toggleAriaAttribute(element, 'disabled', disabled);\n}\n\nexport function setAriaHidden(element: Element, hidden: boolean): void {\n    toggleAriaAttribute(element, 'hidden', hidden);\n}\n\nexport function setAriaActiveDescendant(element: Element, descendantId: string | null): void {\n    toggleAriaAttribute(element, 'activedescendant', descendantId);\n}\n\nexport function setAriaExpanded(element: Element, expanded: boolean): void {\n    setAriaAttribute(element, 'expanded', expanded);\n}\n\nexport function removeAriaExpanded(element: Element): void {\n    removeAriaAttribute(element, 'expanded');\n}\n\nexport function setAriaSetSize(element: Element, setsize: number): void {\n    setAriaAttribute(element, 'setsize', setsize);\n}\n\nexport function setAriaPosInSet(element: Element, position: number): void {\n    setAriaAttribute(element, 'posinset', position);\n}\n\nexport function setAriaMultiSelectable(element: Element, multiSelectable: boolean): void {\n    setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\n\nexport function setAriaRowCount(element: Element, rowCount: number): void {\n    setAriaAttribute(element, 'rowcount', rowCount);\n}\n\nexport function setAriaRowIndex(element: Element, rowIndex: number): void {\n    setAriaAttribute(element, 'rowindex', rowIndex);\n}\n\nexport function setAriaColCount(element: Element, colCount: number): void {\n    setAriaAttribute(element, 'colcount', colCount);\n}\n\nexport function setAriaColIndex(element: Element, colIndex: number): void {\n    setAriaAttribute(element, 'colindex', colIndex);\n}\n\nexport function setAriaColSpan(element: Element, colSpan: number): void {\n    setAriaAttribute(element, 'colspan', colSpan);\n}\n\nexport function setAriaSort(element: Element, sort: ColumnSortState): void {\n    setAriaAttribute(element, 'sort', sort);\n}\n\nexport function removeAriaSort(element: Element): void {\n    removeAriaAttribute(element, 'sort');\n}\n\nexport function setAriaSelected(element: Element, selected?: boolean): void {\n    toggleAriaAttribute(element, 'selected', selected);\n}\n\nexport function setAriaChecked(element: Element, checked?: boolean) {\n    setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}\n\nexport function setAriaControls(controllerElement: Element, controlledElement: Element) {\n    toggleAriaAttribute(controllerElement, 'controls', controlledElement.id);\n    setAriaLabelledBy(controlledElement, controllerElement.id);\n}\n\n\nexport function getAriaCheckboxStateName(translate: (key: string, defaultValue: string, variableValues?: string[]) => string, state?: boolean): string {\n    return state === undefined\n        ? translate('ariaIndeterminate', 'indeterminate')\n        : (state === true\n            ? translate('ariaChecked', 'checked')\n            : translate('ariaUnchecked', 'unchecked')\n        );\n}\n", "/**\n * These variables are lazy loaded, as otherwise they try and get initialised when we are loading\n * unit tests and we don't have references to window or document in the unit tests\n */\nlet isSafari: boolean;\nlet safariVersion: number;\nlet isChrome: boolean;\nlet isFirefox: boolean;\nlet isMacOs: boolean;\nlet isIOS: boolean;\nlet invisibleScrollbar: boolean;\nlet browserScrollbarWidth: number;\n\nexport function isBrowserSafari(): boolean {\n    if (isSafari === undefined) {\n        isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    }\n    return isSafari;\n}\n\nexport function getSafariVersion(): number {\n    if (safariVersion === undefined) {\n        if (isBrowserSafari()) {\n            const versionMatch = navigator.userAgent.match(/version\\/(\\d+)/i);\n            if (versionMatch) {\n                safariVersion = versionMatch[1] != null ? parseFloat(versionMatch[1]) : 0;\n            }\n        } else {\n            safariVersion = 0;\n        }\n    }\n\n    return safariVersion;\n}\n\n\n/**\n * Returns true for Chrome and also for Edge (Chromium)\n */\nexport function isBrowserChrome(): boolean {\n    if (isChrome === undefined) {\n        const win = window as any;\n        isChrome = (!!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime)) ||\n            (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\n    }\n\n    return isChrome;\n}\n\nexport function isBrowserFirefox(): boolean {\n    if (isFirefox === undefined) {\n        isFirefox = /(firefox)/i.test(navigator.userAgent);\n    }\n\n    return isFirefox;\n}\n\nexport function isMacOsUserAgent(): boolean {\n    if (isMacOs === undefined) {\n        isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n    }\n\n    return isMacOs;\n}\n\nexport function isIOSUserAgent(): boolean {\n    if (isIOS === undefined) {\n        isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) ||\n            // eslint-disable-next-line\n            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1));\n    }\n\n    return isIOS;\n}\n\nexport function browserSupportsPreventScroll(): boolean {\n    // all browsers except safari support focus({ preventScroll: true }).\n    // this feature was added on Safari 15+\n    return !isBrowserSafari() || getSafariVersion() >= 15;\n}\n\nexport function getTabIndex(el: HTMLElement | null): string | null {\n    if (!el) { return null; }\n\n    const numberTabIndex = el.tabIndex;\n    const tabIndex = el.getAttribute('tabIndex');\n\n    if (numberTabIndex === -1 && (tabIndex === null || (tabIndex === '' && !isBrowserFirefox()))) {\n        return null;\n    }\n\n    return numberTabIndex.toString();\n}\n\nexport function getMaxDivHeight(): number {\n    if (!document.body) { return -1; }\n\n    let res = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n\n    while (true) {\n        const test = res * 2;\n        div.style.height = test + 'px';\n\n        if (test > testUpTo || div.clientHeight !== test) {\n            break;\n        } else {\n            res = test;\n        }\n    }\n\n    document.body.removeChild(div);\n\n    return res;\n}\n\nexport function getBodyWidth(): number {\n    return document.body?.clientWidth ?? (window.innerHeight || document.documentElement?.clientWidth || -1);\n}\n\nexport function getBodyHeight(): number {\n    return document.body?.clientHeight ?? (window.innerHeight || document.documentElement?.clientHeight || -1);\n}\n\nexport function getScrollbarWidth(): number | null {\n    if (browserScrollbarWidth == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return browserScrollbarWidth;\n}\n\nfunction initScrollbarWidthAndVisibility(): void {\n\n    const body = document.body;\n    const div = document.createElement('div');\n\n    div.style.width = div.style.height = '100px';\n    div.style.opacity = '0';\n    div.style.overflow = 'scroll';\n    (div.style as any).msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n    div.style.position = 'absolute';\n\n    body.appendChild(div);\n\n    let width: number | null = div.offsetWidth - div.clientWidth;\n\n    // if width is 0 and client width is 0, means the DOM isn't ready\n    if (width === 0 && div.clientWidth === 0) { width = null; }\n\n    // remove div\n    if (div.parentNode) {\n        div.parentNode.removeChild(div);\n    }\n\n    if (width != null) {\n        browserScrollbarWidth = width;\n        invisibleScrollbar = width === 0;\n    }\n}\n\nexport function isInvisibleScrollbar(): boolean {\n    if (invisibleScrollbar == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return invisibleScrollbar;\n}", "import { padStartWidthZeros } from './number';\n\n/**\n * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.\n * An alternative separator can be provided to be used instead of hyphens.\n * @param date The date to serialise\n * @param includeTime Whether to include the time in the serialised string\n * @param separator The separator to use between date parts\n */\nexport function serialiseDate(date: Date | null, includeTime = true, separator = '-'): string | null {\n    if (!date) { return null; }\n\n    let serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(part => padStartWidthZeros(part, 2)).join(separator);\n\n    if (includeTime) {\n        serialised += ' ' + [date.getHours(), date.getMinutes(), date.getSeconds()].map(part => padStartWidthZeros(part, 2)).join(':');\n    }\n\n    return serialised;\n}\n\nconst calculateOrdinal = (value: number) => {\n    if (value > 3 && value < 21) {\n        return 'th';\n    }\n    const remainder = value % 10;\n    switch (remainder) {\n        case 1:  return \"st\";\n        case 2:  return \"nd\";\n        case 3:  return \"rd\";\n    }\n    return 'th';\n}\n\n/**\n * Serialises a Date to a string of format the defined format, does not include time.\n * @param date The date to serialise\n * @param format The string to format the date to, defaults to YYYY-MM-DD\n */\n export function dateToFormattedString(date: Date, format: string = 'YYYY-MM-DD'): string {\n    const fullYear = padStartWidthZeros(date.getFullYear(), 4);\n    const months = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December',\n    ];\n    const days = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',\n    ];\n    const replace: { [key: string]: () => string } = {\n        YYYY: () => fullYear.slice(fullYear.length - 4, fullYear.length),\n        YY: () => fullYear.slice(fullYear.length - 2, fullYear.length),\n        Y: () => `${date.getFullYear()}`,\n        MMMM: () => months[date.getMonth()],\n        MMM: () => months[date.getMonth()].slice(0, 3),\n        MM: () => padStartWidthZeros(date.getMonth() + 1, 2),\n        Mo: () => `${date.getMonth() + 1}${calculateOrdinal(date.getMonth() + 1)}`,\n        M: () => `${date.getMonth() + 1}`,\n        Do: () => `${date.getDate()}${calculateOrdinal(date.getDate())}`,\n        DD: () => padStartWidthZeros(date.getDate(), 2),\n        D: () => `${date.getDate()}`,\n        dddd: () => days[date.getDay()],\n        ddd: () => days[date.getDay()].slice(0, 3),\n        dd: () => days[date.getDay()].slice(0, 2),\n        do: () => `${date.getDay()}${calculateOrdinal(date.getDay())}`,\n        d: () => `${date.getDay()}`,\n    };\n    const regexp = new RegExp(Object.keys(replace).join('|'), 'g');\n    return format.replace(regexp, (match) => {\n        if (match in replace) {\n            return replace[match]();\n        }\n        return match;\n    });\n}\n\n\n/**\n * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`\n */\nexport function parseDateTimeFromString(value?: string | null): Date | null {\n    if (!value) { return null; }\n\n    const [dateStr, timeStr] = value.split(' ');\n\n    if (!dateStr) { return null; }\n\n    const fields = dateStr.split('-').map(f => parseInt(f, 10));\n\n    if (fields.filter(f => !isNaN(f)).length !== 3) { return null; }\n\n    const [year, month, day] = fields;\n    const date = new Date(year, month - 1, day);\n\n    if (date.getFullYear() !== year ||\n        date.getMonth() !== month - 1 ||\n        date.getDate() !== day) {\n        // date was not parsed as expected so must have been invalid\n        return null;\n    }\n\n    if (!timeStr || timeStr === '00:00:00') {\n        return date;\n    }\n\n    const [hours, minutes, seconds] = timeStr.split(':').map(part => parseInt(part, 10));\n\n    if (hours >= 0 && hours < 24) {\n        date.setHours(hours);\n    }\n\n    if (minutes >= 0 && minutes < 60) {\n        date.setMinutes(minutes);\n    }\n\n    if (seconds >= 0 && seconds < 60) {\n        date.setSeconds(seconds);\n    }\n\n    return date;\n}\n", "export function padStartWidthZeros(value: number, totalStringSize: number): string {\n    return value.toString().padStart(totalStringSize, '0');\n}\n\nexport function createArrayOfNumbers(first: number, last: number): number[] {\n    const result: number[] = [];\n\n    for (let i = first; i <= last; i++) {\n        result.push(i);\n    }\n\n    return result;\n}\n\nexport function cleanNumber(value: any): number | null {\n    if (typeof value === 'string') {\n        value = parseInt(value, 10);\n    }\n\n    if (typeof value === 'number') {\n        return Math.floor(value);\n    }\n\n    return null;\n}\n\nexport function decToHex(number: number, bytes: number): string {\n    let hex = '';\n\n    for (let i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n\n    return hex;\n}\n\nexport function formatNumberTwoDecimalPlacesAndCommas(value: number, thousandSeparator: string, decimalSeparator: string): string {\n    if (typeof value !== 'number') { return ''; }\n\n    return formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);\n}\n\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\nexport function formatNumberCommas(value: number, thousandSeparator: string, decimalSeparator: string): string {\n    if (typeof value !== 'number') { return ''; }\n\n    return value.toString().replace('.', decimalSeparator).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${thousandSeparator}`);\n}\n\nexport function sum(values: number[] | null) {\n    return values == null ? null : values.reduce((total, value) => total + value, 0);\n}\n", "import { browserSupportsPreventScroll, isBrowserChrome, isBrowserSafari } from './browser';\nimport { exists } from './generic';\nimport { setAriaHidden } from './aria';\nimport { RowStyle } from '../entities/gridOptions';\nimport { CellStyle } from '../entities/colDef';\nimport { camelCaseToHyphenated } from './string';\nimport { AgPromise } from './promise';\nimport { ICellRendererComp } from '../rendering/cellRenderers/iCellRenderer';\n\nlet rtlNegativeScroll: boolean;\n\n/**\n * This method adds a class to an element and remove that class from all siblings.\n * Useful for toggling state.\n * @param {HTMLElement} element The element to receive the class\n * @param {string} elementClass The class to be assigned to the element\n * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself\n */\nexport function radioCssClass(element: HTMLElement, elementClass: string | null, otherElementClass?: string | null) {\n    const parent = element.parentElement;\n    let sibling = parent && parent.firstChild as HTMLElement;\n\n    while (sibling) {\n        if (elementClass) {\n            sibling.classList.toggle(elementClass, sibling === element);\n        }\n        if (otherElementClass) {\n            sibling.classList.toggle(otherElementClass, sibling !== element);\n        }\n        sibling = sibling.nextSibling as HTMLElement;\n    }\n}\n\nexport const FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea, [href]';\nexport const FOCUSABLE_EXCLUDE = '[disabled], .ag-disabled:not(.ag-button), .ag-disabled *';\n\nexport function isFocusableFormField(element: HTMLElement): boolean {\n    const matches: (str: string) => boolean =\n        Element.prototype.matches || (Element as any).prototype.msMatchesSelector;\n\n    const inputSelector = 'input, select, button, textarea';\n    const isFocusable = matches.call(element, inputSelector);\n    const isNotFocusable = matches.call(element, FOCUSABLE_EXCLUDE);\n    const isElementVisible = isVisible(element);\n\n    const focusable = isFocusable && !isNotFocusable && isElementVisible;\n\n    return focusable;\n}\n\nexport function setDisplayed(element: Element, displayed: boolean, options: { skipAriaHidden?: boolean } = {}) {\n    const  { skipAriaHidden } = options;\n    element.classList.toggle('ag-hidden', !displayed);\n    if (!skipAriaHidden) {\n        setAriaHidden(element, !displayed);\n    }\n}\n\nexport function setVisible(element: HTMLElement, visible: boolean, options: { skipAriaHidden?: boolean } = {}) {\n    const  { skipAriaHidden } = options;\n    element.classList.toggle('ag-invisible', !visible);\n    if (!skipAriaHidden) {\n        setAriaHidden(element, !visible);\n    }\n}\n\nexport function setDisabled(element: HTMLElement, disabled: boolean) {\n    const attributeName = 'disabled';\n    const addOrRemoveDisabledAttribute = disabled ?\n        (e: HTMLElement) => e.setAttribute(attributeName, '') :\n        (e: HTMLElement) => e.removeAttribute(attributeName);\n\n    addOrRemoveDisabledAttribute(element);\n\n    nodeListForEach(element.querySelectorAll('input'), input => addOrRemoveDisabledAttribute(input));\n}\n\nexport function isElementChildOfClass(\n    element: HTMLElement | null,\n    cls: string,\n    maxNest?: HTMLElement | number\n): boolean {\n    let counter = 0;\n\n    while (element) {\n        if (element.classList.contains(cls)) {\n            return true;\n        }\n\n        element = element.parentElement;\n\n        if (typeof maxNest == 'number') {\n            if (++counter > maxNest) { break; }\n        } else if (element === maxNest) { break; }\n    }\n\n    return false;\n}\n\n// returns back sizes as doubles instead of strings. similar to\n// getBoundingClientRect, however getBoundingClientRect does not:\n// a) work with fractions (eg browser is zooming)\n// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values\nexport function getElementSize(el: HTMLElement): {\n    height: number,\n    width: number,\n    borderTopWidth: number,\n    borderRightWidth: number,\n    borderBottomWidth: number,\n    borderLeftWidth: number,\n    paddingTop: number,\n    paddingRight: number,\n    paddingBottom: number,\n    paddingLeft: number,\n    marginTop: number,\n    marginRight: number,\n    marginBottom: number,\n    marginLeft: number,\n    boxSizing: string;\n} {\n    const {\n        height,\n        width,\n        borderTopWidth,\n        borderRightWidth,\n        borderBottomWidth,\n        borderLeftWidth,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        marginTop,\n        marginRight,\n        marginBottom,\n        marginLeft,\n        boxSizing\n    } = window.getComputedStyle(el);\n\n    return {\n        height: parseFloat(height || '0'),\n        width: parseFloat(width || '0'),\n        borderTopWidth: parseFloat(borderTopWidth || '0'),\n        borderRightWidth: parseFloat(borderRightWidth || '0'),\n        borderBottomWidth: parseFloat(borderBottomWidth || '0'),\n        borderLeftWidth: parseFloat(borderLeftWidth || '0'),\n        paddingTop: parseFloat(paddingTop || '0'),\n        paddingRight: parseFloat(paddingRight || '0'),\n        paddingBottom: parseFloat(paddingBottom || '0'),\n        paddingLeft: parseFloat(paddingLeft || '0'),\n        marginTop: parseFloat(marginTop || '0'),\n        marginRight: parseFloat(marginRight || '0'),\n        marginBottom: parseFloat(marginBottom || '0'),\n        marginLeft: parseFloat(marginLeft || '0'),\n        boxSizing\n    };\n}\n\nexport function getInnerHeight(el: HTMLElement): number {\n    const size = getElementSize(el);\n\n    if (size.boxSizing === 'border-box') {\n        return size.height - size.paddingTop - size.paddingBottom;\n    }\n\n    return size.height;\n}\n\nexport function getInnerWidth(el: HTMLElement): number {\n    const size = getElementSize(el);\n\n    if (size.boxSizing === 'border-box') {\n        return size.width - size.paddingLeft - size.paddingRight;\n    }\n\n    return size.width;\n}\n\nexport function getAbsoluteHeight(el: HTMLElement): number {\n    const size = getElementSize(el);\n    const marginRight = size.marginBottom + size.marginTop;\n\n    return Math.ceil(el.offsetHeight + marginRight);\n}\n\nexport function getAbsoluteWidth(el: HTMLElement): number {\n    const size = getElementSize(el);\n    const marginWidth = size.marginLeft + size.marginRight;\n\n    return Math.ceil(el.offsetWidth + marginWidth);\n}\n\nexport function getElementRectWithOffset(el: HTMLElement): {\n    top: number;\n    left: number;\n    right: number;\n    bottom: number;\n} {\n    const offsetElementRect = el.getBoundingClientRect();\n    const { borderTopWidth, borderLeftWidth, borderRightWidth, borderBottomWidth } = getElementSize(el);\n\n    return {\n        top: offsetElementRect.top + (borderTopWidth || 0),\n        left: offsetElementRect.left + (borderLeftWidth || 0),\n        right: offsetElementRect.right + (borderRightWidth || 0),\n        bottom: offsetElementRect.bottom + (borderBottomWidth || 0),\n    }\n}\n\nexport function isRtlNegativeScroll(): boolean {\n    if (typeof rtlNegativeScroll === \"boolean\") {\n        return rtlNegativeScroll;\n    }\n\n    const template = document.createElement('div');\n    template.style.direction = 'rtl';\n    template.style.width = '1px';\n    template.style.height = '1px';\n    template.style.position = 'fixed';\n    template.style.top = '0px';\n    template.style.overflow = 'hidden';\n    template.dir = 'rtl';\n    template.innerHTML = /* html */\n        `<div style=\"width: 2px\">\n            <span style=\"display: inline-block; width: 1px\"></span>\n            <span style=\"display: inline-block; width: 1px\"></span>\n        </div>`;\n\n    document.body.appendChild(template);\n\n    template.scrollLeft = 1;\n    rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;\n    document.body.removeChild(template);\n\n    return rtlNegativeScroll;\n}\n\nexport function getScrollLeft(element: HTMLElement, rtl: boolean): number {\n    let scrollLeft = element.scrollLeft;\n\n    if (rtl) {\n        // Absolute value - for FF that reports RTL scrolls in negative numbers\n        scrollLeft = Math.abs(scrollLeft);\n\n        if (isBrowserChrome() && !isRtlNegativeScroll()) {\n            scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;\n        }\n    }\n\n    return scrollLeft;\n}\n\nexport function setScrollLeft(element: HTMLElement, value: number, rtl: boolean): void {\n    if (rtl) {\n        // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start\n        if (isRtlNegativeScroll()) {\n            value *= -1;\n        } else if (isBrowserSafari() || isBrowserChrome()) {\n            value = element.scrollWidth - element.clientWidth - value;\n        }\n    }\n    element.scrollLeft = value;\n}\n\nexport function clearElement(el: HTMLElement): void {\n    while (el && el.firstChild) { el.removeChild(el.firstChild); }\n}\n\nexport function removeFromParent(node: Element | null) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n\nexport function isInDOM(element: HTMLElement): boolean {\n    return !!element.offsetParent;\n}\n\nexport function isVisible(element: HTMLElement) {\n    const el = element as any;\n    if (el.checkVisibility) {\n        return el.checkVisibility({ checkVisibilityCSS: true })\n    }\n\n    const isHidden = !isInDOM(element) || window.getComputedStyle(element).visibility !== 'visible';\n    return !isHidden;\n}\n\n/**\n * Loads the template and returns it as an element. makes up for no simple way in\n * the dom api to load html directly, eg we cannot do this: document.createElement(template)\n * @param {string} template\n * @returns {HTMLElement}\n */\nexport function loadTemplate(template: string): HTMLElement {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = (template || '').trim();\n\n    return tempDiv.firstChild as HTMLElement;\n}\n\nexport function ensureDomOrder(eContainer: HTMLElement, eChild: HTMLElement, eChildBefore?: HTMLElement | null): void {\n    // if already in right order, do nothing\n    if (eChildBefore && eChildBefore.nextSibling === eChild) {\n        return;\n    }\n\n    if (eChildBefore) {\n        if (eChildBefore.nextSibling) {\n            // insert between the eRowBefore and the row after it\n            eContainer.insertBefore(eChild, eChildBefore.nextSibling);\n        } else {\n            // if nextSibling is missing, means other row is at end, so just append new row at the end\n            eContainer.appendChild(eChild);\n        }\n    } else {\n        // otherwise put at start\n        if (eContainer.firstChild && eContainer.firstChild !== eChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eChild);\n        }\n    }\n}\n\nexport function setDomChildOrder(eContainer: HTMLElement, orderedChildren: (HTMLElement | null)[]): void {\n    for (let i = 0; i < orderedChildren.length; i++) {\n        const correctCellAtIndex = orderedChildren[i];\n        const actualCellAtIndex = eContainer.children[i];\n\n        if (actualCellAtIndex !== correctCellAtIndex) {\n            eContainer.insertBefore(correctCellAtIndex!, actualCellAtIndex);\n        }\n    }\n}\n\nexport function insertWithDomOrder(\n    eContainer: HTMLElement,\n    eToInsert: HTMLElement,\n    eChildBefore: HTMLElement | null\n): void {\n    if (eChildBefore) {\n        // if previous element exists, just slot in after the previous element\n        eChildBefore.insertAdjacentElement('afterend', eToInsert);\n    } else {\n        if (eContainer.firstChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eToInsert);\n        } else {\n            // otherwise eContainer is empty, so just append it\n            eContainer.appendChild(eToInsert);\n        }\n    }\n}\n\nexport function addStylesToElement(eElement: any, styles: RowStyle | CellStyle | null | undefined) {\n    if (!styles) { return; }\n\n    for (const [key, value] of Object.entries(styles)) {\n        if (!key || !key.length || value == null) { continue; }\n\n        // changes the key from camelCase into a hyphenated-string\n        const parsedKey = camelCaseToHyphenated(key);\n        const valueAsString = value.toString();\n        const parsedValue = valueAsString.replace(/\\s*!important/g, '');\n        const priority = parsedValue.length != valueAsString.length ? 'important' : undefined;\n\n        eElement.style.setProperty(parsedKey, parsedValue, priority);\n    }\n}\n\nexport function isHorizontalScrollShowing(element: HTMLElement): boolean {\n    return element.clientWidth < element.scrollWidth;\n}\n\nexport function isVerticalScrollShowing(element: HTMLElement): boolean {\n    return element.clientHeight < element.scrollHeight;\n}\n\nexport function setElementWidth(element: HTMLElement, width: string | number) {\n    if (width === 'flex') {\n        element.style.removeProperty('width');\n        element.style.removeProperty('minWidth');\n        element.style.removeProperty('maxWidth');\n        element.style.flex = '1 1 auto';\n    } else {\n        setFixedWidth(element, width);\n    }\n}\n\nexport function setFixedWidth(element: HTMLElement, width: string | number) {\n    width = formatSize(width);\n    element.style.width = width.toString();\n    element.style.maxWidth = width.toString();\n    element.style.minWidth = width.toString();\n}\n\nexport function setElementHeight(element: HTMLElement, height: string | number) {\n    if (height === 'flex') {\n        element.style.removeProperty('height');\n        element.style.removeProperty('minHeight');\n        element.style.removeProperty('maxHeight');\n        element.style.flex = '1 1 auto';\n    } else {\n        setFixedHeight(element, height);\n    }\n}\n\nexport function setFixedHeight(element: HTMLElement, height: string | number) {\n    height = formatSize(height);\n    element.style.height = height.toString();\n    element.style.maxHeight = height.toString();\n    element.style.minHeight = height.toString();\n}\n\nexport function formatSize(size: number | string) {\n    if (typeof size === 'number') {\n        return `${size}px`;\n    }\n\n    return size;\n}\n\nexport function isNodeOrElement(o: any) {\n    return o instanceof Node || o instanceof HTMLElement;\n}\n\n/**\n * Makes a copy of a node list into a list\n * @param {NodeList} nodeList\n * @returns {Node[]}\n */\nexport function copyNodeList(nodeList: NodeListOf<Node> | null): Node[] {\n    if (nodeList == null) { return []; }\n\n    const result: Node[] = [];\n\n    nodeListForEach(nodeList, node => result.push(node));\n\n    return result;\n}\n\nexport function iterateNamedNodeMap(map: NamedNodeMap, callback: (key: string, value: string) => void): void {\n    if (!map) { return; }\n\n    for (let i = 0; i < map.length; i++) {\n        const attr = map[i];\n        callback(attr.name, attr.value);\n    }\n}\n\nexport function addOrRemoveAttribute(element: HTMLElement, name: string, value: any) {\n    if (value == null) {\n        element.removeAttribute(name);\n    } else {\n        element.setAttribute(name, value.toString());\n    }\n}\n\nexport function nodeListForEach<T extends Node>(nodeList: NodeListOf<T> | null, action: (value: T) => void): void {\n    if (nodeList == null) { return; }\n\n    for (let i = 0; i < nodeList.length; i++) {\n        action(nodeList[i]);\n    }\n}\n\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renders as they\n * can return back strings (instead of html element) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nexport function bindCellRendererToHtmlElement(cellRendererPromise: AgPromise<ICellRendererComp>, eTarget: HTMLElement) {\n    cellRendererPromise.then(cellRenderer => {\n        const gui: HTMLElement | string = cellRenderer!.getGui();\n\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            } else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}", "export function fuzzyCheckStrings(\n    inputValues: string[],\n    validValues: string[],\n    allSuggestions: string[]\n): { [p: string]: string[]; } {\n    const fuzzyMatches: { [p: string]: string[]; } = {};\n    const invalidInputs: string[] = inputValues.filter(inputValue =>\n        !validValues.some(\n            (validValue) => validValue === inputValue\n        )\n    );\n\n    if (invalidInputs.length > 0) {\n        invalidInputs.forEach(invalidInput =>\n            fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions).values\n        );\n    }\n\n    return fuzzyMatches;\n}\n\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n */\nexport function fuzzySuggestions(\n    inputValue: string,\n    allSuggestions: string[],\n    hideIrrelevant?: boolean,\n    filterByPercentageOfBestMatch?: number,\n): { values: string[], indices: number[] } {\n    let thisSuggestions: { value: string, relevance: number; idx: number; }[] = allSuggestions.map((text, idx) => ({\n        value: text,\n        relevance: stringWeightedDistances(inputValue.toLowerCase(), text.toLocaleLowerCase()),\n        idx\n    }));\n\n    thisSuggestions.sort((a, b) => b.relevance - a.relevance);\n\n    if (hideIrrelevant) {\n        thisSuggestions = thisSuggestions.filter(suggestion => suggestion.relevance !== 0);\n    }\n    if (thisSuggestions.length > 0 && filterByPercentageOfBestMatch && filterByPercentageOfBestMatch > 0) {\n        const bestMatch = thisSuggestions[0].relevance;\n        const limit = bestMatch * filterByPercentageOfBestMatch;\n        thisSuggestions = thisSuggestions.filter(suggestion => limit - suggestion.relevance < 0);\n    }\n\n    const values: string[] = []\n    const indices: number[] = [];\n\n    for (const suggestion of thisSuggestions) {\n        values.push(suggestion.value);\n        indices.push(suggestion.idx);\n    }\n\n    return { values, indices }\n}\n\nfunction stringWeightedDistances(str1: string, str2: string): number {\n    const a = str1.replace(/\\s/g, '');\n    const b = str2.replace(/\\s/g, '');\n\n    let weight = 0;\n    let lastIndex = -1;\n\n    for (let i = 0; i < a.length; i++) {\n        const idx = b.indexOf(a[i], lastIndex + 1);\n        if (idx === -1) { continue; }\n\n        lastIndex = idx;\n        weight += (100 - (lastIndex * 100 / 10000) * 100);\n    }\n\n    return weight;\n}\n", "import { Column } from '../entities/column';\nimport { loadTemplate, isNodeOrElement } from './dom';\nimport { setAriaRole } from './aria';\nimport { GridOptionsService } from '../gridOptionsService';\n\n//\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page custom-icons\n//\nexport const iconNameClassMap: { [key: string]: string; } = {\n    // header column group shown when expanded (click to contract)\n    columnGroupOpened: 'expanded',\n    // header column group shown when contracted (click to expand)\n    columnGroupClosed: 'contracted',\n    // tool panel column group contracted (click to expand)\n    columnSelectClosed: 'tree-closed',\n    // tool panel column group expanded (click to contract)\n    columnSelectOpen: 'tree-open',\n    // column tool panel header expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    columnSelectIndeterminate: 'tree-indeterminate',\n    // shown on ghost icon while dragging column to the side of the grid to pin\n    columnMovePin: 'pin',\n    // shown on ghost icon while dragging over part of the page that is not a drop zone\n    columnMoveHide: 'eye-slash',\n    // shown on ghost icon while dragging columns to reorder\n    columnMoveMove: 'arrows',\n    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n    columnMoveLeft: 'left',\n    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n    columnMoveRight: 'right',\n    // shown on ghost icon while dragging over Row Groups drop zone\n    columnMoveGroup: 'group',\n    // shown on ghost icon while dragging over Values drop zone\n    columnMoveValue: 'aggregation',\n    // shown on ghost icon while dragging over pivot drop zone\n    columnMovePivot: 'pivot',\n    // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n    //     string column over aggregation drop zone\n    dropNotAllowed: 'not-allowed',\n    // shown on row group when contracted (click to expand)\n    groupContracted: 'tree-closed',\n    // shown on row group when expanded (click to contract)\n    groupExpanded: 'tree-open',\n    // set filter tree list group contracted (click to expand)\n    setFilterGroupClosed: 'tree-closed',\n    // set filter tree list group expanded (click to contract)\n    setFilterGroupOpen: 'tree-open',\n    // set filter tree list expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    setFilterGroupIndeterminate: 'tree-indeterminate',\n    // context menu chart item\n    chart: 'chart',\n    // chart window title bar\n    close: 'cross',\n    // X (remove) on column 'pill' after adding it to a drop zone list\n    cancel: 'cancel',\n    // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n    check: 'tick',\n    // \"go to first\" button in pagination controls\n    first: 'first',\n    // \"go to previous\" button in pagination controls\n    previous: 'previous',\n    // \"go to next\" button in pagination controls\n    next: 'next',\n    // \"go to last\" button in pagination controls\n    last: 'last',\n    // shown on top right of chart when chart is linked to range data (click to unlink)\n    linked: 'linked',\n    // shown on top right of chart when chart is not linked to range data (click to link)\n    unlinked: 'unlinked',\n    // \"Choose colour\" button on chart settings tab\n    colorPicker: 'color-picker',\n    // rotating spinner shown by the loading cell renderer\n    groupLoading: 'loading',\n    // button to launch enterprise column menu\n    menu: 'menu',\n    menuAlt: 'menu-alt',\n    // filter tool panel tab\n    filter: 'filter',\n    // column tool panel tab\n    columns: 'columns',\n    // button in chart regular size window title bar (click to maximise)\n    maximize: 'maximize',\n    // button in chart maximised window title bar (click to make regular size)\n    minimize: 'minimize',\n    // \"Pin column\" item in column header menu\n    menuPin: 'pin',\n    // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n    menuValue: 'aggregation',\n    // \"Group by {column-name}\" item in column header menu\n    menuAddRowGroup: 'group',\n    // \"Un-Group by {column-name}\" item in column header menu\n    menuRemoveRowGroup: 'group',\n    // context menu copy item\n    clipboardCopy: 'copy',\n    // context menu cut item\n    clipboardCut: 'cut',\n    // context menu paste item\n    clipboardPaste: 'paste',\n    // identifies the pivot drop zone\n    pivotPanel: 'pivot',\n    // \"Row groups\" drop zone in column tool panel\n    rowGroupPanel: 'group',\n    // columns tool panel Values drop zone\n    valuePanel: 'aggregation',\n    // drag handle used to pick up draggable columns\n    columnDrag: 'grip',\n    // drag handle used to pick up draggable rows\n    rowDrag: 'grip',\n    // context menu export item\n    save: 'save',\n    // csv export\n    csvExport: 'csv',\n    // excel export,\n    excelExport: 'excel',\n    // icon on dropdown editors\n    smallDown: 'small-down',\n    // version of small-right used in RTL mode\n    smallLeft: 'small-left',\n    // separater between column 'pills' when you add multiple columns to the header drop zone\n    smallRight: 'small-right',\n    smallUp: 'small-up',\n    // show on column header when column is sorted ascending\n    sortAscending: 'asc',\n    // show on column header when column is sorted descending\n    sortDescending: 'desc',\n    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n    sortUnSort: 'none',\n    // Builder button in Advanced Filter\n    advancedFilterBuilder: 'group',\n    // drag handle used to pick up Advanced Filter Builder rows\n    advancedFilterBuilderDrag: 'grip',\n    // Advanced Filter Builder row validation error\n    advancedFilterBuilderInvalid: 'not-allowed',\n    // shown on Advanced Filter Builder rows to move them up\n    advancedFilterBuilderMoveUp: 'up',\n    // shown on Advanced Filter Builder rows to move them down\n    advancedFilterBuilderMoveDown: 'down',\n    // shown on Advanced Filter Builder rows to add new rows\n    advancedFilterBuilderAdd: 'plus',\n    // shown on Advanced Filter Builder rows to remove row\n    advancedFilterBuilderRemove: 'minus',\n    // Edit Chart menu item shown in Integrated Charts menu\n    chartsMenuEdit: 'chart',\n    // Advanced Settings menu item shown in Integrated Charts menu\n    chartsMenuAdvancedSettings: 'settings',\n    // shown in Integrated Charts menu add fields\n    chartsMenuAdd: 'plus',\n};\n\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsService} gridOptionsService\n * @param {Column | null} [column]\n * @returns {Element}\n */\nexport function createIcon(iconName: string, gridOptionsService: GridOptionsService, column: Column | null): Element {\n    const iconContents = createIconNoSpan(iconName, gridOptionsService, column);\n\n    if (iconContents) {\n        const { className } = iconContents;\n        if (\n            (typeof className === 'string' && className.indexOf('ag-icon') > -1) ||\n            (typeof className === 'object' && className['ag-icon'])\n        ) {\n            return iconContents;\n        }\n    }\n\n    const eResult = document.createElement('span');\n    eResult.appendChild(iconContents!);\n\n    return eResult;\n}\n\nexport function createIconNoSpan(iconName: string, gridOptionsService: GridOptionsService, column?: Column | null, forceCreate?: boolean): Element | undefined {\n    let userProvidedIcon: Function | string | null = null;\n\n    // check col for icon first\n    const icons: any = column && column.getColDef().icons;\n\n    if (icons) {\n        userProvidedIcon = icons[iconName];\n    }\n\n    // if not in col, try grid options\n    if (gridOptionsService && !userProvidedIcon) {\n        const optionsIcons = gridOptionsService.get('icons');\n        if (optionsIcons) {\n            userProvidedIcon = optionsIcons[iconName];\n        }\n    }\n\n    // now if user provided, use it\n    if (userProvidedIcon) {\n        let rendererResult: any;\n\n        if (typeof userProvidedIcon === 'function') {\n            rendererResult = userProvidedIcon();\n        } else if (typeof userProvidedIcon === 'string') {\n            rendererResult = userProvidedIcon;\n        } else {\n            throw new Error('icon from grid options needs to be a string or a function');\n        }\n\n        if (typeof rendererResult === 'string') {\n            return loadTemplate(rendererResult);\n        }\n\n        if (isNodeOrElement(rendererResult)) {\n            return rendererResult as Element;\n        }\n\n        console.warn('AG Grid: iconRenderer should return back a string or a dom object');\n    } else {\n        const span = document.createElement('span');\n        let cssClass = iconNameClassMap[iconName];\n\n        if (!cssClass) {\n            if (!forceCreate) {\n                console.warn(`AG Grid: Did not find icon ${iconName}`);\n                cssClass = '';\n            } else {\n                cssClass = iconName;\n            }\n        }\n\n        span.setAttribute('class', `ag-icon ag-icon-${cssClass}`);\n        span.setAttribute('unselectable', 'on');\n        setAriaRole(span, 'presentation');\n\n        return span;\n    }\n}\n", "import { KeyCode } from '../constants/keyCode';\nimport { SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams } from '../entities/colDef';\nimport { Column } from '../entities/column';\nimport { ColumnGroup } from '../entities/columnGroup';\nimport { GridOptionsService } from '../gridOptionsService';\nimport { IRowNode } from '../interfaces/iRowNode';\nimport { isMacOsUserAgent } from './browser';\nimport { exists } from './generic';\n\nconst A_KEYCODE = 65;\nconst C_KEYCODE = 67;\nconst V_KEYCODE = 86;\nconst D_KEYCODE = 68;\nconst Z_KEYCODE = 90;\nconst Y_KEYCODE = 89;\n\nexport function isEventFromPrintableCharacter(event: KeyboardEvent): boolean {\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey || event.metaKey) { return false; }\n\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\n    const printableCharacter = event.key.length === 1;\n\n    return printableCharacter;\n}\n\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsService} gridOptionsService\n * @param {KeyboardEvent} keyboardEvent\n * @param {IRowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(\n    gridOptionsService: GridOptionsService,\n    keyboardEvent: KeyboardEvent,\n    rowNode: IRowNode,\n    column: Column,\n    editing: boolean\n): boolean {\n    const colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\n\n    // if no callbacks provided by user, then do nothing\n    if (!colDefFunc) { return false; }\n\n    const params: SuppressKeyboardEventParams = gridOptionsService.addGridCommonParams({\n        event: keyboardEvent,\n        editing,\n        column,\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef()\n    });\n\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        const colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) { return true; }\n    }\n\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\n\nexport function isUserSuppressingHeaderKeyboardEvent(\n    gridOptionsService: GridOptionsService,\n    keyboardEvent: KeyboardEvent,\n    headerRowIndex: number,\n    column: Column | ColumnGroup\n): boolean {\n    const colDef = column.getDefinition();\n    const colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n\n    if (!exists(colDefFunc)) { return false; }\n\n    const params: SuppressHeaderKeyboardEventParams = gridOptionsService.addGridCommonParams({\n        colDef: colDef,\n        column,\n        headerRowIndex,\n        event: keyboardEvent\n    });\n\n    return !!colDefFunc(params);\n}\n\nexport function normaliseQwertyAzerty(keyboardEvent: KeyboardEvent): string {\n    const { keyCode } = keyboardEvent;\n    let code: string;\n\n    switch (keyCode) {\n        case A_KEYCODE:\n            code = KeyCode.A;\n            break;\n        case C_KEYCODE:\n            code = KeyCode.C;\n            break;\n        case V_KEYCODE:\n            code = KeyCode.V;\n            break;\n        case D_KEYCODE:\n            code = KeyCode.D;\n            break;\n        case Z_KEYCODE:\n            code = KeyCode.Z;\n            break;\n        case Y_KEYCODE:\n            code = KeyCode.Y;\n            break;\n        default:\n            code = keyboardEvent.code;\n    }\n\n    return code;\n}\n\nexport function isDeleteKey(key: string, alwaysReturnFalseOnBackspace = false) {\n    if (key === KeyCode.DELETE) { return true; }\n    if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {\n        return isMacOsUserAgent();\n    }\n    return false;\n}", "export class KeyCode {\n    static BACKSPACE = 'Backspace';\n    static TAB = 'Tab';\n    static ENTER = 'Enter';\n    static ESCAPE = 'Escape';\n    static SPACE = ' ';\n    static LEFT = 'ArrowLeft';\n    static UP = 'ArrowUp';\n    static RIGHT = 'ArrowRight';\n    static DOWN = 'ArrowDown';\n    static DELETE = 'Delete';\n\n    static F2 = 'F2';\n\n    static PAGE_UP = 'PageUp';\n    static PAGE_DOWN = 'PageDown';\n    static PAGE_HOME = 'Home';\n    static PAGE_END = 'End';\n\n    // these should be used with `event.code` instead of `event.key`\n    // as `event.key` changes when non-latin keyboards are used\n    static A = 'KeyA';\n    static C = 'KeyC';\n    static D = 'KeyD';\n    static V = 'KeyV';\n    static X = 'KeyX';\n    static Y = 'KeyY';\n    static Z = 'KeyZ';\n\n}\n", "/**\n * `True` if the event is close to the original event by X pixels either vertically or horizontally.\n * we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n * @param {MouseEvent | TouchEvent} e1\n * @param {MouseEvent | TouchEvent} e2\n * @param {number} pixelCount\n * @returns {boolean}\n */\nexport function areEventsNear(e1: MouseEvent | Touch, e2: MouseEvent | Touch, pixelCount: number): boolean {\n    // by default, we wait 4 pixels before starting the drag\n    if (pixelCount === 0) { return false; }\n\n    const diffX = Math.abs(e1.clientX - e2.clientX);\n    const diffY = Math.abs(e1.clientY - e2.clientY);\n\n    return Math.max(diffX, diffY) <= pixelCount;\n}\n", "import { RowNode } from '../entities/rowNode';\n\n/**\n * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.\n * when in ClientSideNodeManager we always have indexes (as this sorts the items the\n * user provided) but when in GroupStage, the nodes can contain filler nodes that\n * don't have order id's\n * @param {RowNode[]} rowNodes\n * @param {Object} rowNodeOrder\n * \n * @returns a boolean representing whether nodes were reordered\n */\nexport function sortRowNodesByOrder(rowNodes: RowNode[], rowNodeOrder: { [id: string]: number; }): boolean {\n    if (!rowNodes) { return false; }\n\n    const comparator = (nodeA: RowNode, nodeB: RowNode) => {\n        const positionA = rowNodeOrder[nodeA.id!];\n        const positionB = rowNodeOrder[nodeB.id!];\n\n        const aHasIndex = positionA !== undefined;\n        const bHasIndex = positionB !== undefined;\n\n        const bothNodesAreUserNodes = aHasIndex && bHasIndex;\n        const bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;\n\n        if (bothNodesAreUserNodes) {\n            // when comparing two nodes the user has provided, they always\n            // have indexes\n            return positionA - positionB;\n        }\n\n        if (bothNodesAreFillerNodes) {\n            // when comparing two filler nodes, we have no index to compare them\n            // against, however we want this sorting to be deterministic, so that\n            // the rows don't jump around as the user does delta updates. so we\n            // want the same sort result. so we use the __objectId - which doesn't make sense\n            // from a sorting point of view, but does give consistent behaviour between\n            // calls. otherwise groups jump around as delta updates are done.\n            // note: previously here we used nodeId, however this gave a strange order\n            // as string ordering of numbers is wrong, so using id based on creation order\n            // as least gives better looking order.\n            return nodeA.__objectId - nodeB.__objectId;\n        }\n\n        if (aHasIndex) {\n            return 1;\n        }\n\n        return -1;\n    };\n\n    // check if the list first needs sorting\n    let rowNodeA: RowNode;\n    let rowNodeB: RowNode;\n    let atLeastOneOutOfOrder = false;\n\n    for (let i = 0; i < rowNodes.length - 1; i++) {\n        rowNodeA = rowNodes[i];\n        rowNodeB = rowNodes[i + 1];\n\n        if (comparator(rowNodeA, rowNodeB) > 0) {\n            atLeastOneOutOfOrder = true;\n            break;\n        }\n    }\n\n    if (atLeastOneOutOfOrder) {\n        rowNodes.sort(comparator);\n        return true;\n    }\n    return false;\n}\n", "export function convertToSet<T>(list: T[]): Set<T> {\n    const set = new Set<T>();\n\n    list.forEach(x => set.add(x));\n\n    return set;\n}\n", "import * as AriaUtils from './aria';\nimport * as ArrayUtils from './array';\nimport * as BrowserUtils from './browser';\nimport * as DateUtils from './date';\nimport * as DomUtils from './dom';\nimport * as EventUtils from './event';\nimport * as FunctionUtils from './function';\nimport * as FuzzyMatchUtils from './fuzzyMatch';\nimport * as GenericUtils from './generic';\nimport * as IconUtils from './icon';\nimport * as KeyboardUtils from './keyboard';\nimport * as MapUtils from './map';\nimport * as MouseUtils from './mouse';\nimport * as NumberUtils from './number';\nimport * as ObjectUtils from './object';\nimport * as RowNodeUtils from './rowNode';\nimport * as SetUtils from './set';\nimport * as StringUtils from './string';\n\nconst utils = {\n    ...AriaUtils,\n    ...ArrayUtils,\n    ...BrowserUtils,\n    ...DateUtils,\n    ...DomUtils,\n    ...EventUtils,\n    ...FunctionUtils,\n    ...FuzzyMatchUtils,\n    ...GenericUtils,\n    ...IconUtils,\n    ...KeyboardUtils,\n    ...MapUtils,\n    ...MouseUtils,\n    ...NumberUtils,\n    ...ObjectUtils,\n    ...RowNodeUtils,\n    ...SetUtils,\n    ...StringUtils,\n};\n\nexport const _ = utils;", "export class NumberSequence {\n    private nextValue: number;\n    private step: number;\n\n    constructor(initValue = 0, step = 1) {\n        this.nextValue = initValue;\n        this.step = step;\n    }\n\n    public next(): number {\n        const valToReturn = this.nextValue;\n        this.nextValue += this.step;\n        return valToReturn;\n    }\n\n    public peek(): number {\n        return this.nextValue;\n    }\n\n    public skip(count: number): void {\n        this.nextValue += count;\n    }\n}\n", "export type ResolveAndRejectCallback<T> = (resolve: (value: T | null) => void, reject: (params: any) => void) => void;\n\nexport enum AgPromiseStatus {\n    IN_PROGRESS, RESOLVED\n}\n\nexport class AgPromise<T> {\n    private status: AgPromiseStatus = AgPromiseStatus.IN_PROGRESS;\n    private resolution: T | null = null;\n    private waiters: ((value: T | null) => void)[] = [];\n\n    static all<T>(promises: AgPromise<T | null>[]): AgPromise<(T | null)[]> {\n        return new AgPromise(resolve => {\n            let remainingToResolve = promises.length;\n            const combinedValues = new Array<T | null>(remainingToResolve);\n\n            promises.forEach((promise, index) => {\n                promise.then(value => {\n                    combinedValues[index] = value;\n                    remainingToResolve--;\n\n                    if (remainingToResolve === 0) {\n                        resolve(combinedValues);\n                    }\n                });\n            });\n        });\n    }\n\n    static resolve<T>(value: T | null = null): AgPromise<T> {\n        return new AgPromise<T>(resolve => resolve(value));\n    }\n\n    constructor(callback: ResolveAndRejectCallback<T>) {\n        callback(value => this.onDone(value), params => this.onReject(params));\n    }\n\n    public then<V>(func: (result: T | null) => V): AgPromise<V> {\n        return new AgPromise(resolve => {\n            if (this.status === AgPromiseStatus.RESOLVED) {\n                resolve(func(this.resolution));\n            } else {\n                this.waiters.push(value => resolve(func(value)));\n            }\n        });\n    }\n\n    public resolveNow<Z>(ifNotResolvedValue: Z, ifResolved: (current: T | null) => Z): Z {\n        return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;\n    }\n\n    private onDone(value: T | null): void {\n        this.status = AgPromiseStatus.RESOLVED;\n        this.resolution = value;\n\n        this.waiters.forEach(waiter => waiter(value));\n    }\n\n    private onReject(params: any): void {\n        console.warn('TBI');\n    }\n}\n", "/**\n * A Util Class only used when debugging for printing time to console\n */\nexport class Timer {\n    private timestamp = new Date().getTime();\n\n    public print(msg: string) {\n        const duration = (new Date().getTime()) - this.timestamp;\n        console.info(`${msg} = ${duration}`);\n        this.timestamp = new Date().getTime();\n    }\n}", "export class CssClassManager {\n\n    private getGui: () => HTMLElement | undefined | null;\n\n    // to minimise DOM hits, we only apply CSS classes if they have changed. as adding a CSS class that is already\n    // there, or removing one that wasn't present, all takes CPU.\n    private cssClassStates: { [cssClass: string]: boolean } = {};\n\n    constructor(getGui: () => (HTMLElement | undefined | null)) {\n        this.getGui = getGui;\n    }\n\n    public addCssClass(className: string): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach(cls => this.addCssClass(cls));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== true;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.add(className);\n            }\n            this.cssClassStates[className] = true;\n        }\n    }\n\n    public removeCssClass(className: string): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach(cls => this.removeCssClass(cls));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== false;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.remove(className);\n            }\n\n            this.cssClassStates[className] = false;\n        }\n    }\n\n    public containsCssClass(className: string): boolean {\n        const eGui = this.getGui();\n        if (!eGui) { return false; }\n\n        return eGui.classList.contains(className);\n    }\n\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\n        if (!className) { return; }\n\n        // we check for spaces before doing the split, as doing the split\n        // created a performance problem (on windows only, see AG-6765)\n        if (className.indexOf(' ') >= 0) {\n            const list = (className || '').split(' ');\n            if (list.length > 1) {\n                list.forEach(cls => this.addOrRemoveCssClass(cls, addOrRemove));\n                return;\n            }\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== addOrRemove;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.toggle(className, addOrRemove);\n            }\n            \n            this.cssClassStates[className] = addOrRemove;\n        }\n    }\n}", "import { Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { ITooltipComp, ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { PopupService } from \"./popupService\";\nimport { UserComponentFactory } from \"../components/framework/userComponentFactory\";\nimport { exists } from \"../utils/generic\";\nimport { isIOSUserAgent } from \"../utils/browser\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { warnOnce } from \"../utils/function\";\nimport { Events } from \"../eventKeys\";\nimport { TooltipHideEvent, TooltipShowEvent } from \"../events\";\n\nexport interface TooltipParentComp {\n    getTooltipParams(): WithoutGridCommon<ITooltipParams>;\n    getGui(): HTMLElement;\n}\n\nenum TooltipStates { NOTHING, WAITING_TO_SHOW, SHOWING }\nenum TooltipTrigger { HOVER, FOCUS }\n\nexport class TooltipStateManager extends BeanStub {\n\n    private readonly SHOW_QUICK_TOOLTIP_DIFF = 1000;\n    private readonly FADE_OUT_TOOLTIP_TIMEOUT = 1000;\n    private readonly INTERACTIVE_HIDE_DELAY = 100;\n\n    // different instances of tooltipFeature use this to see when the\n    // last tooltip was hidden.\n    private static lastTooltipHideTime: number;\n    private static isLocked = false;\n\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    private showTooltipTimeoutId: number | undefined;\n    private hideTooltipTimeoutId: number | undefined;\n    private interactiveTooltipTimeoutId: number | undefined;\n\n    private interactionEnabled = false;\n    private isInteractingWithTooltip = false;\n\n    private state = TooltipStates.NOTHING;\n\n    private lastMouseEvent: MouseEvent | null;\n\n    private tooltipComp: ITooltipComp | undefined;\n    private tooltipPopupDestroyFunc: (() => void) | undefined;\n    // when showing the tooltip, we need to make sure it's the most recent instance we request, as due to\n    // async we could request two tooltips before the first instance returns, in which case we should\n    // disregard the second instance.\n    private tooltipInstanceCount = 0;\n    private tooltipMouseTrack: boolean = false;\n    private tooltipTrigger: TooltipTrigger;\n\n    private tooltipMouseEnterListener: (() => null) | null;\n    private tooltipMouseLeaveListener: (() => null) | null;\n    private tooltipFocusInListener: (() => null) | null;\n    private tooltipFocusOutListener: (() => null) | null;\n\n    private onBodyScrollEventCallback: (() => null) | undefined;\n    private onColumnMovedEventCallback: (() => null) | undefined;\n\n    constructor(\n        private parentComp: TooltipParentComp,\n        private tooltipShowDelayOverride?: number,\n        private tooltipHideDelayOverride?: number,\n        private shouldDisplayTooltip?: () => boolean\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsService.get('tooltipInteraction')) {\n            this.interactionEnabled = true;\n        }\n\n        this.tooltipTrigger = this.getTooltipTrigger();\n        this.tooltipMouseTrack = this.gridOptionsService.get('tooltipMouseTrack');\n\n        const el = this.parentComp.getGui();\n\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n            this.addManagedListener(el, 'mouseenter', this.onMouseEnter.bind(this));\n            this.addManagedListener(el, 'mouseleave', this.onMouseLeave.bind(this));\n        }\n\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\n            this.addManagedListener(el, 'focusin', this.onFocusIn.bind(this));\n            this.addManagedListener(el, 'focusout', this.onFocusOut.bind(this))\n        }\n\n        this.addManagedListener(el, 'mousemove', this.onMouseMove.bind(this));\n\n        if (!this.interactionEnabled) {\n            this.addManagedListener(el, 'mousedown', this.onMouseDown.bind(this));\n            this.addManagedListener(el, 'keydown', this.onKeyDown.bind(this));\n        }\n    }\n\n    private getGridOptionsTooltipDelay(delayOption: 'tooltipShowDelay' | 'tooltipHideDelay'): number {\n        const delay = this.gridOptionsService.get(delayOption);\n        if (delay < 0) {\n            warnOnce(`${delayOption} should not be lower than 0`);\n        }\n        return Math.max(200, delay);\n    }\n\n    private getTooltipDelay(type: 'show' | 'hide'): number {\n        if (type === 'show') {\n            return this.tooltipShowDelayOverride ?? this.getGridOptionsTooltipDelay('tooltipShowDelay')!;\n        }\n\n        return this.tooltipHideDelayOverride ?? this.getGridOptionsTooltipDelay('tooltipHideDelay')!;\n    }\n\n    protected destroy(): void {\n        // if this component gets destroyed while tooltip is showing, need to make sure\n        // we don't end with no mouseLeave event resulting in zombie tooltip\n        this.setToDoNothing();\n        super.destroy();\n    }\n\n    private getTooltipTrigger(): TooltipTrigger {\n        const trigger = this.gridOptionsService.get('tooltipTrigger');\n\n        if (!trigger || trigger === 'hover') {\n            return TooltipTrigger.HOVER;\n        }\n\n        return TooltipTrigger.FOCUS;\n    }\n\n    public onMouseEnter(e: MouseEvent): void {\n        // if `interactiveTooltipTimeoutId` is set, it means that this cell has a tooltip\n        // and we are in the process of moving the cursor from the tooltip back to the cell\n        // so we need to unlock this service here.\n        if (this.interactionEnabled && this.interactiveTooltipTimeoutId) {\n            this.unlockService();\n            this.startHideTimeout();\n        }\n\n        if (isIOSUserAgent()) { return; }\n\n        if (TooltipStateManager.isLocked) {\n            this.showTooltipTimeoutId = window.setTimeout(() => {\n                this.prepareToShowTooltip(e);\n            }, this.INTERACTIVE_HIDE_DELAY)\n        } else {\n            this.prepareToShowTooltip(e);\n        }\n    }\n\n    private onMouseMove(e: MouseEvent): void {\n        // there is a delay from the time we mouseOver a component and the time the\n        // tooltip is displayed, so we need to track mousemove to be able to correctly\n        // position the tooltip when showTooltip is called.\n        if (this.lastMouseEvent) {\n            this.lastMouseEvent = e;\n        }\n\n        if (\n            this.tooltipMouseTrack &&\n            this.state === TooltipStates.SHOWING &&\n            this.tooltipComp\n        ) {\n            this.positionTooltip();\n        }\n    }\n\n    private onMouseDown(): void {\n        this.setToDoNothing();\n    }\n\n    private onMouseLeave(): void {\n        // if interaction is enabled, we need to verify if the user is moving\n        // the cursor from the cell onto the tooltip, so we lock the service \n        // for 100ms to prevent other tooltips from being created while this is happening.\n        if (this.interactionEnabled) {\n            this.lockService();\n        } else {\n            this.setToDoNothing();\n        }\n    }\n\n    private onFocusIn(): void {\n        this.prepareToShowTooltip();\n    }\n\n    private onFocusOut(e: FocusEvent): void {\n        const relatedTarget = e.relatedTarget as Element;\n        const parentCompGui = this.parentComp.getGui();\n        const tooltipGui = this.tooltipComp?.getGui();\n\n        if (\n            this.isInteractingWithTooltip ||\n            parentCompGui.contains(relatedTarget) ||\n            (this.interactionEnabled && tooltipGui?.contains(relatedTarget))\n        ) { return; }\n\n        this.setToDoNothing();\n    }\n\n    private onKeyDown(): void {\n        this.setToDoNothing();\n    }\n\n    private prepareToShowTooltip(mouseEvent?: MouseEvent): void {\n        // every mouseenter should be following by a mouseleave, however for some unknown, it's possible for\n        // mouseenter to be called twice in a row, which can happen if editing the cell. this was reported\n        // in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if\n        // state is != nothing, then we know mouseenter was already received.\n        if (this.state != TooltipStates.NOTHING || TooltipStateManager.isLocked) { return; }\n\n        // if we are showing the tooltip because of focus, no delay at all\n        // if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time\n        let delay = 0;\n        if (mouseEvent) {\n            delay = this.isLastTooltipHiddenRecently() ? 200 : this.getTooltipDelay('show');\n        }\n\n        this.lastMouseEvent = mouseEvent || null;\n\n        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);\n        this.state = TooltipStates.WAITING_TO_SHOW;\n    }\n\n    private isLastTooltipHiddenRecently(): boolean {\n        // return true if <1000ms since last time we hid a tooltip\n        const now = new Date().getTime();\n        const then = TooltipStateManager.lastTooltipHideTime;\n\n        return (now - then) < this.SHOW_QUICK_TOOLTIP_DIFF;\n    }\n\n\n    private setToDoNothing(): void {\n        if (this.state === TooltipStates.SHOWING) {\n            this.hideTooltip();\n        }\n\n        if (this.onBodyScrollEventCallback) {\n            this.onBodyScrollEventCallback();\n            this.onBodyScrollEventCallback = undefined;\n        }\n\n        if (this.onColumnMovedEventCallback) {\n            this.onColumnMovedEventCallback();\n            this.onColumnMovedEventCallback = undefined;\n        }\n\n        this.clearTimeouts();\n        this.state = TooltipStates.NOTHING;\n        this.lastMouseEvent = null;\n    }\n\n    private showTooltip(): void {\n        const params: WithoutGridCommon<ITooltipParams> = {\n            ...this.parentComp.getTooltipParams(),\n        };\n\n        if (!exists(params.value) || (this.shouldDisplayTooltip && !this.shouldDisplayTooltip())) {\n            this.setToDoNothing();\n            return;\n        }\n\n        this.state = TooltipStates.SHOWING;\n        this.tooltipInstanceCount++;\n\n        // we pass in tooltipInstanceCount so the callback knows what the count was when\n        // we requested the tooltip, so if another tooltip was requested in the mean time\n        // we disregard it\n        const callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);\n\n        const userDetails = this.userComponentFactory.getTooltipCompDetails(params);\n        userDetails.newAgStackInstance()!.then(callback);\n    }\n\n\n    public hideTooltip(forceHide?: boolean): void {\n        if (!forceHide && this.isInteractingWithTooltip) { return; }\n        // check if comp exists - due to async, although we asked for\n        // one, the instance may not be back yet\n        if (this.tooltipComp) {\n            this.destroyTooltipComp();\n            TooltipStateManager.lastTooltipHideTime = new Date().getTime();\n        }\n\n        const event: WithoutGridCommon<TooltipHideEvent> = {\n            type: Events.EVENT_TOOLTIP_HIDE,\n            parentGui: this.parentComp.getGui()\n        };\n        this.eventService.dispatchEvent(event);\n\n        this.state = TooltipStates.NOTHING;\n    }\n\n    private newTooltipComponentCallback(tooltipInstanceCopy: number, tooltipComp: ITooltipComp): void {\n        const compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;\n\n        if (compNoLongerNeeded) {\n            this.getContext().destroyBean(tooltipComp);\n            return;\n        }\n\n        const eGui = tooltipComp.getGui();\n\n        this.tooltipComp = tooltipComp;\n\n        if (!eGui.classList.contains('ag-tooltip')) {\n            eGui.classList.add('ag-tooltip-custom');\n        }\n\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n            eGui.classList.add('ag-tooltip-animate');\n        }\n\n        if (this.interactionEnabled) {\n            eGui.classList.add('ag-tooltip-interactive');\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            eChild: eGui,\n            ariaLabel: translate('ariaLabelTooltip', 'Tooltip')\n        });\n        if (addPopupRes) {\n            this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;\n        }\n\n        this.positionTooltip();\n\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\n            this.onBodyScrollEventCallback = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.setToDoNothing.bind(this));\n            this.onColumnMovedEventCallback = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.setToDoNothing.bind(this));\n        }\n\n        if (this.interactionEnabled) {\n            if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n                this.tooltipMouseEnterListener = this.addManagedListener(eGui, 'mouseenter', this.onTooltipMouseEnter.bind(this)) || null;\n                this.tooltipMouseLeaveListener = this.addManagedListener(eGui, 'mouseleave', this.onTooltipMouseLeave.bind(this)) || null;\n            } else {\n                this.tooltipFocusInListener = this.addManagedListener(eGui, 'focusin', this.onTooltipFocusIn.bind(this)) || null;\n                this.tooltipFocusOutListener = this.addManagedListener(eGui, 'focusout', this.onTooltipFocusOut.bind(this)) || null;\n            }\n        }\n\n        const event: WithoutGridCommon<TooltipShowEvent> = {\n            type: Events.EVENT_TOOLTIP_SHOW,\n            tooltipGui: eGui,\n            parentGui: this.parentComp.getGui()\n        };\n        this.eventService.dispatchEvent(event);\n\n        this.startHideTimeout();\n    }\n\n    private onTooltipMouseEnter(): void {\n        this.isInteractingWithTooltip = true;\n        this.unlockService();\n    }\n\n    private onTooltipMouseLeave(): void {\n        this.isInteractingWithTooltip = false;\n        this.lockService();\n    }\n\n    private onTooltipFocusIn(): void {\n        this.isInteractingWithTooltip = true;\n    }\n\n    private onTooltipFocusOut(e: FocusEvent): void {\n        const parentGui = this.parentComp.getGui();\n        const tooltipGui = this.tooltipComp?.getGui();\n        const relatedTarget = e.relatedTarget as Element;\n\n        // focusout is dispatched when inner elements lose focus\n        // so we need to verify if focus is contained within the tooltip\n        if (tooltipGui?.contains(relatedTarget)) { return; }\n\n        this.isInteractingWithTooltip = false;\n\n        // if we move the focus from the tooltip back to the original cell\n        // the tooltip should remain open, but we need to restart the hide timeout counter\n        if (parentGui.contains(relatedTarget)) {\n            this.startHideTimeout();\n        }\n        // if the parent cell doesn't contain the focus, simply hide the tooltip\n        else {\n            this.hideTooltip();\n        }\n    }\n\n    private positionTooltip(): void {\n        const params = {\n            type: 'tooltip',\n            ePopup: this.tooltipComp!.getGui(),\n            nudgeY: 18,\n            skipObserver: this.tooltipMouseTrack\n        };\n\n        if (this.lastMouseEvent) {\n            this.popupService.positionPopupUnderMouseEvent({\n                ...params,\n                mouseEvent: this.lastMouseEvent\n            });\n        } else {\n            this.popupService.positionPopupByComponent({\n                ...params,\n                eventSource: this.parentComp.getGui(),\n                position: 'under',\n                keepWithinBounds: true,\n                nudgeY: 5\n            });\n        }\n    }\n\n    private destroyTooltipComp(): void {\n        // add class to fade out the tooltip\n        this.tooltipComp!.getGui().classList.add('ag-tooltip-hiding');\n\n        // make local copies of these variables, as we use them in the async function below,\n        // and we clear then to 'undefined' later, so need to take a copy before they are undefined.\n        const tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;\n        const tooltipComp = this.tooltipComp;\n        const delay = this.tooltipTrigger === TooltipTrigger.HOVER ? this.FADE_OUT_TOOLTIP_TIMEOUT : 0;\n\n        window.setTimeout(() => {\n            tooltipPopupDestroyFunc!();\n            this.getContext().destroyBean(tooltipComp);\n        }, delay);\n\n        this.clearTooltipListeners();\n        this.tooltipPopupDestroyFunc = undefined;\n        this.tooltipComp = undefined;\n    }\n\n    private clearTooltipListeners(): void {\n        [ \n            this.tooltipMouseEnterListener, this.tooltipMouseLeaveListener,\n            this.tooltipFocusInListener, this.tooltipFocusOutListener\n        ].forEach(listener => {\n            if (listener) { listener(); }\n        });\n\n        this.tooltipMouseEnterListener = this.tooltipMouseLeaveListener =\n        this.tooltipFocusInListener = this.tooltipFocusOutListener = null;\n    }\n\n    private lockService(): void {\n        TooltipStateManager.isLocked = true;\n        this.interactiveTooltipTimeoutId = window.setTimeout(() => {\n            this.unlockService();\n            this.setToDoNothing();\n        }, this.INTERACTIVE_HIDE_DELAY);\n    }\n\n    private unlockService(): void {\n        TooltipStateManager.isLocked = false;\n        this.clearInteractiveTimeout();\n    }\n\n    private startHideTimeout(): void {\n        this.clearHideTimeout();\n        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.getTooltipDelay('hide'));\n    }\n\n    private clearShowTimeout(): void {\n        if (!this.showTooltipTimeoutId) { return; }\n        window.clearTimeout(this.showTooltipTimeoutId);\n        this.showTooltipTimeoutId = undefined;\n    }\n\n    private clearHideTimeout(): void {\n        if (!this.hideTooltipTimeoutId) { return; }\n        window.clearTimeout(this.hideTooltipTimeoutId);\n        this.hideTooltipTimeoutId = undefined;\n    }\n\n    private clearInteractiveTimeout(): void {\n        if (!this.interactiveTooltipTimeoutId) { return; }\n        window.clearTimeout(this.interactiveTooltipTimeoutId);\n        this.interactiveTooltipTimeoutId = undefined;\n    }\n\n    private clearTimeouts(): void {\n        this.clearShowTimeout();\n        this.clearHideTimeout();\n        this.clearInteractiveTimeout();\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { TooltipStateManager, TooltipParentComp } from \"./tooltipStateManager\";\nimport { ITooltipParams, TooltipLocation } from \"../rendering/tooltipComponent\";\nimport { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { Beans } from \"../rendering/beans\";\nimport { Autowired, PostConstruct } from \"../context/context\";\n\nexport interface ITooltipFeatureCtrl {\n    getTooltipValue(): any;\n    getGui(): HTMLElement;\n    getLocation(): TooltipLocation;\n\n    getColumn?(): Column | ColumnGroup;\n    getColDef?(): ColDef | ColGroupDef;\n    getRowIndex?(): number;\n    getRowNode?(): RowNode;\n\n    // this makes no sense, why is the cell formatted value passed to the tooltip???\n    getValueFormatted?(): string;\n    getTooltipShowDelayOverride?(): number;\n    getTooltipHideDelayOverride?(): number;\n    shouldDisplayTooltip?(): boolean;\n}\n\nexport class TooltipFeature extends BeanStub {\n\n    private tooltip: any;\n\n    private tooltipManager: TooltipStateManager | undefined;\n    private browserTooltips: boolean;\n\n    @Autowired('beans') private beans: Beans;\n\n    constructor(private readonly ctrl: ITooltipFeatureCtrl, beans?: Beans) {\n        super();\n\n        if (beans) {\n            this.beans = beans;\n        }\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.refreshToolTip();\n    }\n\n\n    private setBrowserTooltip(tooltip: string | null) {\n        const name = 'title';\n        const eGui = this.ctrl.getGui();\n\n        if (!eGui) { return; }\n\n        if (tooltip != null && tooltip != '') {\n            eGui.setAttribute(name, tooltip);\n        } else {\n            eGui.removeAttribute(name);\n        }\n    }\n\n    private updateTooltipText(): void {\n        this.tooltip = this.ctrl.getTooltipValue();\n    }\n\n    private createTooltipFeatureIfNeeded(): void {\n        if (this.tooltipManager != null) { return; }\n\n        const parent: TooltipParentComp = {\n            getTooltipParams: () => this.getTooltipParams(),\n            getGui: () => this.ctrl.getGui()\n        };\n\n        this.tooltipManager = this.createBean(new TooltipStateManager(\n            parent,\n            this.ctrl.getTooltipShowDelayOverride?.(),\n            this.ctrl.getTooltipHideDelayOverride?.(),\n            this.ctrl.shouldDisplayTooltip\n        ), this.beans.context);\n    }\n\n    public refreshToolTip() {\n        this.browserTooltips = this.beans.gridOptionsService.get('enableBrowserTooltips');\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.setBrowserTooltip(this.tooltip);\n            if (this.tooltipManager) {\n                this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context);\n            }\n        } else {\n            this.setBrowserTooltip(null);\n            this.createTooltipFeatureIfNeeded();\n        }\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const ctrl = this.ctrl;\n        const column = ctrl.getColumn ? ctrl.getColumn() : undefined;\n        const colDef = ctrl.getColDef ? ctrl.getColDef() : undefined;\n        const rowNode = ctrl.getRowNode ? ctrl.getRowNode() : undefined;\n\n        return {\n            location: ctrl.getLocation(), //'cell',\n            colDef: colDef,\n            column: column,\n            rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : undefined,\n            node: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            value: this.getTooltipText(),\n            valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : undefined,\n            hideTooltipCallback: () => this.tooltipManager?.hideTooltip(true)\n        };\n\n    }\n\n    private getTooltipText() {\n        return this.tooltip;\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        if (this.tooltipManager) {\n            this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context);\n        }\n        super.destroy();\n    }\n}", "import { AgEvent } from \"../events\";\nimport { Autowired, PreConstruct } from \"../context/context\";\nimport { AgStackComponentsRegistry } from \"../components/agStackComponentsRegistry\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { NumberSequence } from \"../utils\";\nimport {\n    isNodeOrElement,\n    copyNodeList,\n    iterateNamedNodeMap,\n    loadTemplate,\n    setVisible,\n    setDisplayed\n} from '../utils/dom';\nimport { getFunctionName } from '../utils/function';\nimport { ITooltipParams, TooltipLocation } from \"../rendering/tooltipComponent\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { CssClassManager } from \"../rendering/cssClassManager\";\nimport { TooltipFeature } from \"./tooltipFeature\";\n\nconst compIdSequence = new NumberSequence();\n\nexport interface VisibleChangedEvent extends AgEvent {\n    visible: boolean;\n}\n\nexport class Component extends BeanStub {\n\n    public static elementGettingCreated: any;\n\n    public static EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n    private eGui: HTMLElement;\n\n    @Autowired('agStackComponentsRegistry') protected readonly agStackComponentsRegistry: AgStackComponentsRegistry;\n\n    // if false, then CSS class \"ag-hidden\" is applied, which sets \"display: none\"\n    private displayed = true;\n\n    // if false, then CSS class \"ag-invisible\" is applied, which sets \"visibility: hidden\"\n    private visible = true;\n\n    protected parentComponent: Component | undefined;\n\n    // unique id for this row component. this is used for getting a reference to the HTML dom.\n    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\n    // around as we create a new rowComp instance for the same row node).\n    private compId = compIdSequence.next();\n\n    private cssClassManager: CssClassManager;\n\n    protected usingBrowserTooltips: boolean;\n    private tooltipText: string | null | undefined;\n    private tooltipFeature: TooltipFeature | undefined;\n\n    constructor(template?: string) {\n        super();\n\n        this.cssClassManager = new CssClassManager(() => this.eGui);\n\n        if (template) {\n            this.setTemplate(template);\n        }\n    }\n\n    @PreConstruct\n    private preConstructOnComponent(): void {\n        this.usingBrowserTooltips = this.gridOptionsService.get('enableBrowserTooltips');\n    }\n\n    public getCompId(): number {\n        return this.compId;\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        return {\n            value: this.tooltipText,\n            location: 'UNKNOWN'\n        };\n    }\n\n    public setTooltip(params?: {\n        newTooltipText?: string | null;\n        showDelayOverride?: number;\n        hideDelayOverride?: number; \n        location?: TooltipLocation;\n        shouldDisplayTooltip?: () => boolean\n    }): void {\n        const { newTooltipText, showDelayOverride, hideDelayOverride, location, shouldDisplayTooltip } = params || {};\n\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        if (this.tooltipText !== newTooltipText) {\n            this.tooltipText = newTooltipText;\n        }\n\n        const getTooltipValue = () => this.tooltipText;\n\n        if (newTooltipText != null) {\n            this.tooltipFeature = this.createBean(new TooltipFeature({\n                getTooltipValue,\n                getGui: () => this.getGui(),\n                getLocation: () => location ?? 'UNKNOWN',\n                getTooltipShowDelayOverride: showDelayOverride != null ? (() => showDelayOverride) : undefined,\n                getTooltipHideDelayOverride: hideDelayOverride != null ? (() => hideDelayOverride) : undefined,\n                shouldDisplayTooltip\n            }));\n        }\n    }\n\n    // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag\n    private createChildComponentsFromTags(parentNode: Element, paramsMap?: { [key: string]: any; }): void {\n        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\n        // which messes up the traversal order of the children.\n        const childNodeList: Node[] = copyNodeList(parentNode.childNodes);\n\n        childNodeList.forEach(childNode => {\n            if (!(childNode instanceof HTMLElement)) {\n                return;\n            }\n\n            const childComp = this.createComponentFromElement(childNode, childComp => {\n                // copy over all attributes, including css classes, so any attributes user put on the tag\n                // wll be carried across\n                const childGui = childComp.getGui();\n                if (childGui) {\n                    this.copyAttributesFromNode(childNode, childComp.getGui());\n                }\n            }, paramsMap);\n\n            if (childComp) {\n                if ((childComp as any).addItems && childNode.children.length) {\n                    this.createChildComponentsFromTags(childNode, paramsMap);\n\n                    // converting from HTMLCollection to Array\n                    const items = Array.prototype.slice.call(childNode.children);\n\n                    (childComp as any).addItems(items);\n                }\n                // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom\n                this.swapComponentForNode(childComp, parentNode, childNode);\n            } else if (childNode.childNodes) {\n                this.createChildComponentsFromTags(childNode, paramsMap);\n            }\n        });\n    }\n\n    private createComponentFromElement(\n        element: HTMLElement,\n        afterPreCreateCallback?: (comp: Component) => void,\n        paramsMap?: { [key: string]: any; }\n    ): Component | null {\n        const key = element.nodeName;\n        const componentParams = paramsMap ? paramsMap[element.getAttribute('ref')!] : undefined;\n        const ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);\n\n        if (ComponentClass) {\n            Component.elementGettingCreated = element;\n            const newComponent = new ComponentClass(componentParams) as Component;\n            newComponent.setParentComponent(this);\n\n            this.createBean(newComponent, null, afterPreCreateCallback);\n\n            return newComponent;\n        }\n        return null;\n    }\n\n    private copyAttributesFromNode(source: Element, dest: Element): void {\n        iterateNamedNodeMap(source.attributes, (name, value) => dest.setAttribute(name, value));\n    }\n\n    private swapComponentForNode(newComponent: Component, parentNode: Element, childNode: Node): void {\n        const eComponent = newComponent.getGui();\n        parentNode.replaceChild(eComponent, childNode);\n        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\n        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));\n        this.swapInComponentForQuerySelectors(newComponent, childNode);\n    }\n\n    private swapInComponentForQuerySelectors(newComponent: Component, childNode: Node): void {\n        const thisNoType = this as any;\n\n        this.iterateOverQuerySelectors((querySelector: any) => {\n            if (thisNoType[querySelector.attributeName] === childNode) {\n                thisNoType[querySelector.attributeName] = newComponent;\n            }\n        });\n    }\n\n    private iterateOverQuerySelectors(action: (querySelector: any) => void): void {\n        let thisPrototype: any = Object.getPrototypeOf(this);\n\n        while (thisPrototype != null) {\n            const metaData = thisPrototype.__agComponentMetaData;\n            const currentProtoName = getFunctionName(thisPrototype.constructor);\n\n            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\n                metaData[currentProtoName].querySelectors.forEach((querySelector: any) => action(querySelector));\n            }\n\n            thisPrototype = Object.getPrototypeOf(thisPrototype);\n        }\n    }\n\n    protected activateTabIndex(elements?: Element[]): void {\n        const tabIndex = this.gridOptionsService.get('tabIndex');\n\n        if (!elements) {\n            elements = [];\n        }\n\n        if (!elements.length) {\n            elements.push(this.getGui());\n        }\n\n        elements.forEach(el => el.setAttribute('tabindex', tabIndex.toString()));\n    }\n\n    public setTemplate(template: string | null | undefined, paramsMap?: { [key: string]: any; }): void {\n        const eGui = loadTemplate(template as string);\n        this.setTemplateFromElement(eGui, paramsMap);\n    }\n\n    public setTemplateFromElement(element: HTMLElement, paramsMap?: { [key: string]: any; }): void {\n        this.eGui = element;\n        (this.eGui as any).__agComponent = this;\n        this.wireQuerySelectors();\n\n        // context will not be available when user sets template in constructor\n        if (!!this.getContext()) {\n            this.createChildComponentsFromTags(this.getGui(), paramsMap);\n        }\n    }\n\n    @PreConstruct\n    private createChildComponentsPreConstruct(): void {\n        // ui exists if user sets template in constructor. when this happens, we have to wait for the context\n        // to be autoWired first before we can create child components.\n        if (!!this.getGui()) {\n            this.createChildComponentsFromTags(this.getGui());\n        }\n    }\n\n    protected wireQuerySelectors(): void {\n        if (!this.eGui) {\n            return;\n        }\n\n        const thisNoType = this as any;\n\n        this.iterateOverQuerySelectors((querySelector: any) => {\n            const setResult = (result: any) => thisNoType[querySelector.attributeName] = result;\n\n            // if it's a ref selector, and match is on top level component, we return\n            // the element. otherwise no way of components putting ref=xxx on the top\n            // level element as querySelector only looks at children.\n            const topLevelRefMatch = querySelector.refSelector\n                && this.getAttribute('ref') === querySelector.refSelector;\n            if (topLevelRefMatch) {\n                setResult(this.eGui);\n            } else {\n                // otherwise use querySelector, which looks at children\n                const resultOfQuery = this.eGui.querySelector(querySelector.querySelector);\n                if (resultOfQuery) {\n                    setResult(resultOfQuery.__agComponent || resultOfQuery);\n                }\n            }\n\n        });\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eGui;\n    }\n\n    public getAriaElement(): Element {\n        return this.getFocusableElement();\n    }\n\n    public setParentComponent(component: Component) {\n        this.parentComponent = component;\n    }\n\n    public getParentComponent(): Component | undefined {\n        return this.parentComponent;\n    }\n\n    // this method is for older code, that wants to provide the gui element,\n    // it is not intended for this to be in ag-Stack\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    protected queryForHtmlElement(cssSelector: string): HTMLElement {\n        return this.eGui.querySelector(cssSelector) as HTMLElement;\n    }\n\n    protected queryForHtmlInputElement(cssSelector: string): HTMLInputElement {\n        return this.eGui.querySelector(cssSelector) as HTMLInputElement;\n    }\n\n    public appendChild(\n        newChild: HTMLElement | Component,\n        container?: HTMLElement\n    ): void {\n        if (newChild == null) { return; }\n\n        if (!container) { container = this.eGui; }\n\n        if (isNodeOrElement(newChild)) {\n            container.appendChild(newChild as HTMLElement);\n        } else {\n            const childComponent = newChild as Component;\n            container.appendChild(childComponent.getGui());\n        }\n    }\n\n    public isDisplayed(): boolean {\n        return this.displayed;\n    }\n\n    public setVisible(visible: boolean, options: { skipAriaHidden?: boolean } = {}): void {\n        if (visible !== this.visible) {\n            this.visible = visible;\n            const  { skipAriaHidden } = options;\n            setVisible(this.eGui, visible, { skipAriaHidden });\n        }\n    }\n\n    public setDisplayed(displayed: boolean, options: { skipAriaHidden?: boolean } = {} ): void {\n        if (displayed !== this.displayed) {\n            this.displayed = displayed;\n            const  { skipAriaHidden } = options;\n            setDisplayed(this.eGui, displayed, { skipAriaHidden });\n\n            const event: VisibleChangedEvent = {\n                type: Component.EVENT_DISPLAYED_CHANGED,\n                visible: this.displayed\n            };\n\n            this.dispatchEvent(event);\n        }\n    }\n\n    protected destroy(): void {\n        if (this.parentComponent) {\n            this.parentComponent = undefined;\n        }\n\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature)\n        }\n\n        const eGui = this.eGui as any;\n\n        if (eGui && eGui.__agComponent) {\n            eGui.__agComponent = undefined;\n        }\n\n        super.destroy();\n    }\n\n    public addGuiEventListener(event: string, listener: (event: any) => void, options?: AddEventListenerOptions): void {\n        this.eGui.addEventListener(event, listener, options);\n        this.addDestroyFunc(() => this.eGui.removeEventListener(event, listener));\n    }\n\n    public addCssClass(className: string): void {\n        this.cssClassManager.addCssClass(className);\n    }\n\n    public removeCssClass(className: string): void {\n        this.cssClassManager.removeCssClass(className);\n    }\n\n    public containsCssClass(className: string): boolean {\n        return this.cssClassManager.containsCssClass(className);\n    }\n\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\n        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);\n    }\n\n    public getAttribute(key: string): string | null {\n        const { eGui } = this;\n        return eGui ? eGui.getAttribute(key) : null;\n    }\n\n    public getRefElement(refName: string): HTMLElement {\n        return this.queryForHtmlElement(`[ref=\"${refName}\"]`);\n    }\n}\n", "import { getFunctionName } from '../utils/function';\n\nexport function QuerySelector(selector?: string): Function {\n    return querySelectorFunc.bind(this, selector, undefined);\n}\n\nexport function RefSelector(ref: string): Function {\n    return querySelectorFunc.bind(this, `[ref=${ref}]`, ref);\n}\n\nfunction querySelectorFunc(selector: string, refSelector: string, classPrototype: any, methodOrAttributeName: string, index: number) {\n    if (selector === null) {\n        console.error('AG Grid: QuerySelector selector should not be null');\n        return;\n    }\n\n    if (typeof index === 'number') {\n        console.error('AG Grid: QuerySelector should be on an attribute');\n        return;\n    }\n\n    addToObjectProps(classPrototype, 'querySelectors', {\n        attributeName: methodOrAttributeName,\n        querySelector: selector,\n        refSelector: refSelector\n    });\n}\n\n// // think we should take this out, put property bindings on the\n// export function Method(eventName?: string): Function {\n//     return methodFunc.bind(this, eventName);\n// }\n//\n// function methodFunc(alias: string, target: Object, methodName: string) {\n//     if (alias === null) {\n//         console.error(\"AG Grid: EventListener eventName should not be null\");\n//         return;\n//     }\n//\n//     addToObjectProps(target, 'methods', {\n//         methodName: methodName,\n//         alias: alias\n//     });\n// }\n\nfunction addToObjectProps(target: Object, key: string, value: any): void {\n    // it's an attribute on the class\n    const props = getOrCreateProps(target, getFunctionName(target.constructor));\n\n    if (!props[key]) {\n        props[key] = [];\n    }\n\n    props[key].push(value);\n}\n\nfunction getOrCreateProps(target: any, instanceName: string): any {\n    if (!target.__agComponentMetaData) {\n        target.__agComponentMetaData = {};\n    }\n\n    if (!target.__agComponentMetaData[instanceName]) {\n        target.__agComponentMetaData[instanceName] = {};\n    }\n\n    return target.__agComponentMetaData[instanceName];\n}\n", "import { IFloatingFilterComp, IFloatingFilterParams, IFloatingFilterParent } from '../floatingFilter';\nimport { Component } from '../../../widgets/component';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Autowired } from '../../../context/context';\nimport { ColumnModel } from '../../../columns/columnModel';\nimport { IFilter } from '../../../interfaces/iFilter';\n\n// optional floating filter for user provided filters - instead of providing a floating filter,\n// they can provide a getModelAsString() method on the filter instead. this class just displays\n// the string returned from getModelAsString()\nexport class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp<IFilter & IFloatingFilterParent> {\n\n    @RefSelector('eFloatingFilterText') private eFloatingFilterText: AgInputTextField;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    public onParentModelChanged(parentModel: any): void {\n        if (parentModel == null) {\n            this.eFloatingFilterText.setValue('');\n            return;\n        }\n\n        this.params.parentFilterInstance(filterInstance => {\n            // it would be nice to check if getModelAsString was present before creating this component,\n            // however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until\n            // AFTER the filter is created, not allowing inspection before this (we create floating filters as columns\n            // are drawn, but the parent filters are only created when needed).\n            if (filterInstance.getModelAsString) {\n                const modelAsString = filterInstance.getModelAsString(parentModel);\n                this.eFloatingFilterText.setValue(modelAsString);\n            }\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.init(params);\n    }\n}\n", "import { IDateComp, IDateParams } from '../../../rendering/dateComponent';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { Context } from '../../../context/context';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { setDisplayed } from '../../../utils/dom';\nimport { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { warnOnce } from '../../../utils/function';\n\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nexport class DateCompWrapper {\n    private dateComp: IDateComp | null | undefined;\n    private tempValue: Date | null;\n    private disabled: boolean | null;\n    private alive = true;\n    private context: Context;\n    private eParent: HTMLElement;\n\n    constructor(context: Context, userComponentFactory: UserComponentFactory, dateComponentParams: WithoutGridCommon<IDateParams>, eParent: HTMLElement) {\n        this.context = context;\n        this.eParent = eParent;\n\n        const compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);\n        const promise = compDetails.newAgStackInstance();\n\n        promise!.then(dateComp => {\n            // because async, check the filter still exists after component comes back\n            if (!this.alive) {\n                context.destroyBean(dateComp);\n                return;\n            }\n\n            this.dateComp = dateComp;\n\n            if (!dateComp) { return; }\n\n            eParent.appendChild(dateComp.getGui());\n\n            if (dateComp.afterGuiAttached) {\n                dateComp.afterGuiAttached();\n            }\n\n            if (this.tempValue) {\n                dateComp.setDate(this.tempValue);\n            }\n            if (this.disabled != null) {\n                this.setDateCompDisabled(this.disabled);\n            }\n        });\n    }\n\n    public destroy(): void {\n        this.alive = false;\n        this.dateComp = this.context.destroyBean(this.dateComp);\n    }\n\n    public getDate(): Date | null {\n        return this.dateComp ? this.dateComp.getDate() : this.tempValue;\n    }\n\n    public setDate(value: Date | null): void {\n        if (this.dateComp) {\n            this.dateComp.setDate(value);\n        } else {\n            this.tempValue = value;\n        }\n    }\n\n    public setDisabled(disabled: boolean): void {\n        if (this.dateComp) {\n            this.setDateCompDisabled(disabled);\n        } else {\n            this.disabled = disabled;\n        }\n    }\n\n    public setDisplayed(displayed: boolean) {\n        setDisplayed(this.eParent, displayed);\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        if (this.dateComp && this.dateComp.setInputPlaceholder) {\n            this.dateComp.setInputPlaceholder(placeholder);\n        }\n    }\n\n    public setInputAriaLabel(label: string): void {\n        if (this.dateComp && this.dateComp.setInputAriaLabel) {\n            this.dateComp.setInputAriaLabel(label);\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (this.dateComp && typeof this.dateComp.afterGuiAttached === 'function') {\n            this.dateComp.afterGuiAttached(params);\n        }\n    }\n\n    public updateParams(params: IDateParams): void {\n        let hasRefreshed = false;\n        if (this.dateComp?.refresh && typeof this.dateComp.refresh === 'function') {\n            const result = this.dateComp.refresh(params);\n            // framework wrapper always implements optional methods, but returns null if no underlying method\n            if (result !== null) {\n                hasRefreshed = true;\n            }\n        }\n        if (!hasRefreshed && this.dateComp?.onParamsUpdated && typeof this.dateComp.onParamsUpdated === 'function') {\n            const result = this.dateComp.onParamsUpdated(params);\n            if (result !== null) {\n                warnOnce(`Custom date component method 'onParamsUpdated' is deprecated. Use 'refresh' instead.`);\n            }\n        }\n    }\n\n    private setDateCompDisabled(disabled: boolean): void {\n        if (this.dateComp == null) { return; }\n        if (this.dateComp.setDisabled == null) { return; }\n\n        this.dateComp.setDisabled(disabled);\n    }\n\n}\n", "import { IFilterOptionDef } from '../../interfaces/iFilter';\nimport { ScalarFilterParams } from './scalarFilter';\nimport { SimpleFilterParams } from './simpleFilter';\n\n/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n    protected customFilterOptions: { [name: string]: IFilterOptionDef; } = {};\n    protected filterOptions: (IFilterOptionDef | string)[];\n    protected defaultOption: string;\n\n    public init(params: ScalarFilterParams, defaultOptions: string[]): void {\n        this.filterOptions = params.filterOptions || defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n    }\n\n    public getFilterOptions(): (IFilterOptionDef | string)[] {\n        return this.filterOptions;\n    }\n\n    private mapCustomOptions(): void {\n        if (!this.filterOptions) { return; }\n\n        this.filterOptions.forEach(filterOption => {\n            if (typeof filterOption === 'string') { return; }\n\n            const requiredProperties = [['displayKey'], ['displayName'], ['predicate', 'test']];\n            const propertyCheck = (keys: [keyof IFilterOptionDef]) => {\n                if (!keys.some(key => filterOption[key] != null)) {\n                    console.warn(`AG Grid: ignoring FilterOptionDef as it doesn't contain one of '${keys}'`);\n                    return false;\n                }\n\n                return true;\n            };\n\n            if (!requiredProperties.every(propertyCheck)) {\n                this.filterOptions = this.filterOptions.filter(v => v === filterOption) || [];\n                return;\n            }\n\n            this.customFilterOptions[filterOption.displayKey] = filterOption;\n        });\n    }\n\n    private selectDefaultItem(params: SimpleFilterParams): void {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        } else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            } else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            } else {\n                console.warn(`AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        } else {\n            console.warn('AG Grid: no filter options for filter');\n        }\n    }\n\n    public getDefaultOption(): string {\n        return this.defaultOption;\n    }\n\n    public getCustomOption(name?: string | null): IFilterOptionDef | undefined {\n        return this.customFilterOptions[name!];\n    }\n}\n", "export const FILTER_LOCALE_TEXT = {\n    applyFilter: 'Apply',\n    clearFilter: 'Clear',\n    resetFilter: 'Reset',\n    cancelFilter: 'Cancel',\n    textFilter: 'Text Filter',\n    numberFilter: 'Number Filter',\n    dateFilter: 'Date Filter',\n    setFilter: 'Set Filter',\n    filterOoo: 'Filter...',\n    empty: 'Choose one',\n    equals: 'Equals',\n    notEqual: 'Does not equal',\n    lessThan: 'Less than',\n    greaterThan: 'Greater than',\n    inRange: 'Between',\n    inRangeStart: 'From',\n    inRangeEnd: 'To',\n    lessThanOrEqual: 'Less than or equal to',\n    greaterThanOrEqual: 'Greater than or equal to',\n    contains: 'Contains',\n    notContains: 'Does not contain',\n    startsWith: 'Begins with',\n    endsWith: 'Ends with',\n    blank: 'Blank',\n    notBlank: 'Not blank',\n    before: 'Before',\n    after: 'After',\n    andCondition: 'AND',\n    orCondition: 'OR',\n    dateFormatOoo: 'yyyy-mm-dd',\n};\n", "import { PostConstruct, Autowired } from '../context/context';\nimport { FocusService } from '../focusService';\nimport { KeyCode } from '../constants/keyCode';\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from '../utils/event';\nimport { BeanStub } from '../context/beanStub';\n\nexport interface ManagedFocusCallbacks {\n    shouldStopEventPropagation?: (e: KeyboardEvent) => boolean;\n    onTabKeyDown?: (e: KeyboardEvent) => void;\n    handleKeyDown?: (e: KeyboardEvent) => void;\n    onFocusIn?: (e: FocusEvent) => void;\n    onFocusOut?: (e: FocusEvent) => void;\n}\n\nexport class ManagedFocusFeature extends BeanStub {\n\n    public static FOCUS_MANAGED_CLASS = 'ag-focus-managed';\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    constructor(\n        private readonly eFocusableElement: HTMLElement,\n        private callbacks: ManagedFocusCallbacks = {}\n    ) {\n        super();\n        this.callbacks = {\n            shouldStopEventPropagation: () => false,\n            onTabKeyDown: (e: KeyboardEvent) => {\n                if (e.defaultPrevented) { return; }\n\n                const nextRoot = this.focusService.findNextFocusableElement(this.eFocusableElement, false, e.shiftKey);\n\n                if (!nextRoot) { return; }\n\n                nextRoot.focus();\n                e.preventDefault();\n            },\n            ...callbacks\n        };\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.eFocusableElement.classList.add(ManagedFocusFeature.FOCUS_MANAGED_CLASS);\n\n        this.addKeyDownListeners(this.eFocusableElement);\n\n        if (this.callbacks.onFocusIn) {\n            this.addManagedListener(this.eFocusableElement, 'focusin', this.callbacks.onFocusIn);\n        }\n\n        if (this.callbacks.onFocusOut) {\n            this.addManagedListener(this.eFocusableElement, 'focusout', this.callbacks.onFocusOut);\n        }\n    }\n\n    private addKeyDownListeners(eGui: HTMLElement): void {\n        this.addManagedListener(eGui, 'keydown', (e: KeyboardEvent) => {\n            if (e.defaultPrevented || isStopPropagationForAgGrid(e)) { return; }\n\n            if (this.callbacks.shouldStopEventPropagation!(e)) {\n                stopPropagationForAgGrid(e);\n                return;\n            }\n\n            if (e.key === KeyCode.TAB) {\n                this.callbacks.onTabKeyDown!(e);\n            } else if (this.callbacks.handleKeyDown) {\n                this.callbacks.handleKeyDown(e);\n            }\n        });\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\nimport { getAbsoluteHeight, getAbsoluteWidth, isVisible, setFixedHeight, setFixedWidth } from \"../../utils/dom\";\nimport { PopupService } from \"../../widgets/popupService\";\nimport { ResizeObserverService } from \"../../misc/resizeObserverService\";\n\nconst RESIZE_CONTAINER_STYLE = 'ag-resizer-wrapper';\n\nconst RESIZE_TEMPLATE = /* html */\n    `<div class=\"${RESIZE_CONTAINER_STYLE}\">\n        <div ref=\"eTopLeftResizer\" class=\"ag-resizer ag-resizer-topLeft\"></div>\n        <div ref=\"eTopResizer\" class=\"ag-resizer ag-resizer-top\"></div>\n        <div ref=\"eTopRightResizer\" class=\"ag-resizer ag-resizer-topRight\"></div>\n        <div ref=\"eRightResizer\" class=\"ag-resizer ag-resizer-right\"></div>\n        <div ref=\"eBottomRightResizer\" class=\"ag-resizer ag-resizer-bottomRight\"></div>\n        <div ref=\"eBottomResizer\" class=\"ag-resizer ag-resizer-bottom\"></div>\n        <div ref=\"eBottomLeftResizer\" class=\"ag-resizer ag-resizer-bottomLeft\"></div>\n        <div ref=\"eLeftResizer\" class=\"ag-resizer ag-resizer-left\"></div>\n    </div>`;\n\nexport interface PositionableOptions {\n    popup?: boolean;\n    minWidth?: number | null;\n    width?: number | string | null;\n    minHeight?: number | null;\n    height?: number | string | null;\n    centered?: boolean | null;\n    calculateTopBuffer?: () => number;\n    /**\n     * Used for when a popup needs to be resized by an element within itself\n     * In that case, the feature will configured as `popup=false` but the offsetParent\n     * needs to be the popupParent.\n     */\n    forcePopupParentAsOffsetParent?: boolean;\n    x?: number | null;\n    y?: number | null;\n}\n\nexport type ResizableSides = 'topLeft' |\n    'top' |\n    'topRight' |\n    'right' |\n    'bottomRight' |\n    'bottom' |\n    'bottomLeft' |\n    'left';\n\nexport type ResizableStructure = {\n    [key in ResizableSides]?: boolean;\n};\n\ninterface MappedResizer {\n    element: HTMLElement;\n    dragSource?: DragListenerParams;\n}\n\nexport class PositionableFeature extends BeanStub {\n\n    @Autowired('popupService') protected readonly popupService: PopupService;\n    @Autowired('resizeObserverService') private readonly resizeObserverService: ResizeObserverService;\n    @Autowired('dragService') private readonly dragService: DragService;\n\n    private dragStartPosition = {\n        x: 0,\n        y: 0\n    };\n\n    private position = {\n        x: 0,\n        y: 0\n    };\n\n    private lastSize = {\n        width: -1,\n        height: -1\n    };\n\n    private resizerMap: {\n        [key in ResizableSides]: MappedResizer\n    } | undefined;\n\n    private minWidth: number;\n    private minHeight?: number;\n    private positioned = false;\n    private resizersAdded = false;\n    private config: PositionableOptions;\n\n    private resizeListeners: DragListenerParams[] = [];\n    private moveElementDragListener: DragListenerParams | undefined;\n\n    private offsetParent: HTMLElement;\n    private boundaryEl: HTMLElement | null = null;\n\n    private isResizing: boolean = false;\n    private isMoving = false;\n    private resizable: ResizableStructure = {};\n    private movable = false;\n    private currentResizer: { isTop: boolean, isRight: boolean, isBottom: boolean, isLeft: boolean } | null = null;\n    private resizeObserverSubscriber: (() => void) | undefined;\n\n    constructor(\n        private readonly element: HTMLElement,\n        config?: PositionableOptions\n    ) {\n        super();\n        this.config = Object.assign({}, { popup: false }, config);\n    }\n\n    public center() {\n        const { clientHeight, clientWidth } = this.offsetParent;\n\n        const x = (clientWidth / 2) - (this.getWidth()! / 2);\n        const y = (clientHeight / 2) - (this.getHeight()! / 2);\n\n        this.offsetElement(x, y);\n    }\n\n    public initialisePosition(): void {\n        if (this.positioned) { return; }\n\n        const { centered, forcePopupParentAsOffsetParent, minWidth, width, minHeight, height, x, y } = this.config;\n\n        if (!this.offsetParent) { this.setOffsetParent(); }\n\n        let computedMinHeight = 0;\n        let computedMinWidth = 0;\n\n        // here we don't use the main offset parent but the element's offsetParent\n        // in order to calculated the minWidth and minHeight correctly\n        const isElementVisible = isVisible(this.element);\n        if (isElementVisible) {\n            const boundaryEl = this.findBoundaryElement();\n            const offsetParentComputedStyles = window.getComputedStyle(boundaryEl);\n            if (offsetParentComputedStyles.minWidth != null) {\n                const paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;\n                computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;\n            }\n\n            if (offsetParentComputedStyles.minHeight != null) {\n                const paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;\n                computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;\n            }\n        }\n\n        this.minHeight = minHeight || computedMinHeight;\n        this.minWidth = minWidth || computedMinWidth;\n\n        if (width) {\n            this.setWidth(width);\n        }\n\n        if (height) {\n            this.setHeight(height);\n        }\n\n        if (!width || !height) {\n            this.refreshSize();\n        }\n\n        if (centered) {\n            this.center();\n        } else if (x || y) {\n            this.offsetElement(x!, y!);\n        } else if (isElementVisible && forcePopupParentAsOffsetParent) {\n            let boundaryEl: HTMLElement | null = this.boundaryEl;\n            let initialisedDuringPositioning = true;\n\n            if (!boundaryEl) {\n                boundaryEl = this.findBoundaryElement();\n                initialisedDuringPositioning = false;\n            }\n\n            if (boundaryEl) {\n                const top = parseFloat(boundaryEl.style.top);\n                const left = parseFloat(boundaryEl.style.left);\n\n                if (initialisedDuringPositioning) {\n                    this.offsetElement(\n                        isNaN(left) ? 0 : left,\n                        isNaN(top) ? 0 : top\n                    );\n                } else {\n                    this.setPosition(left, top);\n                }\n            }\n        }\n\n        this.positioned = !!this.offsetParent;\n    }\n\n    public isPositioned(): boolean {\n        return this.positioned;\n    }\n\n    public getPosition(): { x: number; y: number } {\n        return this.position;\n    }\n\n    public setMovable(movable: boolean, moveElement: HTMLElement) {\n        if (!this.config.popup || movable === this.movable) { return; }\n\n        this.movable = movable;\n\n        const params: DragListenerParams = this.moveElementDragListener || {\n            eElement: moveElement,\n            onDragStart: this.onMoveStart.bind(this),\n            onDragging: this.onMove.bind(this),\n            onDragStop: this.onMoveEnd.bind(this)\n        };\n\n        if (movable) {\n            this.dragService.addDragSource(params);\n            this.moveElementDragListener = params;\n        } else {\n            this.dragService.removeDragSource(params);\n            this.moveElementDragListener = undefined;\n        }\n    }\n\n    public setResizable(resizable: boolean | ResizableStructure) {\n        this.clearResizeListeners();\n\n        if (resizable) {\n            this.addResizers();\n        } else {\n            this.removeResizers();\n        }\n\n        if (typeof resizable === 'boolean') {\n            if (resizable === false) { return; }\n\n            resizable = {\n                topLeft: resizable,\n                top: resizable,\n                topRight: resizable,\n                right: resizable,\n                bottomRight: resizable,\n                bottom: resizable,\n                bottomLeft: resizable,\n                left: resizable\n            } as ResizableStructure;\n        }\n\n        Object.keys(resizable).forEach((side: ResizableSides) => {\n            const resizableStructure = resizable as ResizableStructure;\n            const isSideResizable = !!resizableStructure[side];\n            const resizerEl = this.getResizerElement(side);\n\n            const params: DragListenerParams = {\n                dragStartPixels: 0,\n                eElement: resizerEl!,\n                onDragStart: (e: MouseEvent) => this.onResizeStart(e, side),\n                onDragging: this.onResize.bind(this),\n                onDragStop: (e: MouseEvent) => this.onResizeEnd(e, side),\n            };\n\n            if (isSideResizable || (!this.isAlive() && !isSideResizable)) {\n                if (isSideResizable) {\n                    this.dragService.addDragSource(params);\n                    this.resizeListeners.push(params);\n                    resizerEl!.style.pointerEvents = 'all';\n                } else {\n                    resizerEl!.style.pointerEvents = 'none';\n                }\n                this.resizable[side] = isSideResizable;\n            }\n        });\n    }\n\n    public removeSizeFromEl(): void {\n        this.element.style.removeProperty('height');\n        this.element.style.removeProperty('width');\n        this.element.style.removeProperty('flex');\n    }\n\n    public restoreLastSize(): void {\n        this.element.style.flex = '0 0 auto';\n\n        const { height, width } = this.lastSize;\n\n        if (width !== -1) {\n            this.element.style.width = `${width}px`;\n        }\n\n        if (height !== -1) {\n            this.element.style.height = `${height}px`;\n        }\n    }\n\n    public getHeight(): number | undefined {\n        return this.element.offsetHeight;\n    }\n\n    public setHeight(height: number | string) {\n        const { popup } = this.config;\n        const eGui = this.element;\n\n        let isPercent = false;\n\n        if (typeof height === 'string' && height.indexOf('%') !== -1) {\n            setFixedHeight(eGui, height);\n            height = getAbsoluteHeight(eGui);\n            isPercent = true;\n        } else {\n            height = Math.max(this.minHeight!, height as number);\n            if (this.positioned) {\n                const availableHeight = this.getAvailableHeight();\n\n                if (availableHeight && height > availableHeight) {\n                    height = availableHeight;\n                }\n            }\n        }\n\n        if (this.getHeight() === height) { return; }\n\n        if (!isPercent) {\n            if (popup) {\n                setFixedHeight(eGui, height);\n            } else {\n                eGui.style.height = `${height}px`;\n                eGui.style.flex = '0 0 auto';\n                this.lastSize.height = typeof height === 'number' ? height : parseFloat(height);\n            }\n        } else {\n            eGui.style.maxHeight = 'unset';\n            eGui.style.minHeight = 'unset';\n        }\n    }\n\n    private getAvailableHeight(): number | null {\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n\n        if (!this.positioned) { this.initialisePosition(); }\n\n        const { clientHeight } = this.offsetParent;\n\n        if (!clientHeight) { return null; }\n\n        const elRect = this.element.getBoundingClientRect();\n        const offsetParentRect = this.offsetParent.getBoundingClientRect();\n\n        const yPosition = popup ? this.position.y : elRect.top;\n        const parentTop = popup ? 0 : offsetParentRect.top;\n\n        // When `forcePopupParentAsOffsetParent`, there may be elements that appear after the resizable element, but aren't included in the height.\n        // Take these into account here\n        let additionalHeight = 0;\n        if (forcePopupParentAsOffsetParent) {\n            const parentEl = this.element.parentElement;\n            if (parentEl) {\n                const { bottom } = parentEl.getBoundingClientRect();\n                additionalHeight = bottom - elRect.bottom;\n            }\n        }\n\n        const availableHeight = clientHeight + parentTop - yPosition - additionalHeight;\n\n        return availableHeight;\n    }\n\n    public getWidth(): number | undefined {\n        return this.element.offsetWidth;\n    }\n\n    public setWidth(width: number | string) {\n        const eGui = this.element;\n        const { popup } = this.config;\n\n        let isPercent = false;\n\n        if (typeof width === 'string' && width.indexOf('%') !== -1) {\n            setFixedWidth(eGui, width);\n            width = getAbsoluteWidth(eGui);\n            isPercent = true;\n        } else if (this.positioned) {\n            width = Math.max(this.minWidth, width as number);\n            const { clientWidth } = this.offsetParent;\n            const xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;\n\n            if (clientWidth && (width + xPosition > clientWidth)) {\n                width = clientWidth - xPosition;\n            }\n        }\n\n        if (this.getWidth() === width) { return; }\n\n        if (!isPercent) {\n            if (this.config.popup) {\n                setFixedWidth(eGui, width);\n            } else {\n                eGui.style.width = `${width}px`;\n                eGui.style.flex = ' unset';\n                this.lastSize.width = typeof width === 'number' ? width : parseFloat(width);\n            }\n        } else {\n            eGui.style.maxWidth = 'unset';\n            eGui.style.minWidth = 'unset';\n        }\n    }\n\n    public offsetElement(x = 0, y = 0) {\n        const { forcePopupParentAsOffsetParent } = this.config;\n        const ePopup = forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;\n\n        if (!ePopup) { return; }\n\n        this.popupService.positionPopup({\n            ePopup,\n            keepWithinBounds: true,\n            skipObserver: this.movable || this.isResizable(),\n            updatePosition: () => ({ x, y })\n        });\n\n        this.setPosition(\n            parseFloat(ePopup.style.left),\n            parseFloat(ePopup.style.top)\n        );\n    }\n\n    public constrainSizeToAvailableHeight(constrain: boolean): void {\n        if (!this.config.forcePopupParentAsOffsetParent) { return; }\n\n        const applyMaxHeightToElement = () => {\n            const availableHeight = this.getAvailableHeight();\n            this.element.style.setProperty('max-height', `${availableHeight}px`);\n        };\n\n        if (constrain) {\n            this.resizeObserverSubscriber = this.resizeObserverService.observeResize(\n                this.popupService.getPopupParent(), applyMaxHeightToElement\n            );\n        } else {\n            this.element.style.removeProperty('max-height');\n            if (this.resizeObserverSubscriber) {\n                this.resizeObserverSubscriber();\n                this.resizeObserverSubscriber = undefined;\n            }\n        }\n    }\n\n    private setPosition(x: number, y: number): void {\n        this.position.x = x;\n        this.position.y = y;\n    }\n\n    private updateDragStartPosition(x: number, y: number) {\n        this.dragStartPosition = { x, y };\n    }\n\n    private calculateMouseMovement(params: {\n        e: MouseEvent,\n        topBuffer?: number,\n        anywhereWithin?: boolean,\n        isLeft?: boolean,\n        isTop?: boolean;\n    }): { movementX: number, movementY: number; } {\n        const { e, isLeft, isTop, anywhereWithin, topBuffer } = params;\n\n        const xDiff = e.clientX - this.dragStartPosition.x;\n        const yDiff = e.clientY - this.dragStartPosition.y;\n\n        const movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;\n        const movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;\n\n        return { movementX, movementY };\n    }\n\n    private shouldSkipX(e: MouseEvent, isLeft: boolean, anywhereWithin: boolean, diff: number): boolean {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\n        const xPosition = this.config.popup ? this.position.x : elRect.left;\n        // skip if cursor is outside of popupParent horizontally\n        let skipX = (\n            (xPosition <= 0 && parentRect.left >= e.clientX) ||\n            (parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right)\n        );\n\n        if (skipX) { return true; }\n\n        if (isLeft) {\n            skipX = (\n                // skip if we are moving to the left and the cursor\n                // is positioned to the right of the left side anchor\n                (diff < 0 && e.clientX > xPosition + parentRect.left) ||\n                // skip if we are moving to the right and the cursor\n                // is positioned to the left of the dialog\n                (diff > 0 && e.clientX < xPosition + parentRect.left)\n            );\n        } else {\n            if (anywhereWithin) {\n                // if anywhereWithin is true, we allow to move\n                // as long as the cursor is within the dialog\n                skipX = (\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    (diff > 0 && e.clientX < xPosition + parentRect.left)\n                );\n            } else {\n                skipX = (\n                    // if the movement is bound to the right side of the dialog\n                    // we skip if we are moving to the left and the cursor\n                    // is to the right of the dialog\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    // or skip if we are moving to the right and the cursor\n                    // is to the left of the right side anchor\n                    (diff > 0 && e.clientX < boundaryElRect.right)\n                );\n            }\n        }\n\n        return skipX;\n    }\n\n    private shouldSkipY(e: MouseEvent, isTop: boolean, topBuffer: number = 0, diff: number): boolean {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\n        const yPosition = this.config.popup ? this.position.y : elRect.top;\n\n        // skip if cursor is outside of popupParent vertically\n        let skipY = (\n            (yPosition <= 0 && parentRect.top >= e.clientY) ||\n            (parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom)\n        );\n\n        if (skipY) { return true; }\n\n        if (isTop) {\n            skipY = (\n                // skip if we are moving to towards top and the cursor is\n                // below the top anchor + topBuffer\n                // note: topBuffer is used when moving the dialog using the title bar\n                (diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer) ||\n                // skip if we are moving to the bottom and the cursor is\n                // above the top anchor\n                (diff > 0 && e.clientY < yPosition + parentRect.top)\n            );\n        } else {\n            skipY = (\n                // skip if we are moving towards the top and the cursor\n                // is below the bottom anchor\n                (diff < 0 && e.clientY > boundaryElRect.bottom) ||\n                // skip if we are moving towards the bottom and the cursor\n                // is above the bottom anchor\n                (diff > 0 && e.clientY < boundaryElRect.bottom)\n            );\n        }\n\n        return skipY;\n    }\n\n    private createResizeMap() {\n        const eGui = this.element;\n\n        this.resizerMap = {\n            topLeft: { element: eGui.querySelector('[ref=eTopLeftResizer]') as HTMLElement },\n            top: { element: eGui.querySelector('[ref=eTopResizer]') as HTMLElement },\n            topRight: { element: eGui.querySelector('[ref=eTopRightResizer]') as HTMLElement },\n            right: { element: eGui.querySelector('[ref=eRightResizer]') as HTMLElement },\n            bottomRight: { element: eGui.querySelector('[ref=eBottomRightResizer]') as HTMLElement },\n            bottom: { element: eGui.querySelector('[ref=eBottomResizer]') as HTMLElement },\n            bottomLeft: { element: eGui.querySelector('[ref=eBottomLeftResizer]') as HTMLElement },\n            left: { element: eGui.querySelector('[ref=eLeftResizer]') as HTMLElement }\n        };\n    }\n\n    private addResizers() {\n        if (this.resizersAdded) { return; }\n\n        const eGui = this.element;\n\n        if (!eGui) { return; }\n\n        const parser = new DOMParser();\n        const resizers = parser.parseFromString(RESIZE_TEMPLATE, 'text/html').body;\n\n        eGui.appendChild(resizers.firstChild!);\n        this.createResizeMap();\n        this.resizersAdded = true;\n    }\n\n    private removeResizers() {\n        this.resizerMap = undefined;\n        const resizerEl = this.element.querySelector(`.${RESIZE_CONTAINER_STYLE}`);\n\n        if (resizerEl) {\n            this.element.removeChild(resizerEl);\n        }\n        this.resizersAdded = false;\n    }\n\n    private getResizerElement(side: ResizableSides): HTMLElement | null {\n        return this.resizerMap![side].element;\n    }\n\n    private onResizeStart(e: MouseEvent, side: ResizableSides) {\n        this.boundaryEl = this.findBoundaryElement();\n\n        if (!this.positioned) { this.initialisePosition(); }\n\n        this.currentResizer = {\n            isTop: !!side.match(/top/i),\n            isRight: !!side.match(/right/i),\n            isBottom: !!side.match(/bottom/i),\n            isLeft: !!side.match(/left/i),\n        };\n\n        this.element.classList.add('ag-resizing');\n        this.resizerMap![side].element.classList.add('ag-active');\n\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n\n        if (!popup && !forcePopupParentAsOffsetParent) {\n            this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);\n        }\n\n        this.isResizing = true;\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private getSiblings(): HTMLElement[] | null {\n        const element = this.element;\n        const parent = element.parentElement;\n        if (!parent) { return null; }\n\n        return Array.prototype.slice.call(parent.children).filter((el: HTMLElement) => !el.classList.contains('ag-hidden'));\n    }\n\n    private getMinSizeOfSiblings(): { height: number, width: number } {\n        const siblings = this.getSiblings() || [];\n\n        let height = 0;\n        let width = 0;\n\n        for (let i = 0; i < siblings.length; i++) {\n            const currentEl = siblings[i];\n            const isFlex = !!currentEl.style.flex && currentEl.style.flex !== '0 0 auto';\n\n            if (currentEl === this.element) { continue; }\n\n            let nextHeight = this.minHeight || 0;\n            let nextWidth = this.minWidth || 0;\n\n            if (isFlex) {\n                const computedStyle = window.getComputedStyle(currentEl);\n                if (computedStyle.minHeight) {\n                    nextHeight = parseInt(computedStyle.minHeight, 10);\n                }\n                if (computedStyle.minWidth) {\n                    nextWidth = parseInt(computedStyle.minWidth, 10);\n                }\n            } else {\n                nextHeight = currentEl.offsetHeight;\n                nextWidth = currentEl.offsetWidth;\n            }\n\n            height += nextHeight;\n            width += nextWidth;\n        }\n\n        return { height, width };\n    }\n\n    private applySizeToSiblings(vertical: boolean) {\n        let containerToFlex: HTMLElement | null = null;\n        const siblings = this.getSiblings();\n\n        if (!siblings) { return; }\n\n        for (let i = 0; i < siblings.length; i++) {\n            const el = siblings[i];\n\n            if (el === containerToFlex) { continue; }\n\n            if (vertical) {\n                el.style.height = `${el.offsetHeight}px`;\n            } else {\n                el.style.width = `${el.offsetWidth}px`;\n            }\n            el.style.flex = '0 0 auto';\n\n            if (el === this.element) {\n                containerToFlex = siblings[i + 1];\n            }\n        }\n\n        if (containerToFlex) {\n            containerToFlex.style.removeProperty('height');\n            containerToFlex.style.removeProperty('min-height');\n            containerToFlex.style.removeProperty('max-height');\n            containerToFlex.style.flex = '1 1 auto';\n        }\n    }\n\n    public isResizable(): boolean {\n        return Object.values(this.resizable).some(value => value);\n    }\n\n    private onResize(e: MouseEvent) {\n        if (!this.isResizing || !this.currentResizer) { return; }\n\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n        const { isTop, isRight, isBottom, isLeft } = this.currentResizer;\n        const isHorizontal = isRight || isLeft;\n        const isVertical = isBottom || isTop;\n        const { movementX, movementY } = this.calculateMouseMovement({ e, isLeft, isTop });\n\n        const xPosition = this.position.x;\n        const yPosition = this.position.y;\n\n        let offsetLeft = 0;\n        let offsetTop = 0;\n\n        if (isHorizontal && movementX) {\n            const direction = isLeft ? -1 : 1;\n            const oldWidth = this.getWidth();\n            const newWidth = oldWidth! + (movementX * direction);\n            let skipWidth = false;\n\n            if (isLeft) {\n                offsetLeft = oldWidth! - newWidth;\n                if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {\n                    skipWidth = true;\n                    offsetLeft = 0;\n                }\n            }\n\n            if (!skipWidth) {\n                this.setWidth(newWidth);\n            }\n        }\n\n        if (isVertical && movementY) {\n            const direction = isTop ? -1 : 1;\n            const oldHeight = this.getHeight();\n            const newHeight = oldHeight! + (movementY * direction);\n            let skipHeight = false;\n\n            if (isTop) {\n                offsetTop = oldHeight! - newHeight;\n                if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight!) {\n                    skipHeight = true;\n                    offsetTop = 0;\n                }\n            } else {\n                // do not let the size of all siblings be higher than the parent container\n                if (\n                    !this.config.popup &&\n                    !this.config.forcePopupParentAsOffsetParent &&\n                    oldHeight! < newHeight &&\n                    (this.getMinSizeOfSiblings().height + newHeight) > this.element.parentElement!.offsetHeight\n                ) {\n                    skipHeight = true;\n                }\n            }\n\n            if (!skipHeight) {\n                this.setHeight(newHeight);\n            }\n        }\n\n        this.updateDragStartPosition(e.clientX, e.clientY);\n\n        if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {\n            this.offsetElement(\n                xPosition + offsetLeft,\n                yPosition + offsetTop\n            );\n        }\n    }\n\n    private onResizeEnd(e: MouseEvent, side: ResizableSides) {\n        this.isResizing = false;\n        this.currentResizer = null;\n        this.boundaryEl = null;\n\n        const params = {\n            type: 'resize'\n        };\n\n        this.element.classList.remove('ag-resizing');\n        this.resizerMap![side].element.classList.remove('ag-active');\n\n        this.dispatchEvent(params);\n    }\n\n    private refreshSize() {\n        const eGui = this.element;\n\n        if (this.config.popup) {\n            if (!this.config.width) {\n                this.setWidth(eGui.offsetWidth);\n            }\n\n            if (!this.config.height) {\n                this.setHeight(eGui.offsetHeight);\n            }\n        }\n    }\n\n    private onMoveStart(e: MouseEvent) {\n        this.boundaryEl = this.findBoundaryElement();\n\n        if (!this.positioned) { this.initialisePosition(); }\n\n        this.isMoving = true;\n\n        this.element.classList.add('ag-moving');\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private onMove(e: MouseEvent) {\n        if (!this.isMoving) { return; }\n\n        const { x, y } = this.position;\n        let topBuffer;\n\n        if (this.config.calculateTopBuffer) {\n            topBuffer = this.config.calculateTopBuffer();\n        }\n\n        const { movementX, movementY } = this.calculateMouseMovement({\n            e,\n            isTop: true,\n            anywhereWithin: true,\n            topBuffer\n        });\n\n        this.offsetElement(x + movementX, y + movementY);\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private onMoveEnd() {\n        this.isMoving = false;\n        this.boundaryEl = null;\n        this.element.classList.remove('ag-moving');\n    }\n\n    private setOffsetParent() {\n        if (this.config.forcePopupParentAsOffsetParent) {\n            this.offsetParent = this.popupService.getPopupParent();\n        } else {\n            this.offsetParent = this.element.offsetParent as HTMLElement;\n        }\n    }\n\n    private findBoundaryElement(): HTMLElement {\n        let el = this.element;\n        while (el) {\n            if (window.getComputedStyle(el).position !== 'static') { return el; }\n            el = el.parentElement as HTMLElement;\n        }\n\n        return this.element;\n    }\n\n    private clearResizeListeners(): void {\n        while (this.resizeListeners.length) {\n            const params = this.resizeListeners.pop()!;\n            this.dragService.removeDragSource(params);\n        }\n    }\n\n    protected destroy() {\n        super.destroy();\n\n        if (this.moveElementDragListener) {\n            this.dragService.removeDragSource(this.moveElementDragListener);\n        }\n\n        this.constrainSizeToAvailableHeight(false);\n        this.clearResizeListeners();\n        this.removeResizers();\n    }\n}", "import { IDoesFilterPassParams, IFilter, IFilterComp, IFilterParams } from '../../interfaces/iFilter';\nimport { Autowired, PostConstruct } from '../../context/context';\nimport { IRowModel } from '../../interfaces/iRowModel';\nimport { ContainerType, IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport { clearElement, loadTemplate, removeFromParent, setDisabled } from '../../utils/dom';\nimport { debounce } from '../../utils/function';\nimport { AgPromise } from '../../utils/promise';\nimport { PopupEventParams } from '../../widgets/popupService';\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport { ManagedFocusFeature } from '../../widgets/managedFocusFeature';\nimport { convertToSet } from '../../utils/set';\nimport { Component } from '../../widgets/component';\nimport { IRowNode } from '../../interfaces/iRowNode';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { PositionableFeature } from '../../rendering/features/positionableFeature';\nimport { FilterChangedEventSourceType } from '../../events';\n\ntype FilterButtonType = 'apply' | 'clear' | 'reset' | 'cancel';\n\n/**\n * Parameters provided by the grid to the `init` method of a `ProvidedFilter`.\n * Do not use in `colDef.filterParams` - see `IProvidedFilterParams` instead.\n */\nexport type ProvidedFilterParams<TData = any> = IProvidedFilterParams & IFilterParams<TData>;\n\n/**\n * Common parameters in `colDef.filterParams` used by all provided filters. Extended by the specific filter types.\n */\nexport interface IProvidedFilterParams {\n    /**\n     * Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     *\n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */\n    buttons?: FilterButtonType[];\n    /**\n     * If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     *\n     * @default false\n     */\n    closeOnApply?: boolean;\n    /**\n     * Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */\n    debounceMs?: number;\n    /**\n     * If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     *\n     * @default false\n     */\n    readOnly?: boolean;\n}\n\n/** Interface contract for the public aspects of the ProvidedFilter implementation(s). */\nexport interface IProvidedFilter extends IFilter {\n    /**\n     * Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n     * when `applyModel()` was called).\n     * @param source The source of the method call. Default 'api'.\n     */\n    applyModel(source?: 'api' | 'ui' | 'rowDataUpdated'): boolean;\n    /**\n     * Returns the filter model from the UI. If changes have been made to the UI but not yet\n     * applied, this model will reflect those changes.\n     */\n    getModelFromUi(): any;\n}\n\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with AG Grid extend this class. User filters do not\n * extend this class.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n */\nexport abstract class ProvidedFilter<M, V> extends Component implements IProvidedFilter, IFilterComp {\n    // each level in the hierarchy will save params with the appropriate type for that level.\n    private providedFilterParams: ProvidedFilterParams;\n\n    private applyActive = false;\n    private hidePopup: ((params: PopupEventParams) => void) | null | undefined = null;\n    // a debounce of the onBtApply method\n    private onBtApplyDebounce: () => void;\n    private debouncePending = false;\n\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n    // not active) then this appliedModel will be null/undefined.\n    private appliedModel: M | null = null;\n\n    private positionableFeature: PositionableFeature | undefined;\n\n    @Autowired('rowModel') protected readonly rowModel: IRowModel;\n\n    @RefSelector('eFilterBody') protected readonly eFilterBody: HTMLElement;\n\n    private eButtonsPanel: HTMLElement;\n    private buttonListeners: ((() => null) | undefined)[] = [];\n\n    constructor(private readonly filterNameKey: keyof typeof FILTER_LOCALE_TEXT) {\n        super();\n    }\n\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\n\n    protected abstract updateUiVisibility(): void;\n\n    protected abstract createBodyTemplate(): string;\n    protected abstract getCssIdentifier(): string;\n    protected abstract resetUiToDefaults(silent?: boolean): AgPromise<void>;\n\n    protected abstract setModelIntoUi(model: M): AgPromise<void>;\n    protected abstract areModelsEqual(a: M, b: M): boolean;\n\n    /** Used to get the filter type for filter models. */\n    protected abstract getFilterType(): string;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.resetTemplate(); // do this first to create the DOM\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n\n        this.positionableFeature = new PositionableFeature(\n            this.getPositionableElement(),\n            {\n                forcePopupParentAsOffsetParent: true\n            }\n        );\n\n        this.createBean(this.positionableFeature);\n    }\n\n    // override\n    protected handleKeyDown(e: KeyboardEvent): void { }\n\n    public abstract getModelFromUi(): M | null;\n\n    public getFilterTitle(): string {\n        return this.translate(this.filterNameKey);\n    }\n\n    public isFilterActive(): boolean {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n\n    protected resetTemplate(paramsMap?: any) {\n        let eGui = this.getGui();\n\n        if (eGui) {\n            eGui.removeEventListener('submit', this.onFormSubmit);\n        }\n        const templateString = /* html */`\n            <form class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\" ref=\"eFilterBody\">\n                    ${this.createBodyTemplate()}\n                </div>\n            </form>`;\n\n        this.setTemplate(templateString, paramsMap);\n\n        eGui = this.getGui();\n        if (eGui) {\n            eGui.addEventListener('submit', this.onFormSubmit);\n        }\n    }\n\n    protected isReadOnly(): boolean {\n        return !!this.providedFilterParams.readOnly;\n    }\n\n    public init(params: ProvidedFilterParams): void {\n        this.setParams(params);\n\n        this.resetUiToDefaults(true).then(() => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n\n    protected setParams(params: ProvidedFilterParams): void {\n        this.providedFilterParams = params;\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        this.resetButtonsPanel();\n    }\n\n    protected updateParams(params: ProvidedFilterParams): void {\n        this.providedFilterParams = params;\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        this.resetUiToActiveModel(this.getModel(), () => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n\n    private resetButtonsPanel(): void {\n        const { buttons } = this.providedFilterParams;\n        const hasButtons = buttons && buttons.length > 0 && !this.isReadOnly();\n\n        if (!this.eButtonsPanel) {\n            // Only create the buttons panel if we need to\n            if (hasButtons) {\n                this.eButtonsPanel = document.createElement('div');\n                this.eButtonsPanel.classList.add('ag-filter-apply-panel');\n            }\n        } else {\n            // Always empty the buttons panel before adding new buttons\n            clearElement(this.eButtonsPanel);\n            this.buttonListeners.forEach(destroyFunc => destroyFunc?.());\n            this.buttonListeners = [];\n\n        }\n\n        if (!hasButtons) {\n            // The case when we need to hide the buttons panel because there are no buttons\n            if (this.eButtonsPanel) {\n                removeFromParent(this.eButtonsPanel);\n            }\n\n            return;\n        }\n\n        // At this point we know we have a buttons and a buttons panel has been created.\n\n        // Instead of appending each button to the DOM individually, we create a fragment and append that\n        // to the DOM once. This is much faster than appending each button individually.\n        const fragment = document.createDocumentFragment();\n\n        const addButton = (type: FilterButtonType): void => {\n            let text;\n            let clickListener: (e?: Event) => void;\n\n            switch (type) {\n                case 'apply':\n                    text = this.translate('applyFilter');\n                    clickListener = (e) => this.onBtApply(false, false, e);\n                    break;\n                case 'clear':\n                    text = this.translate('clearFilter');\n                    clickListener = () => this.onBtClear();\n                    break;\n                case 'reset':\n                    text = this.translate('resetFilter');\n                    clickListener = () => this.onBtReset();\n                    break;\n                case 'cancel':\n                    text = this.translate('cancelFilter');\n                    clickListener = (e) => { this.onBtCancel(e!); };\n                    break;\n                default:\n                    console.warn('AG Grid: Unknown button type specified');\n                    return;\n            }\n\n            const buttonType = type === 'apply' ? 'submit' : 'button';\n            const button = loadTemplate(\n                /* html */\n                `<button\n                    type=\"${buttonType}\"\n                    ref=\"${type}FilterButton\"\n                    class=\"ag-button ag-standard-button ag-filter-apply-panel-button\"\n                >${text}\n                </button>`\n            );\n\n            this.buttonListeners.push(this.addManagedListener(button, 'click', clickListener));\n            fragment.append(button);\n        };\n\n        convertToSet(buttons).forEach(type => addButton(type));\n\n        this.eButtonsPanel.append(fragment);\n        this.getGui().appendChild(this.eButtonsPanel);\n    }\n\n    // subclasses can override this to provide alternative debounce defaults\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    private setupOnBtApplyDebounce(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        const debounceFunc = debounce(this.checkApplyDebounce.bind(this), debounceMs);\n        this.onBtApplyDebounce = () => {\n            this.debouncePending = true;\n            debounceFunc();\n        };\n    }\n\n    private checkApplyDebounce(): void {\n        if (this.debouncePending) {\n            // May already have been applied, so don't apply again (e.g. closing filter before debounce timeout)\n            this.debouncePending = false;\n            this.onBtApply();\n        }\n    }\n\n    public getModel(): M | null {\n        return this.appliedModel ? this.appliedModel : null;\n    }\n\n    public setModel(model: M | null): AgPromise<void> {\n        const promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();\n\n        return promise.then(() => {\n            this.updateUiVisibility();\n\n            // we set the model from the GUI, rather than the provided model,\n            // so the model is consistent, e.g. handling of null/undefined will be the same,\n            // or if model is case-insensitive, then casing is removed.\n            this.applyModel('api');\n        });\n    }\n\n    private onBtCancel(e: Event): void {\n        this.resetUiToActiveModel(this.getModel(), () => {\n            this.handleCancelEnd(e);\n        });\n    }\n\n    protected handleCancelEnd(e: Event): void {\n        if (this.providedFilterParams.closeOnApply) {\n            this.close(e);\n        }\n    }\n\n    protected resetUiToActiveModel(currentModel: M | null, afterUiUpdatedFunc?: () => void): void {\n        const afterAppliedFunc = () => {\n            this.onUiChanged(false, 'prevent');\n\n            afterUiUpdatedFunc?.();\n        };\n\n        if (currentModel != null) {\n            this.setModelIntoUi(currentModel).then(afterAppliedFunc);\n        } else {\n            this.resetUiToDefaults().then(afterAppliedFunc);\n        }\n    }\n\n    private onBtClear(): void {\n        this.resetUiToDefaults().then(() => this.onUiChanged());\n    }\n\n    private onBtReset(): void {\n        this.onBtClear();\n        this.onBtApply();\n    }\n\n    /**\n     * Applies changes made in the UI to the filter, and returns true if the model has changed.\n     */\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        const newModel = this.getModelFromUi();\n\n        if (!this.isModelValid(newModel!)) { return false; }\n\n        const previousModel = this.appliedModel;\n\n        this.appliedModel = newModel;\n\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        return !this.areModelsEqual(previousModel!, newModel!);\n    }\n\n    protected isModelValid(model: M): boolean {\n        return true;\n    }\n\n    private onFormSubmit(e: Event): void {\n        e.preventDefault();\n    }\n\n    protected onBtApply(afterFloatingFilter = false, afterDataChange = false, e?: Event): void {\n        // Prevent form submission\n        if (e) { e.preventDefault(); }\n        if (this.applyModel(afterDataChange ? 'rowDataUpdated' : 'ui')) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            const source: FilterChangedEventSourceType = 'columnFilter';\n            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange, source });\n        }\n\n        const { closeOnApply } = this.providedFilterParams;\n\n        // only close if an apply button is visible, otherwise we'd be closing every time a change was made!\n        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {\n            this.close(e);\n        }\n    }\n\n    public onNewRowsLoaded(): void {\n    }\n\n    public close(e?: Event): void {\n        if (!this.hidePopup) { return; }\n\n        const keyboardEvent = e as KeyboardEvent;\n        const key = keyboardEvent && keyboardEvent.key;\n        let params: PopupEventParams;\n\n        if (key === 'Enter' || key === 'Space') {\n            params = { keyboardEvent };\n        }\n\n        this.hidePopup(params!);\n        this.hidePopup = null;\n    }\n\n    /**\n     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no\n     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can\n     * be adjusted by using the apply parameter.\n     */\n    protected onUiChanged(fromFloatingFilter = false, apply?: 'immediately' | 'debounce' | 'prevent'): void {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n\n        if (this.applyActive && !this.isReadOnly()) {\n            const isValid = this.isModelValid(this.getModelFromUi()!);\n            const applyFilterButton = this.getRefElement('applyFilterButton');\n            if (applyFilterButton) {\n                setDisabled(applyFilterButton, !isValid);\n            }\n        }\n\n        if ((fromFloatingFilter && !apply) || apply === 'immediately') {\n            this.onBtApply(fromFloatingFilter);\n        } else if ((!this.applyActive && !apply) || apply === 'debounce') {\n            this.onBtApplyDebounce();\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (params) {\n            this.hidePopup = params.hidePopup;\n        }\n\n        this.refreshFilterResizer(params?.container);\n    }\n\n    private refreshFilterResizer(containerType?: ContainerType): void {\n        // tool panel is scrollable, so don't need to size\n        if (!this.positionableFeature || containerType === 'toolPanel') { return; }\n\n        const isResizable = containerType === 'floatingFilter' || containerType === 'columnFilter';\n\n        const { positionableFeature, gridOptionsService } = this;\n\n        if (isResizable) {\n            positionableFeature.restoreLastSize();\n            positionableFeature.setResizable(\n                gridOptionsService.get('enableRtl')\n                    ? { bottom: true, bottomLeft: true, left: true }\n                    : { bottom: true, bottomRight: true, right: true }\n            );\n        } else {\n            this.positionableFeature.removeSizeFromEl();\n            this.positionableFeature.setResizable(false);\n        }\n        this.positionableFeature.constrainSizeToAvailableHeight(true);\n    }\n\n    public afterGuiDetached(): void {\n        this.checkApplyDebounce();\n\n        if (this.positionableFeature) {\n            this.positionableFeature.constrainSizeToAvailableHeight(false);\n        }\n    }\n\n    // static, as used by floating filter also\n    public static getDebounceMs(params: ProvidedFilterParams, debounceDefault: number): number {\n        if (ProvidedFilter.isUseApplyButton(params)) {\n            if (params.debounceMs != null) {\n                console.warn('AG Grid: debounceMs is ignored when apply button is present');\n            }\n\n            return 0;\n        }\n\n        return params.debounceMs != null ? params.debounceMs : debounceDefault;\n    }\n\n    // static, as used by floating filter also\n    public static isUseApplyButton(params: ProvidedFilterParams): boolean {\n        return !!params.buttons && params.buttons.indexOf('apply') >= 0;\n    }\n\n    public refresh(newParams: ProvidedFilterParams): boolean {\n        this.providedFilterParams = newParams;\n        return true;\n    }\n\n    public destroy(): void {\n        const eGui = this.getGui();\n\n        if (eGui) {\n            eGui.removeEventListener('submit', this.onFormSubmit);\n        }\n        this.hidePopup = null;\n\n        if (this.positionableFeature) {\n            this.positionableFeature = this.destroyBean(this.positionableFeature);\n        }\n\n        this.appliedModel = null;\n\n        super.destroy();\n    }\n\n    protected translate(key: keyof typeof FILTER_LOCALE_TEXT): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        return translate(key, FILTER_LOCALE_TEXT[key]);\n    }\n\n    protected getCellValue(rowNode: IRowNode): V | null | undefined {\n        return this.providedFilterParams.getValue(rowNode);\n    }\n\n    // override to control positionable feature\n    protected getPositionableElement(): HTMLElement {\n        return this.eFilterBody;\n    }\n}\n", "import { Component } from \"./component\";\nimport { PostConstruct } from \"../context/context\";\nimport { clearElement, setDisabled, setDisplayed, setElementWidth } from \"../utils/dom\";\nimport { setAriaRole } from \"../utils/aria\";\n\nexport type LabelAlignment = 'left' | 'right' | 'top';\n\nexport interface AgLabelParams {\n    label?: HTMLElement | string;\n    labelWidth?: number | 'flex';\n    labelSeparator?: string;\n    labelAlignment?: LabelAlignment;\n    disabled?: boolean;\n}\n\nexport abstract class AgAbstractLabel<TConfig extends AgLabelParams = AgLabelParams> extends Component {\n    protected abstract eLabel: HTMLElement;\n\n    protected readonly config: TConfig;\n    protected labelSeparator: string = '';\n    protected labelAlignment: LabelAlignment = 'left';\n    protected disabled: boolean = false;\n    private label: HTMLElement | string = '';\n\n    constructor(config?: TConfig, template?: string) {\n        super(template);\n\n        this.config = config || {} as any;\n    }\n\n    @PostConstruct\n    protected postConstruct() {\n        this.addCssClass('ag-labeled');\n        this.eLabel.classList.add('ag-label');\n\n        const { labelSeparator, label, labelWidth, labelAlignment, disabled } = this.config;\n\n        if (disabled != null) {\n            this.setDisabled(disabled);\n        }\n\n        if (labelSeparator != null) {\n            this.setLabelSeparator(labelSeparator);\n        }\n\n        if (label != null) {\n            this.setLabel(label);\n        }\n\n        if (labelWidth != null) {\n            this.setLabelWidth(labelWidth);\n        }\n\n        this.setLabelAlignment(labelAlignment || this.labelAlignment);\n        this.refreshLabel();\n    }\n\n    protected refreshLabel() {\n        clearElement(this.eLabel);\n\n        if (typeof this.label === 'string') {\n            this.eLabel.innerText = this.label + this.labelSeparator;\n        } else if (this.label) {\n            this.eLabel.appendChild(this.label);\n        }\n\n        if (this.label === '') {\n            setDisplayed(this.eLabel, false);\n            setAriaRole(this.eLabel, 'presentation');\n        } else {\n            setDisplayed(this.eLabel, true);\n            setAriaRole(this.eLabel, null);\n        }\n    }\n\n    public setLabelSeparator(labelSeparator: string): this {\n        if (this.labelSeparator === labelSeparator) {\n            return this;\n        }\n\n        this.labelSeparator = labelSeparator;\n\n        if (this.label != null) {\n            this.refreshLabel();\n        }\n\n        return this;\n    }\n\n    public getLabelId(): string {\n        this.eLabel.id = this.eLabel.id || `ag-${this.getCompId()}-label`;\n\n        return this.eLabel.id;\n    }\n\n    public getLabel(): HTMLElement | string {\n        return this.label;\n    }\n\n    public setLabel(label: HTMLElement | string): this {\n        if (this.label === label) {\n            return this;\n        }\n\n        this.label = label;\n\n        this.refreshLabel();\n\n        return this;\n    }\n\n    public setLabelAlignment(alignment: LabelAlignment): this {\n        const eGui = this.getGui();\n        const eGuiClassList = eGui.classList;\n\n        eGuiClassList.toggle('ag-label-align-left', alignment === 'left');\n        eGuiClassList.toggle('ag-label-align-right', alignment === 'right');\n        eGuiClassList.toggle('ag-label-align-top', alignment === 'top');\n\n        return this;\n    }\n\n    public setLabelEllipsis(hasEllipsis: boolean): this {\n        this.eLabel.classList.toggle('ag-label-ellipsis', hasEllipsis);\n\n        return this;\n    }\n\n    public setLabelWidth(width: number | 'flex'): this {\n        if (this.label == null) {\n            return this;\n        }\n\n        setElementWidth(this.eLabel, width);\n\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        disabled = !!disabled;\n\n        const element = this.getGui();\n\n        setDisabled(element, disabled);\n        element.classList.toggle('ag-disabled', disabled);\n\n        this.disabled = disabled;\n\n        return this;\n    }\n\n    public isDisabled(): boolean {\n        return !!this.disabled;\n    }\n}", "import { AgAbstractLabel, AgLabelParams } from './agAbstractLabel';\nimport { setFixedWidth } from '../utils/dom';\nimport { Events } from '../eventKeys';\nimport { getAriaLabel, setAriaLabel, setAriaLabelledBy } from '../utils/aria';\n\nexport interface AgFieldParams extends AgLabelParams {\n    value?: any;\n    width?: number;\n    onValueChange?: (value?: any) => void;\n}\n\nexport type FieldElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\nexport abstract class AgAbstractField<TValue, TConfig extends AgFieldParams = AgFieldParams> extends AgAbstractLabel<TConfig> {\n\n    protected previousValue: TValue | null | undefined;\n    protected value: TValue | null | undefined;\n\n    constructor(config?: TConfig, template?: string, protected readonly className?: string) {\n        super(config, template);\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        const { width, value, onValueChange } = this.config;\n        if (width != null) {\n            this.setWidth(width);\n        }\n        if (value != null) {\n            this.setValue(value);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n\n        if (this.className) {\n            this.addCssClass(this.className);\n        }\n\n        this.refreshAriaLabelledBy();\n    }\n\n    protected refreshAriaLabelledBy() {\n        const ariaEl = this.getAriaElement();\n        const labelId = this.getLabelId();\n\n        if (getAriaLabel(ariaEl) !== null) {\n            setAriaLabelledBy(ariaEl, '');\n        } else {\n            setAriaLabelledBy(ariaEl, labelId ?? '');\n        }\n    }\n\n    public setAriaLabel(label?: string | null): this {\n        setAriaLabel(this.getAriaElement(), label);\n        this.refreshAriaLabelledBy();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue?: TValue | null) => void) {\n        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, () => callbackFn(this.getValue()));\n\n        return this;\n    }\n\n    public getWidth(): number {\n        return this.getGui().clientWidth;\n    }\n\n    public setWidth(width: number): this {\n        setFixedWidth(this.getGui(), width);\n\n        return this;\n    }\n\n    public getPreviousValue(): TValue | null | undefined {\n        return this.previousValue;\n    }\n\n    public getValue(): TValue | null | undefined {\n        return this.value;\n    }\n\n    public setValue(value?: TValue | null, silent?: boolean): this {\n        if (this.value === value) {\n            return this;\n        }\n\n        this.previousValue = this.value;\n        this.value = value;\n\n        if (!silent) {\n            this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n        }\n\n        return this;\n    }\n}\n", "import { AgAbstractField, AgFieldParams } from \"./agAbstractField\";\nimport { Component } from \"./component\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { setAriaExpanded, setAriaRole } from \"../utils/aria\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { setElementWidth, getAbsoluteWidth, getInnerHeight, formatSize } from \"../utils/dom\";\nimport { KeyCode } from '../constants/keyCode';\nimport { AddPopupParams, PopupService } from \"./popupService\";\nimport { Autowired } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\n\nexport interface AgPickerFieldParams extends AgFieldParams {\n    pickerType: string;\n    pickerGap?: number;\n    /**\n     * If true, will set min-width and max-width (if present), and will set width to wrapper element width.\n     * If false, will set min-width, max-width and width to maxPickerWidth or wrapper element width.\n     */\n    variableWidth?: boolean;\n    minPickerWidth?: number | string;\n    maxPickerWidth?: number | string;\n    maxPickerHeight?: number | string;\n    pickerAriaLabelKey: string;\n    pickerAriaLabelValue: string;\n    template?: string;\n    className?: string;\n    pickerIcon?: string;\n    ariaRole?: string;\n    modalPicker?: boolean;\n    inputWidth?: number | 'flex';\n}\n\nconst TEMPLATE = /* html */`\n    <div class=\"ag-picker-field\" role=\"presentation\">\n        <div ref=\"eLabel\"></div>\n            <div ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-picker-collapsed\">\n            <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n            <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n        </div>\n    </div>`;\n\nexport abstract class AgPickerField<TValue, TConfig extends AgPickerFieldParams = AgPickerFieldParams, TComponent extends Component = Component> extends AgAbstractField<TValue, TConfig> {\n\n    protected abstract createPickerComponent(): TComponent;\n\n    protected pickerComponent: TComponent | undefined;\n    protected isPickerDisplayed: boolean = false;\n\n    protected maxPickerHeight: string | undefined;\n    protected variableWidth: boolean;\n    protected minPickerWidth: string | undefined;\n    protected maxPickerWidth: string | undefined;\n    protected value: TValue;\n\n\n    private skipClick: boolean = false;\n    private pickerGap: number = 4;\n\n    private hideCurrentPicker: (() => void) | null = null;\n    private destroyMouseWheelFunc: (() => null) | undefined;\n    private ariaRole?: string;\n\n    @Autowired('popupService') protected popupService: PopupService;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eWrapper') protected readonly eWrapper: HTMLElement;\n    @RefSelector('eDisplayField') protected readonly eDisplayField: HTMLElement;\n    @RefSelector('eIcon') private readonly eIcon: HTMLButtonElement;\n\n    constructor(config?: TConfig) {\n        super(config, config?.template || TEMPLATE, config?.className);\n\n        this.ariaRole = config?.ariaRole;\n        this.onPickerFocusIn = this.onPickerFocusIn.bind(this);\n        this.onPickerFocusOut = this.onPickerFocusOut.bind(this);\n\n        if (!config) { return; }\n\n        const { pickerGap, maxPickerHeight, variableWidth, minPickerWidth, maxPickerWidth } = config;\n\n        if (pickerGap != null) {\n            this.pickerGap = pickerGap;\n        }\n\n        this.variableWidth = !!variableWidth;\n\n        if (maxPickerHeight != null) {\n            this.setPickerMaxHeight(maxPickerHeight);\n        }\n\n        if (minPickerWidth != null) {\n            this.setPickerMinWidth(minPickerWidth);\n        }\n\n        if (maxPickerWidth != null) {\n            this.setPickerMaxWidth(maxPickerWidth);\n        }\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        this.setupAria();\n\n        const displayId = `ag-${this.getCompId()}-display`;\n        this.eDisplayField.setAttribute('id', displayId);\n\n        const ariaEl = this.getAriaElement();\n        this.addManagedListener(ariaEl, 'keydown', this.onKeyDown.bind(this));\n\n        this.addManagedListener(this.eLabel, 'mousedown', this.onLabelOrWrapperMouseDown.bind(this));\n        this.addManagedListener(this.eWrapper, 'mousedown', this.onLabelOrWrapperMouseDown.bind(this));\n\n        const { pickerIcon, inputWidth } = this.config;\n\n        if (pickerIcon) {\n            const icon = createIconNoSpan(pickerIcon, this.gridOptionsService);\n            if (icon) {\n                this.eIcon.appendChild(icon);\n            }\n        }\n\n        if (inputWidth != null) {\n            this.setInputWidth(inputWidth);\n        }\n    }\n\n    protected setupAria(): void {\n        const ariaEl = this.getAriaElement();\n        \n        ariaEl.setAttribute('tabindex', (this.gridOptionsService.get('tabIndex')).toString());\n\n        setAriaExpanded(ariaEl, false);\n\n        if (this.ariaRole) {\n            setAriaRole(ariaEl, this.ariaRole);\n        }\n    }\n\n    private onLabelOrWrapperMouseDown(e?: MouseEvent): void {\n        if (e) {\n            const focusableEl = this.getFocusableElement();\n            // if the focusableEl is not the wrapper and the mousedown\n            // targets the focusableEl, we should not expand/collapse the picker.\n            // Note: this will happen when AgRichSelect is set with `allowTyping=true`\n            if (focusableEl !== this.eWrapper && e?.target === focusableEl) {\n                return;\n            }\n\n            // this prevents a BUG where MouseDown causes the element to be focused\n            // after the picker is shown and focus ends up being lost.\n            e.preventDefault();\n            this.getFocusableElement().focus();\n        }\n\n        if (this.skipClick) {\n            this.skipClick = false;\n            return;\n        }\n\n        if (this.isDisabled()) { return; }\n\n        if (this.isPickerDisplayed) {\n            this.hidePicker();\n        } else {\n            this.showPicker();\n        }\n    }\n\n    protected onKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n            case KeyCode.ENTER:\n            case KeyCode.SPACE:\n                e.preventDefault();\n                this.onLabelOrWrapperMouseDown();\n                break;\n            case KeyCode.ESCAPE:\n                if (this.isPickerDisplayed) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.hideCurrentPicker) {\n                        this.hideCurrentPicker();\n                    }\n                }\n                break;\n        }\n    }\n\n    public showPicker() {\n        this.isPickerDisplayed = true;\n\n        if (!this.pickerComponent) {\n            this.pickerComponent = this.createPickerComponent();\n        }\n\n        const pickerGui = this.pickerComponent.getGui();\n        pickerGui.addEventListener('focusin', this.onPickerFocusIn);\n        pickerGui.addEventListener('focusout', this.onPickerFocusOut);\n\n        this.hideCurrentPicker = this.renderAndPositionPicker();\n\n        this.toggleExpandedStyles(true);\n    }\n\n    protected renderAndPositionPicker(): (() => void) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const ePicker = this.pickerComponent!.getGui();\n\n        if (!this.gridOptionsService.get('suppressScrollWhenPopupsAreOpen')) {\n            this.destroyMouseWheelFunc = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, () => {\n                this.hidePicker();\n            });\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const { pickerAriaLabelKey, pickerAriaLabelValue, modalPicker = true } = this.config;\n\n        const popupParams: AddPopupParams = {\n            modal: modalPicker,\n            eChild: ePicker,\n            closeOnEsc: true,\n            closedCallback: () => {\n                const shouldRestoreFocus = eDocument.activeElement === eDocument.body;\n                this.beforeHidePicker();\n\n                if (shouldRestoreFocus && this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            },\n            ariaLabel: translate(pickerAriaLabelKey, pickerAriaLabelValue),\n        }\n\n        const addPopupRes = this.popupService.addPopup(popupParams);\n\n        const { maxPickerHeight, minPickerWidth, maxPickerWidth, variableWidth } = this;\n\n        if (variableWidth) {\n            if (minPickerWidth) {\n                ePicker.style.minWidth = minPickerWidth;\n            }\n            ePicker.style.width = formatSize(getAbsoluteWidth(this.eWrapper));\n            if (maxPickerWidth) {\n                ePicker.style.maxWidth = maxPickerWidth;\n            }\n        } else {\n            setElementWidth(ePicker, maxPickerWidth ?? getAbsoluteWidth(this.eWrapper));\n        }\n\n        const maxHeight = maxPickerHeight ?? `${getInnerHeight(this.popupService.getPopupParent())}px`;\n\n        ePicker.style.setProperty('max-height', maxHeight);\n        ePicker.style.position = 'absolute';\n\n        this.alignPickerToComponent();\n\n        return addPopupRes.hideFunc;\n    }\n\n    protected alignPickerToComponent(): void {\n        if (!this.pickerComponent) { return; } \n\n        const { pickerType } = this.config;\n        const { pickerGap } = this;\n\n        const alignSide = this.gridOptionsService.get('enableRtl') ? 'right' : 'left';\n\n        this.popupService.positionPopupByComponent({\n            type: pickerType,\n            eventSource: this.eWrapper,\n            ePopup: this.pickerComponent.getGui(),\n            position: 'under',\n            alignSide,\n            keepWithinBounds: true,\n            nudgeY: pickerGap\n        });\n    }\n\n    protected beforeHidePicker(): void {\n        if (this.destroyMouseWheelFunc) {\n            this.destroyMouseWheelFunc();\n            this.destroyMouseWheelFunc = undefined;\n        }\n\n        this.toggleExpandedStyles(false);\n\n        const pickerGui = this.pickerComponent!.getGui();\n\n        pickerGui.removeEventListener('focusin', this.onPickerFocusIn);\n        pickerGui.removeEventListener('focusout', this.onPickerFocusOut);\n\n        this.isPickerDisplayed = false;\n        this.pickerComponent = undefined;\n        this.hideCurrentPicker = null;\n    }\n\n    protected toggleExpandedStyles(expanded: boolean): void {\n        if (!this.isAlive()) { return; }\n\n        const ariaEl = this.getAriaElement();\n\n        setAriaExpanded(ariaEl, expanded);\n\n        this.eWrapper.classList.toggle('ag-picker-expanded', expanded);\n        this.eWrapper.classList.toggle('ag-picker-collapsed', !expanded);\n    }\n\n    private onPickerFocusIn(): void {\n        this.togglePickerHasFocus(true);\n    }\n\n    private onPickerFocusOut(e: FocusEvent): void {\n        if (!this.pickerComponent?.getGui().contains(e.relatedTarget as Element)) {\n            this.togglePickerHasFocus(false);\n        }\n    }\n\n    private togglePickerHasFocus(focused: boolean): void {\n        if (!this.pickerComponent) { return; }\n\n        this.eWrapper.classList.toggle('ag-picker-has-focus', focused);\n    }\n\n    public hidePicker(): void {\n        if (this.hideCurrentPicker) {\n            this.hideCurrentPicker();\n        }\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        setElementWidth(this.eWrapper, width);\n        return this;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eWrapper;\n    }\n\n    public setPickerGap(gap: number): this {\n        this.pickerGap = gap;\n\n        return this;\n    }\n\n    public setPickerMinWidth(width?: number | string): this {\n        if (typeof width === 'number') {\n            width = `${width}px`;\n        }\n        this.minPickerWidth = width == null ? undefined : width;\n        return this;\n    }\n\n    public setPickerMaxWidth(width?: number | string): this {\n        if (typeof width === 'number') {\n            width = `${width}px`;\n        }\n        this.maxPickerWidth = width == null ? undefined : width;\n        return this;\n    }\n\n    public setPickerMaxHeight(height?: number | string): this {\n        if (typeof height === 'number') {\n            height = `${height}px`;\n        }\n\n        this.maxPickerHeight = height == null ? undefined : height;\n        return this;\n    }\n\n    protected destroy(): void {\n        this.hidePicker();\n        super.destroy();\n    }\n}\n", "import { Component } from \"./component\";\nimport { PostConstruct } from \"../context/context\";\nimport { escapeString } from \"../utils/string\";\nimport { KeyCode } from '../constants/keyCode';\nimport { setAriaPosInSet, setAriaRole, setAriaSelected, setAriaSetSize } from '../utils/aria';\nimport { Events } from \"../eventKeys\";\nimport { getInnerWidth, isVisible, removeFromParent } from \"../utils/dom\";\nimport { TooltipFeature } from \"./tooltipFeature\";\n\nexport interface ListOption<TValue = string> {\n    value: TValue;\n    text?: string;\n}\n\nexport class AgList<TValue = string> extends Component {\n    public static EVENT_ITEM_SELECTED = 'selectedItem';\n    private static ACTIVE_CLASS = 'ag-active-item';\n\n    private options: ListOption<TValue>[] = [];\n    private itemEls: HTMLElement[] = [];\n    private highlightedEl: HTMLElement | null;\n    private value: TValue | null;\n    private displayValue: string | null;\n\n    constructor(private readonly cssIdentifier = 'default', private readonly unFocusable: boolean = false) {\n        super(/* html */`<div class=\"ag-list ag-${cssIdentifier}-list\" role=\"listbox\"></div>`);\n    }\n\n    @PostConstruct\n    private init(): void {\n        const eGui = this.getGui();\n        this.addManagedListener(eGui, 'mouseleave', () => this.clearHighlighted());\n        if (this.unFocusable) { return; }\n        this.addManagedListener(eGui, 'keydown', this.handleKeyDown.bind(this));\n    }\n\n    public handleKeyDown(e: KeyboardEvent): void {\n        const key = e.key;\n        switch (key) {\n            case KeyCode.ENTER:\n                if (!this.highlightedEl) {\n                    this.setValue(this.getValue());\n                } else {\n                    const pos = this.itemEls.indexOf(this.highlightedEl);\n                    this.setValueByIndex(pos);\n                }\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                const isDown = key === KeyCode.DOWN;\n                let itemToHighlight: HTMLElement;\n\n                e.preventDefault();\n\n                if (!this.highlightedEl) {\n                    itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];\n                } else {\n                    const currentIdx = this.itemEls.indexOf(this.highlightedEl);\n                    let nextPos = currentIdx + (isDown ? 1 : -1);\n                    nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);\n                    itemToHighlight = this.itemEls[nextPos];\n                }\n                this.highlightItem(itemToHighlight);\n                break;\n        }\n    }\n\n    public addOptions(listOptions: ListOption<TValue>[]): this {\n        listOptions.forEach(listOption => this.addOption(listOption));\n        return this;\n    }\n\n    public addOption(listOption: ListOption<TValue>): this {\n        const { value, text } = listOption;\n        const valueToRender = text || value as any;\n\n        this.options.push({ value, text: valueToRender });\n        this.renderOption(value, valueToRender);\n\n        this.updateIndices();\n\n        return this;\n    }\n\n    public clearOptions(): void {\n        this.options = [];\n        this.reset(true);\n        this.itemEls.forEach(itemEl => {\n            removeFromParent(itemEl);\n        });\n        this.itemEls = [];\n    }\n\n    private updateIndices(): void {\n        const options = this.getGui().querySelectorAll('.ag-list-item');\n        options.forEach((option: HTMLElement, idx) => {\n            setAriaPosInSet(option, idx + 1);\n            setAriaSetSize(option, options.length);\n        });\n    }\n\n    private renderOption(value: TValue, text: string): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const itemEl = eDocument.createElement('div');\n\n        setAriaRole(itemEl, 'option');\n        itemEl.classList.add('ag-list-item', `ag-${this.cssIdentifier}-list-item`);\n        const span = eDocument.createElement('span');\n        itemEl.appendChild(span);\n        span.innerText = text;\n\n        if (!this.unFocusable) {\n            itemEl.tabIndex = -1;\n        }\n\n        this.itemEls.push(itemEl);\n\n        this.addManagedListener(itemEl, 'mousemove', () => this.highlightItem(itemEl));\n        this.addManagedListener(itemEl, 'mousedown', (e) => { e.preventDefault(); this.setValue(value) });\n        this.createManagedBean(new TooltipFeature({\n            getTooltipValue: () => text,\n            getGui:  () => itemEl,\n            getLocation: () => 'UNKNOWN',\n            // only show tooltips for items where the text cannot be fully displayed\n            shouldDisplayTooltip: () => span.scrollWidth > span.clientWidth\n        }));\n\n        this.getGui().appendChild(itemEl);\n    }\n\n    public setValue(value?: TValue | null, silent?: boolean): this {\n        if (this.value === value) {\n            this.fireItemSelected();\n            return this;\n        }\n\n        if (value == null) {\n            this.reset(silent);\n            return this;\n        }\n\n        const idx = this.options.findIndex(option => option.value === value);\n\n        if (idx !== -1) {\n            const option = this.options[idx];\n\n            this.value = option.value;\n            this.displayValue = option.text!;\n            this.highlightItem(this.itemEls[idx]);\n\n            if (!silent) {\n                this.fireChangeEvent();\n            }\n        }\n\n        return this;\n    }\n\n    public setValueByIndex(idx: number): this {\n        return this.setValue(this.options[idx].value);\n    }\n\n    public getValue(): TValue | null {\n        return this.value;\n    }\n\n    public getDisplayValue(): string | null {\n        return this.displayValue;\n    }\n\n    public refreshHighlighted(): void {\n        this.clearHighlighted();\n        const idx = this.options.findIndex(option => option.value === this.value);\n\n        if (idx !== -1) {\n            this.highlightItem(this.itemEls[idx]);\n        }\n    }\n\n    private reset(silent?: boolean): void {\n        this.value = null;\n        this.displayValue = null;\n        this.clearHighlighted();\n        if (!silent) {\n            this.fireChangeEvent();\n        }\n    }\n\n    private highlightItem(el: HTMLElement): void {\n        if (!isVisible(el)) { return; }\n\n        this.clearHighlighted();\n        this.highlightedEl = el;\n\n        this.highlightedEl.classList.add(AgList.ACTIVE_CLASS);\n        setAriaSelected(this.highlightedEl, true);\n\n        const eGui = this.getGui();\n        const rect = eGui.getBoundingClientRect();\n\n        const currentTop = rect.top + eGui.scrollTop;\n        const height = rect.height;\n        const { offsetTop, offsetHeight } = el;\n\n        if (((offsetTop + offsetHeight) > currentTop + height) || (offsetTop < currentTop)) {\n            this.highlightedEl.scrollIntoView({ block: 'nearest' })\n        }\n\n        if (!this.unFocusable) {\n            this.highlightedEl.focus();\n        }\n    }\n\n    private clearHighlighted(): void {\n        if (!this.highlightedEl || !isVisible(this.highlightedEl)) { return; }\n\n        this.highlightedEl.classList.remove(AgList.ACTIVE_CLASS);\n        setAriaSelected(this.highlightedEl, false);\n\n        this.highlightedEl = null;\n    }\n\n    private fireChangeEvent(): void {\n        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n        this.fireItemSelected();\n    }\n\n    private fireItemSelected(): void {\n        this.dispatchEvent({ type: AgList.EVENT_ITEM_SELECTED });\n    }\n}\n", "import { AgPickerField, AgPickerFieldParams } from \"./agPickerField\";\nimport { ListOption, AgList } from \"./agList\";\nimport { Events } from \"../eventKeys\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { setAriaControls } from \"../utils/aria\";\n\nexport interface AgSelectParams<TValue = string> extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\n    options?: ListOption<TValue>[];\n    pickerType?: string;\n    pickerAriaLabelKey?: string;\n    pickerAriaLabelValue?: string;\n    placeholder?: string;\n}\n\nexport class AgSelect<TValue = string | null> extends AgPickerField<TValue, AgSelectParams<TValue> & AgPickerFieldParams, AgList<TValue>> {\n    public static EVENT_ITEM_SELECTED = 'selectedItem';\n    protected listComponent: AgList<TValue> | undefined;\n\n    constructor(config?: AgSelectParams<TValue>) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelSelectField',\n            pickerAriaLabelValue: 'Select Field',\n            pickerType: 'ag-list',\n            className: 'ag-select',\n            pickerIcon: 'smallDown',\n            ariaRole: 'combobox',\n            ...config\n        });\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n        this.createListComponent();\n        this.eWrapper.tabIndex = this.gridOptionsService.get('tabIndex');\n\n        const { options, value, placeholder } = this.config;\n        if (options != null) {\n            this.addOptions(options);\n        }\n        if (value != null) {\n            // need to reapply value after list component created\n            this.setValue(value, true);\n        }\n        if (placeholder && value == null) {\n            this.eDisplayField.textContent = placeholder;\n        }\n\n        this.addManagedListener(this.eWrapper, 'focusout', this.onWrapperFocusOut.bind(this));\n    }\n\n    private onWrapperFocusOut(e: FocusEvent): void {\n        if (!this.eWrapper.contains(e.relatedTarget as Element)) {\n            this.hidePicker();\n        }\n    }\n\n    private createListComponent(): void {\n        this.listComponent = this.createBean(new AgList('select', true));\n        this.listComponent.setParentComponent(this);\n\n        const eListAriaEl = this.listComponent.getAriaElement();\n        const listId = `ag-select-list-${this.listComponent.getCompId()}`;\n\n        eListAriaEl.setAttribute('id', listId);\n        setAriaControls(this.getAriaElement(), eListAriaEl);\n\n        this.listComponent.addManagedListener(\n            this.listComponent,\n            AgList.EVENT_ITEM_SELECTED,\n            () => {\n                this.hidePicker();\n                this.dispatchEvent({ type: AgSelect.EVENT_ITEM_SELECTED });\n            }\n        );\n\n        this.listComponent.addManagedListener(\n            this.listComponent,\n            Events.EVENT_FIELD_VALUE_CHANGED,\n            () => {\n                if (!this.listComponent) { return; }\n                this.setValue(this.listComponent.getValue()!, false, true);\n                this.hidePicker();\n            }\n        );\n    }\n\n    protected createPickerComponent() {\n        // do not create the picker every time to save state\n        return this.listComponent!;\n    }\n\n    protected onKeyDown(e: KeyboardEvent): void {\n        const { key } = e;\n        if (key === KeyCode.TAB) {\n            this.hidePicker();\n        } else if (!this.isPickerDisplayed || (key !== KeyCode.ENTER && key !== KeyCode.UP && key !== KeyCode.DOWN)) {\n            super.onKeyDown(e);\n        } else {\n            this.listComponent?.handleKeyDown(e);\n        }\n    }\n\n    public showPicker() {\n        if (!this.listComponent) { return; }\n\n        super.showPicker();\n\n        this.listComponent.refreshHighlighted();\n    }\n\n    public addOptions(options: ListOption<TValue>[]): this {\n        options.forEach(option => this.addOption(option));\n\n        return this;\n    }\n\n    public addOption(option: ListOption<TValue>): this {\n        this.listComponent!.addOption(option);\n\n        return this;\n    }\n\n    public clearOptions(): this {\n        this.listComponent?.clearOptions();\n\n        return this;\n    }\n\n    public setValue(value?: TValue, silent?: boolean, fromPicker?: boolean): this {\n        if (this.value === value || !this.listComponent) { return this; }\n\n        if (!fromPicker) {\n            this.listComponent.setValue(value, true);\n        }\n\n        const newValue = this.listComponent.getValue();\n\n        if (newValue === this.getValue()) { return this; }\n\n        let displayValue = this.listComponent.getDisplayValue();\n        if (displayValue == null && this.config.placeholder) {\n            displayValue = this.config.placeholder;\n        }\n\n        this.eDisplayField.innerHTML = displayValue!;\n\n        this.setTooltip({\n            newTooltipText: displayValue ?? null,\n            shouldDisplayTooltip: () => this.eDisplayField.scrollWidth > this.eDisplayField.clientWidth\n        });\n\n        return super.setValue(value, silent);\n    }\n\n    protected destroy(): void {\n        if (this.listComponent) {\n            this.destroyBean(this.listComponent);\n            this.listComponent = undefined;\n        }\n\n        super.destroy();\n    }\n}\n", "import { RefSelector } from './componentAnnotations';\nimport { AgAbstractField, AgFieldParams, FieldElement } from './agAbstractField';\nimport { setDisabled, setElementWidth, addOrRemoveAttribute } from '../utils/dom';\nimport { setAriaLabel } from '../utils/aria';\n\nexport interface AgInputFieldParams extends AgFieldParams {\n    inputName?: string;\n    inputWidth?: number | 'flex';\n}\n\nexport abstract class AgAbstractInputField<TElement extends FieldElement, TValue, TConfig extends AgInputFieldParams = AgInputFieldParams>\n    extends AgAbstractField<TValue, TConfig> {\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eWrapper') protected readonly eWrapper: HTMLElement;\n    @RefSelector('eInput') protected readonly eInput: TElement;\n\n    constructor(config?: TConfig, className?: string, private readonly inputType: string | null = 'text', private readonly displayFieldTag = 'input') {\n        super(config, /* html */`\n            <div role=\"presentation\">\n                <div ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <${displayFieldTag} ref=\"eInput\" class=\"ag-input-field-input\"></${displayFieldTag}>\n                </div>\n            </div>`, className);\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n        this.setInputType();\n\n        this.eLabel.classList.add(`${this.className}-label`);\n        this.eWrapper.classList.add(`${this.className}-input-wrapper`);\n        this.eInput.classList.add(`${this.className}-input`);\n        this.addCssClass('ag-input-field');\n\n        this.eInput.id = this.eInput.id || `ag-${this.getCompId()}-input`;\n\n        const { inputName, inputWidth } = this.config;\n        if (inputName != null) {\n            this.setInputName(inputName);\n        }\n        if (inputWidth != null) {\n            this.setInputWidth(inputWidth);\n        }\n\n        this.addInputListeners();\n        this.activateTabIndex([this.eInput]);\n    }\n\n    protected addInputListeners() {\n        this.addManagedListener(this.eInput, 'input', e => this.setValue(e.target.value));\n    }\n\n    private setInputType() {\n        if (this.displayFieldTag === 'input') {\n            this.eInput.setAttribute('type', this.inputType!);\n        }\n    }\n\n    public getInputElement(): TElement {\n        return this.eInput;\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        setElementWidth(this.eWrapper, width);\n\n        return this;\n    }\n\n    public setInputName(name: string): this {\n        this.getInputElement().setAttribute('name', name);\n\n        return this;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eInput;\n    }\n\n    public setMaxLength(length: number): this {\n        const eInput = this.eInput as HTMLInputElement | HTMLTextAreaElement;\n        eInput.maxLength = length;\n\n        return this;\n    }\n\n    public setInputPlaceholder(placeholder?: string | null): this {\n        addOrRemoveAttribute(this.eInput, 'placeholder', placeholder);\n\n        return this;\n    }\n\n    public setInputAriaLabel(label?: string | null): this {\n        setAriaLabel(this.eInput, label);\n        this.refreshAriaLabelledBy();\n\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        setDisabled(this.eInput, disabled);\n\n        return super.setDisabled(disabled);\n    }\n\n    public setAutoComplete(value: boolean | string) {\n        if (value === true) {\n            // Remove the autocomplete attribute if the value is explicitly set to true\n            // to allow the default browser autocomplete/autofill behaviour.\n            addOrRemoveAttribute(this.eInput, 'autocomplete', null);\n        } else {\n            // When a string is provided, use it as the value of the autocomplete attribute.\n            // This enables users to specify how they want to the browser to handle the autocomplete on the input, as per spec:\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n            const autoCompleteValue = typeof value === 'string' ? value : 'off'\n            addOrRemoveAttribute(this.eInput, 'autocomplete', autoCompleteValue);\n        }\n        return this;\n    }\n}\n", "import { Events, CheckboxChangedEvent } from \"../events\";\nimport { AgAbstractInputField, AgInputFieldParams } from './agAbstractInputField';\nimport { LabelAlignment } from './agAbstractLabel';\n\nexport interface AgCheckboxParams extends AgInputFieldParams {\n    readOnly?: boolean;\n    passive?: boolean;\n}\n\nexport class AgCheckbox<TConfig extends AgCheckboxParams = AgCheckboxParams> extends AgAbstractInputField<HTMLInputElement, boolean, TConfig> {\n\n    protected labelAlignment: LabelAlignment = 'right';\n\n    private selected?: boolean = false;\n    private readOnly = false;\n    private passive = false;\n\n    constructor(config?: TConfig, className = 'ag-checkbox', inputType = 'checkbox') {\n        super(config, className, inputType);\n    }\n\n    protected override postConstruct() {\n        super.postConstruct();\n\n        const { readOnly, passive } = this.config;\n        if (typeof readOnly === 'boolean') this.setReadOnly(readOnly);\n        if (typeof passive === 'boolean') this.setPassive(passive);\n    }\n\n    protected addInputListeners() {\n        this.addManagedListener(this.eInput, 'click', this.onCheckboxClick.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.toggle.bind(this));\n    }\n\n    public getNextValue(): boolean {\n        return this.selected === undefined ? true : !this.selected;\n    }\n\n    public setPassive(passive: boolean): void {\n        this.passive = passive;\n    }\n\n    public isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        this.eWrapper.classList.toggle('ag-disabled', readOnly);\n        this.eInput.disabled = readOnly;\n        this.readOnly = readOnly;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        this.eWrapper.classList.toggle('ag-disabled', disabled);\n\n        return super.setDisabled(disabled);\n    }\n\n    public toggle(): void {\n        if (this.eInput.disabled) { return; }\n\n        const previousValue = this.isSelected();\n        const nextValue = this.getNextValue();\n\n        if (this.passive) {\n            this.dispatchChange(nextValue, previousValue);\n        } else {\n            this.setValue(nextValue);\n        }\n    }\n\n    public getValue(): boolean | undefined {\n        return this.isSelected();\n    }\n\n    public setValue(value?: boolean, silent?: boolean): this {\n        this.refreshSelectedClass(value);\n        this.setSelected(value, silent);\n\n        return this;\n    }\n\n    public setName(name: string): this {\n        const input = this.getInputElement();\n        input.name = name;\n\n        return this;\n    }\n\n    protected isSelected(): boolean | undefined {\n        return this.selected;\n    }\n\n    private setSelected(selected?: boolean, silent?: boolean): void {\n        if (this.isSelected() === selected) {\n            return;\n        }\n\n        this.previousValue = this.isSelected();\n\n        selected = this.selected = typeof selected === 'boolean' ? selected : undefined;\n        this.eInput.checked = selected!;\n        this.eInput.indeterminate = selected === undefined;\n\n        if (!silent) {\n            this.dispatchChange(this.selected, this.previousValue);\n        }\n    }\n\n    private dispatchChange(selected: boolean | undefined, previousValue: boolean | undefined, event?: MouseEvent) {\n        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED, selected, previousValue, event });\n\n        const input = this.getInputElement();\n        const checkboxChangedEvent: CheckboxChangedEvent = {\n            type: Events.EVENT_CHECKBOX_CHANGED,\n            id: input.id,\n            name: input.name,\n            selected,\n            previousValue\n        };\n\n        this.eventService.dispatchEvent(checkboxChangedEvent);\n    }\n\n    private onCheckboxClick(e: MouseEvent) {\n        if (this.passive || this.eInput.disabled) { return; }\n        const previousValue = this.isSelected();\n        const selected = this.selected = (e.target as HTMLInputElement).checked;\n        this.refreshSelectedClass(selected);\n        this.dispatchChange(selected, previousValue, e);\n    }\n\n    private refreshSelectedClass(value?: boolean | null) {\n        this.eWrapper.classList.toggle('ag-checked', value === true);\n        this.eWrapper.classList.toggle('ag-indeterminate', value == null);\n    }\n\n}\n", "import { AgCheckbox, AgCheckboxParams } from './agCheckbox';\nimport { Events } from '../eventKeys';\nimport { CheckboxChangedEvent } from '../events';\n\nexport interface AgRadioButtonParams extends AgCheckboxParams {}\n\nexport class AgRadioButton extends AgCheckbox<AgRadioButtonParams> {\n    constructor(config?: AgRadioButtonParams) {\n        super(config, 'ag-radio-button', 'radio');\n    }\n\n    protected isSelected(): boolean {\n        return this.eInput.checked;\n    }\n\n    public toggle(): void {\n        if (this.eInput.disabled) { return; }\n\n        // do not allow an active radio button to be deselected\n        if (!this.isSelected()) {\n            this.setValue(true);\n        }\n    }\n\n    protected addInputListeners() {\n        super.addInputListeners();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));\n    }\n\n    /**\n     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.\n     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input\n     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,\n     * not deselected, so we need to use our own event.\n     */\n    private onChange(event: CheckboxChangedEvent) {\n        if (event.selected &&\n            event.name &&\n            this.eInput.name &&\n            this.eInput.name === event.name &&\n            event.id &&\n            this.eInput.id !== event.id) {\n            this.setValue(false, true);\n        }\n    }\n}\n", "import { IDoesFilterPassParams, IFilterOptionDef, IFilterParams, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport { OptionsFactory } from './optionsFactory';\nimport { IProvidedFilter, IProvidedFilterParams, ProvidedFilter } from './providedFilter';\nimport { AgPromise } from '../../utils';\nimport { AgSelect } from '../../widgets/agSelect';\nimport { AgRadioButton } from '../../widgets/agRadioButton';\nimport { areEqual } from '../../utils/array';\nimport { setDisplayed, setDisabled, removeFromParent } from '../../utils/dom';\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport { AgInputTextField } from '../../widgets/agInputTextField';\nimport { Component } from '../../widgets/component';\nimport { AgAbstractInputField } from '../../widgets/agAbstractInputField';\nimport { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport { ListOption } from '../../widgets/agList';\nimport { IFloatingFilterParent } from '../floating/floatingFilter';\nimport { warnOnce, isFunction } from '../../utils/function';\nimport { LocaleService } from '../../localeService';\n\nexport type JoinOperator = 'AND' | 'OR';\n\n/** Interface contract for the public aspects of the SimpleFilter implementation(s). */\nexport interface ISimpleFilter extends IProvidedFilter, IFloatingFilterParent {\n}\n\nexport interface IFilterPlaceholderFunctionParams {\n    /**\n     * The filter option key\n     */\n    filterOptionKey: ISimpleFilterModelType,\n    /**\n     * The filter option name as localised text\n     */\n    filterOption: string,\n    /**\n     * The default placeholder text\n     */\n    placeholder: string\n}\nexport type FilterPlaceholderFunction = (params: IFilterPlaceholderFunctionParams) => string;\n\n/**\n * Parameters provided by the grid to the `init` method of a `SimpleFilter`.\n * Do not use in `colDef.filterParams` - see `ISimpleFilterParams` instead.\n */\nexport type SimpleFilterParams<TData = any> = ISimpleFilterParams & IFilterParams<TData>;\n\n/**\n * Common parameters in `colDef.filterParams` used by all simple filters. Extended by the specific filter types.\n */\nexport interface ISimpleFilterParams extends IProvidedFilterParams {\n    /**\n     * Array of filter options to present to the user.\n     */\n    filterOptions?: (IFilterOptionDef | ISimpleFilterModelType)[];\n    /** The default filter option to be selected. */\n    defaultOption?: string;\n    /**\n     * By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */\n    defaultJoinOperator?: JoinOperator;\n    /**\n     * Maximum number of conditions allowed in the filter.\n     *\n     * @default 2\n     */\n    maxNumConditions?: number;\n    /**\n     * By default only one condition is shown, and additional conditions are made visible when the previous conditions are entered\n     * (up to `maxNumConditions`). To have more conditions shown by default, set this to the number required.\n     * Conditions will be disabled until the previous conditions have been entered.\n     * Note that this cannot be greater than `maxNumConditions` - anything larger will be ignored.\n     *\n     * @default 1\n     */\n    numAlwaysVisibleConditions?: number;\n    /**\n     * @deprecated As of v29.2 there can be more than two conditions in the filter. Use `maxNumConditions = 1` instead.\n     */\n    suppressAndOrCondition?: boolean;\n    /**\n     * @deprecated As of v29.2 there can be more than two conditions in the filter. Use `numAlwaysVisibleConditions = 2` instead.\n     */\n    alwaysShowBothConditions?: boolean;\n\n    /**\n     * Placeholder text for the filter textbox\n     */\n    filterPlaceholder?: FilterPlaceholderFunction | string;\n}\n\nexport type ISimpleFilterModelType =\n    'empty'\n    | 'equals'\n    | 'notEqual'\n    | 'lessThan'\n    | 'lessThanOrEqual'\n    | 'greaterThan'\n    | 'greaterThanOrEqual'\n    | 'inRange'\n    | 'contains'\n    | 'notContains'\n    | 'startsWith'\n    | 'endsWith'\n    | 'blank'\n    | 'notBlank';\nexport interface ISimpleFilterModel extends ProvidedFilterModel {\n    /** One of the filter options, e.g. `'equals'` */\n    type?: ISimpleFilterModelType | null;\n}\n\n/**\n * Old combined models prior to v29.2 only supported two conditions, which were defined using `condition1` and `condition2`.\n * New combined models allow more than two conditions using `conditions`.\n * When supplying combined models to the grid:\n * - `conditions` will be used if present.\n * - If `conditions` is not present, `condition1` and `condition2` will be used (deprecated).\n * \n * When receiving combined models from the grid:\n * - `conditions` will be populated with all the conditions (including the first and second conditions).\n * - `condition1` and `condition2` will be populated with the first and second conditions (deprecated).\n */\nexport interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {\n    operator: JoinOperator;\n    /** @deprecated As of v29.2, supply as the first element of `conditions`. */\n    condition1: M;\n    /** @deprecated As of v29.2, supply as the second element of `conditions`. */\n    condition2: M;\n    /** Will be mandatory in a future release. */\n    conditions?: M[];\n}\n\nexport type Tuple<T> = (T | null)[];\n\nexport abstract class SimpleFilterModelFormatter<TValue = any> {\n    constructor(\n        private readonly localeService: LocaleService,\n        private optionsFactory: OptionsFactory,\n        protected readonly valueFormatter?: (value: TValue | null) => string | null\n    ) {}\n\n    // used by:\n    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n    public getModelAsString(model: ISimpleFilterModel | null): string | null {\n        if (!model) {\n            return null;\n        }\n        const isCombined = (model as any).operator != null;\n        const translate = this.localeService.getLocaleTextFunc();\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\n            let { conditions } = combinedModel;\n            if (!conditions) {\n                const { condition1, condition2 } = combinedModel;\n                conditions = [condition1, condition2];\n            }\n            const customOptions = conditions.map(condition => this.getModelAsString(condition));\n            const joinOperatorTranslateKey = combinedModel.operator === 'AND' ? 'andCondition' : 'orCondition';\n            return customOptions.join(` ${translate(joinOperatorTranslateKey, FILTER_LOCALE_TEXT[joinOperatorTranslateKey])} `);\n        } else if (model.type === SimpleFilter.BLANK || model.type === SimpleFilter.NOT_BLANK) {\n            return translate(model.type, model.type);\n        } else {\n            const condition = model as ISimpleFilterModel;\n            const customOption = this.optionsFactory.getCustomOption(condition.type);\n\n            // For custom filter options we display the Name of the filter instead\n            // of displaying the `from` value, as it wouldn't be relevant\n            const { displayKey, displayName, numberOfInputs } = customOption || {};\n            if (displayKey && displayName && numberOfInputs === 0) {\n                translate(displayKey, displayName);\n                return displayName;\n            }\n            return this.conditionToString(condition, customOption);\n        }\n    }\n\n    // creates text equivalent of FilterModel. if it's a combined model, this takes just one condition.\n    protected abstract conditionToString(condition: ProvidedFilterModel, opts?: IFilterOptionDef): string;\n\n    public updateParams(params: { optionsFactory: OptionsFactory }) {\n        this.optionsFactory = params.optionsFactory;\n    }\n\n    protected formatValue(value?: TValue | null): string {\n        return this.valueFormatter ? (this.valueFormatter(value ?? null) ?? '') : String(value);\n    }\n}\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n * @param E type of UI element used for collecting user-input\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends ProvidedFilter<M | ICombinedSimpleModel<M>, V> implements ISimpleFilter {\n\n    public static EMPTY: ISimpleFilterModelType = 'empty';\n    public static BLANK: ISimpleFilterModelType = 'blank';\n    public static NOT_BLANK: ISimpleFilterModelType = 'notBlank';\n    public static EQUALS: ISimpleFilterModelType = 'equals';\n    public static NOT_EQUAL: ISimpleFilterModelType = 'notEqual';\n    public static LESS_THAN: ISimpleFilterModelType = 'lessThan';\n    public static LESS_THAN_OR_EQUAL: ISimpleFilterModelType = 'lessThanOrEqual';\n    public static GREATER_THAN: ISimpleFilterModelType = 'greaterThan';\n    public static GREATER_THAN_OR_EQUAL: ISimpleFilterModelType = 'greaterThanOrEqual';\n    public static IN_RANGE: ISimpleFilterModelType = 'inRange';\n    public static CONTAINS: ISimpleFilterModelType = 'contains';\n    public static NOT_CONTAINS: ISimpleFilterModelType = 'notContains';\n    public static STARTS_WITH: ISimpleFilterModelType = 'startsWith';\n    public static ENDS_WITH: ISimpleFilterModelType = 'endsWith';\n\n    protected readonly eTypes: AgSelect[] = [];\n    protected readonly eJoinOperatorPanels: HTMLElement[] = [];\n    protected readonly eJoinOperatorsAnd: AgRadioButton[] = [];\n    protected readonly eJoinOperatorsOr: AgRadioButton[] = [];\n    protected readonly eConditionBodies: HTMLElement[] = [];\n    private readonly listener = () => this.onUiChanged();\n\n    private maxNumConditions: number;\n    private numAlwaysVisibleConditions: number;\n    private defaultJoinOperator: JoinOperator;\n    private filterPlaceholder: SimpleFilterParams['filterPlaceholder'];\n    private lastUiCompletePosition: number | null = null;\n    private joinOperatorId = 0;\n    private filterListOptions: ListOption[];\n\n    protected optionsFactory: OptionsFactory;\n    protected abstract getDefaultFilterOptions(): string[];\n\n    protected abstract createValueElement(): HTMLElement;\n\n    protected abstract removeValueElements(startPosition: number, deleteCount?: number): void;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: number): M;\n\n    // because the sub-class filter models have different attribute names, we have to map\n    protected abstract mapValuesFromModel(filterModel: ISimpleFilterModel | null): Tuple<V>;\n\n    // allow value-type specific handling of null cell values.\n    protected abstract evaluateNullValue(filterType?: ISimpleFilterModelType | null): boolean;\n\n    // allow value-type specific handling of non-null cell values.\n    protected abstract evaluateNonNullValue(range: Tuple<V>, cellValue: V, filterModel: M, params: IDoesFilterPassParams): boolean;\n\n    // allow iteration of all condition inputs managed by sub-classes.\n    protected abstract getInputs(position: number): Tuple<E>;\n\n    // allow retrieval of all condition input values.\n    protected abstract getValues(position: number): Tuple<V>;\n\n    protected getNumberOfInputs(type?: ISimpleFilterModelType | null): number {\n        const customOpts = this.optionsFactory.getCustomOption(type);\n        if (customOpts) {\n            const { numberOfInputs } = customOpts;\n            return numberOfInputs != null ? numberOfInputs : 1;\n        }\n\n        const zeroInputTypes = [\n            SimpleFilter.EMPTY, SimpleFilter.NOT_BLANK, SimpleFilter.BLANK,\n        ];\n\n        if (type && zeroInputTypes.indexOf(type) >= 0) {\n            return 0;\n        } else if (type === SimpleFilter.IN_RANGE) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string | null | undefined, value: V | null): void {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n\n    private setTypeFromFloatingFilter(type?: string | null): void {\n        this.eTypes.forEach((eType, position) => {\n            if (position === 0) {\n                eType.setValue(type, true);\n            } else {\n                eType.setValue(this.optionsFactory.getDefaultOption(), true);\n            }\n        });\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> | null {\n        const conditions = this.getUiCompleteConditions();\n        if (conditions.length === 0) {\n            return null;\n        }\n\n        if (this.maxNumConditions > 1 && conditions.length > 1) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: conditions[0],\n                condition2: conditions[1],\n                conditions\n            };\n        }\n\n        return conditions[0];\n    }\n\n    protected getConditionTypes(): (ISimpleFilterModelType | null)[] {\n        return this.eTypes.map(eType => eType.getValue() as ISimpleFilterModelType);\n    }\n\n    protected getConditionType(position: number): ISimpleFilterModelType | null {\n        return this.eTypes[position].getValue() as ISimpleFilterModelType;\n    }\n\n    protected getJoinOperator(): JoinOperator {\n        if (this.eJoinOperatorsOr.length === 0) {\n            return this.defaultJoinOperator;\n        }\n        return this.eJoinOperatorsOr[0].getValue() === true ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) { return true; }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) { return false; }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) { return false; }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res = aCombined.operator === bCombined.operator\n                && areEqual(aCombined.conditions, bCombined.conditions, (aModel, bModel) => this.areSimpleModelsEqual(aModel, bModel));\n        }\n\n        return res;\n    }\n\n    private shouldRefresh(newParams: SimpleFilterParams): boolean {\n        const model = this.getModel();\n        const conditions: ISimpleFilterModel[] | null = model ? ((<any>model).conditions ?? [model]) : null;\n\n        // Do Not refresh when one of the existing condition options is not in new options list\n        const newOptionsList = newParams.filterOptions?.map(\n            option => typeof option === 'string' ? option : option.displayKey\n        ) ?? this.getDefaultFilterOptions();\n\n        const allConditionsExistInNewOptionsList = !conditions || conditions.every(condition =>\n            newOptionsList.find(option => option === condition.type) !== undefined);\n        if (!allConditionsExistInNewOptionsList) {\n            return false;\n        }\n\n        // Check number of conditions vs maxNumConditions\n        if (typeof newParams.maxNumConditions === 'number' && conditions && conditions.length > newParams.maxNumConditions) {\n            return false;\n        }\n\n        return true;\n    }\n\n    refresh(newParams: SimpleFilterParams): boolean {\n        if (!this.shouldRefresh(newParams)) {\n            return false;\n        }\n\n        const parentRefreshed = super.refresh(newParams);\n        if (!parentRefreshed) {\n            return false;\n        }\n\n        this.setParams(newParams);\n        this.removeConditionsAndOperators(0);\n        this.createOption();\n        this.setModel(this.getModel());\n\n        return true;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void> {\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            let combinedModel = model as ICombinedSimpleModel<M>;\n            if (!combinedModel.conditions) {\n                combinedModel.conditions = [\n                    combinedModel.condition1,\n                    combinedModel.condition2\n                ];\n            }\n\n            const numConditions = this.validateAndUpdateConditions(combinedModel.conditions);\n            const numPrevConditions = this.getNumConditions();\n            if (numConditions < numPrevConditions) {\n                this.removeConditionsAndOperators(numConditions);\n            } else if (numConditions > numPrevConditions) {\n                for (let i = numPrevConditions; i < numConditions; i++) {\n                    this.createJoinOperatorPanel();\n                    this.createOption();\n                }\n            }\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorsAnd.forEach(eJoinOperatorAnd => eJoinOperatorAnd.setValue(!orChecked, true));\n            this.eJoinOperatorsOr.forEach(eJoinOperatorOr => eJoinOperatorOr.setValue(orChecked, true));\n\n            combinedModel.conditions.forEach((condition, position) => {\n                this.eTypes[position].setValue(condition.type, true);\n                this.setConditionIntoUi(condition, position);\n            });\n        } else {\n            const simpleModel = model as M;\n\n            if (this.getNumConditions() > 1) {\n                this.removeConditionsAndOperators(1);\n            }\n\n            this.eTypes[0].setValue(simpleModel.type, true);\n            this.setConditionIntoUi(simpleModel, 0);\n        }\n\n        this.lastUiCompletePosition = this.getNumConditions() - 1;\n\n        this.createMissingConditionsAndOperators();\n\n        this.onUiChanged();\n\n        return AgPromise.resolve();\n    }\n\n    private validateAndUpdateConditions(conditions: M[]): number {\n        let numConditions = conditions.length;\n        if (numConditions > this.maxNumConditions) {\n            conditions.splice(this.maxNumConditions);\n            warnOnce('Filter Model contains more conditions than \"filterParams.maxNumConditions\". Additional conditions have been ignored.');\n            numConditions = this.maxNumConditions;\n        }\n        return numConditions;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n\n        if (model == null) { return true; }\n\n        const { operator } = model as ICombinedSimpleModel<M>;\n        const models: M[] = [];\n\n        if (operator) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            models.push(...(combinedModel.conditions ?? []));\n        } else {\n            models.push(model as M);\n        }\n\n        const combineFunction = operator && operator === 'OR' ? 'some' : 'every';\n\n        return models[combineFunction](m => this.individualConditionPasses(params, m));\n    }\n\n    protected setParams(params: SimpleFilterParams): void {\n        super.setParams(params);\n\n        this.setNumConditions(params);\n\n        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);\n        this.filterPlaceholder = params.filterPlaceholder;\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n        this.createFilterListOptions();\n\n        this.createOption();\n        this.createMissingConditionsAndOperators();\n\n        if (this.isReadOnly()) {\n            // only do this when read only (so no other focusable elements), otherwise the tab order breaks\n            // as the tabbed layout managed focus feature will focus the body when it shouldn't\n            this.eFilterBody.setAttribute('tabindex', '-1');\n        }\n    }\n\n    private setNumConditions(params: SimpleFilterParams): void {\n        if (params.suppressAndOrCondition != null) {\n            warnOnce('Since v29.2 \"filterParams.suppressAndOrCondition\" is deprecated. Use \"filterParams.maxNumConditions = 1\" instead.');\n        }\n        if (params.alwaysShowBothConditions != null) {\n            warnOnce('Since v29.2 \"filterParams.alwaysShowBothConditions\" is deprecated. Use \"filterParams.numAlwaysVisibleConditions = 2\" instead.');\n        }\n        this.maxNumConditions = params.maxNumConditions ?? (params.suppressAndOrCondition ? 1 : 2);\n        if (this.maxNumConditions < 1) {\n            warnOnce('\"filterParams.maxNumConditions\" must be greater than or equal to zero.');\n            this.maxNumConditions = 1;\n        }\n        this.numAlwaysVisibleConditions = params.numAlwaysVisibleConditions ?? (params.alwaysShowBothConditions ? 2 : 1);\n        if (this.numAlwaysVisibleConditions < 1) {\n            warnOnce('\"filterParams.numAlwaysVisibleConditions\" must be greater than or equal to zero.');\n            this.numAlwaysVisibleConditions = 1;\n        }\n        if (this.numAlwaysVisibleConditions > this.maxNumConditions) {\n            warnOnce('\"filterParams.numAlwaysVisibleConditions\" cannot be greater than \"filterParams.maxNumConditions\".');\n            this.numAlwaysVisibleConditions = this.maxNumConditions;\n        }\n    }\n\n    private createOption(): void {\n        const eType = this.createManagedBean(new AgSelect());\n        this.eTypes.push(eType);\n        eType.addCssClass('ag-filter-select');\n        this.eFilterBody.appendChild(eType.getGui());\n\n        const eConditionBody = this.createValueElement();\n        this.eConditionBodies.push(eConditionBody);\n        this.eFilterBody.appendChild(eConditionBody);\n\n        this.putOptionsIntoDropdown(eType);\n        this.resetType(eType);\n        const position = this.getNumConditions() - 1;\n        this.forEachPositionInput(position, (element) => this.resetInput(element));\n        this.addChangedListeners(eType, position);\n    }\n\n    private createJoinOperatorPanel(): void {\n        const eJoinOperatorPanel = document.createElement('div');\n        this.eJoinOperatorPanels.push(eJoinOperatorPanel);\n        eJoinOperatorPanel.classList.add('ag-filter-condition');\n\n        const eJoinOperatorAnd =  this.createJoinOperator(this.eJoinOperatorsAnd, eJoinOperatorPanel, 'and');\n        const eJoinOperatorOr = this.createJoinOperator(this.eJoinOperatorsOr, eJoinOperatorPanel, 'or');\n\n        this.eFilterBody.appendChild(eJoinOperatorPanel);\n\n        const index = this.eJoinOperatorPanels.length - 1;\n        const uniqueGroupId = this.joinOperatorId++;\n        this.resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId);\n        this.resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId);\n\n        if (!this.isReadOnly()) {\n            eJoinOperatorAnd.onValueChange(this.listener);\n            eJoinOperatorOr.onValueChange(this.listener);\n        }\n    }\n\n    private createJoinOperator(eJoinOperators: AgRadioButton[], eJoinOperatorPanel: HTMLElement, andOr: string): AgRadioButton {\n        const eJoinOperator = this.createManagedBean(new AgRadioButton());\n        eJoinOperators.push(eJoinOperator);\n        eJoinOperator.addCssClass('ag-filter-condition-operator');\n        eJoinOperator.addCssClass(`ag-filter-condition-operator-${andOr}`);\n        eJoinOperatorPanel.appendChild(eJoinOperator.getGui());\n        return eJoinOperator;\n    }\n\n    private getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator {\n        return defaultJoinOperator === 'AND' || defaultJoinOperator === 'OR' ? defaultJoinOperator : 'AND';\n    }\n\n    private createFilterListOptions(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n\n        this.filterListOptions = filterOptions.map(option => \n            typeof option === 'string' ?\n                this.createBoilerplateListOption(option) :\n                this.createCustomListOption(option)\n        );\n    }\n\n    private putOptionsIntoDropdown(eType: AgSelect): void {\n        // Add specified options to condition drop-down.\n        this.filterListOptions.forEach(listOption => {\n            eType.addOption(listOption);\n        });\n\n        // Make drop-downs read-only if there is only one option.\n        eType.setDisabled(this.filterListOptions.length <= 1);\n    }\n\n    private createBoilerplateListOption(option: string): ListOption {\n        return { value: option, text: this.translate(option as keyof typeof FILTER_LOCALE_TEXT) };\n    }\n\n    private createCustomListOption(option: IFilterOptionDef): ListOption {\n        const { displayKey } = option;\n        const customOption = this.optionsFactory.getCustomOption(option.displayKey);\n        return {\n            value: displayKey,\n            text: customOption ?\n                this.localeService.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) :\n                this.translate(displayKey as keyof typeof FILTER_LOCALE_TEXT),\n        };\n    }\n\n    /**\n     * @deprecated As of v29.2 filters can have more than two conditions. Check `colDef.filterParams.maxNumConditions` instead.\n     */\n    public isAllowTwoConditions(): boolean {\n        return this.maxNumConditions >= 2;\n    }\n\n    protected createBodyTemplate(): string {\n        // created dynamically\n        return '';\n    }\n\n    protected getCssIdentifier() {\n        return 'simple-filter';\n    }\n\n    protected updateUiVisibility(): void {\n        const joinOperator = this.getJoinOperator();\n        this.updateNumConditions();\n\n        // from here, the number of elements in all the collections is correct, so can just update the values/statuses\n        this.updateConditionStatusesAndValues(this.lastUiCompletePosition!, joinOperator);\n    }\n\n    private updateNumConditions(): void {\n        // Collection sizes are already correct if updated via API, so only need to handle UI updates here\n        let lastUiCompletePosition = -1;\n        let areAllConditionsUiComplete = true;\n        for (let position = 0; position < this.getNumConditions(); position++) {\n            if (this.isConditionUiComplete(position)) {\n                lastUiCompletePosition = position\n            } else {\n                areAllConditionsUiComplete = false;\n            }\n        }\n        if (this.shouldAddNewConditionAtEnd(areAllConditionsUiComplete)) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n        } else {\n            const activePosition = this.lastUiCompletePosition ?? this.getNumConditions() - 2;\n            if (lastUiCompletePosition < activePosition) {\n                // remove any incomplete conditions at the end, excluding the active position\n                this.removeConditionsAndOperators(activePosition + 1);\n                const removeStartPosition = lastUiCompletePosition + 1;\n                const numConditionsToRemove = activePosition - removeStartPosition;\n                if (numConditionsToRemove > 0) {\n                    this.removeConditionsAndOperators(removeStartPosition, numConditionsToRemove);\n                }\n                this.createMissingConditionsAndOperators();\n            }\n        }\n        this.lastUiCompletePosition = lastUiCompletePosition;\n    }\n\n    private updateConditionStatusesAndValues(lastUiCompletePosition: number, joinOperator?: JoinOperator): void {\n        this.eTypes.forEach((eType, position) => {\n            const disabled = this.isConditionDisabled(position, lastUiCompletePosition);\n\n            eType.setDisabled(disabled || this.filterListOptions.length <= 1);\n            if (position === 1) {\n                setDisabled(this.eJoinOperatorPanels[0], disabled);\n                this.eJoinOperatorsAnd[0].setDisabled(disabled);\n                this.eJoinOperatorsOr[0].setDisabled(disabled);\n            }\n        });\n\n        this.eConditionBodies.forEach((element, index) => {\n            setDisplayed(element, this.isConditionBodyVisible(index));\n        });\n\n        const orChecked = (joinOperator ?? this.getJoinOperator()) === 'OR';\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd, index) => {\n            eJoinOperatorAnd.setValue(!orChecked, true);\n        });\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr, index) => {\n            eJoinOperatorOr.setValue(orChecked, true);\n        });\n\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            this.setElementDisplayed(element, index < numberOfInputs);\n            this.setElementDisabled(element, this.isConditionDisabled(position, lastUiCompletePosition));\n        });\n\n        this.resetPlaceholder();\n    }\n\n    private shouldAddNewConditionAtEnd(areAllConditionsUiComplete: boolean): boolean {\n        return areAllConditionsUiComplete && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();\n    }\n\n    private removeConditionsAndOperators(startPosition: number, deleteCount?: number): void {\n        if (startPosition >= this.getNumConditions()) {\n            return;\n        }\n        this.removeComponents(this.eTypes, startPosition, deleteCount);\n        this.removeElements(this.eConditionBodies, startPosition, deleteCount);\n        this.removeValueElements(startPosition, deleteCount);\n        const joinOperatorIndex = Math.max(startPosition - 1, 0);\n        this.removeElements(this.eJoinOperatorPanels, joinOperatorIndex, deleteCount);\n        this.removeComponents(this.eJoinOperatorsAnd, joinOperatorIndex, deleteCount);\n        this.removeComponents(this.eJoinOperatorsOr, joinOperatorIndex, deleteCount);\n    }\n\n    private removeElements(elements: HTMLElement[], startPosition: number, deleteCount?: number): void {\n        const removedElements = this.removeItems(elements, startPosition, deleteCount);\n        removedElements.forEach(element => removeFromParent(element));\n    }\n\n    protected removeComponents(components: Component[], startPosition: number, deleteCount?: number): void {\n        const removedComponents = this.removeItems(components, startPosition, deleteCount);\n        removedComponents.forEach(comp => {\n            removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n\n    protected removeItems<T>(items: T[], startPosition: number, deleteCount?: number): T[] {\n        return deleteCount == null ? items.splice(startPosition) : items.splice(startPosition, deleteCount);\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams) {\n        super.afterGuiAttached(params);\n\n        this.resetPlaceholder();\n\n        if (!params?.suppressFocus) {\n            if (this.isReadOnly()) {\n                // something needs focus otherwise keyboard navigation breaks, so focus the filter body\n                this.eFilterBody.focus();\n            } else {\n                const firstInput = this.getInputs(0)[0];\n                if (!firstInput) { return; }\n\n                if (firstInput instanceof AgAbstractInputField) {\n                    firstInput.getInputElement().focus();\n                }\n            }\n        }\n    }\n\n    public afterGuiDetached(): void {\n        super.afterGuiDetached();\n\n        const appliedModel = this.getModel();\n\n        // Reset temporary UI state that was applied to the DOM but not committed to the model\n        this.resetUiToActiveModel(appliedModel);\n\n        // remove incomplete positions\n        let lastUiCompletePosition = -1;\n        // as we remove incomplete positions, the last UI complete position will change\n        let updatedLastUiCompletePosition = -1;\n        let conditionsRemoved = false;\n        const joinOperator = this.getJoinOperator();\n        for (let position = this.getNumConditions() - 1; position >= 0; position--) {\n            if (this.isConditionUiComplete(position)) {\n                if (lastUiCompletePosition === -1) {\n                    lastUiCompletePosition = position;\n                    updatedLastUiCompletePosition = position;\n                }\n            } else {\n                const shouldRemovePositionAtEnd = position >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(position - 1);\n                const positionBeforeLastUiCompletePosition = position < lastUiCompletePosition;\n                if (shouldRemovePositionAtEnd || positionBeforeLastUiCompletePosition) {\n                    this.removeConditionsAndOperators(position, 1);\n                    conditionsRemoved = true;\n                    if (positionBeforeLastUiCompletePosition) {\n                        updatedLastUiCompletePosition--;\n                    }\n                }\n            }\n        }\n        let shouldUpdateConditionStatusesAndValues = false;\n        if (this.getNumConditions() < this.numAlwaysVisibleConditions) {\n            // if conditions have been removed, need to recreate new ones at the end up to the number required\n            this.createMissingConditionsAndOperators();\n            shouldUpdateConditionStatusesAndValues = true;\n        }\n        if (this.shouldAddNewConditionAtEnd(updatedLastUiCompletePosition === this.getNumConditions() - 1)) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n            shouldUpdateConditionStatusesAndValues = true;\n        }\n        if (shouldUpdateConditionStatusesAndValues) {\n            this.updateConditionStatusesAndValues(updatedLastUiCompletePosition, joinOperator);\n        }\n        if (conditionsRemoved) {\n            this.updateJoinOperatorsDisabled();\n        }\n        this.lastUiCompletePosition = updatedLastUiCompletePosition;\n    }\n\n    private getPlaceholderText(defaultPlaceholder: keyof typeof FILTER_LOCALE_TEXT, position: number): string {\n        let placeholder = this.translate(defaultPlaceholder);\n        if (isFunction(this.filterPlaceholder)) {\n            const filterPlaceholderFn = this.filterPlaceholder as FilterPlaceholderFunction;\n            const filterOptionKey = this.eTypes[position].getValue() as ISimpleFilterModelType;\n            const filterOption = this.translate(filterOptionKey);\n            placeholder = filterPlaceholderFn({\n                filterOptionKey,\n                filterOption,\n                placeholder\n            });\n        } else if (typeof this.filterPlaceholder === 'string') {\n            placeholder = this.filterPlaceholder;\n        }\n\n        return placeholder;\n    }\n\n    // allow sub-classes to reset HTML placeholders after UI update.\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.localeService.getLocaleTextFunc();\n\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            if (!(element instanceof AgAbstractInputField)) {\n                return;\n            }\n\n            const placeholder =\n                index === 0 && numberOfInputs > 1 ? 'inRangeStart' :\n                index === 0 ? 'filterOoo' :\n                'inRangeEnd';\n            const ariaLabel =\n                index === 0 && numberOfInputs > 1 ? globalTranslate('ariaFilterFromValue', 'Filter from value') :\n                index === 0 ? globalTranslate('ariaFilterValue', 'Filter Value') :\n                globalTranslate('ariaFilterToValue', 'Filter to Value');\n\n            element.setInputPlaceholder(this.getPlaceholderText(placeholder, position));\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected setElementValue(element: E, value: V | null, fromFloatingFilter?: boolean): void {\n        if (element instanceof AgAbstractInputField) {\n            element.setValue(value != null ? String(value) : null, true);\n        }\n    }\n\n    protected setElementDisplayed(element: E, displayed: boolean): void {\n        if (element instanceof Component) {\n            setDisplayed(element.getGui(), displayed);\n        }\n    }\n\n    protected setElementDisabled(element: E, disabled: boolean): void {\n        if (element instanceof Component) {\n            setDisabled(element.getGui(), disabled);\n        }\n    }\n\n    protected attachElementOnChange(element: E, listener: () => void): void {\n        if (element instanceof AgAbstractInputField) {\n            element.onValueChange(listener);\n        }\n    }\n\n    protected forEachInput(cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\n        this.getConditionTypes().forEach((type, position) => {\n            this.forEachPositionTypeInput(position, type, cb);\n        });\n    }\n\n    protected forEachPositionInput(position: number, cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\n        const type = this.getConditionType(position);\n        this.forEachPositionTypeInput(position, type, cb);\n    }\n\n    private forEachPositionTypeInput(position: number, type: ISimpleFilterModelType | null, cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\n        const numberOfInputs = this.getNumberOfInputs(type);\n        const inputs = this.getInputs(position);\n        for (let index = 0; index < inputs.length; index++) {\n            const input = inputs[index];\n            if (input != null) {\n                cb(input, index, position, numberOfInputs);\n            }\n        }\n    }\n\n    private isConditionDisabled(position: number, lastUiCompletePosition: number): boolean {\n        if (this.isReadOnly()) { return true; } // Read-only mode trumps everything.\n        if (position === 0) { return false; } // Position 0 should typically be editable.\n\n        // Only allow editing of a 2nd or later condition if the previous condition is complete and no subsequent conditions are complete.\n        return position > lastUiCompletePosition + 1;\n    }\n\n    private isConditionBodyVisible(position: number): boolean {\n        // Check that the condition needs inputs.\n        const type = this.getConditionType(position);\n        const numberOfInputs = this.getNumberOfInputs(type);\n        return numberOfInputs > 0;\n    }\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected isConditionUiComplete(position: number): boolean {\n        if (position >= this.getNumConditions()) { return false; } // Condition doesn't exist.\n\n        const type = this.getConditionType(position);\n\n        if (type === SimpleFilter.EMPTY) { return false; }\n\n        if (this.getValues(position).some(v => v == null)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private getNumConditions(): number {\n        return this.eTypes.length;\n    }\n\n    private getUiCompleteConditions(): M[] {\n        const conditions: M[] = [];\n        for (let position = 0; position < this.getNumConditions(); position++) {\n            if (this.isConditionUiComplete(position)) {\n                conditions.push(this.createCondition(position));\n            }\n        }\n        return conditions;\n    }\n\n    private createMissingConditionsAndOperators(): void {\n        if (this.isReadOnly()) { return; } // don't show incomplete conditions when read only\n        for (let i = this.getNumConditions(); i < this.numAlwaysVisibleConditions; i++) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n        }\n    }\n\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\n        this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions);\n\n        this.eTypes.forEach(eType => this.resetType(eType));\n\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd, index) => this.resetJoinOperatorAnd(eJoinOperatorAnd, index, this.joinOperatorId + index));\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr, index) => this.resetJoinOperatorOr(eJoinOperatorOr, index, this.joinOperatorId + index));\n        this.joinOperatorId++\n\n        this.forEachInput((element) => this.resetInput(element));\n\n        this.resetPlaceholder();\n\n        this.createMissingConditionsAndOperators();\n\n        this.lastUiCompletePosition = null;\n\n        if (!silent) {\n            this.onUiChanged();\n        }\n\n        return AgPromise.resolve();\n    }\n\n    private resetType(eType: AgSelect): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\n        eType\n            .setValue(this.optionsFactory.getDefaultOption(), true)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);\n    }\n\n    private resetJoinOperatorAnd(eJoinOperatorAnd: AgRadioButton, index: number, uniqueGroupId: number): void {\n        this.resetJoinOperator(eJoinOperatorAnd, index, this.isDefaultOperator('AND'), this.translate('andCondition'), uniqueGroupId);\n    }\n   \n    private resetJoinOperatorOr(eJoinOperatorOr: AgRadioButton, index: number, uniqueGroupId: number): void {\n        this.resetJoinOperator(eJoinOperatorOr, index, this.isDefaultOperator('OR'), this.translate('orCondition'), uniqueGroupId);\n    }\n\n    private resetJoinOperator(eJoinOperator: AgRadioButton, index: number, value: boolean, label: string, uniqueGroupId: number): void {\n        this.updateJoinOperatorDisabled(\n            eJoinOperator\n                .setValue(value, true)\n                .setName(`ag-simple-filter-and-or-${this.getCompId()}-${uniqueGroupId}`)\n                .setLabel(label),\n            index\n        );\n    }\n\n    private updateJoinOperatorsDisabled(): void {\n        this.eJoinOperatorsAnd.forEach((eJoinOperator, index) => this.updateJoinOperatorDisabled(eJoinOperator, index));\n        this.eJoinOperatorsOr.forEach((eJoinOperator, index) => this.updateJoinOperatorDisabled(eJoinOperator, index));\n    }\n\n    private updateJoinOperatorDisabled(eJoinOperator: AgRadioButton, index: number): void {\n        eJoinOperator.setDisabled(this.isReadOnly() || index > 0);\n    }\n\n    private resetInput(element: E): void {\n        this.setElementValue(element, null);\n        this.setElementDisabled(element, this.isReadOnly());\n    }\n\n    // puts model values into the UI\n    private setConditionIntoUi(model: M | null, position: number): void {\n        const values = this.mapValuesFromModel(model);\n        this.forEachInput((element, index, elPosition, _) => {\n            if (elPosition !== position) { return; }\n\n            this.setElementValue(element, values[index] != null ? values[index] : null);\n        });\n    }\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    private setValueFromFloatingFilter(value: V | null): void {\n        this.forEachInput((element, index, position, _) => {\n            this.setElementValue(element, index === 0 && position === 0 ? value : null, true);\n        });\n    }\n\n    private isDefaultOperator(operator: JoinOperator): boolean {\n        return operator === this.defaultJoinOperator;\n    }\n\n    private addChangedListeners(eType: AgSelect, position: number) {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        eType.onValueChange(this.listener);\n\n        this.forEachPositionInput(position, (element) => {\n            this.attachElementOnChange(element, this.listener);\n        });\n    }\n\n    /** returns true if the row passes the said condition */\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: M) {\n        const cellValue = this.getCellValue(params.node);\n        const values = this.mapValuesFromModel(filterModel);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);\n\n        const customFilterResult = this.evaluateCustomFilter(customFilterOption, values, cellValue);\n        if (customFilterResult != null) {\n            return customFilterResult;\n        }\n\n        if (cellValue == null) {\n            return this.evaluateNullValue(filterModel.type);\n        }\n\n        return this.evaluateNonNullValue(values, cellValue, filterModel, params);\n    }\n\n    protected evaluateCustomFilter(\n        customFilterOption: IFilterOptionDef | undefined,\n        values: Tuple<V>,\n        cellValue: V | null | undefined,\n    ): boolean | undefined {\n        if (customFilterOption == null) {\n            return;\n        }\n\n        const { predicate } = customFilterOption;\n        // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n        if (predicate != null && !values.some(v => v == null)) {\n            return predicate(values, cellValue);\n        }\n\n        // No custom filter invocation, indicate that to the caller.\n        return;\n    }\n\n    protected isBlank(cellValue: V) {\n        return cellValue == null ||\n            (typeof cellValue === 'string' && cellValue.trim().length === 0);\n    }\n\n    protected hasInvalidInputs(): boolean {\n        return false;\n    }\n}\n", "import { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { SimpleFilter, ISimpleFilterParams, ISimpleFilterModel, ISimpleFilterModelType, Tuple } from \"./simpleFilter\";\nimport { IFilterParams } from \"../../interfaces/iFilter\";\n\n/**\n * Parameters provided by the grid to the `init` method of a `ScalarFilter`.\n * Do not use in `colDef.filterParams` - see `IScalarFilterParams` instead.\n */\nexport type ScalarFilterParams<TData = any> = IScalarFilterParams & IFilterParams<TData>;\n\n/**\n * Common parameters in `colDef.filterParams` used by all scalar filters. Extended by the specific filter types.\n */\nexport interface IScalarFilterParams extends ISimpleFilterParams {\n    /** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */\n    inRangeInclusive?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */\n    includeBlanksInEquals?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */\n    includeBlanksInLessThan?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */\n    includeBlanksInGreaterThan?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */\n    includeBlanksInRange?: boolean;\n}\n\nexport interface Comparator<T> {\n    (left: T, right: T): number;\n}\n\nexport abstract class ScalarFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends SimpleFilter<M, V, E> {\n    private scalarFilterParams: ScalarFilterParams;\n\n    protected abstract comparator(): Comparator<V>;\n\n    protected setParams(params: ScalarFilterParams): void {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n    }\n\n    protected evaluateNullValue(filterType?: ISimpleFilterModelType | null) {\n        switch (filterType) {\n            case ScalarFilter.EQUALS:\n            case ScalarFilter.NOT_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInEquals) {\n                    return true;\n                }\n                break;\n\n            case ScalarFilter.GREATER_THAN:\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n                    return true;\n                }\n                break;\n\n            case ScalarFilter.LESS_THAN:\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInLessThan) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.IN_RANGE:\n                if (this.scalarFilterParams.includeBlanksInRange) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.BLANK:\n                return true;\n            case ScalarFilter.NOT_BLANK:\n                return false;\n        }\n\n        return false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<V>, cellValue: V, filterModel: M): boolean {\n        const comparator = this.comparator();\n        const compareResult = values[0] != null ? comparator(values[0]!, cellValue) : 0;\n\n        switch (filterModel.type) {\n            case ScalarFilter.EQUALS:\n                return compareResult === 0;\n\n            case ScalarFilter.NOT_EQUAL:\n                return compareResult !== 0;\n\n            case ScalarFilter.GREATER_THAN:\n                return compareResult > 0;\n\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                return compareResult >= 0;\n\n            case ScalarFilter.LESS_THAN:\n                return compareResult < 0;\n\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                return compareResult <= 0;\n\n            case ScalarFilter.IN_RANGE: {\n                const compareToResult = comparator(values[1]!, cellValue);\n\n                return this.scalarFilterParams.inRangeInclusive ?\n                    compareResult >= 0 && compareToResult <= 0 :\n                    compareResult > 0 && compareToResult < 0;\n            }\n\n            case ScalarFilter.BLANK:\n                return this.isBlank(cellValue);\n\n            case ScalarFilter.NOT_BLANK:\n                return !this.isBlank(cellValue);\n\n            default:\n                console.warn('AG Grid: Unexpected type of filter \"' + filterModel.type + '\", it looks like the filter was configured with incorrect Filter Options');\n                return true;\n        }\n    }\n}", "import { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { ISimpleFilterModel, SimpleFilter, SimpleFilterModelFormatter, Tuple } from '../simpleFilter';\nimport { Comparator, IScalarFilterParams, ScalarFilter } from '../scalarFilter';\nimport { serialiseDate, parseDateTimeFromString, dateToFormattedString } from '../../../utils/date';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { IFilterOptionDef, IFilterParams } from '../../../interfaces/iFilter';\nimport { LocaleService } from '../../../localeService';\nimport { OptionsFactory } from '../optionsFactory';\nimport { FILTER_LOCALE_TEXT } from '../../filterLocaleText';\n\n// The date filter model takes strings, although the filter actually works with dates. This is because a Date object\n// won't convert easily to JSON. When the model is used for doing the filtering, it's converted to a Date object.\nexport interface DateFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'date'` */\n    filterType?: 'date';\n    /**\n     * The date value(s) associated with the filter. The type is `string` and format is always\n     * `YYYY-MM-DD hh:mm:ss` e.g. 2019-05-24 00:00:00. Custom filters can have no values (hence both\n     * are optional). Range filter has two values (from and to).\n     */\n    dateFrom: string | null;\n    /**\n     * Range filter `to` date value.\n     */\n    dateTo: string | null;\n}\n\n/**\n * Parameters provided by the grid to the `init` method of a `DateFilter`.\n * Do not use in `colDef.filterParams` - see `IDateFilterParams` instead.\n */\nexport type DateFilterParams<TData = any> = IDateFilterParams & IFilterParams<TData>;\n\n/**\n * Parameters used in `colDef.filterParams` to configure a Date Filter (`agDateColumnFilter`).\n */\nexport interface IDateFilterParams extends IScalarFilterParams {\n    /** Required if the data for the column are not native JS `Date` objects. */\n    comparator?: IDateComparatorFunc;\n    /**\n     * Defines whether the grid uses the browser date picker or a plain text box.\n     *  - `true`: Force the browser date picker to be used.\n     *  - `false`: Force a plain text box to be used.\n     *\n     * If a date component is not provided, then the grid will use the browser date picker\n     * for all supported browsers and a plain text box for other browsers.\n     */\n    browserDatePicker?: boolean;\n    /**\n     * This is the minimum year that may be entered in a date field for the value to be considered valid. \n     * @default 1000\n     * */\n    minValidYear?: number;\n    /** This is the maximum year that may be entered in a date field for the value to be considered valid. Default is no restriction. */\n    maxValidYear?: number;\n    /**\n     * The minimum valid date that can be entered in the filter.\n     * It can be a Date object or a string in the format `YYYY-MM-DD`.\n     * If set, this will override `minValidYear` - the minimum valid year setting.\n     */\n    minValidDate?: Date | string;\n    /**\n     * The maximum valid date that can be entered in the filter.\n     * It can be a Date object or a string in the format `YYYY-MM-DD`.\n     * If set, this will override `maxValidYear` - the maximum valid year setting.\n     */\n    maxValidDate?: Date | string;\n    /**\n     * Defines the date format for the floating filter text when an `inRange` filter has been applied.\n     *\n     * @default YYYY-MM-DD\n     */\n     inRangeFloatingFilterDateFormat?: string;\n}\n\nexport interface IDateComparatorFunc {\n    (filterLocalDateAtMidnight: Date, cellValue: any): number;\n}\n\nconst DEFAULT_MIN_YEAR = 1000;\nconst DEFAULT_MAX_YEAR = Infinity;\n\nexport class DateFilterModelFormatter extends SimpleFilterModelFormatter {\n    constructor(\n        private dateFilterParams: DateFilterParams,\n        localeService: LocaleService,\n        optionsFactory: OptionsFactory\n    ) {\n        super(localeService, optionsFactory);\n    }\n\n    protected conditionToString(condition: DateFilterModel, options?: IFilterOptionDef): string {\n        const { type } = condition;\n        const { numberOfInputs } = options || {};\n        const isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n\n        const dateFrom = parseDateTimeFromString(condition.dateFrom);\n        const dateTo = parseDateTimeFromString(condition.dateTo);\n\n        const format = this.dateFilterParams.inRangeFloatingFilterDateFormat;\n        if (isRange) {\n            const formattedFrom = dateFrom !== null ? dateToFormattedString(dateFrom, format) : 'null';\n            const formattedTo = dateTo !== null ? dateToFormattedString(dateTo, format) : 'null';\n            return `${formattedFrom}-${formattedTo}`;\n        }\n\n        if (dateFrom != null) {\n            return dateToFormattedString(dateFrom, format);\n        }\n\n        // cater for when the type doesn't need a value\n        return `${type}`;\n    }\n\n    public updateParams(params: { dateFilterParams: DateFilterParams, optionsFactory: OptionsFactory }): void {\n        super.updateParams(params);\n        this.dateFilterParams = params.dateFilterParams;\n    }\n}\n\nexport class DateFilter extends ScalarFilter<DateFilterModel, Date, DateCompWrapper> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.IN_RANGE,\n        ScalarFilter.BLANK,\n        ScalarFilter.NOT_BLANK,\n    ];\n\n    private readonly eConditionPanelsFrom: HTMLElement[] = [];\n    private readonly eConditionPanelsTo: HTMLElement[] = [];\n\n    private readonly dateConditionFromComps: DateCompWrapper[] = [];\n    private readonly dateConditionToComps: DateCompWrapper[] = [];\n\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    private dateFilterParams: DateFilterParams;\n    private minValidYear: number = DEFAULT_MIN_YEAR;\n    private maxValidYear: number = DEFAULT_MAX_YEAR;\n    private minValidDate: Date | null = null;\n    private maxValidDate: Date | null = null;\n    private filterModelFormatter: DateFilterModelFormatter;\n\n    constructor() {\n        super('dateFilter');\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        super.afterGuiAttached(params);\n\n        this.dateConditionFromComps[0].afterGuiAttached(params);\n    }\n\n    protected mapValuesFromModel(filterModel: DateFilterModel | null): Tuple<Date> {\n        // unlike the other filters, we do two things here:\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\n        //    are in different locations in Date and Number filter models)\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\n        //\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\n        //       the model. When we recreate the date again here, it's without a timezone.\n        const { dateFrom, dateTo, type } = filterModel || {};\n        return [\n            dateFrom && parseDateTimeFromString(dateFrom) || null,\n            dateTo && parseDateTimeFromString(dateTo) || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected comparator(): Comparator<Date> {\n        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);\n    }\n\n    private defaultComparator(filterDate: Date, cellValue: any): number {\n        // The default comparator assumes that the cellValue is a date\n        const cellAsDate = cellValue as Date;\n\n        if (cellValue == null || cellAsDate < filterDate) { return -1; }\n        if (cellAsDate > filterDate) { return 1; }\n\n        return 0;\n    }\n\n    protected setParams(params: DateFilterParams): void {\n        this.dateFilterParams = params;\n\n        super.setParams(params);\n\n        const yearParser = (param: keyof DateFilterParams, fallback: number) => {\n            if (params[param] != null) {\n                if (!isNaN(params[param])) {\n                    return params[param] == null ? fallback : Number(params[param]);\n                } else {\n                    console.warn(`AG Grid: DateFilter ${param} is not a number`);\n                }\n            }\n\n            return fallback;\n        };\n\n        this.minValidYear = yearParser('minValidYear', DEFAULT_MIN_YEAR);\n        this.maxValidYear = yearParser('maxValidYear', DEFAULT_MAX_YEAR);\n\n        if (this.minValidYear > this.maxValidYear) {\n            console.warn(`AG Grid: DateFilter minValidYear should be <= maxValidYear`);\n        }\n\n        if (params.minValidDate) {\n            this.minValidDate = params.minValidDate instanceof Date ? params.minValidDate : parseDateTimeFromString(params.minValidDate);\n        } else {\n            this.minValidDate = null;\n        }\n\n        if (params.maxValidDate) {\n            this.maxValidDate = params.maxValidDate instanceof Date ? params.maxValidDate : parseDateTimeFromString(params.maxValidDate);\n        } else {\n            this.maxValidDate = null;\n        }\n\n        if (this.minValidDate && this.maxValidDate && this.minValidDate > this.maxValidDate) {\n            console.warn(`AG Grid: DateFilter minValidDate should be <= maxValidDate`);\n        }\n\n        this.filterModelFormatter = new DateFilterModelFormatter(this.dateFilterParams, this.localeService, this.optionsFactory);\n    }\n\n    createDateCompWrapper(element: HTMLElement): DateCompWrapper {\n        const dateCompWrapper = new DateCompWrapper(\n            this.getContext(),\n            this.userComponentFactory,\n            {\n                onDateChanged: () => this.onUiChanged(),\n                filterParams: this.dateFilterParams\n            },\n            element\n        );\n        this.addDestroyFunc(() => dateCompWrapper.destroy());\n        return dateCompWrapper;\n    }\n\n    protected setElementValue(element: DateCompWrapper, value: Date | null): void {\n        element.setDate(value);\n    }\n\n    protected setElementDisplayed(element: DateCompWrapper, displayed: boolean): void {\n        element.setDisplayed(displayed);\n    }\n\n    protected setElementDisabled(element: DateCompWrapper, disabled: boolean): void {\n        element.setDisabled(disabled);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueElement(): HTMLElement {\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n\n        this.createFromToElement(eCondition, this.eConditionPanelsFrom, this.dateConditionFromComps, 'from');\n        this.createFromToElement(eCondition, this.eConditionPanelsTo, this.dateConditionToComps, 'to');\n\n        return eCondition;\n    }\n\n    private createFromToElement(eCondition: HTMLElement, eConditionPanels: HTMLElement[], dateConditionComps: DateCompWrapper[], fromTo: string): void {\n        const eConditionPanel = document.createElement('div');\n        eConditionPanel.classList.add(`ag-filter-${fromTo}`);\n        eConditionPanel.classList.add(`ag-filter-date-${fromTo}`);\n        eConditionPanels.push(eConditionPanel);\n        eCondition.appendChild(eConditionPanel);\n        dateConditionComps.push(this.createDateCompWrapper(eConditionPanel));\n    }\n\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\n        this.removeDateComps(this.dateConditionFromComps, startPosition, deleteCount);\n        this.removeDateComps(this.dateConditionToComps, startPosition, deleteCount);\n        this.removeItems(this.eConditionPanelsFrom, startPosition, deleteCount);\n        this.removeItems(this.eConditionPanelsTo, startPosition, deleteCount);\n    }\n\n    protected removeDateComps(components: DateCompWrapper[], startPosition: number, deleteCount?: number): void {\n        const removedComponents = this.removeItems(components, startPosition, deleteCount);\n        removedComponents.forEach(comp => comp.destroy());\n    }\n    \n    private isValidDateValue(value: Date | null): boolean {\n        if (value === null) {\n            return false;\n        }\n\n        if (this.minValidDate) {\n            if (value < this.minValidDate) {\n                return false;\n            }\n        } else {\n            if (value.getUTCFullYear() < this.minValidYear) {\n                return false;\n            }\n        }\n\n        if (this.maxValidDate) {\n            if (value > this.maxValidDate) {\n                return false;\n            }\n        } else {\n            if (value.getUTCFullYear() > this.maxValidYear) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    protected isConditionUiComplete(position: number): boolean {\n        if (!super.isConditionUiComplete(position)) {\n            return false;\n        }\n\n        let valid = true;\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (elPosition !== position || !valid || index >= numberOfInputs) {\n                return;\n            }\n            valid = valid && this.isValidDateValue(element.getDate());\n        });\n\n        return valid;\n    }\n\n    protected areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean {\n        return aSimple.dateFrom === bSimple.dateFrom\n            && aSimple.dateTo === bSimple.dateTo\n            && aSimple.type === bSimple.type;\n        }\n\n    protected getFilterType(): 'date' {\n        return 'date';\n    }\n\n    protected createCondition(position: number): DateFilterModel {\n        const type = this.getConditionType(position);\n        const model: Partial<DateFilterModel> = {};\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.dateFrom = serialiseDate(values[0]);\n        }\n        if (values.length > 1) {\n            model.dateTo = serialiseDate(values[1]);\n        }\n\n        return {\n            dateFrom: null,\n            dateTo: null,\n            filterType: this.getFilterType(),\n            type,\n            ...model,\n        };\n    }\n\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.localeService.getLocaleTextFunc();\n        const placeholder = this.translate('dateFormatOoo');\n        const ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');\n\n        this.forEachInput((element) => {\n            element.setInputPlaceholder(placeholder);\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected getInputs(position: number): Tuple<DateCompWrapper> {\n        if (position >= this.dateConditionFromComps.length) {\n            return [null, null];\n        }\n        return [this.dateConditionFromComps[position], this.dateConditionToComps[position]];\n    }\n\n    protected getValues(position: number): Tuple<Date> {\n        const result: Tuple<Date> = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                result.push(element.getDate());\n            }\n        });\n\n        return result;\n    }\n\n    protected translate(key: keyof typeof FILTER_LOCALE_TEXT): string {\n        if (key === ScalarFilter.LESS_THAN) {\n            return super.translate('before');\n        }\n        if (key === ScalarFilter.GREATER_THAN) {\n            return super.translate('after');\n        }\n        return super.translate(key);\n    }\n\n    public getModelAsString(model: ISimpleFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\n    }\n}\n", "import { Component } from '../../../widgets/component';\nimport { IFloatingFilterComp, IFloatingFilterParams } from '../floatingFilter';\nimport { ProvidedFilterModel } from '../../../interfaces/iFilter';\nimport { ICombinedSimpleModel, ISimpleFilter, ISimpleFilterModel, SimpleFilter, SimpleFilterModelFormatter } from '../../provided/simpleFilter';\nimport { OptionsFactory } from '../../provided/optionsFactory';\nimport { ScalarFilterParams } from '../../provided/scalarFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { ProvidedFilterParams } from '../../provided/providedFilter';\n\nexport abstract class SimpleFloatingFilter extends Component implements IFloatingFilterComp<ISimpleFilter> {\n\n    // this method is on IFloatingFilterComp. because it's not implemented at this level, we have to\n    // define it as an abstract method. it gets implemented in sub classes.\n    public abstract onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void;\n\n    protected abstract getDefaultFilterOptions(): string[];\n    protected abstract setEditable(editable: boolean): void;\n\n    protected abstract getFilterModelFormatter(): SimpleFilterModelFormatter;\n\n    private lastType: string | null | undefined;\n\n    protected optionsFactory: OptionsFactory;\n\n    private readOnly: boolean;\n\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    protected isEventFromFloatingFilter(event: FilterChangedEvent): boolean | undefined {\n        return event && event.afterFloatingFilter;\n    }\n\n    protected isEventFromDataChange(event: FilterChangedEvent): boolean | undefined {\n        return event?.afterDataChange;\n    }\n\n    protected getLastType(): string | null | undefined {\n        return this.lastType;\n    }\n\n    protected isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    protected setLastTypeFromModel(model: ProvidedFilterModel): void {\n        // if no model provided by the parent filter use default\n        if (!model) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n            return;\n        }\n\n        const isCombined = (model as any).operator;\n\n        let condition: ISimpleFilterModel;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\n            condition = combinedModel.conditions![0];\n        } else {\n            condition = model as ISimpleFilterModel;\n        }\n\n        this.lastType = condition.type;\n    }\n\n    protected canWeEditAfterModelFromParentFilter(model: ProvidedFilterModel): boolean {\n        if (!model) {\n            // if no model, then we can edit as long as the lastType is something we can edit, as this\n            // is the type we will provide to the parent filter if the user decides to use the floating filter.\n            return this.isTypeEditable(this.lastType);\n        }\n\n        // never allow editing if the filter is combined (ie has two parts)\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            return false;\n        }\n\n        const simpleModel = model as ISimpleFilterModel;\n\n        return this.isTypeEditable(simpleModel.type);\n    }\n\n    public init(params: IFloatingFilterParams): void {\n       this.setSimpleParams(params, false);\n    }\n\n    private setSimpleParams(params: IFloatingFilterParams, update: boolean = true): void {\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params.filterParams as ScalarFilterParams, this.getDefaultFilterOptions());\n\n        // Initial call\n        if (!update) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n        }\n\n        // readOnly is a property of ProvidedFilterParams - we need to find a better (type-safe)\n        // way to support reading this in the future.\n        this.readOnly = !!(params.filterParams as ProvidedFilterParams).readOnly;\n\n        // we are editable if:\n        // 1) there is a type (user has configured filter wrong if not type)\n        //  AND\n        // 2) the default type is not 'inRange'\n        const editable = this.isTypeEditable(this.optionsFactory.getDefaultOption());\n        this.setEditable(editable);\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.setSimpleParams(params);\n    }\n\n    private doesFilterHaveSingleInput(filterType: string) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        const { numberOfInputs } = customFilterOption || {};\n        return numberOfInputs == null || numberOfInputs == 1;\n    }\n\n    private isTypeEditable(type?: string | null): boolean {\n        const uneditableTypes: string[] = [\n            SimpleFilter.IN_RANGE, SimpleFilter.EMPTY, SimpleFilter.BLANK, SimpleFilter.NOT_BLANK,\n        ];\n        return !!type &&\n            !this.isReadOnly() &&\n            this.doesFilterHaveSingleInput(type) &&\n            uneditableTypes.indexOf(type) < 0;\n    }\n}\n", "import { DateFilter, DateFilterModel, DateFilterModelFormatter, DateFilterParams } from './dateFilter';\nimport { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { IDateParams } from '../../../rendering/dateComponent';\nimport { IFloatingFilterParams } from '../../floating/floatingFilter';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { ISimpleFilterModel, SimpleFilterModelFormatter } from '../simpleFilter';\nimport { SimpleFloatingFilter } from '../../floating/provided/simpleFloatingFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { ProvidedFilter } from '../providedFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { setDisplayed } from '../../../utils/dom';\nimport { parseDateTimeFromString, serialiseDate } from '../../../utils/date';\nimport { debounce } from '../../../utils/function';\nimport { WithoutGridCommon } from '../../../interfaces/iCommon';\n\nexport class DateFloatingFilter extends SimpleFloatingFilter {\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eReadOnlyText') private readonly eReadOnlyText: AgInputTextField;\n    @RefSelector('eDateWrapper') private readonly eDateWrapper: HTMLInputElement;\n\n    private dateComp: DateCompWrapper;\n    private params: IFloatingFilterParams<DateFilter>;\n    private filterParams: DateFilterParams;\n    private filterModelFormatter: DateFilterModelFormatter;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div ref=\"eDateWrapper\" style=\"display: flex;\"></div>\n            </div>`);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    public init(params: IFloatingFilterParams<DateFilter>): void {\n        super.init(params);\n        this.params = params;\n        this.filterParams = params.filterParams;\n\n        this.createDateComponent();\n        this.filterModelFormatter = new DateFilterModelFormatter(this.filterParams, this.localeService, this.optionsFactory);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eReadOnlyText\n            .setDisabled(true)\n            .setInputAriaLabel(translate('ariaDateFilterInput', 'Date Filter Input'));\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams<DateFilter>): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams<DateFilter>): void {\n        super.refresh(params);\n        this.params = params;\n        this.filterParams = params.filterParams;\n\n        this.updateDateComponent();\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory, dateFilterParams: this.filterParams })\n        this.updateCompOnModelChange(params.currentParentModel());\n    }\n\n    private updateCompOnModelChange(model: any): void {\n        // Update the read-only text field\n        const allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model);\n        this.setEditable(allowEditing);\n\n        if (allowEditing) {\n            if (model) {\n                const dateModel = model as DateFilterModel;\n                this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));\n            } else {\n                this.dateComp.setDate(null);\n            }\n\n            this.eReadOnlyText.setValue('');\n        } else {\n            this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(model));\n            this.dateComp.setDate(null);\n        }\n    }\n\n    protected setEditable(editable: boolean): void {\n        setDisplayed(this.eDateWrapper, editable);\n        setDisplayed(this.eReadOnlyText.getGui(), !editable);\n    }\n\n    public onParentModelChanged(model: ISimpleFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing.\n        // This is similar for data changes, which don't affect provided date floating filters\n        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) { return; }\n\n        super.setLastTypeFromModel(model);\n        this.updateCompOnModelChange(model);\n    }\n\n    private onDateChanged(): void {\n        const filterValueDate = this.dateComp.getDate();\n        const filterValueText = serialiseDate(filterValueDate);\n\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                const date = parseDateTimeFromString(filterValueText);\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, date);\n            }\n        });\n    }\n\n    private getDateComponentParams(): WithoutGridCommon<IDateParams> {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n        return {\n            onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),\n            filterParams: this.params.column.getColDef().filterParams\n        };\n    }\n\n    private createDateComponent(): void {\n        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, this.getDateComponentParams(), this.eDateWrapper);\n\n        this.addDestroyFunc(() => this.dateComp.destroy());\n    }\n\n    private updateDateComponent(): void {\n        const params = this.gridOptionsService.addGridCommonParams(this.getDateComponentParams());\n        this.dateComp.updateParams(params);\n    }\n\n    protected getFilterModelFormatter(): SimpleFilterModelFormatter {\n        return this.filterModelFormatter;\n    }\n}\n", "import { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Component } from '../../../widgets/component';\nimport { IDateComp, IDateParams } from '../../../rendering/dateComponent';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { serialiseDate, parseDateTimeFromString, dateToFormattedString } from '../../../utils/date';\nimport { getSafariVersion, isBrowserChrome, isBrowserFirefox, isBrowserSafari } from '../../../utils/browser';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { warnOnce } from '../../../utils/function';\n\nexport class DefaultDateComponent extends Component implements IDateComp {\n    @RefSelector('eDateInput') private readonly eDateInput: AgInputTextField;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>`\n        );\n    }\n\n    private params: IDateParams;\n    private usingSafariDatePicker: boolean;\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IDateParams): void {\n        this.params = params;\n        this.setParams(params);\n\n        const eDocument = this.gridOptionsService.getDocument();\n        const inputElement = this.eDateInput.getInputElement();\n\n        // ensures that the input element is focussed when a clear button is clicked,\n        // unless using safari as there is no clear button and focus does not work properly\n        this.addManagedListener(inputElement, 'mousedown', () => {\n            if (this.eDateInput.isDisabled() || this.usingSafariDatePicker) { return; }\n            inputElement.focus();\n        });\n        \n        this.addManagedListener(inputElement, 'input', e => {\n            if (e.target !== eDocument.activeElement) { return; }\n            if (this.eDateInput.isDisabled()) { return; }\n            \n            this.params.onDateChanged();\n        });\n        \n    }\n\n    private setParams(params: IDateParams): void {\n        const inputElement = this.eDateInput.getInputElement();\n\n        const shouldUseBrowserDatePicker = this.shouldUseBrowserDatePicker(params);\n        this.usingSafariDatePicker = shouldUseBrowserDatePicker && isBrowserSafari();\n\n        inputElement.type = shouldUseBrowserDatePicker ? 'date' : 'text';\n\n        const {\n            minValidYear,\n            maxValidYear,\n            minValidDate,\n            maxValidDate,\n        } = params.filterParams || {};\n\n        if (minValidDate && minValidYear) {\n            warnOnce('DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.');\n        }\n\n        if (maxValidDate && maxValidYear) {\n            warnOnce('DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.');\n        }\n\n        if (minValidDate && maxValidDate) {\n            const [parsedMinValidDate, parsedMaxValidDate] = [minValidDate, maxValidDate]\n                .map(v => v instanceof Date ? v : parseDateTimeFromString(v));\n\n            if (parsedMinValidDate && parsedMaxValidDate && parsedMinValidDate.getTime() > parsedMaxValidDate.getTime()) {\n                warnOnce('DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.');\n            }\n        }\n\n        if (minValidDate) {\n            if (minValidDate instanceof Date) {\n                inputElement.min = dateToFormattedString(minValidDate);\n            } else {\n                inputElement.min = minValidDate;\n            }\n        } else {\n            if (minValidYear) {\n                inputElement.min = `${minValidYear}-01-01`;\n            }\n        }\n\n        if (maxValidDate) {\n            if (maxValidDate instanceof Date) {\n                inputElement.max = dateToFormattedString(maxValidDate);\n            } else {\n                inputElement.max = maxValidDate;\n            }\n        } else {\n            if (maxValidYear) {\n                inputElement.max = `${maxValidYear}-12-31`;\n            }\n        }\n    }\n\n    public onParamsUpdated(params: IDateParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IDateParams): void {\n        this.params = params;\n        this.setParams(params);\n    }\n\n    public getDate(): Date | null {\n        return parseDateTimeFromString(this.eDateInput.getValue());\n    }\n\n    public setDate(date: Date): void {\n        this.eDateInput.setValue(serialiseDate(date, false));\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        this.eDateInput.setInputPlaceholder(placeholder);\n    }\n\n    public setDisabled(disabled: boolean): void {\n        this.eDateInput.setDisabled(disabled);\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!params || !params.suppressFocus) {\n            this.eDateInput.getInputElement().focus();\n        }\n    }\n\n    private shouldUseBrowserDatePicker(params: IDateParams): boolean {\n        if (params.filterParams && params.filterParams.browserDatePicker != null) {\n            return params.filterParams.browserDatePicker;\n        }\n\n        return isBrowserChrome() || isBrowserFirefox() || (isBrowserSafari() && getSafariVersion() >= 14.1);\n    }\n}\n", "import { AgAbstractInputField, AgInputFieldParams } from './agAbstractInputField';\nimport { exists } from '../utils/generic';\nimport { isEventFromPrintableCharacter } from '../utils/keyboard';\n\nexport interface AgInputTextFieldParams extends AgInputFieldParams {\n    allowedCharPattern?: string;\n}\n\nexport class AgInputTextField<TConfig extends AgInputTextFieldParams = AgInputTextFieldParams> extends AgAbstractInputField<HTMLInputElement, string, TConfig> {\n    constructor(config?: TConfig, className = 'ag-text-field', inputType = 'text') {\n        super(config, className, inputType);\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        if (this.config.allowedCharPattern) {\n            this.preventDisallowedCharacters();\n        }\n    }\n\n    public setValue(value?: string | null, silent?: boolean): this {\n        // update the input before we call super.setValue, so it's updated before the value changed event is fired\n        if (this.eInput.value !== value) {\n            this.eInput.value = exists(value) ? value : '';\n        }\n\n        return super.setValue(value, silent);\n    }\n\n    /** Used to set an initial value into the input without necessarily setting `this.value` or triggering events (e.g. to set an invalid value) */\n    public setStartValue(value?: string | null): void {\n        this.setValue(value, true);\n    }\n\n    private preventDisallowedCharacters(): void {\n        const pattern = new RegExp(`[${this.config.allowedCharPattern}]`);\n\n        const preventCharacters = (event: KeyboardEvent) => {\n            if (!isEventFromPrintableCharacter(event)) { return; }\n\n            if (event.key && !pattern.test(event.key)) {\n                event.preventDefault();\n            }\n        };\n\n        this.addManagedListener(this.eInput, 'keydown', preventCharacters);\n\n        this.addManagedListener(this.eInput, 'paste', (e: ClipboardEvent) => {\n            const text = e.clipboardData?.getData('text');\n\n            if (text && text.split('').some((c: string) => !pattern.test(c))) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n", "import { AgInputTextField, AgInputTextFieldParams } from \"./agInputTextField\";\nimport { addOrRemoveAttribute } from '../utils/dom';\nimport { exists } from \"../utils/generic\";\n\nexport interface AgInputNumberFieldParams extends AgInputTextFieldParams {\n    precision?: number;\n    step?: number;\n    min?: number;\n    max?: number;\n}\n\nexport class AgInputNumberField extends AgInputTextField<AgInputNumberFieldParams> {\n    private precision?: number;\n    private step?: number;\n    private min?: number;\n    private max?: number;\n\n    constructor(config?: AgInputNumberFieldParams) {\n        super(config, 'ag-number-field', 'number');\n    }\n\n    postConstruct() {\n        super.postConstruct();\n        this.addManagedListener(this.eInput, 'blur', () => {\n            const floatedValue = parseFloat(this.eInput.value);\n            const value = isNaN(floatedValue) ? '' : this.normalizeValue(floatedValue.toString());\n\n            if (this.value !== value) {\n                this.setValue(value);\n            }\n        });\n\n        this.addManagedListener(this.eInput, 'wheel', this.onWheel.bind(this));\n\n        this.eInput.step = 'any';\n\n        const { precision, min, max, step } = this.config;\n        if (typeof precision === 'number') this.setPrecision(precision);\n        if (typeof min === 'number') this.setMin(min);\n        if (typeof max === 'number') this.setMax(max);\n        if (typeof step === 'number') this.setStep(step);\n    }\n\n    private onWheel(e: WheelEvent) {\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\n        if (document.activeElement === this.eInput) {\n            e.preventDefault();\n        }\n    }\n\n    public normalizeValue(value: string): string {\n        if (value === '') { return ''; }\n\n        if (this.precision != null) {\n            value = this.adjustPrecision(value);\n        }\n\n        const val = parseFloat(value);\n\n        if (this.min != null && val < this.min) {\n            value = this.min.toString();\n        } else if (this.max != null && val > this.max) {\n            value = this.max.toString();\n        }\n\n        return value;\n    }\n\n    private adjustPrecision(value: string, isScientificNotation?: boolean): string {\n        if (this.precision == null) {\n            return value;\n        }\n        if (isScientificNotation) {\n            const floatString = parseFloat(value).toFixed(this.precision);\n            return parseFloat(floatString).toString();\n        }\n\n        // can't use toFixed here because we don't want to round up\n        const parts = String(value).split('.');\n        if (parts.length > 1) {\n            if (parts[1].length <= this.precision) {\n                return value;\n            } else if (this.precision > 0) {\n                return `${parts[0]}.${parts[1].slice(0, this.precision)}`;\n            }\n        }\n        return parts[0];\n    }\n\n    public setMin(min: number | undefined): this {\n        if (this.min === min) {\n            return this;\n        }\n\n        this.min = min;\n\n        addOrRemoveAttribute(this.eInput, 'min', min);\n\n        return this;\n    }\n\n    public setMax(max: number | undefined): this {\n        if (this.max === max) {\n            return this;\n        }\n\n        this.max = max;\n\n        addOrRemoveAttribute(this.eInput, 'max', max);\n\n        return this;\n    }\n\n    public setPrecision(precision: number): this {\n        this.precision = precision;\n\n        return this;\n    }\n\n    public setStep(step?: number): this {\n        if (this.step === step) {\n            return this;\n        }\n\n        this.step = step;\n\n        addOrRemoveAttribute(this.eInput, 'step', step);\n\n        return this;\n    }\n\n    public setValue(value?: string | null, silent?: boolean): this {\n        return this.setValueOrInputValue(v => super.setValue(v, silent), () => this, value);\n    }\n\n    public setStartValue(value?: string | null): void {\n        return this.setValueOrInputValue<void>(\n            v => super.setValue(v, true),\n            v => { this.eInput.value = v; },\n            value\n        );\n    }\n\n    private setValueOrInputValue<T>(\n        setValueFunc: (value?: string | null) => T,\n        setInputValueOnlyFunc: (value: string) => T,\n        value?: string | null\n    ): T {\n        if (exists(value)) {\n            // need to maintain the scientific notation format whilst typing (e.g. 1e10)\n            let setInputValueOnly = this.isScientificNotation(value);\n            if (setInputValueOnly && this.eInput.validity.valid) {\n                return setValueFunc(value);\n            }\n            if (!setInputValueOnly) {\n                value = this.adjustPrecision(value);\n                const normalizedValue = this.normalizeValue(value);\n                // outside of valid range\n                setInputValueOnly = value != normalizedValue;\n            }\n\n            if (setInputValueOnly) { return setInputValueOnlyFunc(value); }\n        }\n\n        return setValueFunc(value);\n    }\n\n    public getValue(): string | null | undefined {\n        if (!this.eInput.validity.valid) {\n            return undefined;\n        }\n        const inputValue = this.eInput.value;\n        if (this.isScientificNotation(inputValue)) {\n            return this.adjustPrecision(inputValue, true);\n        }\n        return super.getValue();\n    }\n\n    private isScientificNotation(value: string): boolean {\n        return typeof value === 'string' && value.includes('e');\n    }\n}\n", "import { ISimpleFilterModel, SimpleFilter, SimpleFilterModelFormatter, Tuple } from '../simpleFilter';\nimport { ScalarFilter, Comparator, IScalarFilterParams } from '../scalarFilter';\nimport { makeNull } from '../../../utils/generic';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { IFilterOptionDef, IFilterParams } from '../../../interfaces/iFilter';\nimport { setAriaRole } from '../../../utils/aria';\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField';\n\nexport interface NumberFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'number'` */\n    filterType?: 'number';\n    /**\n     * The number value(s) associated with the filter.\n     * Custom filters can have no values (hence both are optional).\n     * Range filter has two values (from and to).\n     */\n    filter?: number | null;\n    /**\n     * Range filter `to` value.\n     */\n    filterTo?: number | null;\n}\n\n/**\n * Parameters provided by the grid to the `init` method of a `NumberFilter`.\n * Do not use in `colDef.filterParams` - see `INumberFilterParams` instead.\n */\nexport type NumberFilterParams<TData = any> = INumberFilterParams & IFilterParams<TData>;\n\n/**\n * Parameters used in `colDef.filterParams` to configure a Number Filter (`agNumberColumnFilter`).\n */\nexport interface INumberFilterParams extends IScalarFilterParams {\n    /**\n     * When specified, the input field will be of type `text`, and this will be used as a regex of all the characters that are allowed to be typed.\n     * This will be compared against any typed character and prevent the character from appearing in the input if it does not match.\n     */\n    allowedCharPattern?: string;\n    /**\n     * Typically used alongside `allowedCharPattern`, this provides a custom parser to convert the value entered in the filter inputs into a number that can be used for comparisons.\n     */\n    numberParser?: (text: string | null) => number | null;\n    /**\n     * Typically used alongside `allowedCharPattern`, this provides a custom formatter to convert the number value in the filter model\n     * into a string to be used in the filter input. This is the inverse of the `numberParser`.\n     */\n    numberFormatter?: (value: number | null) => string | null;\n}\n\nexport class NumberFilterModelFormatter extends SimpleFilterModelFormatter<number> {\n    protected conditionToString(condition: NumberFilterModel, options?: IFilterOptionDef): string {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n\n        if (isRange) {\n            return `${this.formatValue(condition.filter)}-${this.formatValue(condition.filterTo)}`;\n        }\n\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return this.formatValue(condition.filter);\n        }\n\n        return `${condition.type}`;\n    }\n}\n\nexport function getAllowedCharPattern(filterParams?: NumberFilterParams): string | null {\n    const { allowedCharPattern } = filterParams ?? {};\n\n    return allowedCharPattern ?? null;\n}\n\nexport class NumberFilter extends ScalarFilter<NumberFilterModel, number> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.GREATER_THAN_OR_EQUAL,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.LESS_THAN_OR_EQUAL,\n        ScalarFilter.IN_RANGE,\n        ScalarFilter.BLANK,\n        ScalarFilter.NOT_BLANK,\n    ];\n\n    private readonly eValuesFrom: (AgInputTextField | AgInputNumberField)[] = [];\n    private readonly eValuesTo: (AgInputTextField | AgInputNumberField)[] = [];\n\n    private numberFilterParams: NumberFilterParams;\n    private filterModelFormatter: SimpleFilterModelFormatter;\n\n    constructor() {\n        super('numberFilter');\n    }\n\n    refresh(params: NumberFilterParams): boolean {\n        if (this.numberFilterParams.allowedCharPattern !== params.allowedCharPattern) {\n            return false;\n        }\n\n        return super.refresh(params);\n    }\n\n    protected mapValuesFromModel(filterModel: NumberFilterModel | null): Tuple<number> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            this.processValue(filter),\n            this.processValue(filterTo),\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected comparator(): Comparator<number> {\n        return (left: number, right: number): number => {\n            if (left === right) { return 0; }\n\n            return left < right ? 1 : -1;\n        };\n    }\n\n    protected setParams(params: NumberFilterParams): void {\n        this.numberFilterParams = params;\n\n        super.setParams(params);\n        this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, this.numberFilterParams.numberFormatter);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected setElementValue(element: AgInputTextField | AgInputNumberField, value: number | null, fromFloatingFilter?: boolean): void {\n        // values from floating filter are directly from the input, not from the model\n        const valueToSet = !fromFloatingFilter && this.numberFilterParams.numberFormatter\n            ? this.numberFilterParams.numberFormatter(value ?? null)\n            : value;\n        super.setElementValue(element, valueToSet as any);\n    }\n\n    protected createValueElement(): HTMLElement {\n        const allowedCharPattern = getAllowedCharPattern(this.numberFilterParams);\n\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        setAriaRole(eCondition, 'presentation');\n\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from', allowedCharPattern);\n        this.createFromToElement(eCondition, this.eValuesTo, 'to', allowedCharPattern);\n\n        return eCondition;\n    }\n\n    private createFromToElement(eCondition: HTMLElement, eValues: (AgInputTextField | AgInputNumberField)[], fromTo: string, allowedCharPattern: string | null): void {\n        const eValue = this.createManagedBean(allowedCharPattern ? new AgInputTextField({ allowedCharPattern }) : new AgInputNumberField());\n        eValue.addCssClass(`ag-filter-${fromTo}`);\n        eValue.addCssClass('ag-filter-filter');\n        eValues.push(eValue);\n        eCondition.appendChild(eValue.getGui());\n    }\n\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\n        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);\n        this.removeComponents(this.eValuesTo, startPosition, deleteCount);\n    }\n\n    protected getValues(position: number): Tuple<number> {\n        const result: Tuple<number> = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                result.push(this.processValue(this.stringToFloat(element.getValue())));\n            }\n        });\n\n        return result;\n    }\n\n    protected areSimpleModelsEqual(aSimple: NumberFilterModel, bSimple: NumberFilterModel): boolean {\n        return aSimple.filter === bSimple.filter\n            && aSimple.filterTo === bSimple.filterTo\n            && aSimple.type === bSimple.type;\n    }\n\n    protected getFilterType(): 'number' {\n        return 'number';\n    }\n\n    private processValue(value?: number | null): number | null {\n        if (value == null) {\n            return null;\n        }\n        return isNaN(value) ? null : value;\n    }\n\n    private stringToFloat(value?: string | number | null): number | null {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        let filterText = makeNull(value);\n\n        if (filterText != null && filterText.trim() === '') {\n            filterText = null;\n        }\n\n        if (this.numberFilterParams.numberParser) {\n            return this.numberFilterParams.numberParser(filterText);\n        }\n\n        return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);\n    }\n\n    protected createCondition(position: number): NumberFilterModel {\n        const type = this.getConditionType(position);\n        const model: NumberFilterModel = {\n            filterType: this.getFilterType(),\n            type\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getInputs(position: number): Tuple<AgInputTextField | AgInputNumberField> {\n        if (position >= this.eValuesFrom.length) {\n            return [null, null];\n        }\n        return [this.eValuesFrom[position], this.eValuesTo[position]];\n    }\n\n    public getModelAsString(model: ISimpleFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\n    }\n\n    protected hasInvalidInputs(): boolean {\n        let invalidInputs = false;\n        this.forEachInput(element => {\n            if (!element.getInputElement().validity.valid) {\n                invalidInputs = true;\n                return;\n            }\n        });\n        return invalidInputs;\n    }\n}\n", "import {\n    SimpleFilter,\n    ISimpleFilterParams,\n    ISimpleFilterModel,\n    ISimpleFilterModelType,\n    Tuple,\n    SimpleFilterModelFormatter,\n} from '../simpleFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { makeNull } from '../../../utils/generic';\nimport { _ } from '../../../utils';\nimport { BaseColDefParams } from '../../../entities/colDef';\nimport { IDoesFilterPassParams, IFilterOptionDef, IFilterParams } from '../../../interfaces/iFilter';\nimport { setAriaRole } from '../../../utils/aria';\n\nexport interface TextFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'text'` */\n    filterType?: 'text';\n    /**\n     * The text value associated with the filter.\n     * It's optional as custom filters may not have a text value.\n     */\n    filter?: string | null;\n    /**\n     * The 2nd text value associated with the filter, if supported.\n     */\n    filterTo?: string | null;\n}\n\nexport interface TextMatcherParams extends BaseColDefParams {\n    /**\n     * The applicable filter option being tested.\n     * One of: `equals`, `notEqual`, `contains`, `notContains`, `startsWith`, `endsWith`.\n     */\n    filterOption: string | null | undefined;\n    /**\n     * The value about to be filtered.\n     * If this column has a value getter, this value will be coming from the value getter,\n     * otherwise it is the raw value injected into the grid.\n     * If a `textFormatter` is provided, this value will have been formatted.\n     * If no `textFormatter` is provided and `caseSensitive` is not provided or is `false`,\n     * the value will have been converted to lower case.\n     */\n    value: any;\n    /**\n     * The value to filter by.\n     * If a `textFormatter` is provided, this value will have been formatted.\n     * If no `textFormatter` is provided and `caseSensitive` is not provided or is `false`,\n     * the value will have been converted to lower case.\n     */\n    filterText: string | null;\n    textFormatter?: TextFormatter;\n}\n\nexport interface TextMatcher {\n    (params: TextMatcherParams): boolean;\n}\n\nexport interface TextFormatter {\n    (from?: string | null): string | null;\n}\n\n/**\n * Parameters provided by the grid to the `init` method of a `TextFilter`.\n * Do not use in `colDef.filterParams` - see `ITextFilterParams` instead.\n */\nexport type TextFilterParams<TData = any> = ITextFilterParams & IFilterParams<TData>;\n\n/**\n * Parameters used in `colDef.filterParams` to configure a  Text Filter (`agTextColumnFilter`).\n */\nexport interface ITextFilterParams extends ISimpleFilterParams {\n    /**\n     * Used to override how to filter based on the user input.\n     * Returns `true` if the value passes the filter, otherwise `false`.\n     */\n    textMatcher?: TextMatcher;\n    /**\n     * By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n     * @default false\n     */\n    caseSensitive?: boolean;\n    /**\n     * Formats the text before applying the filter compare logic.\n     * Useful if you want to substitute accented characters, for example.\n     */\n    textFormatter?: (from: string) => string | null;\n    /**\n     * If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n     * If only whitespace is entered, it will be left as-is.\n     * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n     * @default false\n     */\n    trimInput?: boolean;\n}\n\nexport class TextFilterModelFormatter extends SimpleFilterModelFormatter {\n    protected conditionToString(condition: TextFilterModel, options?: IFilterOptionDef): string {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n\n        if (isRange) {\n            return `${condition.filter}-${condition.filterTo}`;\n        }\n\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return `${condition.filter}`;\n        }\n\n        return `${condition.type}`;\n    }\n}\n\nexport class TextFilter extends SimpleFilter<TextFilterModel, string> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        SimpleFilter.CONTAINS,\n        SimpleFilter.NOT_CONTAINS,\n        SimpleFilter.EQUALS,\n        SimpleFilter.NOT_EQUAL,\n        SimpleFilter.STARTS_WITH,\n        SimpleFilter.ENDS_WITH,\n        SimpleFilter.BLANK,\n        SimpleFilter.NOT_BLANK,\n    ];\n\n    static DEFAULT_FORMATTER: TextFormatter = (from: string) => from;\n\n    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter = (from: string) => from == null ? null : from.toString().toLowerCase();\n\n    static DEFAULT_MATCHER: TextMatcher = ({filterOption, value, filterText}) => {\n        if (filterText == null) { return false; }\n\n        switch (filterOption) {\n            case TextFilter.CONTAINS:\n                return value.indexOf(filterText) >= 0;\n            case TextFilter.NOT_CONTAINS:\n                return value.indexOf(filterText) < 0;\n            case TextFilter.EQUALS:\n                return value === filterText;\n            case TextFilter.NOT_EQUAL:\n                return value != filterText;\n            case TextFilter.STARTS_WITH:\n                return value.indexOf(filterText) === 0;\n            case TextFilter.ENDS_WITH:\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === (value.length - filterText.length);\n            default:\n                return false;\n        }\n    }\n\n    private readonly eValuesFrom: AgInputTextField[] = [];\n    private readonly eValuesTo: AgInputTextField[] = [];\n\n    private matcher: TextMatcher;\n    private formatter: TextFormatter;\n\n    private textFilterParams: TextFilterParams;\n    private filterModelFormatter: TextFilterModelFormatter;\n\n    constructor() {\n        super('textFilter');\n    }\n\n    public static trimInput(value?: string | null): string | null | undefined {\n        const trimmedInput = value && value.trim();\n\n        // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n        return trimmedInput === '' ? value : trimmedInput;\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected setParams(params: TextFilterParams): void {\n        this.textFilterParams = params;\n\n        super.setParams(params);\n\n        this.matcher = this.getTextMatcher();\n        this.formatter = this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);\n    }\n\n    private getTextMatcher(): TextMatcher {\n        const legacyComparator = (this.textFilterParams as any).textCustomComparator;\n        if (legacyComparator) {\n            _.warnOnce('textCustomComparator is deprecated, use textMatcher instead.');\n            return ({ filterOption, value, filterText }) => legacyComparator(filterOption, value, filterText);\n        }\n        return this.textFilterParams.textMatcher || TextFilter.DEFAULT_MATCHER\n    }\n\n    protected createCondition(position: number): TextFilterModel {\n        const type = this.getConditionType(position);\n\n        const model: TextFilterModel = {\n            filterType: this.getFilterType(),\n            type,\n        };\n\n        const values = this.getValuesWithSideEffects(position, true);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getFilterType(): 'text' {\n        return 'text';\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return aSimple.filter === bSimple.filter &&\n            aSimple.filterTo === bSimple.filterTo &&\n            aSimple.type === bSimple.type;\n    }\n\n    protected getInputs(position: number): Tuple<AgInputTextField> {\n        if (position >= this.eValuesFrom.length) {\n            return [null, null];\n        }\n        return [this.eValuesFrom[position], this.eValuesTo[position]];\n    }\n\n    protected getValues(position: number): Tuple<string> {\n        return this.getValuesWithSideEffects(position, false);\n    }\n\n    private getValuesWithSideEffects(position: number, applySideEffects: boolean): Tuple<string> {\n        const result: Tuple<string> = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                let value = makeNull(element.getValue());\n                if (applySideEffects && this.textFilterParams.trimInput) {\n                    value = TextFilter.trimInput(value) ?? null;\n                    element.setValue(value, true); // ensure clean value is visible\n                }\n                result.push(value);\n            }\n        });\n\n        return result;\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueElement(): HTMLElement {\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        setAriaRole(eCondition, 'presentation');\n\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from');\n        this.createFromToElement(eCondition, this.eValuesTo, 'to');\n\n        return eCondition;\n    }\n\n    private createFromToElement(eCondition: HTMLElement, eValues: AgInputTextField[], fromTo: string): void {\n        const eValue = this.createManagedBean(new AgInputTextField());\n        eValue.addCssClass(`ag-filter-${fromTo}`);\n        eValue.addCssClass('ag-filter-filter');\n        eValues.push(eValue);\n        eCondition.appendChild(eValue.getGui());\n    }\n\n    protected removeValueElements(startPosition: number, deleteCount?: number): void {\n        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);\n        this.removeComponents(this.eValuesTo, startPosition, deleteCount);\n    }\n\n    protected mapValuesFromModel(filterModel: TextFilterModel | null): Tuple<string> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter || null,\n            filterTo || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected evaluateNullValue(filterType: ISimpleFilterModelType | null) {\n        const filterTypesAllowNulls = [\n            SimpleFilter.NOT_EQUAL, SimpleFilter.NOT_CONTAINS, SimpleFilter.BLANK,\n        ];\n\n        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<string>, cellValue: string, filterModel: TextFilterModel, params: IDoesFilterPassParams): boolean {\n        const formattedValues = values.map(v => this.formatter(v)) || [];\n        const cellValueFormatted = this.formatter(cellValue);\n        const {api, colDef, column, columnApi, context, textFormatter} = this.textFilterParams;\n\n        if (filterModel.type === SimpleFilter.BLANK) {\n            return this.isBlank(cellValue);\n        } else if (filterModel.type === SimpleFilter.NOT_BLANK) {\n            return !this.isBlank(cellValue);\n        }\n\n        const matcherParams = {\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            node: params.node,\n            data: params.data,\n            filterOption: filterModel.type,\n            value: cellValueFormatted,\n            textFormatter,\n        };\n\n        return formattedValues.some(v => this.matcher({ ...matcherParams, filterText: v }));\n    }\n\n    public getModelAsString(model: ISimpleFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model) ?? '';\n    }\n}\n", "import { IFloatingFilterParams } from '../floatingFilter';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { debounce } from '../../../utils/function';\nimport { ProvidedFilter } from '../../provided/providedFilter';\nimport { PostConstruct, Autowired } from '../../../context/context';\nimport { SimpleFloatingFilter } from './simpleFloatingFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { AgInputTextField, AgInputTextFieldParams } from '../../../widgets/agInputTextField';\nimport { ColumnModel } from '../../../columns/columnModel';\nimport { KeyCode } from '../../../constants/keyCode';\nimport { TextFilterParams, TextFilter, TextFilterModel } from '../../provided/text/textFilter';\nimport { NumberFilter, NumberFilterModel } from '../../provided/number/numberFilter';\nimport { BeanStub } from '../../../context/beanStub';\nimport { clearElement } from '../../../utils/dom';\n\nexport interface FloatingFilterInputService {\n    setupGui(parentElement: HTMLElement): void;\n    setEditable(editable: boolean): void;\n    getValue(): string | null | undefined;\n    setValue(value: string | null | undefined, silent?: boolean): void;\n    setValueChangedListener(listener: (e: KeyboardEvent) => void): void;\n    setParams(params: { ariaLabel: string, autoComplete?: boolean | string }): void;\n}\n\nexport class FloatingFilterTextInputService extends BeanStub implements FloatingFilterInputService {\n    private eFloatingFilterTextInput: AgInputTextField;\n    private valueChangedListener: (e: KeyboardEvent) => void = () => {};\n\n    constructor(private params?: { config?: AgInputTextFieldParams }) {\n        super();\n    }\n\n    public setupGui(parentElement: HTMLElement): void {\n        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField(this.params?.config));\n\n        const eInput = this.eFloatingFilterTextInput.getGui();\n\n        parentElement.appendChild(eInput);\n\n        this.addManagedListener(eInput, 'input', (e: KeyboardEvent) => this.valueChangedListener(e));\n        this.addManagedListener(eInput, 'keydown', (e: KeyboardEvent) => this.valueChangedListener(e));\n    }\n\n    public setEditable(editable: boolean): void {\n        this.eFloatingFilterTextInput.setDisabled(!editable);\n    }\n\n    public setAutoComplete(autoComplete: boolean | string): void {\n        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);\n    }\n\n    public getValue(): string | null | undefined {\n        return this.eFloatingFilterTextInput.getValue();\n    }\n\n    public setValue(value: string | null | undefined, silent?: boolean): void {\n        this.eFloatingFilterTextInput.setValue(value, silent);\n    }\n\n    public setValueChangedListener(listener: (e: KeyboardEvent) => void): void {\n       this.valueChangedListener = listener;\n    }\n\n    public setParams(params: { ariaLabel: string, autoComplete?: boolean | string }): void {\n        this.setAriaLabel(params.ariaLabel);\n\n        if (params.autoComplete !== undefined) {\n            this.setAutoComplete(params.autoComplete);\n        }\n    }\n\n    private setAriaLabel(ariaLabel: string): void {\n        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);\n    }\n}\n\nexport interface ITextInputFloatingFilterParams extends IFloatingFilterParams<TextFilter | NumberFilter> {\n    /**\n     * Overrides the browser's autocomplete/autofill behaviour by updating the autocomplete attribute on the input field used in the floating filter input.\n     * Possible values are:\n     * - `true` to allow the **default** browser autocomplete/autofill behaviour.\n     * - `false` to disable the browser autocomplete/autofill behavior by setting the `autocomplete` attribute to `off`.\n     * - A **string** to be used as the [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attribute value.\n     * Some browsers do not respect setting the HTML attribute `autocomplete=\"off\"` and display the auto-fill prompts anyway.\n     * @default false\n     */\n    browserAutoComplete?: boolean | string;\n};\n\ntype ModelUnion = TextFilterModel | NumberFilterModel;\nexport abstract class TextInputFloatingFilter<M extends ModelUnion> extends SimpleFloatingFilter {\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @RefSelector('eFloatingFilterInputContainer') private readonly eFloatingFilterInputContainer: HTMLElement;\n    private floatingFilterInputService: FloatingFilterInputService;\n\n    protected params: ITextInputFloatingFilterParams;\n\n    private applyActive: boolean;\n\n    protected abstract createFloatingFilterInputService(params: ITextInputFloatingFilterParams): FloatingFilterInputService;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.setTemplate(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\" ref=\"eFloatingFilterInputContainer\"></div>\n        `);\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    public onParentModelChanged(model: M, event: FilterChangedEvent): void {\n        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {\n            // if the floating filter triggered the change, it is already in sync.\n            // Data changes also do not affect provided text floating filters\n            return;\n        }\n\n        this.setLastTypeFromModel(model);\n        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));\n        this.floatingFilterInputService.setValue(this.getFilterModelFormatter().getModelAsString(model));\n    }\n\n    public init(params: ITextInputFloatingFilterParams): void {\n        this.setupFloatingFilterInputService(params);\n        super.init(params);\n        this.setTextInputParams(params);\n    }\n\n    private setupFloatingFilterInputService(params: ITextInputFloatingFilterParams): void {\n        this.floatingFilterInputService = this.createFloatingFilterInputService(params);\n        this.floatingFilterInputService.setupGui(this.eFloatingFilterInputContainer);\n    }\n\n    private setTextInputParams(params: ITextInputFloatingFilterParams): void {\n        this.params = params;\n\n        const autoComplete = params.browserAutoComplete ?? false;\n        this.floatingFilterInputService.setParams({\n            ariaLabel: this.getAriaLabel(params),\n            autoComplete,\n        });\n\n        this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);\n        \n        if (!this.isReadOnly()) {\n            const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n            const toDebounce: (e: KeyboardEvent) => void = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);\n\n            this.floatingFilterInputService.setValueChangedListener(toDebounce);\n        }\n    }\n\n    public onParamsUpdated(params: ITextInputFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: ITextInputFloatingFilterParams): void {\n        super.refresh(params);\n        this.setTextInputParams(params);\n    }\n\n    protected recreateFloatingFilterInputService(params: ITextInputFloatingFilterParams): void {\n        const value = this.floatingFilterInputService.getValue();\n        clearElement(this.eFloatingFilterInputContainer);\n        this.destroyBean(this.floatingFilterInputService);\n        this.setupFloatingFilterInputService(params);\n        this.floatingFilterInputService.setValue(value, true);\n    }\n\n    private getAriaLabel(params: ITextInputFloatingFilterParams): string {\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        return `${displayName} ${translate('ariaFilterInput', 'Filter Input')}`\n    }\n\n    private syncUpWithParentFilter(e: KeyboardEvent): void {\n        const isEnterKey = e.key === KeyCode.ENTER;\n\n        if (this.applyActive && !isEnterKey) { return; }\n\n        let value = this.floatingFilterInputService.getValue();\n\n        if ((this.params.filterParams as TextFilterParams).trimInput) {\n            value = TextFilter.trimInput(value);\n            this.floatingFilterInputService.setValue(value, true); // ensure visible value is trimmed\n        }\n\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                // NumberFilter is typed as number, but actually receives string values\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, value as never || null);\n            }\n        });\n    }\n\n    protected setEditable(editable: boolean): void {\n        this.floatingFilterInputService.setEditable(editable);\n    }\n}\n", "import { getAllowedCharPattern, NumberFilter, NumberFilterModel, NumberFilterModelFormatter, NumberFilterParams } from './numberFilter';\nimport { FloatingFilterInputService, FloatingFilterTextInputService, ITextInputFloatingFilterParams,TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\nimport { SimpleFilterModelFormatter } from '../simpleFilter';\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { BeanStub } from '../../../context/beanStub';\n\nclass FloatingFilterNumberInputService extends BeanStub implements FloatingFilterInputService {\n    private eFloatingFilterTextInput: AgInputTextField;\n    private eFloatingFilterNumberInput: AgInputNumberField;\n    private valueChangedListener: (e: KeyboardEvent) => void = () => {};\n\n    private numberInputActive = true;\n\n    public setupGui(parentElement: HTMLElement): void {\n        this.eFloatingFilterNumberInput = this.createManagedBean(new AgInputNumberField());\n        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField());\n\n        this.eFloatingFilterTextInput.setDisabled(true);\n\n        const eNumberInput = this.eFloatingFilterNumberInput.getGui()\n        const eTextInput = this.eFloatingFilterTextInput.getGui()\n\n        parentElement.appendChild(eNumberInput);\n        parentElement.appendChild(eTextInput);\n\n        this.setupListeners(eNumberInput, (e: KeyboardEvent) => this.valueChangedListener(e));\n        this.setupListeners(eTextInput, (e: KeyboardEvent) => this.valueChangedListener(e));\n    }\n\n    public setEditable(editable: boolean): void {\n        this.numberInputActive = editable;\n        this.eFloatingFilterNumberInput.setDisplayed(this.numberInputActive);\n        this.eFloatingFilterTextInput.setDisplayed(!this.numberInputActive);\n    }\n\n    public setAutoComplete(autoComplete: boolean | string): void {\n        this.eFloatingFilterNumberInput.setAutoComplete(autoComplete);\n        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);\n    }\n\n    public getValue(): string | null | undefined {\n        return this.getActiveInputElement().getValue();\n    }\n\n    public setValue(value: string | null | undefined, silent?: boolean): void {\n        this.getActiveInputElement().setValue(value, silent);\n    }\n\n    private getActiveInputElement(): AgInputTextField | AgInputNumberField {\n        return this.numberInputActive ? this.eFloatingFilterNumberInput : this.eFloatingFilterTextInput;\n    }\n\n    public setValueChangedListener(listener: (e: KeyboardEvent) => void): void {\n        this.valueChangedListener = listener;\n    }\n\n    private setupListeners(element: HTMLElement, listener: (e: KeyboardEvent) => void): void {\n        this.addManagedListener(element, 'input', listener);\n        this.addManagedListener(element, 'keydown', listener);\n    }\n\n    public setParams(params: { ariaLabel: string, autoComplete?: boolean | string }): void {\n        this.setAriaLabel(params.ariaLabel);\n        \n        if (params.autoComplete !== undefined) {\n            this.setAutoComplete(params.autoComplete);\n        }\n    }\n\n    private setAriaLabel(ariaLabel: string): void {\n        this.eFloatingFilterNumberInput.setInputAriaLabel(ariaLabel);\n        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);\n    }\n}\n\nexport interface INumberFloatingFilterParams extends ITextInputFloatingFilterParams {\n}\n\nexport class NumberFloatingFilter extends TextInputFloatingFilter<NumberFilterModel> {\n    private filterModelFormatter: SimpleFilterModelFormatter;\n    private allowedCharPattern: string | null;\n\n    public init(params: INumberFloatingFilterParams): void {\n        super.init(params);\n        this.filterModelFormatter = new NumberFilterModelFormatter(\n            this.localeService,\n            this.optionsFactory,\n            (params.filterParams as NumberFilterParams)?.numberFormatter\n        );\n    }\n\n    public onParamsUpdated(params: INumberFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: INumberFloatingFilterParams): void {\n        const allowedCharPattern = getAllowedCharPattern(params.filterParams);\n        if (allowedCharPattern !== this.allowedCharPattern) {\n            this.recreateFloatingFilterInputService(params);\n        }\n        super.refresh(params);\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected getFilterModelFormatter(): SimpleFilterModelFormatter {\n        return this.filterModelFormatter;\n    }\n\n    protected createFloatingFilterInputService(params: INumberFloatingFilterParams): FloatingFilterInputService {\n        this.allowedCharPattern = getAllowedCharPattern(params.filterParams);\n        if (this.allowedCharPattern) {\n            // need to use text input\n            return this.createManagedBean(new FloatingFilterTextInputService({\n                config: { allowedCharPattern: this.allowedCharPattern },\n            }));\n        }\n        return this.createManagedBean(new FloatingFilterNumberInputService());\n    }\n}\n", "import { TextFilter, TextFilterModel, TextFilterModelFormatter } from './textFilter';\nimport { FloatingFilterInputService, FloatingFilterTextInputService, ITextInputFloatingFilterParams, TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\nimport { SimpleFilterModelFormatter } from '../simpleFilter';\n\nexport interface ITextFloatingFilterParams extends ITextInputFloatingFilterParams {\n}\n\nexport class TextFloatingFilter extends TextInputFloatingFilter<TextFilterModel> {\n    private filterModelFormatter: SimpleFilterModelFormatter;\n\n    public init(params: ITextFloatingFilterParams): void {\n        super.init(params);\n        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);\n    }\n\n    public onParamsUpdated(params: ITextFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: ITextFloatingFilterParams): void {\n        super.refresh(params);\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected getFilterModelFormatter(): SimpleFilterModelFormatter {\n        return this.filterModelFormatter;\n    }\n\n    protected createFloatingFilterInputService(): FloatingFilterInputService {\n        return this.createManagedBean(new FloatingFilterTextInputService());\n    }\n}\n", "import { AgEvent, AgEventListener } from \"../events\";\nimport { EventService } from \"../eventService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { areEventsNear } from \"../utils/mouse\";\n\nexport interface TapEvent extends AgEvent {\n    touchStart: Touch;\n}\n\nexport interface LongTapEvent extends AgEvent {\n    touchStart: Touch;\n    touchEvent: TouchEvent;\n}\n\nexport class TouchListener implements IEventEmitter {\n\n    public static EVENT_TAP = \"tap\";\n    public static EVENT_DOUBLE_TAP = \"doubleTap\";\n    public static EVENT_LONG_TAP = \"longTap\";\n\n    private static DOUBLE_TAP_MILLIS = 500;\n\n    private eElement: Element;\n\n    private destroyFuncs: Function[] = [];\n\n    private moved: boolean;\n\n    private touching = false;\n    private touchStart: Touch;\n\n    private lastTapTime: number | null;\n\n    private eventService: EventService = new EventService();\n\n    // private mostRecentTouch: Touch;\n\n    private preventMouseClick: boolean;\n\n    constructor(eElement: Element, preventMouseClick = false) {\n        this.eElement = eElement;\n        this.preventMouseClick = preventMouseClick;\n\n        const startListener = this.onTouchStart.bind(this);\n        const moveListener = this.onTouchMove.bind(this);\n        const endListener = this.onTouchEnd.bind(this);\n\n        this.eElement.addEventListener(\"touchstart\", startListener, { passive: true } as any);\n        this.eElement.addEventListener(\"touchmove\", moveListener, { passive: true } as any);\n        // we set passive=false, as we want to prevent default on this event\n        this.eElement.addEventListener(\"touchend\", endListener, { passive: false } as any);\n\n        this.destroyFuncs.push(() => {\n            this.eElement.removeEventListener(\"touchstart\", startListener, { passive: true } as any);\n            this.eElement.removeEventListener(\"touchmove\", moveListener, { passive: true } as any);\n            this.eElement.removeEventListener(\"touchend\", endListener, { passive: false } as any);\n        });\n    }\n\n    private getActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            const matches = touchList[i].identifier === this.touchStart.identifier;\n            if (matches) {\n                return touchList[i];\n            }\n        }\n\n        return null;\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener): void {\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n    private onTouchStart(touchEvent: TouchEvent): void {\n        // only looking at one touch point at any time\n        if (this.touching) {\n            return;\n        }\n\n        this.touchStart = touchEvent.touches[0];\n        this.touching = true;\n\n        this.moved = false;\n\n        const touchStartCopy = this.touchStart;\n\n        window.setTimeout(() => {\n            const touchesMatch = this.touchStart === touchStartCopy;\n\n            if (this.touching && touchesMatch && !this.moved) {\n                this.moved = true;\n                const event: LongTapEvent = {\n                    type: TouchListener.EVENT_LONG_TAP,\n                    touchStart: this.touchStart,\n                    touchEvent: touchEvent\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        }, 500);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        const touch = this.getActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n\n        const eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);\n        if (eventIsFarAway) {\n            this.moved = true;\n        }\n    }\n\n    private onTouchEnd(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        if (!this.moved) {\n            const event: TapEvent = {\n                type: TouchListener.EVENT_TAP,\n                touchStart: this.touchStart\n            };\n            this.eventService.dispatchEvent(event);\n            this.checkForDoubleTap();\n        }\n\n        // stops the tap from also been processed as a mouse click\n        if (this.preventMouseClick && touchEvent.cancelable) {\n            touchEvent.preventDefault();\n        }\n\n        this.touching = false;\n    }\n\n    private checkForDoubleTap(): void {\n        const now = new Date().getTime();\n\n        if (this.lastTapTime && this.lastTapTime > 0) {\n            // if previous tap, see if duration is short enough to be considered double tap\n            const interval = now - this.lastTapTime;\n            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {\n                // dispatch double tap event\n                const event: TapEvent = {\n                    type: TouchListener.EVENT_DOUBLE_TAP,\n                    touchStart: this.touchStart\n                };\n                this.eventService.dispatchEvent(event);\n\n                // this stops a tripple tap ending up as two double taps\n                this.lastTapTime = null;\n            } else {\n                this.lastTapTime = now;\n            }\n        } else {\n            this.lastTapTime = now;\n        }\n    }\n\n    public destroy(): void {\n        this.destroyFuncs.forEach(func => func());\n    }\n}\n", "import { Events } from \"../../../eventKeys\";\nimport { SortController } from \"../../../sortController\";\nimport { setDisplayed, clearElement } from \"../../../utils/dom\";\nimport { Autowired } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { Component } from \"../../../widgets/component\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\n\nexport class SortIndicatorComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<span class=\"ag-sort-indicator-container\">\n            <span ref=\"eSortOrder\" class=\"ag-sort-indicator-icon ag-sort-order ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortAsc\" class=\"ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortDesc\" class=\"ag-sort-indicator-icon ag-sort-descending-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortMixed\" class=\"ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortNone\" class=\"ag-sort-indicator-icon ag-sort-none-icon ag-hidden\" aria-hidden=\"true\"></span>\n        </span>`;\n\n    @RefSelector('eSortOrder') private eSortOrder: HTMLElement;\n    @RefSelector('eSortAsc') private eSortAsc: HTMLElement;\n    @RefSelector('eSortDesc') private eSortDesc: HTMLElement;\n    @RefSelector('eSortMixed') private eSortMixed: HTMLElement;\n    @RefSelector('eSortNone') private eSortNone: HTMLElement;\n\n    @Autowired('columnModel')  private readonly columnModel: ColumnModel;\n    @Autowired('sortController')  private readonly sortController: SortController;\n\n    private column: Column;\n    private suppressOrder: boolean;\n\n    constructor(skipTemplate?: boolean) {\n        super();\n\n        if (!skipTemplate) {\n            this.setTemplate(SortIndicatorComp.TEMPLATE);\n        }\n    }\n\n    public attachCustomElements(\n        eSortOrder: HTMLElement,\n        eSortAsc: HTMLElement,\n        eSortDesc: HTMLElement,\n        eSortMixed: HTMLElement,\n        eSortNone: HTMLElement\n    ) {\n        this.eSortOrder = eSortOrder;\n        this.eSortAsc = eSortAsc;\n        this.eSortDesc = eSortDesc;\n        this.eSortMixed = eSortMixed;\n        this.eSortNone = eSortNone;\n    }\n\n    public setupSort(column: Column, suppressOrder: boolean = false): void {\n        this.column = column;\n        this.suppressOrder = suppressOrder;\n\n        this.setupMultiSortIndicator();\n\n        if (!this.column.isSortable()) {\n            return;\n        }\n\n        this.addInIcon('sortAscending', this.eSortAsc, column);\n        this.addInIcon('sortDescending', this.eSortDesc, column);\n        this.addInIcon('sortUnSort', this.eSortNone, column);\n\n        this.addManagedPropertyListener('unSortIcon', () => this.updateIcons());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED,  () => this.updateIcons());\n\n        // Watch global events, as row group columns can effect their display column.\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED,  () => this.onSortChanged());\n        // when grouping changes so can sort indexes and icons\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED,  () => this.onSortChanged());\n\n        this.onSortChanged();\n    }\n\n    private addInIcon(iconName: string, eParent: HTMLElement, column: Column): void {\n        if (eParent == null) { return; }\n\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n\n    private onSortChanged(): void {\n        this.updateIcons();\n        if (!this.suppressOrder) {\n            this.updateSortOrder();\n        }\n    }\n\n    private updateIcons(): void {\n        const sortDirection = this.sortController.getDisplaySortForColumn(this.column);\n\n        if (this.eSortAsc) {\n            const isAscending = sortDirection === 'asc';\n            setDisplayed(this.eSortAsc, isAscending, { skipAriaHidden: true });\n        }\n\n        if (this.eSortDesc) {\n            const isDescending = sortDirection === 'desc';\n            setDisplayed(this.eSortDesc, isDescending, { skipAriaHidden: true });\n        }\n\n        if (this.eSortNone) {\n            const alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsService.get('unSortIcon');\n            const isNone = sortDirection === null || sortDirection === undefined;\n            setDisplayed(this.eSortNone, !alwaysHideNoSort && isNone, { skipAriaHidden: true });\n        }\n    }\n\n    private setupMultiSortIndicator() {\n        this.addInIcon('sortUnSort', this.eSortMixed, this.column);\n\n        const isColumnShowingRowGroup = this.column.getColDef().showRowGroup;\n        const areGroupsCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        if (areGroupsCoupled && isColumnShowingRowGroup) {\n            // Watch global events, as row group columns can effect their display column.\n            this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, () => this.updateMultiSortIndicator());\n            // when grouping changes so can sort indexes and icons\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED,  () => this.updateMultiSortIndicator());\n            this.updateMultiSortIndicator();\n        }\n    }\n\n    private updateMultiSortIndicator() {\n        if (this.eSortMixed) {\n            const isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === 'mixed';\n            setDisplayed(this.eSortMixed, isMixedSort, { skipAriaHidden: true });\n        }\n    }\n\n    // we listen here for global sort events, NOT column sort events, as we want to do this\n    // when sorting has been set on all column (if we listened just for our col (where we\n    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.\n    private updateSortOrder(): void {\n        if (!this.eSortOrder) { return; }\n\n        const allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();\n\n        const indexThisCol = this.sortController.getDisplaySortIndexForColumn(this.column) ?? -1;\n        const moreThanOneColSorting = allColumnsWithSorting.some(col => this.sortController.getDisplaySortIndexForColumn(col) ?? -1 >= 1);\n        const showIndex = indexThisCol >= 0 && moreThanOneColSorting;\n        setDisplayed(this.eSortOrder, showIndex, { skipAriaHidden: true });\n\n        if (indexThisCol >= 0) {\n            this.eSortOrder.textContent = (indexThisCol + 1).toString();\n        } else {\n            clearElement(this.eSortOrder);\n        }\n    }\n\n}\n", "import { Autowired } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { IComponent } from \"../../../interfaces/iComponent\";\nimport { AgGridCommon } from \"../../../interfaces/iCommon\";\nimport { SortController } from \"../../../sortController\";\nimport { removeFromParent, setDisplayed } from \"../../../utils/dom\";\nimport { exists } from \"../../../utils/generic\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\nimport { escapeString } from \"../../../utils/string\";\nimport { Component } from \"../../../widgets/component\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { LongTapEvent, TapEvent, TouchListener } from \"../../../widgets/touchListener\";\nimport { SortIndicatorComp } from \"./sortIndicatorComp\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { Events } from \"../../../eventKeys\";\nimport { SortDirection } from \"../../../entities/colDef\";\nimport { MenuService } from \"../../../misc/menuService\";\n\nexport interface IHeaderParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    /** The column the header is for. */\n    column: Column;\n    /**\n     * The name to display for the column.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */\n    displayName: string;\n    /**\n     * Whether sorting is enabled for the column.\n     * Only put sort logic into your header if this is true.\n     */\n    enableSorting: boolean | undefined;\n    /**\n     * Whether menu is enabled for the column.\n     * Only display a menu button in your header if this is true.\n     */\n    enableMenu: boolean;\n    /**\n     * Whether filter button should be displayed in the header (for new column menu).\n     */\n    enableFilterButton: boolean;\n    /**\n     * Whether filter icon should be displayed in the header (for legacy tabbed column menu).\n     */\n    enableFilterIcon: boolean;\n    /**\n     * Callback to request the grid to show the column menu.\n     * Pass in the html element of the column menu button to have the\n     * grid position the menu over the button.\n     */\n    showColumnMenu: (source: HTMLElement) => void;\n    /**\n     * Callback to request the grid to show the column menu.\n     * Similar to `showColumnMenu`, but will position the menu next to the provided `mouseEvent`.\n     */\n    showColumnMenuAfterMouseClick: (mouseEvent: MouseEvent | Touch) => void;\n    /**\n     * Callback to request the grid to show the filter.\n     * Pass in the html element of the filter button to have the\n     * grid position the menu over the button.\n     */\n    showFilter: (source: HTMLElement) => void;\n    /**\n     * Callback to progress the sort for this column.\n     * The grid will decide the next sort direction eg ascending, descending or 'no sort'.\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click).\n     */\n    progressSort: (multiSort?: boolean) => void;\n    /**\n     * Callback to set the sort for this column.\n     * Pass the sort direction to use ignoring the current sort eg one of 'asc', 'desc' or null (for no sort).\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click)\n     */\n    setSort: (sort: SortDirection, multiSort?: boolean) => void;\n\n    /** Custom header template if provided to `headerComponentParams`, otherwise will be `undefined`. See [Header Templates](https://ag-grid.com/javascript-data-grid/column-headers/#header-templates) */\n    template?: string;\n    /**\n     * The header the grid provides.\n     * The custom header component is a child of the grid provided header.\n     * The grid's header component is what contains the grid managed functionality such as resizing, keyboard navigation etc.\n     * This is provided should you want to make changes to this cell,\n     * eg add ARIA tags, or add keyboard event listener (as focus goes here when navigating to the header).\n     */\n    eGridHeader: HTMLElement;\n\n    /**\n     * Sets a tooltip to the main element of this component.\n     * @param value The value to be displayed by the tooltip\n     * @param shouldDisplayTooltip A function returning a boolean that allows the tooltip to be displayed conditionally. This option does not work when `enableBrowserTooltips={true}`.\n     */\n    setTooltip: (value: string, shouldDisplayTooltip?: () => boolean) => void;\n}\n\nexport interface IHeader {\n    /** Get the header to refresh. Gets called whenever Column Defs are updated. */\n    refresh(params: IHeaderParams): boolean;\n}\n\nexport interface IHeaderComp extends IHeader, IComponent<IHeaderParams> { }\n\nexport class HeaderComp extends Component implements IHeaderComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-cell-label-container\" role=\"presentation\">\n            <span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\n            <span ref=\"eFilterButton\" class=\"ag-header-icon ag-header-cell-filter-button\" aria-hidden=\"true\"></span>\n            <div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\">\n                <span ref=\"eText\" class=\"ag-header-cell-text\"></span>\n                <span ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\n                <ag-sort-indicator ref=\"eSortIndicator\"></ag-sort-indicator>\n            </div>\n        </div>`;\n\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('menuService') private menuService: MenuService;\n    @Autowired('columnModel')  private readonly  columnModel: ColumnModel;\n\n    @RefSelector('eFilter') private eFilter: HTMLElement;\n    @RefSelector('eFilterButton') private eFilterButton?: HTMLElement;\n    @RefSelector('eSortIndicator') private eSortIndicator: SortIndicatorComp;\n    @RefSelector('eMenu') private eMenu?: HTMLElement;\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @RefSelector('eText') private eText: HTMLElement;\n\n    /**\n     * Selectors for custom headers templates\n     */\n     @RefSelector('eSortOrder') private eSortOrder: HTMLElement;\n     @RefSelector('eSortAsc') private eSortAsc: HTMLElement;\n     @RefSelector('eSortDesc') private eSortDesc: HTMLElement;\n     @RefSelector('eSortMixed') private eSortMixed: HTMLElement;\n     @RefSelector('eSortNone') private eSortNone: HTMLElement;\n\n    private params: IHeaderParams;\n\n    private lastMovingChanged = 0;\n\n    private currentDisplayName: string;\n    private currentTemplate: string | null | undefined;\n    private currentShowMenu: boolean;\n    private currentSuppressMenuHide: boolean;\n    private currentSort: boolean | undefined;\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public refresh(params: IHeaderParams): boolean {\n\n        this.params = params;\n\n        // if template changed, then recreate the whole comp, the code required to manage\n        // a changing template is to difficult for what it's worth.\n        if (this.workOutTemplate() != this.currentTemplate) { return false; }\n        if (this.workOutShowMenu() != this.currentShowMenu) { return false; }\n        if (this.workOutSort() != this.currentSort) { return false; }\n        if (this.shouldSuppressMenuHide() != this.currentSuppressMenuHide) { return false; }\n\n        this.setDisplayName(params);\n\n        return true;\n    }\n\n    private workOutTemplate(): string | null | undefined {\n        let template: string | null | undefined = this.params.template ?? HeaderComp.TEMPLATE;\n\n        // take account of any newlines & whitespace before/after the actual template\n        template = template && template.trim ? template.trim() : template;\n        return template;\n    }\n\n    public init(params: IHeaderParams): void {\n        this.params = params;\n\n        this.currentTemplate = this.workOutTemplate();\n        this.setTemplate(this.currentTemplate);\n        this.setupTap();\n        this.setMenu();\n        this.setupSort();\n        this.setupFilterIcon();\n        this.setupFilterButton();\n        this.setDisplayName(params);\n    }\n\n    private setDisplayName(params: IHeaderParams): void {\n        if (this.currentDisplayName != params.displayName) {\n            this.currentDisplayName = params.displayName;\n            const displayNameSanitised = escapeString(this.currentDisplayName, true);\n            if (this.eText) {\n                this.eText.textContent = displayNameSanitised!;\n            }\n        }\n    }\n\n    private addInIcon(iconName: string, eParent: HTMLElement, column: Column): void {\n        if (eParent == null) { return; }\n\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n\n    private setupTap(): void {\n        const { gridOptionsService } = this;\n\n        if (gridOptionsService.get('suppressTouch')) { return; }\n\n        const touchListener = new TouchListener(this.getGui(), true);\n        const suppressMenuHide = this.shouldSuppressMenuHide();\n        const tapMenuButton = suppressMenuHide && exists(this.eMenu);\n        const menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu!, true) : touchListener;\n\n        if (this.params.enableMenu) {\n            const eventType = tapMenuButton ? 'EVENT_TAP' : 'EVENT_LONG_TAP';\n            const showMenuFn = (event: TapEvent | LongTapEvent) => this.params.showColumnMenuAfterMouseClick(event.touchStart);\n            this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);\n        }\n\n        if (this.params.enableSorting) {\n            const tapListener = (event: TapEvent) => {\n                const target = event.touchStart.target as HTMLElement;\n                // When suppressMenuHide is true, a tap on the menu icon or filter button will bubble up\n                // to the header container, in that case we should not sort\n                if (suppressMenuHide && (this.eMenu?.contains(target) || this.eFilterButton?.contains(target))) { return; }\n\n                this.sortController.progressSort(this.params.column, false, \"uiColumnSorted\");\n            };\n\n            this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);\n        }\n\n        if (this.params.enableFilterButton) {\n            const filterButtonTouchListener = new TouchListener(this.eFilterButton!, true);\n            this.addManagedListener(filterButtonTouchListener, 'tap', () => this.params.showFilter(this.eFilterButton!));\n            this.addDestroyFunc(() => filterButtonTouchListener.destroy());\n        }\n\n        // if tapMenuButton is true `touchListener` and `menuTouchListener` are different\n        // so we need to make sure to destroy both listeners here\n        this.addDestroyFunc(() => touchListener.destroy());\n\n        if (tapMenuButton) {\n            this.addDestroyFunc(() => menuTouchListener.destroy());\n        }\n    }\n\n    private workOutShowMenu(): boolean {\n        return this.params.enableMenu && this.menuService.isHeaderMenuButtonEnabled();\n    }\n\n    private shouldSuppressMenuHide(): boolean {\n        return this.menuService.isHeaderMenuButtonAlwaysShowEnabled();\n    }\n\n    private setMenu(): void {\n        // if no menu provided in template, do nothing\n        if (!this.eMenu) {\n            return;\n        }\n\n        this.currentShowMenu = this.workOutShowMenu();\n        if (!this.currentShowMenu) {\n            removeFromParent(this.eMenu);\n            this.eMenu = undefined;\n            return;\n        }\n\n        const isLegacyMenu = this.menuService.isLegacyMenuEnabled()\n        this.addInIcon(isLegacyMenu ? 'menu' : 'menuAlt', this.eMenu, this.params.column);\n        this.eMenu.classList.toggle('ag-header-menu-icon', !isLegacyMenu);\n\n        this.currentSuppressMenuHide = this.shouldSuppressMenuHide();\n        this.addManagedListener(this.eMenu, 'click', () => this.params.showColumnMenu(this.eMenu!));\n        this.eMenu.classList.toggle('ag-header-menu-always-show', this.currentSuppressMenuHide);\n    }\n\n    public onMenuKeyboardShortcut(isFilterShortcut: boolean): boolean {\n        const { column } = this.params;\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        if (isFilterShortcut && !isLegacyMenuEnabled) {\n            if (this.menuService.isFilterMenuInHeaderEnabled(column)) {\n                this.params.showFilter(this.eFilterButton ?? this.eMenu ?? this.getGui());\n                return true;\n            }\n        } else if (this.params.enableMenu) {\n            this.params.showColumnMenu(this.eMenu ?? this.eFilterButton ?? this.getGui());\n            return true;\n        }\n        return false;\n    }\n\n    private workOutSort(): boolean | undefined {\n        return this.params.enableSorting;\n    }\n\n    public setupSort(): void {\n        this.currentSort = this.params.enableSorting;\n\n        // eSortIndicator will not be present when customers provided custom header\n        // templates, in that case, we need to look for provided sort elements and\n        // manually create eSortIndicator.\n        if (!this.eSortIndicator) {\n            this.eSortIndicator = this.context.createBean(new SortIndicatorComp(true));\n            this.eSortIndicator.attachCustomElements(\n                this.eSortOrder,\n                this.eSortAsc,\n                this.eSortDesc,\n                this.eSortMixed,\n                this.eSortNone\n            );\n        }\n        this.eSortIndicator.setupSort(this.params.column);\n\n        // we set up the indicator prior to the check for whether this column is sortable, as it allows the indicator to\n        // set up the multi sort indicator which can appear irrelevant of whether this column can itself be sorted.\n        // this can occur in the case of a non-sortable group display column.\n        if (!this.currentSort) {\n            return;\n        }\n\n\n        // keep track of last time the moving changed flag was set\n        this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, () => {\n            this.lastMovingChanged = new Date().getTime();\n        });\n\n        // add the event on the header, so when clicked, we do sorting\n        if (this.eLabel) {\n            this.addManagedListener(this.eLabel, 'click', (event: MouseEvent) => {\n\n                // sometimes when moving a column via dragging, this was also firing a clicked event.\n                // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076\n                // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)\n                const moving = this.params.column.isMoving();\n                const nowTime = new Date().getTime();\n                // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn\n                const movedRecently = (nowTime - this.lastMovingChanged) < 50;\n                const columnMoving = moving || movedRecently;\n\n                if (!columnMoving) {\n                    const sortUsingCtrl = this.gridOptionsService.get('multiSortKey') === 'ctrl';\n                    const multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;\n                    this.params.progressSort(multiSort);\n                }\n            });\n        }\n\n        const onSortingChanged = () => {\n            this.addOrRemoveCssClass('ag-header-cell-sorted-asc', this.params.column.isSortAscending());\n            this.addOrRemoveCssClass('ag-header-cell-sorted-desc', this.params.column.isSortDescending());\n            this.addOrRemoveCssClass('ag-header-cell-sorted-none', this.params.column.isSortNone());\n\n            if (this.params.column.getColDef().showRowGroup) {\n                const sourceColumns = this.columnModel.getSourceColumnsForGroupColumn(this.params.column);\n                // this == is intentional, as it allows null and undefined to match, which are both unsorted states\n                const sortDirectionsMatch = sourceColumns?.every(sourceCol => this.params.column.getSort() == sourceCol.getSort());\n                const isMultiSorting = !sortDirectionsMatch;\n\n                this.addOrRemoveCssClass('ag-header-cell-sorted-mixed', isMultiSorting);\n            }\n        };\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, onSortingChanged);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, onSortingChanged);\n    }\n\n    private setupFilterIcon(): void {\n        if (!this.eFilter) { return; }\n        this.configureFilter(this.params.enableFilterIcon, this.eFilter, this.onFilterChangedIcon.bind(this));\n    }\n\n    private setupFilterButton(): void {\n        if (!this.eFilterButton) { return; }\n        const configured = this.configureFilter(\n            this.params.enableFilterButton,\n            this.eFilterButton,\n            this.onFilterChangedButton.bind(this)\n        );\n        if (configured) {\n            this.addManagedListener(this.eFilterButton, 'click', () => this.params.showFilter(this.eFilterButton!));\n        } else {\n            this.eFilterButton = undefined;\n        }\n    }\n\n    private configureFilter(enabled: boolean, element: HTMLElement, filterChangedCallback: () => void): boolean {\n        if (!enabled) {\n            removeFromParent(element);\n            return false;\n        }\n\n        const { column } = this.params;\n        this.addInIcon('filter', element, column);\n\n        this.addManagedListener(column, Column.EVENT_FILTER_CHANGED, filterChangedCallback);\n        filterChangedCallback();\n        return true;\n    }\n\n    private onFilterChangedIcon(): void {\n        const filterPresent = this.params.column.isFilterActive();\n        setDisplayed(this.eFilter, filterPresent, { skipAriaHidden: true });\n    }\n\n    private onFilterChangedButton(): void {\n        const filterPresent = this.params.column.isFilterActive();\n        this.eFilterButton!.classList.toggle('ag-filter-active', filterPresent);\n    }\n\n    public getAnchorElementForMenu(isFilter?: boolean): HTMLElement {\n        if (isFilter) {\n            return this.eFilterButton ?? this.eMenu ?? this.getGui();\n        }\n        return this.eMenu ?? this.eFilterButton ?? this.getGui();\n    }\n}\n", "import { ColumnModel } from \"../../../columns/columnModel\";\nimport { Autowired } from \"../../../context/context\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { IComponent } from \"../../../interfaces/iComponent\";\nimport { AgGridCommon } from \"../../../interfaces/iCommon\";\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../../utils/event\";\nimport { warnOnce } from \"../../../utils/function\";\nimport { exists } from \"../../../utils/generic\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\nimport { escapeString } from \"../../../utils/string\";\nimport { Component } from \"../../../widgets/component\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { TouchListener } from \"../../../widgets/touchListener\";\n\nexport interface IHeaderGroupParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    /** The column group the header is for. */\n    columnGroup: ColumnGroup;\n    /**\n     * The text label to render.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */\n    displayName: string;\n    /** Opens / closes the column group */\n    setExpanded: (expanded: boolean) => void;\n    /**\n     * Sets a tooltip to the main element of this component.\n     * @param value The value to be displayed by the tooltip\n     * @param shouldDisplayTooltip A function returning a boolean that allows the tooltip to be displayed conditionally. This option does not work when `enableBrowserTooltips={true}`.\n     */\n    setTooltip: (value: string, shouldDisplayTooltip?: () => boolean) => void;\n}\n\nexport interface IHeaderGroup { }\n\nexport interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> { }\n\nexport class HeaderGroupComp extends Component implements IHeaderGroupComp {\n\n    @Autowired(\"columnModel\") private columnModel: ColumnModel;\n\n    static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>`;\n\n    private params: IHeaderGroupParams;\n\n    @RefSelector(\"agOpened\") private eOpenIcon: HTMLElement;\n    @RefSelector(\"agClosed\") private eCloseIcon: HTMLElement;\n\n    constructor() {\n        super(HeaderGroupComp.TEMPLATE);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IHeaderGroupParams): void {\n        this.params = params;\n\n        this.checkWarnings();\n\n        this.setupLabel();\n        this.addGroupExpandIcon();\n        this.setupExpandIcons();\n    }\n\n    private checkWarnings(): void {\n        const paramsAny = this.params as any;\n\n        if (paramsAny.template) {\n            warnOnce(`A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)`);\n        }\n    }\n\n    private setupExpandIcons(): void {\n        this.addInIcon(\"columnGroupOpened\", \"agOpened\");\n        this.addInIcon(\"columnGroupClosed\", \"agClosed\");\n\n        const expandAction = (event: MouseEvent) => {\n            if (isStopPropagationForAgGrid(event)) {\n                return;\n            }\n\n            const newExpandedValue = !this.params.columnGroup.isExpanded();\n            this.columnModel.setColumnGroupOpened(this.params.columnGroup.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        };\n\n        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);\n        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);\n\n        const stopPropagationAction = (event: MouseEvent) => {\n            stopPropagationForAgGrid(event);\n        };\n\n        // adding stopPropagation to the double click for the icons prevents double click action happening\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\n        // then close again straight away. if we also listened to double click, then the group would open,\n        // close, then open, which is not what we want. double click should only action if the user double\n        // clicks outside of the icons.\n        this.addManagedListener(this.eCloseIcon, \"dblclick\", stopPropagationAction);\n        this.addManagedListener(this.eOpenIcon, \"dblclick\", stopPropagationAction);\n\n        this.addManagedListener(this.getGui(), \"dblclick\", expandAction);\n\n        this.updateIconVisibility();\n\n        const providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();\n        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));\n        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));\n    }\n\n    private addTouchAndClickListeners(eElement: HTMLElement, action: (event: MouseEvent) => void): void {\n        const touchListener = new TouchListener(eElement, true);\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);\n        this.addDestroyFunc(() => touchListener.destroy());\n        this.addManagedListener(eElement, \"click\", action);\n    }\n\n    private updateIconVisibility(): void {\n        const columnGroup = this.params.columnGroup;\n        if (columnGroup.isExpandable()) {\n            const expanded = this.params.columnGroup.isExpanded();\n            setDisplayed(this.eOpenIcon, expanded);\n            setDisplayed(this.eCloseIcon, !expanded);\n        } else {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n        }\n    }\n\n    private addInIcon(iconName: string, refName: string): void {\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsService, null);\n        if (eIcon) {\n            this.getRefElement(refName).appendChild(eIcon);\n        }\n    }\n\n    private addGroupExpandIcon() {\n        if (!this.params.columnGroup.isExpandable()) {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n            return;\n        }\n    }\n\n    private setupLabel(): void {\n        // no renderer, default text render\n        const { displayName, columnGroup } = this.params;\n\n        if (exists(displayName)) {\n            const displayNameSanitised = escapeString(displayName, true);\n            this.getRefElement('agLabel').textContent = displayNameSanitised!;\n        }\n\n        this.addOrRemoveCssClass('ag-sticky-label', !columnGroup.getColGroupDef()?.suppressStickyLabel);\n    }\n}\n", "import { Component } from \"./component\";\nimport { IPopupComponent } from \"../interfaces/iPopupComponent\";\n\nexport class PopupComponent extends Component implements IPopupComponent<any> {\n\n    public isPopup(): boolean {\n        return true;\n    }\n\n    setParentComponent(container: Component) {\n        container.addCssClass('ag-has-popup');\n        super.setParentComponent(container);\n    }\n\n    public destroy(): void {\n        const parentComp = this.parentComponent;\n        const hasParent = parentComp && parentComp.isAlive();\n\n        if (hasParent) {\n            parentComp!.getGui().classList.remove('ag-has-popup');\n        }\n\n        super.destroy();\n    }\n}\n", "import { AgInputTextArea } from \"../../widgets/agInputTextArea\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { PopupComponent } from \"../../widgets/popupComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { exists } from \"../../utils/generic\";\nimport { KeyCode } from '../../constants/keyCode';\n\nexport interface ILargeTextEditorParams extends ICellEditorParams {\n    /**\n     * Max number of characters to allow.\n     * @default 200\n     */\n    maxLength: number;\n    /**\n     * Number of character rows to display.\n     * @default 10\n     */\n    rows: number;\n    /**\n     * Number of character columns to display.\n     * @default 60\n     */\n    cols: number;\n}\n\nexport class LargeTextCellEditor extends PopupComponent implements ICellEditorComp {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-large-text\">\n            <ag-input-text-area ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\n        </div>`;\n\n    private params: ILargeTextEditorParams;\n    @RefSelector(\"eTextArea\") private eTextArea: AgInputTextArea;\n    private focusAfterAttached: boolean;\n\n    constructor() {\n        super(LargeTextCellEditor.TEMPLATE);\n    }\n\n    public init(params: ILargeTextEditorParams): void {\n        this.params = params;\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        this.eTextArea\n            .setMaxLength(params.maxLength || 200)\n            .setCols(params.cols || 60)\n            .setRows(params.rows || 10);\n\n        if (exists(params.value, true)) {\n            this.eTextArea.setValue(params.value.toString(), true);\n        }\n\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n        this.activateTabIndex();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        if (key === KeyCode.LEFT ||\n            key === KeyCode.UP ||\n            key === KeyCode.RIGHT ||\n            key === KeyCode.DOWN ||\n            (event.shiftKey && key === KeyCode.ENTER)) { // shift+enter allows for newlines\n            event.stopPropagation();\n        }\n    }\n\n    public afterGuiAttached(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eTextArea.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n\n        if (this.focusAfterAttached) {\n            this.eTextArea.getFocusableElement().focus();\n        }\n    }\n\n    public getValue(): any {\n        const value = this.eTextArea.getValue();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value!);\n    }\n}\n", "import { AgSelect } from \"../../widgets/agSelect\";\nimport { Autowired } from \"../../context/context\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { PopupComponent } from \"../../widgets/popupComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { ListOption } from \"../../widgets/agList\";\nimport { missing } from \"../../utils/generic\";\nimport { KeyCode } from '../../constants/keyCode';\n\nexport interface ISelectCellEditorParams<TValue = any> {\n    /** List of values to display */\n    values: TValue[];\n    /**\n     * The space in pixels between the value display and the list of items.\n     * @default 4\n     */\n    valueListGap?: number;\n    /** The maximum height of the list of items. If the value is a `number` it will be \n     * treated as pixels, otherwise it should be a valid CSS size string. Default: Height of Popup Parent.\n     */\n    valueListMaxHeight?: number | string;\n    /** The maximum width of the list of items. If the value is a `number` it will be \n     * treated as pixels, otherwise it should be a valid CSS size string. Default: Width of the cell being edited.\n     */\n    valueListMaxWidth?: number | string;\n}\n\ninterface SelectCellEditorParams<TData = any, TValue = any, TContext = any> extends ISelectCellEditorParams<TValue>, ICellEditorParams<TData, TValue, TContext> {}\n\nexport class SelectCellEditor extends PopupComponent implements ICellEditorComp {\n\n    private focusAfterAttached: boolean;\n\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @RefSelector('eSelect') private eSelect: AgSelect;\n\n    private startedByEnter: boolean = false;\n\n    constructor() {\n        super(/* html */\n            `<div class=\"ag-cell-edit-wrapper\">\n                <ag-select class=\"ag-cell-editor\" ref=\"eSelect\"></ag-select>\n            </div>`\n        );\n    }\n\n    public init(params: SelectCellEditorParams): void {\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        const { eSelect, valueFormatterService, gridOptionsService } = this;\n        const { values, value, eventKey } = params;\n        if (missing(values)) {\n            console.warn('AG Grid: no values found for select cellEditor');\n            return;\n        }\n\n        this.startedByEnter = eventKey != null ? eventKey === KeyCode.ENTER : false;\n\n        let hasValue = false;\n        values.forEach((currentValue: any) => {\n            const option: ListOption = { value: currentValue };\n            const valueFormatted = valueFormatterService.formatValue(params.column, null, currentValue);\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n            option.text = valueFormattedExits ? valueFormatted : currentValue;\n\n            eSelect.addOption(option);\n            hasValue = hasValue || value === currentValue;\n        });\n\n        if (hasValue) {\n            eSelect.setValue(params.value, true);\n        } else if (params.values.length) {\n            eSelect.setValue(params.values[0], true);\n        }\n\n        const { valueListGap, valueListMaxWidth, valueListMaxHeight } = params;\n\n        if (valueListGap != null) {\n            eSelect.setPickerGap(valueListGap);\n        }\n\n        if (valueListMaxHeight != null) {\n            eSelect.setPickerMaxHeight(valueListMaxHeight);\n        }\n\n        if (valueListMaxWidth != null) {\n            eSelect.setPickerMaxWidth(valueListMaxWidth);\n        }\n\n        // we don't want to add this if full row editing, otherwise selecting will stop the\n        // full row editing.\n        if (gridOptionsService.get('editType') !== 'fullRow') {\n            this.addManagedListener(this.eSelect, AgSelect.EVENT_ITEM_SELECTED, () => params.stopEditing());\n        }\n    }\n\n    public afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eSelect.getFocusableElement().focus();\n        }\n\n        if (this.startedByEnter) {\n            setTimeout(() => {\n                if (this.isAlive()) {\n                    this.eSelect.showPicker();\n                }\n            });\n        }\n    }\n\n    public focusIn(): void {\n        this.eSelect.getFocusableElement().focus();\n    }\n\n    public getValue(): any {\n        return this.eSelect.getValue();\n    }\n\n    public isPopup() {\n        return false;\n    }\n}", "import { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { isBrowserSafari } from \"../../utils/browser\";\nimport { KeyCode } from '../../constants/keyCode';\n\nexport interface CellEditorInput<TValue, P extends ICellEditorParams, I extends AgInputTextField> {\n    getTemplate(): string;\n    init(eInput: I, params: P): void;\n    getValue(): TValue | null | undefined;\n    getStartValue(): string | null | undefined;\n    setCaret?(): void\n}\n\nexport class SimpleCellEditor<TValue, P extends ICellEditorParams, I extends AgInputTextField> extends PopupComponent implements ICellEditorComp {\n    private highlightAllOnFocus: boolean;\n    private focusAfterAttached: boolean;\n    protected params: ICellEditorParams;\n    @RefSelector('eInput') protected eInput: I;\n\n    constructor(protected cellEditorInput: CellEditorInput<TValue, P, I>) {\n        super(/* html */`\n            <div class=\"ag-cell-edit-wrapper\">\n                ${cellEditorInput.getTemplate()}\n            </div>`\n        );\n    }\n\n    public init(params: P): void {\n        this.params = params;\n\n        const eInput = this.eInput;\n        this.cellEditorInput.init(eInput, params);\n        let startValue: string | null | undefined;\n\n        // cellStartedEdit is only false if we are doing fullRow editing\n        if (params.cellStartedEdit) {\n            this.focusAfterAttached = true;\n            const eventKey = params.eventKey;\n\n            if (eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {\n                startValue = '';\n            } else if (eventKey && eventKey.length === 1) {\n                startValue = eventKey;\n            } else {\n                startValue = this.cellEditorInput.getStartValue();\n\n                if (eventKey !== KeyCode.F2) {\n                    this.highlightAllOnFocus = true;\n                }\n            }\n\n        } else {\n            this.focusAfterAttached = false;\n            startValue = this.cellEditorInput.getStartValue();\n        }\n\n        if (startValue != null) {\n            eInput.setStartValue(startValue);\n        }\n\n        this.addManagedListener(eInput.getGui(), 'keydown', (event: KeyboardEvent) => {\n            const { key } = event;\n\n            if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {\n                event.preventDefault();\n            }\n        });\n    }\n\n    public afterGuiAttached(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const eInput = this.eInput;\n\n        eInput.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n\n        if (!this.focusAfterAttached) { return; }\n        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input\n        // to be focused before setSelectionRange will work. But it triggers a bug in Safari where\n        // explicitly focusing then blurring an empty field will cause the parent container to scroll.\n        if (!isBrowserSafari()) {\n            eInput.getFocusableElement().focus();\n        }\n\n        const inputEl = eInput.getInputElement();\n\n        if (this.highlightAllOnFocus) {\n            inputEl.select();\n        } else {\n            this.cellEditorInput.setCaret?.();\n        }\n    }\n\n    // gets called when tabbing through cells and in full row edit mode\n    public focusIn(): void {\n        const eInput = this.eInput;\n        const focusEl = eInput.getFocusableElement();\n        const inputEl = eInput.getInputElement();\n\n        focusEl.focus();\n        inputEl.select();\n    }\n\n    public getValue(): TValue | null | undefined {\n        return this.cellEditorInput.getValue();\n    }\n\n    public isPopup() {\n        return false;\n    }\n}\n", "import { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { CellEditorInput, SimpleCellEditor } from \"./simpleCellEditor\";\nimport { exists } from \"../../utils/generic\";\n\nexport interface ITextCellEditorParams<TData = any, TValue = any, TContext = any> extends ICellEditorParams<TData, TValue, TContext> {\n    /** If `true`, the editor will use the provided `colDef.valueFormatter` to format the value displayed in the editor.\n     * Used when the cell value needs formatting prior to editing, such as when using reference data and you\n     * want to display text rather than code. */\n    useFormatter: boolean;\n\n    /**\n     * Max number of characters to allow.\n     * @default 524288\n     */\n    maxLength?: number\n}\n\nclass TextCellEditorInput<TValue = any> implements CellEditorInput<TValue, ITextCellEditorParams<any, TValue>, AgInputTextField> {\n    private eInput: AgInputTextField;\n    private params: ITextCellEditorParams<any, TValue>;\n\n    public getTemplate() {\n        return /* html */`<ag-input-text-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-text-field>`;\n    }\n\n    public init(eInput: AgInputTextField, params: ITextCellEditorParams<any, TValue>): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.maxLength != null) {\n            eInput.setMaxLength(params.maxLength);\n        }\n    }\n\n    public getValue(): TValue | null | undefined {\n        const value = this.eInput.getValue();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value!);\n    }\n\n    public getStartValue(): string | null | undefined {\n        const formatValue = this.params.useFormatter || this.params.column.getColDef().refData;\n        return formatValue ? this.params.formatValue(this.params.value) : this.params.value as any;\n    }\n\n    public setCaret(): void {\n        // when we started editing, we want the caret at the end, not the start.\n        // this comes into play in two scenarios:\n        //   a) when user hits F2\n        //   b) when user hits a printable character\n        const value = this.eInput.getValue();\n        const len = (exists(value) && value.length) || 0;\n\n        if (len) {\n            this.eInput.getInputElement().setSelectionRange(len, len);\n        }\n    }\n}\n\nexport class TextCellEditor extends SimpleCellEditor<any, ITextCellEditorParams, AgInputTextField> {\n    constructor() {\n        super(new TextCellEditorInput());\n    }\n}\n", "import { Autowired } from \"../../context/context\";\nimport { ICellRenderer } from \"./iCellRenderer\";\nimport { Component } from \"../../widgets/component\";\nimport { FilterManager } from \"../../filter/filterManager\";\nimport { exists } from \"../../utils/generic\";\nimport { clearElement } from \"../../utils/dom\";\n\nconst ARROW_UP = '\\u2191';\nconst ARROW_DOWN = '\\u2193';\n\nexport class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {\n\n    private lastValue: number;\n\n    private eValue: HTMLElement;\n    private eDelta: HTMLElement;\n\n    private refreshCount = 0;\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    constructor() {\n        super();\n\n        const template = document.createElement('span');\n        const delta = document.createElement('span');\n        delta.setAttribute('class', 'ag-value-change-delta');\n        \n        const value = document.createElement('span');\n        value.setAttribute('class', 'ag-value-change-value');\n        \n        template.appendChild(delta);\n        template.appendChild(value);\n\n        this.setTemplateFromElement(template);\n    }\n\n    public init(params: any): void {\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\n\n        this.refresh(params, true);\n    }\n\n    private showDelta(params: any, delta: number): void {\n\n        const absDelta = Math.abs(delta);\n        const valueFormatted = params.formatValue(absDelta);\n\n        const valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;\n\n        const deltaUp = (delta >= 0);\n\n        if (deltaUp) {\n            this.eDelta.textContent = ARROW_UP + valueToUse;\n        } else {\n            // because negative, use ABS to remove sign\n            this.eDelta.textContent = ARROW_DOWN + valueToUse;\n        }\n\n        this.eDelta.classList.toggle('ag-value-change-delta-up', deltaUp);\n        this.eDelta.classList.toggle('ag-value-change-delta-down', !deltaUp);\n    }\n\n    private setTimerToRemoveDelta(): void {\n        // the refreshCount makes sure that if the value updates again while\n        // the below timer is waiting, then the below timer will realise it\n        // is not the most recent and will not try to remove the delta value.\n        this.refreshCount++;\n        const refreshCountCopy = this.refreshCount;\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            window.setTimeout(() => {\n                if (refreshCountCopy === this.refreshCount) {\n                    this.hideDeltaValue();\n                }\n            }, 2000);\n        });\n    }\n\n    private hideDeltaValue(): void {\n        this.eValue.classList.remove('ag-value-change-value-highlight');\n        clearElement(this.eDelta);\n    }\n\n    public refresh(params: any, isInitialRender: boolean = false): boolean {\n        const value = params.value;\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        if (exists(params.valueFormatted)) {\n            this.eValue.textContent = params.valueFormatted;\n        } else if (exists(params.value)) {\n            this.eValue.textContent = value;\n        } else {\n            clearElement(this.eValue);\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        if (typeof value === 'number' && typeof this.lastValue === 'number') {\n            const delta = value - this.lastValue;\n            this.showDelta(params, delta);\n        }\n\n        // highlight the current value, but only if it's not new, otherwise it\n        // would get highlighted first time the value is shown\n        if (this.lastValue) {\n            this.eValue.classList.add('ag-value-change-value-highlight');\n        }\n\n        if(!isInitialRender){\n            this.setTimerToRemoveDelta();\n        }\n\n        this.lastValue = value;\n\n        return true;\n    }\n}\n", "import { Autowired } from \"../../context/context\";\nimport { ICellRenderer } from \"./iCellRenderer\";\nimport { Component } from \"../../widgets/component\";\nimport { FilterManager } from \"../../filter/filterManager\";\nimport { clearElement } from \"../../utils/dom\";\nimport { missing, exists } from \"../../utils/generic\";\n\nexport class AnimateSlideCellRenderer extends Component implements ICellRenderer {\n\n    private eCurrent: HTMLElement;\n    private ePrevious: HTMLElement | null;\n\n    private lastValue: any;\n\n    private refreshCount = 0;\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    constructor() {\n        super();\n\n        const template = document.createElement('span');\n        const slide = document.createElement('span');\n        slide.setAttribute('class', 'ag-value-slide-current');        \n        template.appendChild(slide);\n\n        this.setTemplateFromElement(template);\n\n        this.eCurrent = this.queryForHtmlElement('.ag-value-slide-current');\n    }\n\n    public init(params: any): void {\n        this.refresh(params, true);\n    }\n\n    public addSlideAnimation(): void {\n        this.refreshCount++;\n\n        // below we keep checking this, and stop working on the animation\n        // if it no longer matches - this means another animation has started\n        // and this one is stale.\n        const refreshCountCopy = this.refreshCount;\n\n        // if old animation, remove it\n        if (this.ePrevious) {\n            this.getGui().removeChild(this.ePrevious);\n        }\n\n        const prevElement = document.createElement('span');\n        prevElement.setAttribute('class','ag-value-slide-previous ag-value-slide-out');\n        this.ePrevious = prevElement;\n\n        this.ePrevious.textContent = this.eCurrent.textContent;\n        this.getGui().insertBefore(this.ePrevious, this.eCurrent);\n\n        // having timeout of 0 allows use to skip to the next css turn,\n        // so we know the previous css classes have been applied. so the\n        // complex set of setTimeout below creates the animation\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            window.setTimeout(() => {\n                if (refreshCountCopy !== this.refreshCount) { return; }\n                this.ePrevious!.classList.add('ag-value-slide-out-end');\n            }, 50);\n\n            window.setTimeout(() => {\n                if (refreshCountCopy !== this.refreshCount) { return; }\n                this.getGui().removeChild(this.ePrevious!);\n                this.ePrevious = null;\n            }, 3000);\n        });\n    }\n\n    public refresh(params: any, isInitialRender: boolean = false): boolean {\n        let value = params.value;\n\n        if (missing(value)) {\n            value = '';\n        }\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        if(!isInitialRender){\n            this.addSlideAnimation();\n        }\n\n        this.lastValue = value;\n\n        if (exists(params.valueFormatted)) {\n            this.eCurrent.textContent = params.valueFormatted;\n        } else if (exists(params.value)) {\n            this.eCurrent.textContent = value;\n        } else {\n            clearElement(this.eCurrent);\n        }\n\n        return true;\n    }\n}\n", "import { AgEvent, AgEventListener, Events, RowEvent, RowSelectedEvent, SelectionEventSourceType } from \"../events\";\nimport { EventService } from \"../eventService\";\nimport { DetailGridInfo } from \"../gridApi\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { IServerSideRowModel } from \"../interfaces/iServerSideRowModel\";\nimport { IServerSideStore } from \"../interfaces/IServerSideStore\";\nimport { Beans } from \"../rendering/beans\";\nimport { debounce } from \"../utils/function\";\nimport { exists, missing, missingOrEmpty } from \"../utils/generic\";\nimport { Column } from \"./column\";\nimport { CellChangedEvent, DataChangedEvent, IRowNode, RowHighlightPosition, RowNodeEvent, RowNodeEventType, RowPinnedType, SetSelectedParams } from \"../interfaces/iRowNode\";\nimport { CellEditRequestEvent } from \"../events\";\nimport { FrameworkEventListenerService } from \"../misc/frameworkEventListenerService\";\n\nexport class RowNode<TData = any> implements IEventEmitter, IRowNode<TData> {\n\n    public static ID_PREFIX_ROW_GROUP = 'row-group-';\n    public static ID_PREFIX_TOP_PINNED = 't-';\n    public static ID_PREFIX_BOTTOM_PINNED = 'b-';\n\n    private static OBJECT_ID_SEQUENCE = 0;\n\n    public static EVENT_ROW_SELECTED: RowNodeEventType = 'rowSelected';\n    public static EVENT_DATA_CHANGED: RowNodeEventType = 'dataChanged';\n    public static EVENT_CELL_CHANGED: RowNodeEventType = 'cellChanged';\n    public static EVENT_ALL_CHILDREN_COUNT_CHANGED: RowNodeEventType = 'allChildrenCountChanged';\n    public static EVENT_MASTER_CHANGED: RowNodeEventType = 'masterChanged';\n    public static EVENT_GROUP_CHANGED: RowNodeEventType = 'groupChanged';\n    public static EVENT_MOUSE_ENTER: RowNodeEventType = 'mouseEnter';\n    public static EVENT_MOUSE_LEAVE: RowNodeEventType = 'mouseLeave';\n    public static EVENT_HEIGHT_CHANGED: RowNodeEventType = 'heightChanged';\n    public static EVENT_TOP_CHANGED: RowNodeEventType = 'topChanged';\n    public static EVENT_DISPLAYED_CHANGED: RowNodeEventType = 'displayedChanged';\n    public static EVENT_FIRST_CHILD_CHANGED: RowNodeEventType = 'firstChildChanged';\n    public static EVENT_LAST_CHILD_CHANGED: RowNodeEventType = 'lastChildChanged';\n    public static EVENT_CHILD_INDEX_CHANGED: RowNodeEventType = 'childIndexChanged';\n    public static EVENT_ROW_INDEX_CHANGED: RowNodeEventType = 'rowIndexChanged';\n    public static EVENT_EXPANDED_CHANGED: RowNodeEventType = 'expandedChanged';\n    public static EVENT_HAS_CHILDREN_CHANGED: RowNodeEventType = 'hasChildrenChanged';\n    public static EVENT_SELECTABLE_CHANGED: RowNodeEventType = 'selectableChanged';\n    public static EVENT_UI_LEVEL_CHANGED: RowNodeEventType = 'uiLevelChanged';\n    public static EVENT_HIGHLIGHT_CHANGED: RowNodeEventType = 'rowHighlightChanged';\n    public static EVENT_DRAGGING_CHANGED: RowNodeEventType = 'draggingChanged';\n\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\n    public id: string | undefined;\n\n    /** If using row grouping, contains the group values for this group. */\n    public groupData: { [key: string]: any | null; } | null;\n\n    /** If using row grouping and aggregation, contains the aggregation data. */\n    public aggData: any;\n\n    /**\n     * The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */\n    public data: TData | undefined;\n\n    /** The parent node to this node, or empty if top level */\n    public parent: RowNode<TData> | null;\n\n    /** How many levels this node is from the top when grouping. */\n    public level: number;\n\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`)*/\n    public uiLevel: number;\n\n    /**\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n     */\n    public rowGroupIndex: number | null;\n\n    /** `true` if this node is a group node (i.e. it has children) */\n    public group: boolean | undefined;\n\n    /** `true` if this row is getting dragged */\n    public dragging: boolean;\n\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail) */\n    public master: boolean;\n\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/\n    public detail: boolean;\n\n    /** If this row is a master row that was expanded, this points to the associated detail row. */\n    public detailNode: RowNode;\n\n    /** If master detail, this contains details about the detail grid */\n    public detailGridInfo: DetailGridInfo | null;\n\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\n    public leafGroup: boolean;\n\n    /** `true` if this is the first child in this group. Changes when data is sorted. */\n    public firstChild: boolean;\n\n    /** `true` if this is the last child in this group. Changes when data is sorted. */\n    public lastChild: boolean;\n\n    /** Index of this row with respect to its parent when grouping. Changes when data is sorted. */\n    public childIndex: number;\n\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n    public rowIndex: number | null = null;\n\n    /** Either 'top' or 'bottom' if row pinned, otherwise `undefined` or `null`. */\n    public rowPinned: RowPinnedType;\n\n    /** When true, this row will appear in the top */\n    public sticky: boolean;\n\n    /** If row is pinned, then pinnedRowTop is used rather than rowTop */\n    public stickyRowTop: number;\n\n    /** If using quick filter, stores a string representation of the row for searching against. */\n    public quickFilterAggregateText: string | null;\n\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\n    public footer: boolean;\n\n    /** The field we are grouping on eg 'country'. */\n    public field: string | null;\n\n    /** The row group column used for this group, e.g. the Country column instance. */\n    public rowGroupColumn: Column | null;\n\n    /** The key for the group eg Ireland, UK, USA */\n    public key: string | null = null;\n\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\n    public stub: boolean;\n\n    /** Used by server side row model, true if this row node failed a load */\n    public failedLoad: boolean;\n\n    /** Used by server side row model, true if this node needs refreshed by the server when in viewport */\n    public __needsRefreshWhenVisible: boolean;\n\n    /** All lowest level nodes beneath this node, no groups. */\n    public allLeafChildren: RowNode<TData>[];\n\n    /** Children of this group. If multi levels of grouping, shows only immediate children. */\n    public childrenAfterGroup: RowNode<TData>[] | null;\n\n    /** Filtered children of this group. */\n    public childrenAfterFilter: RowNode<TData>[] | null;\n\n    /** Aggregated and re-filtered children of this group. */\n    public childrenAfterAggFilter: RowNode<TData>[] | null;\n\n    /** Sorted children of this group. */\n    public childrenAfterSort: RowNode<TData>[] | null;\n\n    /** Number of children and grand children. */\n    public allChildrenCount: number | null;\n\n    /** Children mapped by the pivot columns. */\n    public childrenMapped: { [key: string]: any; } | null = {};\n\n    /** Server Side Row Model Only - the children are in an infinite cache. */\n    public childStore: IServerSideStore | null;\n\n    /** `true` if group is expanded, otherwise `false`. */\n    public expanded: boolean;\n\n    /** If using footers, reference to the footer node for this group. */\n    public sibling: RowNode;\n\n    /** The height, in pixels, of this row */\n    public rowHeight: number | null | undefined;\n\n    /** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\n     * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\n     * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\n     * the row height calculation and set rowHeightEstimated=false.*/\n    public rowHeightEstimated: boolean;\n\n    /**\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */\n    public displayed: boolean = false;\n\n    /** The row top position in pixels. */\n    public rowTop: number | null = null;\n\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n     * it is used so new rows can animate in from their old position. */\n    public oldRowTop: number | null = null;\n\n    /** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n    public selectable = true;\n\n    /** `true` if this node is a daemon. This means row is not part of the model. Can happen when then\n     * the row is selected and then the user sets a different ID onto the node. The nodes is then\n     * representing a different entity, so the selection controller, if the node is selected, takes\n     * a copy where daemon=true. */\n    public __daemon: boolean;\n\n    /** Used by the value service, stores values for a particular change detection turn. */\n    public __cacheData: { [colId: string]: any; };\n    public __cacheVersion: number;\n\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n    public __objectId: number = RowNode.OBJECT_ID_SEQUENCE++;\n\n    /** We cache the result of hasChildren() so that we can be aware of when it has changed, and hence\n     * fire the event. Really we should just have hasChildren as an attribute and do away with hasChildren()\n     * method, however that would be a breaking change. */\n    private __hasChildren: boolean;\n\n    /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n     * indexed by the Column ID. */\n    private __autoHeights?: { [id: string]: number | undefined } = {};\n\n    /** `true` when nodes with the same id are being removed and added as part of the same batch transaction */\n    public alreadyRendered = false;\n\n    public highlighted: RowHighlightPosition | null = null;\n\n    private hovered: boolean = false;\n\n    private selected: boolean | undefined = false;\n    private eventService: EventService | null;\n    private frameworkEventListenerService: FrameworkEventListenerService | null;\n\n    private beans: Beans;\n\n    private checkAutoHeightsDebounced: () => void;\n\n    constructor(beans: Beans) {\n        this.beans = beans;\n    }\n\n    /**\n     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    public setData(data: TData): void {\n        this.setDataCommon(data, false);\n    }\n\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n\n    /**\n     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    public updateData(data: TData): void {\n        this.setDataCommon(data, true);\n    }\n\n    private setDataCommon(data: TData, update: boolean): void {\n        const oldData = this.data;\n\n        this.data = data;\n        this.beans.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n        this.resetQuickFilterAggregateText();\n\n        const event: DataChangedEvent<TData> = this.createDataChangedEvent(data, oldData, update);\n\n        this.dispatchLocalEvent(event);\n    }\n\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    private updateDataOnDetailNode(): void {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    }\n\n    private createDataChangedEvent(newData: TData, oldData: TData | undefined, update: boolean): DataChangedEvent<TData> {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    }\n\n    private createLocalRowEvent(type: RowNodeEventType): RowNodeEvent {\n        return {\n            type: type,\n            node: this\n        };\n    }\n\n    public getRowIndexString(): string {\n        if (this.rowPinned === 'top') {\n            return 't-' + this.rowIndex;\n        }\n\n        if (this.rowPinned === 'bottom') {\n            return 'b-' + this.rowIndex;\n        }\n\n        return this.rowIndex!.toString();\n    }\n\n    private createDaemonNode(): RowNode {\n        const oldNode = new RowNode(this.beans);\n\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.__daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n\n        return oldNode;\n    }\n\n    public setDataAndId(data: TData, id: string | undefined): void {\n        const oldNode = exists(this.id) ? this.createDaemonNode() : null;\n        const oldData = this.data;\n\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.checkRowSelectable();\n        this.beans.selectionService.syncInRowNode(this, oldNode);\n\n        const event: DataChangedEvent<TData> = this.createDataChangedEvent(data, oldData, false);\n\n        this.dispatchLocalEvent(event);\n    }\n\n    private checkRowSelectable() {\n        const isRowSelectableFunc = this.beans.gridOptionsService.get('isRowSelectable');\n        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc!(this) : true);\n    }\n\n    public setRowSelectable(newVal: boolean, suppressSelectionUpdate?: boolean) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n\n            if (suppressSelectionUpdate) { return; }\n\n            const isGroupSelectsChildren = this.beans.gridOptionsService.get('groupSelectsChildren');\n            if (isGroupSelectsChildren) {\n                const selected = this.calculateSelectedFromChildren();\n                this.setSelectedParams({\n                    newValue: selected ?? false,\n                    source: 'selectableChanged',\n                });\n                return;\n            }\n\n            // if row is selected but shouldn't be selectable, then deselect.\n            if (this.isSelected() && !this.selectable) {\n                this.setSelectedParams({\n                    newValue: false,\n                    source: 'selectableChanged',\n                });\n            }\n        }\n    }\n\n    public setId(id?: string): void {\n        // see if user is providing the id's\n        const getRowIdFunc = this.beans.gridOptionsService.getCallback('getRowId');\n\n        if (getRowIdFunc) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                // we pass 'true' as we skip this level when generating keys,\n                // as we don't always have the key for this level (eg when updating\n                // data via transaction on SSRM, we are getting key to look up the\n                // RowNode, don't have the RowNode yet, thus no way to get the current key)\n                const parentKeys = this.getGroupKeys(true);\n                this.id = getRowIdFunc({\n                    data: this.data,\n                    parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                    level: this.level\n                });\n                // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that\n                // it has 'startsWith' in case the user provided a number.\n                if (this.id !== null && typeof this.id === 'string' && this.id.startsWith(RowNode.ID_PREFIX_ROW_GROUP)) {\n                    console.error(`AG Grid: Row IDs cannot start with ${RowNode.ID_PREFIX_ROW_GROUP}, this is a reserved prefix for AG Grid's row grouping feature.`);\n                }\n                // force id to be a string\n                if (this.id !== null && typeof this.id !== 'string') {\n                    this.id = '' + this.id;\n                }\n            } else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        } else {\n            this.id = id;\n        }\n    }\n\n    public getGroupKeys(excludeSelf = false): string[] {\n        const keys: string[] = [];\n\n        let pointer: RowNode | null = this;\n        if (excludeSelf) {\n            pointer = pointer.parent;\n        }\n        while (pointer && pointer.level >= 0) {\n            keys.push(pointer.key!);\n            pointer = pointer.parent;\n        }\n        keys.reverse();\n\n        return keys;\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        if (!exists(this.rowTop) || !exists(this.rowHeight)) { return false; }\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    }\n\n    public setFirstChild(firstChild: boolean): void {\n        if (this.firstChild === firstChild) { return; }\n\n        this.firstChild = firstChild;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    }\n\n    public setLastChild(lastChild: boolean): void {\n        if (this.lastChild === lastChild) { return; }\n\n        this.lastChild = lastChild;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    }\n\n    public setChildIndex(childIndex: number): void {\n        if (this.childIndex === childIndex) { return; }\n\n        this.childIndex = childIndex;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    }\n\n    public setRowTop(rowTop: number | null): void {\n        this.oldRowTop = this.rowTop;\n\n        if (this.rowTop === rowTop) { return; }\n\n        this.rowTop = rowTop;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n\n        this.setDisplayed(rowTop !== null);\n    }\n\n    public clearRowTopAndRowIndex(): void {\n        this.oldRowTop = null;\n        this.setRowTop(null);\n        this.setRowIndex(null);\n    }\n\n    private setDisplayed(displayed: boolean): void {\n        if (this.displayed === displayed) { return; }\n\n        this.displayed = displayed;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));\n        }\n    }\n\n    public setDragging(dragging: boolean): void {\n        if (this.dragging === dragging) { return; }\n\n        this.dragging = dragging;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    }\n\n    public setHighlighted(highlighted: RowHighlightPosition | null): void {\n        if (highlighted === this.highlighted) { return; }\n\n        this.highlighted = highlighted;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));\n        }\n    }\n\n    public setHovered(hovered: boolean): void {\n        if (this.hovered === hovered) { return; }\n\n        this.hovered = hovered;\n    }\n\n    public isHovered(): boolean {\n        return this.hovered;\n    }\n\n    public setAllChildrenCount(allChildrenCount: number | null): void {\n        if (this.allChildrenCount === allChildrenCount) { return; }\n\n        this.allChildrenCount = allChildrenCount;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    }\n\n    public setMaster(master: boolean): void {\n        if (this.master === master) { return; }\n\n        // if changing AWAY from master, then unexpand, otherwise\n        // next time it's shown it is expanded again\n        if (this.master && !master) {\n            this.expanded = false;\n        }\n\n        this.master = master;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));\n        }\n    }\n\n    public setGroup(group: boolean): void {\n        if (this.group === group) { return; }\n\n        // if we used to be a group, and no longer, then close the node\n        if (this.group && !group) {\n            this.expanded = false;\n        }\n\n        this.group = group;\n        this.updateHasChildren();\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_GROUP_CHANGED));\n        }\n    }\n\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */\n    public setRowHeight(rowHeight: number | undefined | null, estimated: boolean = false): void {\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    }\n\n    public setRowAutoHeight(cellHeight: number | undefined, column: Column): void {\n        if (!this.__autoHeights) {\n            this.__autoHeights = {};\n        }\n        this.__autoHeights[column.getId()] = cellHeight;\n\n        if (cellHeight != null) {\n            if (this.checkAutoHeightsDebounced == null) {\n                this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);\n            }\n            this.checkAutoHeightsDebounced();\n        }\n    }\n\n    public checkAutoHeights(): void {\n        let notAllPresent = false;\n        let nonePresent = true;\n        let newRowHeight = 0;\n\n        const autoHeights = this.__autoHeights!;\n        if (autoHeights == null) { return; }\n\n        const displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();\n        displayedAutoHeightCols.forEach(col => {\n            let cellHeight = autoHeights[col.getId()];\n\n            if (cellHeight == null) {\n                // If column spanning is active a column may not provide auto height for a row if that\n                // cell is not present for the given row due to a previous cell spanning over the auto height column.\n                if (this.beans.columnModel.isColSpanActive()) {\n                    let activeColsForRow: Column[] = [];\n                    switch (col.getPinned()) {\n                        case 'left':\n                            activeColsForRow = this.beans.columnModel.getDisplayedLeftColumnsForRow(this);\n                            break;\n                        case 'right':\n                            activeColsForRow = this.beans.columnModel.getDisplayedRightColumnsForRow(this);\n                            break;\n                        case null:\n                            activeColsForRow = this.beans.columnModel.getViewportCenterColumnsForRow(this);\n                            break;\n                    }\n                    if (activeColsForRow.includes(col)) {\n                        // Column is present in the row, i.e not spanned over, but no auto height was provided so we cannot calculate the row height\n                        notAllPresent = true;\n                        return;\n                    }\n                    // Ignore this column as it is spanned over and not present in the row\n                    cellHeight = -1;\n                } else {\n                    notAllPresent = true;\n                    return;\n                }\n            } else {\n                // At least one auto height is present\n                nonePresent = false;\n            }\n\n            if (cellHeight > newRowHeight) {\n                newRowHeight = cellHeight;\n            }\n        });\n\n        if (notAllPresent) { return; }\n\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n        // this prevents the row starting very small when waiting for async components,\n        // which would then mean the grid squashes in far to many rows (as small heights\n        // means more rows fit in) which looks crap. so best ignore small values and assume\n        // we are still waiting for values to render.\n        if (nonePresent || newRowHeight < 10) {\n            newRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this).height;\n        }\n\n        if (newRowHeight == this.rowHeight) { return; }\n\n        this.setRowHeight(newRowHeight);\n\n        const rowModel = this.beans.rowModel as (IClientSideRowModel | IServerSideRowModel);\n        if (rowModel.onRowHeightChangedDebounced) {\n            rowModel.onRowHeightChangedDebounced();\n        }\n    }\n\n    public setRowIndex(rowIndex: number | null): void {\n        if (this.rowIndex === rowIndex) { return; }\n\n        this.rowIndex = rowIndex;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    }\n\n    public setUiLevel(uiLevel: number): void {\n        if (this.uiLevel === uiLevel) { return; }\n\n        this.uiLevel = uiLevel;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    }\n\n    /**\n     * Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.\n     */\n    public setExpanded(expanded: boolean, e?: MouseEvent | KeyboardEvent): void {\n        if (this.expanded === expanded) { return; }\n\n        this.expanded = expanded;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n\n        const event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {\n            expanded,\n            event: e || null\n        });\n\n        this.beans.rowNodeEventThrottle.dispatchExpanded(event);\n\n        // when using footers we need to refresh the group row, as the aggregation\n        // values jump between group and footer\n        if (this.sibling) {\n            this.beans.rowRenderer.refreshCells({ rowNodes: [this] });\n        }\n    }\n\n    private createGlobalRowEvent(type: string): RowEvent<TData> {\n        return this.beans.gridOptionsService.addGridCommonParams({\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned\n        });\n    }\n\n    private dispatchLocalEvent(event: AgEvent): void {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `true` if the value was changed, otherwise `false`.\n     */\n    public setDataValue(colKey: string | Column, newValue: any, eventSource?: string): boolean {\n        const getColumnFromKey = () => {\n            if (typeof colKey !== 'string') {\n                return colKey;\n            }\n            // if in pivot mode, grid columns wont include primary columns\n            return this.beans.columnModel.getGridColumn(colKey) ?? this.beans.columnModel.getPrimaryColumn(colKey);\n        }\n        // When it is done via the editors, no 'cell changed' event gets fired, as it's assumed that\n        // the cell knows about the change given it's in charge of the editing.\n        // this method is for the client to call, so the cell listens for the change\n        // event, and also flashes the cell when the change occurs.\n        const column = getColumnFromKey()!;\n        const oldValue = this.getValueFromValueService(column);\n\n        if (this.beans.gridOptionsService.get('readOnlyEdit')) {\n            this.dispatchEventForSaveValueReadOnly(column, oldValue, newValue, eventSource);\n            return false;\n        }\n\n        const valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);\n\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n        this.checkRowSelectable();\n\n        return valueChanged;\n    }\n\n    public getValueFromValueService(column: Column): any {\n        // if we don't check this, then the grid will render leaf groups as open even if we are not\n        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow\n        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded\n        // them via the API, or user user expanded them in the UI before turning on pivot mode\n        const lockedClosedGroup = this.leafGroup && this.beans.columnModel.isPivotMode();\n\n        const isOpenGroup = this.group && this.expanded && !this.footer && !lockedClosedGroup;\n\n        // are we showing group footers\n        const getGroupIncludeFooter = this.beans.gridOptionsService.getGroupIncludeFooter();\n        const groupFootersEnabled = getGroupIncludeFooter({ node: this });\n\n        // if doing footers, we normally don't show agg data at group level when group is open\n        const groupAlwaysShowAggData = this.beans.gridOptionsService.get('groupSuppressBlankHeader');\n\n        // if doing grouping and footers, we don't want to include the agg value\n        // in the header when the group is open\n        const ignoreAggData = (isOpenGroup && groupFootersEnabled) && !groupAlwaysShowAggData;\n\n        const value = this.beans.valueService.getValue(column, this, false, ignoreAggData);\n\n        return value;\n    }\n\n    private dispatchEventForSaveValueReadOnly(column: Column, oldValue: any, newValue: any, eventSource?: string): void {\n        const event: CellEditRequestEvent = this.beans.gridOptionsService.addGridCommonParams({\n            type: Events.EVENT_CELL_EDIT_REQUEST,\n            event: null,\n            rowIndex: this.rowIndex!,\n            rowPinned: this.rowPinned,\n            column: column,\n            colDef: column.getColDef(),\n            data: this.data,\n            node: this,\n            oldValue,\n            newValue,\n            value: newValue,\n            source: eventSource\n        });\n\n        this.beans.eventService.dispatchEvent(event);\n    }\n\n    public setGroupValue(colKey: string | Column, newValue: any): void {\n        const column = this.beans.columnModel.getGridColumn(colKey)!;\n\n        if (missing(this.groupData)) { this.groupData = {}; }\n\n        const columnId = column.getColId();\n        const oldValue = this.groupData[columnId];\n\n        if (oldValue === newValue) { return; }\n\n        this.groupData[columnId] = newValue;\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    }\n\n    // sets the data for an aggregation\n    public setAggData(newAggData: any): void {\n        const oldAggData = this.aggData;\n        this.aggData = newAggData;\n\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            const eventFunc = (colId: string) => {\n                const value = this.aggData ? this.aggData[colId] : undefined;\n                const oldValue = oldAggData ? oldAggData[colId] : undefined;\n\n                if (value === oldValue) { return; }\n\n                // do a quick lookup - despite the event it's possible the column no longer exists\n                const column = this.beans.columnModel.lookupGridColumn(colId)!;\n                if (!column) { return; }\n\n                this.dispatchCellChangedEvent(column, value, oldValue);\n            };\n\n            for (const key in this.aggData) {\n                eventFunc(key);\n            }\n            for (const key in newAggData) {\n                if (key in this.aggData) { continue; } // skip if already fired an event.\n                eventFunc(key);\n            }\n        }\n    }\n\n    public updateHasChildren(): void {\n        // in CSRM, the group property will be set before the childrenAfterGroup property, check both to prevent flickering\n        let newValue: boolean | null = (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n\n        const isSsrm = this.beans.gridOptionsService.isRowModelType('serverSide');\n        if (isSsrm) {\n            const isTreeData = this.beans.gridOptionsService.get('treeData');\n            const isGroupFunc = this.beans.gridOptionsService.get('isServerSideGroup');\n            // stubs and footers can never have children, as they're grid rows. if tree data the presence of children\n            // is determined by the isServerSideGroup callback, if not tree data then the rows group property will be set.\n            newValue = !this.stub && !this.footer && (isTreeData ? !!isGroupFunc && isGroupFunc(this.data) : !!this.group);\n        }\n\n        if (newValue !== this.__hasChildren) {\n            this.__hasChildren = !!newValue;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));\n            }\n        }\n    }\n\n    public hasChildren(): boolean {\n        if (this.__hasChildren == null) {\n            this.updateHasChildren();\n        }\n        return this.__hasChildren;\n    }\n\n    public isEmptyRowGroupNode(): boolean | undefined {\n        return this.group && missingOrEmpty(this.childrenAfterGroup);\n    }\n\n    private dispatchCellChangedEvent(column: Column, newValue: TData, oldValue: TData): void {\n        const cellChangedEvent: CellChangedEvent<TData> = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue,\n            oldValue: oldValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    }\n\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`. */\n    public resetQuickFilterAggregateText(): void {\n        this.quickFilterAggregateText = null;\n    }\n\n    /** Returns:\n    * - `true` if the node can be expanded, i.e it is a group or master row.\n    * - `false` if the node cannot be expanded\n    */\n    public isExpandable(): boolean {\n        if (this.footer) { return false; }\n\n        if (this.beans.columnModel.isPivotMode()) {\n            // master detail and leaf groups aren't expandable in pivot mode.\n            return this.hasChildren() && !this.leafGroup;\n        }\n        return this.hasChildren() || !!this.master;\n    }\n\n    /** Returns:\n     * - `true` if node is selected,\n     * - `false` if the node isn't selected\n     * - `undefined` if it's partially selected (group where not all children are selected). */\n    public isSelected(): boolean | undefined {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) { return this.sibling.isSelected(); }\n\n        return this.selected;\n    }\n\n    /** Perform a depth-first search of this node and its children. */\n    public depthFirstSearch(callback: (rowNode: RowNode<TData>) => void): void {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(child => child.depthFirstSearch(callback));\n        }\n        callback(this);\n    }\n\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    public calculateSelectedFromChildren(): boolean | undefined | null {\n        let atLeastOneSelected = false;\n        let atLeastOneDeSelected = false;\n        let atLeastOneMixed = false;\n\n        if (!this.childrenAfterGroup?.length) {\n            return this.selectable ? this.selected : null;\n        }\n\n        for (let i = 0; i < this.childrenAfterGroup.length; i++) {\n            const child = this.childrenAfterGroup[i];\n\n            let childState = child.isSelected();\n            // non-selectable nodes must be calculated from their children, or ignored if no value results.\n            if (!child.selectable) {\n                const selectable = child.calculateSelectedFromChildren();\n                if (selectable === null) {\n                    continue;\n                }\n                childState = selectable;\n            }\n\n            switch (childState) {\n                case true:\n                    atLeastOneSelected = true;\n                    break;\n                case false:\n                    atLeastOneDeSelected = true;\n                    break;\n                default:\n                    atLeastOneMixed = true;\n                    break;\n            }\n        }\n\n        if (atLeastOneMixed || (atLeastOneSelected && atLeastOneDeSelected)) {\n            return undefined;\n        }\n\n        if (atLeastOneSelected) {\n            return true;\n        }\n\n        if (atLeastOneDeSelected) {\n            return false;\n        }\n\n        if (!this.selectable) {\n            return null;\n        }\n\n        return this.selected;\n    }\n\n    public setSelectedInitialValue(selected?: boolean): void {\n        this.selected = selected;\n    }\n\n    public selectThisNode(newValue?: boolean, e?: Event, source: SelectionEventSourceType = 'api'): boolean {\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n        const selectionNotAllowed = !this.selectable && newValue;\n        const selectionNotChanged = this.selected === newValue;\n\n        if (selectionNotAllowed || selectionNotChanged) { return false; }\n\n        this.selected = newValue;\n\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n            const sibling = this.sibling;\n            if (sibling && sibling.footer) {\n                sibling.dispatchLocalEvent(sibling.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n            }\n        }\n\n        const event: RowSelectedEvent = {\n            ...this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED),\n            event: e || null,\n            source\n        };\n\n        this.beans.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\n     * @param source - Source property that will appear in the `selectionChanged` event.\n     */\n    public setSelected(newValue: boolean, clearSelection: boolean = false, source: SelectionEventSourceType = 'api') {\n        if (typeof source === 'boolean')  {\n            console.warn('AG Grid: since version v30, rowNode.setSelected() property `suppressFinishActions` has been removed, please use `gridApi.setNodesSelected()` for bulk actions, and the event `source` property for ignoring events instead.');\n            return;\n        }\n\n        this.setSelectedParams({\n            newValue,\n            clearSelection,\n            rangeSelect: false,\n            source\n        });\n    }\n\n    // this is for internal use only. To make calling code more readable, this is the same method as setSelected except it takes names parameters\n    public setSelectedParams(params: SetSelectedParams & { event?: Event }): number {\n        if (this.rowPinned) {\n            console.warn('AG Grid: cannot select pinned rows');\n            return 0;\n        }\n\n        if (this.id === undefined) {\n            console.warn('AG Grid: cannot select node until id for node is known');\n            return 0;\n        }\n\n        return this.beans.selectionService.setNodesSelected({ ...params, nodes: [this.footer ? this.sibling : this] });\n    }\n\n    /**\n     * Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`\n     * - `false` if the node isn't pinned\n     */\n    public isRowPinned(): boolean {\n        return this.rowPinned === 'top' || this.rowPinned === 'bottom';\n    }\n\n    public isParentOfNode(potentialParent: RowNode): boolean {\n        let parentNode = this.parent;\n\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n\n        return false;\n    }\n\n    /** Add an event listener. */\n    public addEventListener(eventType: RowNodeEventType, userListener: Function): void {\n        if (!this.eventService) {\n            this.eventService = new EventService();\n        }\n        if(this.beans.frameworkOverrides.shouldWrapOutgoing && !this.frameworkEventListenerService) {\n            this.eventService.setFrameworkOverrides(this.beans.frameworkOverrides);\n            this.frameworkEventListenerService = new FrameworkEventListenerService(this.beans.frameworkOverrides);\n        }\n\n        const listener = this.frameworkEventListenerService?.wrap(userListener as AgEventListener) ?? userListener;\n        this.eventService.addEventListener(eventType, listener as AgEventListener);\n    }\n\n    /** Remove event listener. */\n    public removeEventListener(eventType: RowNodeEventType, userListener: Function): void {\n        if (!this.eventService) { return; }\n\n        const listener = this.frameworkEventListenerService?.unwrap(userListener as AgEventListener) ?? userListener;\n        this.eventService.removeEventListener(eventType, listener as AgEventListener);\n        if (this.eventService.noRegisteredListenersExist()) {\n            this.eventService = null;\n        }\n    }\n\n    public onMouseEnter(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    }\n\n    public onMouseLeave(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    }\n\n    public getFirstChildOfFirstChild(rowGroupColumn: Column | null): RowNode | null {\n        let currentRowNode: RowNode = this;\n        let isCandidate = true;\n        let foundFirstChildPath = false;\n        let nodeToSwapIn: RowNode | null = null;\n\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        while (isCandidate && !foundFirstChildPath) {\n            const parentRowNode = currentRowNode.parent!;\n            const firstChild = exists(parentRowNode) && currentRowNode.firstChild;\n\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            } else {\n                isCandidate = false;\n            }\n\n            currentRowNode = parentRowNode;\n        }\n\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    }\n\n    /**\n     * Returns:\n     * - `true` if the node is a full width cell\n     * - `false` if the node is not a full width cell\n     */\n    public isFullWidthCell(): boolean {\n        if (this.detail) { return true; }\n\n        const isFullWidthCellFunc = this.beans.gridOptionsService.getCallback('isFullWidthRow');\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;\n    }\n\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    public getRoute(): string[] | undefined {\n        if (this.key == null) { return; }\n\n        const res: string[] = [];\n\n        let pointer: RowNode = this;\n\n        while (pointer.key != null) {\n            res.push(pointer.key);\n            pointer = pointer.parent!;\n        }\n\n        return res.reverse();\n    }\n\n    public createFooter(): void {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (this.sibling) { return; }\n\n        // we don't copy these properties as they cause the footer node\n        // to have properties which should be unique to the row.\n        const ignoredProperties = new Set([\n            'eventService',\n            '__objectId',\n            'sticky',\n        ]);\n        const footerNode = new RowNode(this.beans);\n\n        Object.keys(this).forEach( key => {\n            if (ignoredProperties.has(key)) { return; }\n            (footerNode as any)[key] = (this as any)[key];\n        });\n\n        footerNode.footer = true;\n        footerNode.setRowTop(null);\n        footerNode.setRowIndex(null);\n\n        // manually set oldRowTop to null so we discard any\n        // previous information about its position.\n        footerNode.oldRowTop = null;\n\n        footerNode.id = 'rowGroupFooter_' + this.id;\n\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = this;\n        this.sibling = footerNode;\n    }\n\n    // Only used by SSRM. In CSRM this is never used as footers should always be present for\n    // the purpose of exporting collapsed groups. In SSRM it is not possible to export collapsed\n    // groups anyway, so can destroy footers.\n    public destroyFooter(): void {\n        if (!this.sibling) { return; }\n\n        this.sibling.setRowTop(null);\n        this.sibling.setRowIndex(null);\n\n        this.sibling = undefined as any;\n    }\n}\n", "import { AgCheckbox } from '../widgets/agCheckbox';\nimport { PostConstruct } from '../context/context';\nimport { Column } from '../entities/column';\nimport { Component } from '../widgets/component';\nimport { Events } from '../events';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { RowNode } from '../entities/rowNode';\nimport { stopPropagationForAgGrid } from '../utils/event';\nimport { CheckboxSelectionCallback } from '../entities/colDef';\nimport { GroupCheckboxSelectionCallback } from './cellRenderers/groupCellRendererCtrl';\nimport { getAriaCheckboxStateName } from '../utils/aria';\n\nexport class CheckboxSelectionComponent extends Component {\n\n    @RefSelector('eCheckbox') private eCheckbox: AgCheckbox;\n\n    private rowNode: RowNode;\n    private column: Column | undefined;\n    private overrides?: {\n        isVisible: boolean | CheckboxSelectionCallback | GroupCheckboxSelectionCallback | undefined,\n        callbackParams: any,\n        removeHidden: boolean;\n    };\n\n    constructor() {\n        super(/* html*/`\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`\n        );\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.eCheckbox.setPassive(true);\n    }\n\n    public getCheckboxId(): string {\n        return this.eCheckbox.getInputElement().id;\n    }\n\n    private onDataChanged(): void {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n\n    private onSelectableChanged(): void {\n        this.showOrHideSelect();\n    }\n\n    private onSelectionChanged(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const state = this.rowNode.isSelected();\n        const stateName = getAriaCheckboxStateName(translate, state);\n        const [ariaKey, ariaLabel] = this.rowNode.selectable ? ['ariaRowToggleSelection', 'Press Space to toggle row selection'] : ['ariaRowSelectionDisabled', 'Row Selection is disabled for this row'];\n        const translatedLabel = translate(ariaKey, ariaLabel);\n\n        this.eCheckbox.setValue(state, true);\n        this.eCheckbox.setInputAriaLabel(`${translatedLabel} (${stateName})`);\n    }\n\n    private onClicked(newValue: boolean, groupSelectsFiltered: boolean | undefined, event: MouseEvent): number {\n        return this.rowNode.setSelectedParams({ newValue, rangeSelect: event.shiftKey, groupSelectsFiltered, event, source: 'checkboxSelected' });\n    }\n\n    public init(params: {\n        rowNode: RowNode,\n        column?: Column,\n        overrides?: {\n            isVisible: boolean | CheckboxSelectionCallback | GroupCheckboxSelectionCallback | undefined,\n            callbackParams: any,\n            removeHidden: boolean;\n        },\n    }): void {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n        this.overrides = params.overrides;\n\n        this.onSelectionChanged();\n\n        // we don't want double click on this icon to open a group\n        this.addManagedListener(this.eCheckbox.getInputElement(), 'dblclick', (event) => {\n            stopPropagationForAgGrid(event);\n        });\n\n        this.addManagedListener(this.eCheckbox.getInputElement(), 'click', (event) => {\n            // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n            // would possibly get selected twice\n            stopPropagationForAgGrid(event);\n\n            const groupSelectsFiltered = this.gridOptionsService.get('groupSelectsFiltered');\n            const isSelected = this.eCheckbox.getValue();\n\n            if (this.shouldHandleIndeterminateState(isSelected, groupSelectsFiltered)) {\n                // try toggling children to determine action.\n                const result = this.onClicked(true, groupSelectsFiltered, event || {});\n                if (result === 0) {\n                    this.onClicked(false, groupSelectsFiltered, event);\n                }\n            } else if (isSelected) {\n                this.onClicked(false, groupSelectsFiltered, event);\n            } else {\n                this.onClicked(true, groupSelectsFiltered, event || {});\n            }\n        });\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n\n        const isRowSelectableFunc = this.gridOptionsService.get('isRowSelectable');\n        const checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === 'function';\n\n        if (checkboxVisibleIsDynamic) {\n            const showOrHideSelectListener = this.showOrHideSelect.bind(this);\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);\n            this.showOrHideSelect();\n        }\n\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\n    }\n\n    private shouldHandleIndeterminateState(isSelected: boolean | undefined, groupSelectsFiltered: boolean): boolean {\n        // for CSRM groupSelectsFiltered, we can get an indeterminate state where all filtered children are selected,\n        // and we would expect clicking to deselect all rather than select all\n        return groupSelectsFiltered &&\n            (this.eCheckbox.getPreviousValue() === undefined || isSelected === undefined) &&\n            this.gridOptionsService.isRowModelType('clientSide');\n    }\n\n    private showOrHideSelect(): void {\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        const isVisible = this.getIsVisible();\n        if (selectable) {\n            if (typeof isVisible === 'function') {\n                const extraParams = this.overrides?.callbackParams;\n\n                if (!this.column) {\n                    // full width row\n                    selectable = isVisible({ ...extraParams, node: this.rowNode, data: this.rowNode.data });\n                } else {\n                    const params = this.column.createColumnFunctionCallbackParams(this.rowNode);\n                    selectable = isVisible({ ...extraParams, ...params });\n                }\n            } else {\n                selectable = isVisible ?? false;\n            }\n        }\n\n        const disableInsteadOfHide = this.column?.getColDef().showDisabledCheckboxes;\n        if (disableInsteadOfHide) {\n            this.eCheckbox.setDisabled(!selectable);\n            this.setVisible(true);\n            this.setDisplayed(true);\n            return;\n        }\n\n        if (this.overrides?.removeHidden) {\n            this.setDisplayed(selectable);\n            return;\n        }\n\n        this.setVisible(selectable);\n    }\n\n    private getIsVisible(): boolean | CheckboxSelectionCallback<any> | undefined {\n        if (this.overrides) {\n            return this.overrides.isVisible;\n        }\n\n        // column will be missing if groupDisplayType = 'groupRows'\n        return this.column?.getColDef()?.checkboxSelection;\n    }\n}\n", "export enum VerticalDirection { Up, Down }\nexport enum HorizontalDirection { Left, Right }\n", "import { BeanStub } from \"../context/beanStub\";\nimport { PostConstruct, Bean, Autowired, PreDestroy } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { DragService, DragListenerParams } from \"./dragService\";\nimport { MouseEventService } from \"../gridBodyComp/mouseEventService\";\nimport { RowDropZoneParams } from \"../gridBodyComp/rowDragFeature\";\nimport { escapeString } from \"../utils/string\";\nimport { createIcon } from \"../utils/icon\";\nimport { flatten, removeFromArray } from \"../utils/array\";\nimport { getBodyHeight, getBodyWidth } from \"../utils/browser\";\nimport { loadTemplate, clearElement, getElementRectWithOffset } from \"../utils/dom\";\nimport { isFunction } from \"../utils/function\";\nimport { IRowNode } from \"../interfaces/iRowNode\";\nimport { IAggFunc } from \"../entities/colDef\";\nimport { HorizontalDirection, VerticalDirection } from \"../constants/direction\";\n\nexport interface DragItem<TValue = any> {\n    /**\n     * When dragging a row, this contains the row node being dragged\n     * When dragging multiple rows, this contains the row that started the drag.\n     */\n    rowNode?: IRowNode;\n\n    /** When dragging multiple rows, this contains all rows being dragged */\n    rowNodes?: IRowNode[];\n\n    /** When dragging columns, this contains the columns being dragged */\n    columns?: Column[];\n\n    /** When dragging columns, this contains the visible state of the columns */\n    visibleState?: { [key: string]: boolean };\n\n    /** When dragging columns, this contains the pivot state of the columns. This is only populated/used in column tool panel */\n    pivotState?: { [key: string]: {\n        pivot?: boolean;\n        rowGroup?: boolean;\n        aggFunc?: string | IAggFunc | null;\n    } };\n\n    /** Additional state */\n    value?: TValue;\n}\n\nexport enum DragSourceType { ToolPanel, HeaderCell, RowDrag, ChartPanel, AdvancedFilterBuilder }\n\nexport interface DragSource{\n    /**\n     * The type of the drag source, used by the drop target to know where the\n     * drag originated from.\n     */\n    type: DragSourceType;\n    /** Can be used to identify a specific component as the source */\n    sourceId?: string;\n    /**\n     * Element which, when dragged, will kick off the DnD process\n     */\n    eElement: Element;\n    /**\n     * If eElement is dragged, then the dragItem is the object that gets passed around.\n     */\n    getDragItem: () => DragItem;\n    /**\n     * This name appears in the ghost icon when dragging.\n     */\n    dragItemName: string | (() => string) | null;\n    /**\n     * Icon to show when not over a drop zone\n     */\n    getDefaultIconName?: () => string;\n    /**\n     * The drag source DOM Data Key, this is useful to detect if the origin grid is the same\n     * as the target grid.\n     */\n    dragSourceDomDataKey?: string;\n    /**\n     * After how many pixels of dragging should the drag operation start. Default is 4.\n     */\n    dragStartPixels?: number;\n    /**\n     * Callback for drag started\n     */\n    onDragStarted?: () => void;\n    /**\n     * Callback for drag stopped\n     */\n    onDragStopped?: () => void;\n    /**\n     * Callback for entering the grid\n     */\n    onGridEnter?: (dragItem: DragItem | null) => void;\n    /**\n     * Callback for exiting the grid\n     */\n    onGridExit?: (dragItem: DragItem | null) => void;\n}\n\nexport interface DropTarget {\n    /** The main container that will get the drop. */\n    getContainer(): HTMLElement;\n    /** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\n     * in the header as well as the body (main rows and pinned rows) of the grid. */\n    getSecondaryContainers?(): HTMLElement[][];\n    /** Icon to show when drag is over */\n    getIconName?(): string | null;\n\n    isInterestedIn(type: DragSourceType, el: Element): boolean;\n\n    /**\n     * If `true`, the DragSources will only be allowed to be dragged within the DragTarget that contains them.\n     * This is useful for changing order of items within a container, and not moving items across containers.\n     * @default false\n     */\n    targetContainsSource?: boolean;\n\n    /** Callback for when drag enters */\n    onDragEnter?(params: DraggingEvent): void;\n    /** Callback for when drag leaves */\n    onDragLeave?(params: DraggingEvent): void;\n    /** Callback for when dragging */\n    onDragging?(params: DraggingEvent): void;\n    /** Callback for when drag stops */\n    onDragStop?(params: DraggingEvent): void;\n    external?: boolean;\n}\n\nexport interface DraggingEvent {\n    event: MouseEvent;\n    x: number;\n    y: number;\n    vDirection: VerticalDirection | null;\n    hDirection: HorizontalDirection | null;\n    dragSource: DragSource;\n    dragItem: DragItem;\n    fromNudge: boolean;\n    api: GridApi;\n    /** @deprecated v31 ColumnApi has been deprecated and all methods moved to the api. */\n    columnApi: ColumnApi;\n    dropZoneTarget: HTMLElement;\n}\n\n@Bean('dragAndDropService')\nexport class DragAndDropService extends BeanStub {\n\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('mouseEventService') private readonly mouseEventService: MouseEventService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    public static ICON_PINNED = 'pinned';\n    public static ICON_MOVE = 'move';\n    public static ICON_LEFT = 'left';\n    public static ICON_RIGHT = 'right';\n    public static ICON_GROUP = 'group';\n    public static ICON_AGGREGATE = 'aggregate';\n    public static ICON_PIVOT = 'pivot';\n    public static ICON_NOT_ALLOWED = 'notAllowed';\n    public static ICON_HIDE = 'hide';\n\n    public static GHOST_TEMPLATE = /* html */\n        `<div class=\"ag-dnd-ghost ag-unselectable\">\n            <span class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\n            <div class=\"ag-dnd-ghost-label\"></div>\n        </div>`;\n\n    private dragSourceAndParamsList: { params: DragListenerParams, dragSource: DragSource }[] = [];\n\n    private dragItem: DragItem | null;\n    private eventLastTime: MouseEvent | null;\n    private dragSource: DragSource;\n    private dragging: boolean;\n\n    private eGhost: HTMLElement | null;\n    private eGhostParent: HTMLElement | ShadowRoot;\n    private eGhostIcon: HTMLElement;\n\n    private dropTargets: DropTarget[] = [];\n    private lastDropTarget: DropTarget | null | undefined;\n\n    private ePinnedIcon: Element;\n    private eHideIcon: Element;\n    private eMoveIcon: Element;\n    private eLeftIcon: Element;\n    private eRightIcon: Element;\n    private eGroupIcon: Element;\n    private eAggregateIcon: Element;\n    private ePivotIcon: Element;\n    private eDropNotAllowedIcon: Element;\n\n    @PostConstruct\n    private init(): void {\n        this.ePinnedIcon = createIcon('columnMovePin', this.gridOptionsService, null);\n        this.eHideIcon = createIcon('columnMoveHide', this.gridOptionsService, null);\n        this.eMoveIcon = createIcon('columnMoveMove', this.gridOptionsService, null);\n        this.eLeftIcon = createIcon('columnMoveLeft', this.gridOptionsService, null);\n        this.eRightIcon = createIcon('columnMoveRight', this.gridOptionsService, null);\n        this.eGroupIcon = createIcon('columnMoveGroup', this.gridOptionsService, null);\n        this.eAggregateIcon = createIcon('columnMoveValue', this.gridOptionsService, null);\n        this.ePivotIcon = createIcon('columnMovePivot', this.gridOptionsService, null);\n        this.eDropNotAllowedIcon = createIcon('dropNotAllowed', this.gridOptionsService, null);\n    }\n\n    public addDragSource(dragSource: DragSource, allowTouch = false): void {\n        const params: DragListenerParams = {\n            eElement: dragSource.eElement,\n            dragStartPixels: dragSource.dragStartPixels,\n            onDragStart: this.onDragStart.bind(this, dragSource),\n            onDragStop: this.onDragStop.bind(this),\n            onDragging: this.onDragging.bind(this),\n            includeTouch: allowTouch\n        };\n\n        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });\n\n        this.dragService.addDragSource(params);\n    }\n\n    public removeDragSource(dragSource: DragSource): void {\n        const sourceAndParams = this.dragSourceAndParamsList.find(item => item.dragSource === dragSource);\n\n        if (sourceAndParams) {\n            this.dragService.removeDragSource(sourceAndParams.params);\n            removeFromArray(this.dragSourceAndParamsList, sourceAndParams);\n        }\n    }\n\n    @PreDestroy\n    private clearDragSourceParamsList(): void {\n        this.dragSourceAndParamsList.forEach(sourceAndParams => this.dragService.removeDragSource(sourceAndParams.params));\n        this.dragSourceAndParamsList.length = 0;\n        this.dropTargets.length = 0;\n    }\n\n    public nudge(): void {\n        if (this.dragging) {\n            this.onDragging(this.eventLastTime!, true);\n        }\n    }\n\n    private onDragStart(dragSource: DragSource, mouseEvent: MouseEvent): void {\n        this.dragging = true;\n        this.dragSource = dragSource;\n        this.eventLastTime = mouseEvent;\n        this.dragItem = this.dragSource.getDragItem();\n\n        if (this.dragSource.onDragStarted) {\n            this.dragSource.onDragStarted();\n        }\n\n        this.createGhost();\n    }\n\n    private onDragStop(mouseEvent: MouseEvent): void {\n        this.eventLastTime = null;\n        this.dragging = false;\n\n        if (this.dragSource.onDragStopped) {\n            this.dragSource.onDragStopped();\n        }\n\n        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {\n            const draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);\n            this.lastDropTarget.onDragStop(draggingEvent);\n        }\n\n        this.lastDropTarget = null;\n        this.dragItem = null;\n        this.removeGhost();\n    }\n\n    private onDragging(mouseEvent: MouseEvent, fromNudge: boolean): void {\n        const hDirection = this.getHorizontalDirection(mouseEvent);\n        const vDirection = this.getVerticalDirection(mouseEvent);\n\n        this.eventLastTime = mouseEvent;\n        this.positionGhost(mouseEvent);\n\n        // check if mouseEvent intersects with any of the drop targets\n        const validDropTargets = this.dropTargets.filter(target => this.isMouseOnDropTarget(mouseEvent, target));\n        const dropTarget: DropTarget | null = this.findCurrentDropTarget(mouseEvent, validDropTargets);\n\n        if (dropTarget !== this.lastDropTarget) {\n            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);\n\n            if (this.lastDropTarget !== null && dropTarget === null) {\n                this.dragSource.onGridExit?.(this.dragItem);\n            }\n            if (this.lastDropTarget === null && dropTarget !== null) {\n                this.dragSource.onGridEnter?.(this.dragItem);\n            }\n            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n\n            this.lastDropTarget = dropTarget;\n        } else if (dropTarget && dropTarget.onDragging) {\n            const draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            dropTarget.onDragging(draggingEvent);\n        }\n    }\n\n    private getAllContainersFromDropTarget(dropTarget: DropTarget): HTMLElement[][] {\n        const secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;\n        const containers: HTMLElement[][] = [[dropTarget.getContainer()]];\n\n        return secondaryContainers ? containers.concat(secondaryContainers) : containers;\n    }\n\n    private allContainersIntersect(mouseEvent: MouseEvent, containers: HTMLElement[]) {\n        for (const container of containers) {\n            const rect = container.getBoundingClientRect();\n\n            // if element is not visible, then width and height are zero\n            if (rect.width === 0 || rect.height === 0) { return false; }\n\n            const horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;\n            const verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;\n\n            if (!horizontalFit || !verticalFit) { return false; }\n        }\n        return true;\n    }\n\n    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers\n    private isMouseOnDropTarget(mouseEvent: MouseEvent, dropTarget: DropTarget): boolean {\n        const allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);\n        let mouseOverTarget = false;\n\n        for (const currentContainers of allContainersFromDropTarget) {\n            if (this.allContainersIntersect(mouseEvent, currentContainers)) {\n                mouseOverTarget = true;\n                break;\n            }\n        }\n\n        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) { return false; }\n\n        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);\n    }\n\n    private findCurrentDropTarget(mouseEvent: MouseEvent, validDropTargets: DropTarget[]): DropTarget | null {\n        const len = validDropTargets.length;\n\n        if (len === 0) { return  null; }\n        if (len === 1) { return validDropTargets[0]; }\n\n        const rootNode = this.gridOptionsService.getRootNode();\n\n        // elementsFromPoint return a list of elements under\n        // the mouseEvent sorted from topMost to bottomMost\n        const elementStack = rootNode.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY) as HTMLElement[];\n\n        // loop over the sorted elementStack to find which dropTarget comes first\n        for (const el of elementStack) {\n            for (const dropTarget of validDropTargets) {\n                const containers = flatten(this.getAllContainersFromDropTarget(dropTarget));\n                if (containers.indexOf(el) !== -1) { return dropTarget; }\n            }\n        }\n\n        // we should never hit this point of the code because only\n        // valid dropTargets should be provided to this method.\n        return null;\n    }\n\n    private enterDragTargetIfExists(dropTarget: DropTarget | null, mouseEvent: MouseEvent, hDirection: HorizontalDirection | null, vDirection: VerticalDirection | null, fromNudge: boolean): void {\n        if (!dropTarget) { return; }\n\n        if (dropTarget.onDragEnter) {\n            const dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n\n            dropTarget.onDragEnter(dragEnterEvent);\n        }\n\n        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);\n    }\n\n    private leaveLastTargetIfExists(mouseEvent: MouseEvent, hDirection: HorizontalDirection | null, vDirection: VerticalDirection | null, fromNudge: boolean): void {\n        if (!this.lastDropTarget) { return; }\n\n        if (this.lastDropTarget.onDragLeave) {\n            const dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n\n            this.lastDropTarget.onDragLeave(dragLeaveEvent);\n        }\n\n        this.setGhostIcon(null);\n    }\n\n    public addDropTarget(dropTarget: DropTarget) {\n        this.dropTargets.push(dropTarget);\n    }\n\n    public removeDropTarget(dropTarget: DropTarget) {\n        this.dropTargets = this.dropTargets.filter(target => target.getContainer() !== dropTarget.getContainer());\n    }\n\n    public hasExternalDropZones(): boolean {\n        return this.dropTargets.some(zones => zones.external);\n    }\n\n    public findExternalZone(params: RowDropZoneParams): DropTarget | null {\n        const externalTargets = this.dropTargets.filter(target => target.external);\n\n        return externalTargets.find(zone => zone.getContainer() === params.getContainer()) || null;\n    }\n\n    public getHorizontalDirection(event: MouseEvent): HorizontalDirection | null {\n        const clientX = this.eventLastTime && this.eventLastTime.clientX;\n        const eClientX = event.clientX;\n\n        if (clientX === eClientX) { return null; }\n\n        return clientX! > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;\n    }\n\n    public getVerticalDirection(event: MouseEvent): VerticalDirection | null {\n        const clientY = this.eventLastTime && this.eventLastTime.clientY;\n        const eClientY = event.clientY;\n\n        if (clientY === eClientY) { return null; }\n\n        return clientY! > eClientY ? VerticalDirection.Up : VerticalDirection.Down;\n    }\n\n    public createDropTargetEvent(\n        dropTarget: DropTarget,\n        event: MouseEvent,\n        hDirection: HorizontalDirection | null,\n        vDirection: VerticalDirection | null,\n        fromNudge: boolean\n    ): DraggingEvent {\n        // localise x and y to the target\n        const dropZoneTarget = dropTarget.getContainer();\n        const rect = dropZoneTarget.getBoundingClientRect();\n        const { gridApi: api, columnApi, dragItem, dragSource } = this;\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n\n        return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem: dragItem as DragItem, api, columnApi, dropZoneTarget };\n    }\n\n    private positionGhost(event: MouseEvent): void {\n        const ghost = this.eGhost;\n\n        if (!ghost) { return; }\n\n        const ghostRect = ghost.getBoundingClientRect();\n        const ghostHeight = ghostRect.height;\n\n        const browserWidth = getBodyWidth() - 2; // 2px for 1px borderLeft and 1px borderRight\n        const browserHeight = getBodyHeight() - 2; // 2px for 1px borderTop and 1px borderBottom\n\n        const offsetParentSize = getElementRectWithOffset(ghost.offsetParent as HTMLElement);\n\n        const { clientY, clientX } = event;\n\n        let top = (clientY - offsetParentSize.top) - (ghostHeight / 2);\n        let left = (clientX - offsetParentSize.left) - 10;\n\n        const eDocument = this.gridOptionsService.getDocument();\n        const win = (eDocument.defaultView || window);\n        const windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;\n        const windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;\n\n        // check ghost is not positioned outside of the browser\n        if (browserWidth > 0 && ((left + ghost.clientWidth) > (browserWidth + windowScrollX))) {\n            left = browserWidth + windowScrollX - ghost.clientWidth;\n        }\n\n        if (left < 0) {\n            left = 0;\n        }\n\n        if (browserHeight > 0 && ((top + ghost.clientHeight) > (browserHeight + windowScrollY))) {\n            top = browserHeight + windowScrollY - ghost.clientHeight;\n        }\n\n        if (top < 0) {\n            top = 0;\n        }\n\n        ghost.style.left = `${left}px`;\n        ghost.style.top = `${top}px`;\n    }\n\n    private removeGhost(): void {\n        if (this.eGhost && this.eGhostParent) {\n            this.eGhostParent.removeChild(this.eGhost);\n        }\n\n        this.eGhost = null;\n    }\n\n    private createGhost(): void {\n        this.eGhost = loadTemplate(DragAndDropService.GHOST_TEMPLATE);\n        this.mouseEventService.stampTopLevelGridCompWithGridInstance(this.eGhost);\n\n        const { theme } = this.environment.getTheme();\n\n        if (theme) {\n            this.eGhost.classList.add(theme);\n        }\n\n        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon') as HTMLElement;\n        this.setGhostIcon(null);\n\n        const eText = this.eGhost.querySelector('.ag-dnd-ghost-label') as HTMLElement;\n        let dragItemName = this.dragSource.dragItemName;\n\n        if (isFunction(dragItemName)) {\n            dragItemName = (dragItemName as () => string)();\n        }\n\n        eText.innerHTML = escapeString(dragItemName as string) || '';\n\n        this.eGhost.style.height = '25px';\n        this.eGhost.style.top = '20px';\n        this.eGhost.style.left = '20px';\n\n        const eDocument = this.gridOptionsService.getDocument();\n        let rootNode: Document | ShadowRoot | HTMLElement | null = null;\n        let targetEl: HTMLElement | ShadowRoot | null = null;\n\n        try {\n            rootNode = eDocument.fullscreenElement as HTMLElement;\n        } catch (e) {\n            // some environments like SalesForce will throw errors\n            // simply by trying to read the fullscreenElement property\n        } finally {\n            if (!rootNode) {\n                rootNode = this.gridOptionsService.getRootNode();\n            }\n            const body = rootNode.querySelector('body');\n            if (body) {\n                targetEl = body;\n            } else if (rootNode instanceof ShadowRoot) {\n                targetEl = rootNode;\n            } else if (rootNode instanceof Document) {\n                targetEl = rootNode?.documentElement;\n            } else {\n                targetEl = rootNode;\n            }\n        }\n\n        this.eGhostParent = targetEl;\n\n        if (!this.eGhostParent) {\n            console.warn('AG Grid: could not find document body, it is needed for dragging columns');\n        } else {\n            this.eGhostParent.appendChild(this.eGhost);\n        }\n    }\n\n    public setGhostIcon(iconName: string | null, shake = false): void {\n        clearElement(this.eGhostIcon);\n\n        let eIcon: Element | null = null;\n\n        if (!iconName) {\n            iconName = this.dragSource.getDefaultIconName ? this.dragSource.getDefaultIconName() : DragAndDropService.ICON_NOT_ALLOWED;\n        }\n        switch (iconName) {\n            case DragAndDropService.ICON_PINNED:      eIcon = this.ePinnedIcon; break;\n            case DragAndDropService.ICON_MOVE:        eIcon = this.eMoveIcon; break;\n            case DragAndDropService.ICON_LEFT:        eIcon = this.eLeftIcon; break;\n            case DragAndDropService.ICON_RIGHT:       eIcon = this.eRightIcon; break;\n            case DragAndDropService.ICON_GROUP:       eIcon = this.eGroupIcon; break;\n            case DragAndDropService.ICON_AGGREGATE:   eIcon = this.eAggregateIcon; break;\n            case DragAndDropService.ICON_PIVOT:       eIcon = this.ePivotIcon; break;\n            case DragAndDropService.ICON_NOT_ALLOWED: eIcon = this.eDropNotAllowedIcon; break;\n            case DragAndDropService.ICON_HIDE:        eIcon = this.eHideIcon; break;\n        }\n\n        this.eGhostIcon.classList.toggle('ag-shake-left-to-right', shake);\n\n        if (eIcon === this.eHideIcon && this.gridOptionsService.get('suppressDragLeaveHidesColumns')) {\n            return;\n        }\n        if (eIcon) {\n            this.eGhostIcon.appendChild(eIcon);\n        }\n    }\n}\n", "import { Component } from \"../../widgets/component\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { DragItem, DragSource, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../../eventKeys\";\nimport { Beans } from \"../beans\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Column } from \"../../entities/column\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { isFunction, warnOnce } from \"../../utils/function\";\n\nexport interface IRowDragItem extends DragItem {\n    /** The default text that would be applied to this Drag Element */\n    defaultTextValue: string;\n}\n\nexport class RowDragComp extends Component {\n\n    private dragSource: DragSource | null = null;\n\n    @Autowired('beans') private readonly beans: Beans;\n\n    constructor(\n        private readonly cellValueFn: () => string,\n        private readonly rowNode: RowNode,\n        private readonly column?: Column,\n        private readonly customGui?: HTMLElement,\n        private readonly dragStartPixels?: number,\n        private readonly suppressVisibilityChange?: boolean\n    ) { super(); }\n\n    public isCustomGui(): boolean {\n        return this.customGui != null;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (!this.customGui) {\n            this.setTemplate(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\n            this.getGui().appendChild(createIconNoSpan('rowDrag', this.gridOptionsService, null)!);\n            this.addDragSource();\n        } else {\n            this.setDragElement(this.customGui, this.dragStartPixels);\n        }\n\n        this.checkCompatibility();\n\n        if (!this.suppressVisibilityChange) {\n            const strategy = this.gridOptionsService.get('rowDragManaged') ?\n                new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n                new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n\n            this.createManagedBean(strategy, this.beans.context);\n        }\n    }\n\n    public setDragElement(dragElement: HTMLElement, dragStartPixels?: number) {\n        this.setTemplateFromElement(dragElement);\n        this.addDragSource(dragStartPixels);\n    }\n\n    private getSelectedNodes(): RowNode[] {\n        const isRowDragMultiRow = this.gridOptionsService.get('rowDragMultiRow');\n        if (!isRowDragMultiRow) { return [this.rowNode]; }\n\n        const selection = this.beans.selectionService.getSelectedNodes();\n\n        return selection.indexOf(this.rowNode) !== -1 ? selection : [this.rowNode];\n    }\n\n    // returns true if all compatibility items work out\n    private checkCompatibility(): void {\n        const managed = this.gridOptionsService.get('rowDragManaged');\n        const treeData = this.gridOptionsService.get('treeData');\n\n        if (treeData && managed) {\n            warnOnce('If using row drag with tree data, you cannot have rowDragManaged=true');\n        }\n    }\n\n    private getDragItem(): IRowDragItem {\n        return {\n            rowNode: this.rowNode,\n            rowNodes: this.getSelectedNodes(),\n            columns: this.column ? [this.column] : undefined,\n            defaultTextValue: this.cellValueFn(),\n        };\n    }\n\n    private getRowDragText(column?: Column) {\n        if (column) {\n            const colDef = column.getColDef();\n            if (colDef.rowDragText) {\n                return colDef.rowDragText;\n            }\n        }\n        return this.gridOptionsService.get('rowDragText');\n    }\n\n    private addDragSource(dragStartPixels: number = 4): void {\n        // if this is changing the drag element, delete the previous dragSource\n        if (this.dragSource) { this.removeDragSource(); }\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.dragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: () => {\n                const dragItem = this.getDragItem();\n                const dragItemCount = dragItem.rowNodes?.length || 1;\n\n                const rowDragText = this.getRowDragText(this.column);\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n\n                return dragItemCount === 1 ? this.cellValueFn() : `${dragItemCount} ${translate('rowDragRows', 'rows')}`;\n            },\n            getDragItem: () => this.getDragItem(),\n            dragStartPixels,\n            dragSourceDomDataKey: this.gridOptionsService.getDomDataKey()\n        };\n\n        this.beans.dragAndDropService.addDragSource(this.dragSource, true);\n    }\n\n    @PreDestroy\n    private removeDragSource() {\n        if (this.dragSource) {\n            this.beans.dragAndDropService.removeDragSource(this.dragSource);\n        }\n        this.dragSource = null;\n    }\n}\n\nclass VisibilityStrategy extends BeanStub {\n    private readonly parent: RowDragComp;\n    private readonly column: Column | undefined;\n    protected readonly rowNode: RowNode;\n\n    constructor(parent: RowDragComp, rowNode: RowNode, column?: Column) {\n        super();\n        this.parent = parent;\n        this.rowNode = rowNode;\n        this.column = column;\n    }\n\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\n        const displayedOptions = { skipAriaHidden: true };\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false, displayedOptions);\n        } else {\n            let shown: boolean = true;\n            let isShownSometimes: boolean = false;\n\n            if (this.column) {\n                shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();\n                isShownSometimes = isFunction(this.column.getColDef().rowDrag);\n            }\n\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true, displayedOptions);\n                this.parent.setVisible(shown, displayedOptions);\n            } else {\n                this.parent.setDisplayed(shown, displayedOptions);\n                this.parent.setVisible(true, displayedOptions);\n            }\n        }\n    }\n}\n\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column?: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.gridOptionsService.get('suppressRowDrag');\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column?: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we do not show the component if sort, filter or grouping is active\n\n        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const rowDragFeature = gridBodyCon.getRowDragFeature();\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        const suppressRowDrag = this.gridOptionsService.get('suppressRowDrag');\n        const hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n", "import { ColumnModel } from \"../../columns/columnModel\";\nimport { UserCompDetails, UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { CellRendererSelectorFunc, ColumnFunctionCallbackParams } from \"../../entities/colDef\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { IRowNode } from \"../../interfaces/iRowNode\";\nimport { removeAriaExpanded, setAriaExpanded } from \"../../utils/aria\";\nimport { isElementInEventPath, isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../utils/event\";\nimport { missing } from \"../../utils/generic\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { cloneObject } from \"../../utils/object\";\nimport { ExpressionService } from \"../../valueService/expressionService\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { RowDragComp } from \"../row/rowDragComp\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { ICellRendererParams } from \"./iCellRenderer\";\n\nexport interface IGroupCellRenderer {\n    setInnerRenderer(compDetails: UserCompDetails | undefined, valueToDisplay: any): void;\n    setChildCount(count: string): void;\n    setCheckboxVisible(value: boolean): void;\n    setExpandedDisplayed(value: boolean): void;\n    setContractedDisplayed(value: boolean): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n}\n\nexport interface FooterValueGetterFunc {\n    (params: GroupCellRendererParams): any;\n}\n\nexport type GroupCheckboxSelectionCallbackParams<TData = any, TValue = any> = ColumnFunctionCallbackParams<TData> & GroupCellRendererParams<TData, TValue>;\n\nexport interface GroupCheckboxSelectionCallback<TData = any, TValue = any> {\n    (params: GroupCheckboxSelectionCallbackParams<TData, TValue>): boolean;\n}\n\n/**\n * Parameters used in `colDef.cellRendererParams` to configure a  Group Cell Renderer (`agGroupCellRenderer`).\n */\nexport interface IGroupCellRendererParams<TData = any, TValue = any> {\n    /** Set to `true` to not include any padding (indentation) in the child rows. */\n    suppressPadding?: boolean;\n    /** Set to `true` to suppress expand on double click. */\n    suppressDoubleClickExpand?: boolean;\n    /** Set to `true` to suppress expand on <kbd>\u21B5 Enter</kbd> */\n    suppressEnterExpand?: boolean;\n    /** The value getter for the footer text. Can be a function or expression. */\n    footerValueGetter?: string | FooterValueGetterFunc;\n    /** If `true`, count is not displayed beside the name. */\n    suppressCount?: boolean;\n    /** \n     * Set to `true`, or a function that returns `true`, if a checkbox should be included.\n     */\n    checkbox?: boolean | GroupCheckboxSelectionCallback<TData, TValue>;\n\n    /** The renderer to use for inside the cell (after grouping functions are added) */\n    innerRenderer?: any;\n    /** Additional params to customise to the `innerRenderer`. */\n    innerRendererParams?: any;\n    /** Callback to enable different innerRenderers to be used based of value of params. */\n    innerRendererSelector?: CellRendererSelectorFunc;\n}\n\nexport interface IGroupCellRendererFullRowParams {\n    /**\n     * Only when in fullWidth, this gives whether the comp is pinned or not.\n     * If not doing fullWidth, then this is not provided, as pinned can be got from the column.\n     */\n    pinned?: \"left\" | \"right\" | null;\n    /** 'true' if comp is showing full width. */\n    fullWidth: boolean;\n\n    rowDrag?: boolean;\n}\n\n/**\n * Parameters provided by the grid to the `init` method of a `agGroupCellRenderer`.\n * Do not use in `colDef.cellRendererParams` - see `IGroupCellRendererParams` instead.\n */\nexport type GroupCellRendererParams<TData = any, TValue = any> = IGroupCellRendererParams & ICellRendererParams<TData, TValue> & IGroupCellRendererFullRowParams;\n\nexport class GroupCellRendererCtrl extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired(\"ctrlsService\") private ctrlsService: CtrlsService;\n\n    private params: GroupCellRendererParams;\n\n    // will be true if the node was pulled down\n    private showingValueForOpenedParent: boolean;\n\n    // this is normally the rowNode of this row, however when doing hideOpenParents, it will\n    // be the parent who's details we are actually showing if the data was pulled down.\n    private displayedGroupNode: RowNode;\n\n    private eGui: HTMLElement;\n    private eExpanded: HTMLElement;\n    private eContracted: HTMLElement;\n    private eCheckbox: HTMLElement;\n    private expandListener: (() => null) | null;\n\n    // keep reference to this, so we can remove again when indent changes\n    private indentClass: string;\n\n    private comp: IGroupCellRenderer;\n    private compClass: any;\n\n    public init(comp: IGroupCellRenderer, eGui: HTMLElement, eCheckbox: HTMLElement, eExpanded: HTMLElement, eContracted: HTMLElement, compClass: any, params: GroupCellRendererParams): void {\n        this.params = params;\n        this.eGui = eGui;\n        this.eCheckbox = eCheckbox;\n        this.eExpanded = eExpanded;\n        this.eContracted = eContracted;\n        this.comp = comp;\n        this.compClass = compClass;\n\n\n        const { node, value, colDef } = params;\n        const topLevelFooter = this.isTopLevelFooter();\n\n        // logic for skipping cells follows, never skip top level footer cell.\n        if (!topLevelFooter) {\n            const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n            if (embeddedRowMismatch) {\n                return;\n            }\n\n            // this footer should only be non-top level. Don't need to check groupIncludeFooter\n            // as we won't have footer rows in that instance.\n            if (node.footer && this.gridOptionsService.get('groupHideOpenParents')) {\n                const showRowGroup = colDef && colDef.showRowGroup;\n                const rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n\n                // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n                // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n                if (showRowGroup !== rowGroupColumnId) {\n                    return;\n                }\n            }\n        }\n\n        this.setupShowingValueForOpenedParent();\n        this.findDisplayedGroupNode();\n\n        if (!topLevelFooter) {\n            const showingFooterTotal = params.node.footer && params.node.rowGroupIndex === this.columnModel.getRowGroupColumns().findIndex(c => c.getColId() === params.colDef?.showRowGroup);\n            // if we're always showing a group value\n            const isAlwaysShowing = this.gridOptionsService.get('groupDisplayType') != 'multipleColumns' || this.gridOptionsService.get('treeData');\n            // if the cell is populated with a parent value due to `showOpenedGroup`\n            const showOpenGroupValue = (\n                isAlwaysShowing || (this.gridOptionsService.get('showOpenedGroup') && !params.node.footer && (\n                    (\n                        !params.node.group ||\n                        (\n                            params.node.rowGroupIndex != null &&\n                            params.node.rowGroupIndex > this.columnModel.getRowGroupColumns().findIndex(c => c.getColId() === params.colDef?.showRowGroup)\n                        )\n                    )\n                ))\n            );\n            // not showing a leaf value (field/valueGetter)\n            const leafWithValues = !node.group && (this.params.colDef?.field || this.params.colDef?.valueGetter);\n            // doesn't have expand/collapse chevron\n            const isExpandable = this.isExpandable();\n            // is showing pivot leaf cell\n            const showPivotModeLeafValue = this.columnModel.isPivotMode() && node.leafGroup && node.rowGroupColumn?.getColId() === params.column?.getColDef().showRowGroup;\n\n            // if not showing any values or chevron, skip cell.\n            const canSkipRenderingCell = !this.showingValueForOpenedParent && !isExpandable && !leafWithValues && !showOpenGroupValue && !showingFooterTotal && !showPivotModeLeafValue;\n            if (canSkipRenderingCell) {\n                return;\n            }\n        }\n\n        this.addExpandAndContract();\n        this.addFullWidthRowDraggerIfNeeded();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n        this.refreshAriaExpanded();\n    }\n\n    public getCellAriaRole(): string {\n        const colDefAriaRole = this.params.colDef?.cellAriaRole;\n        const columnColDefAriaRole = this.params.column?.getColDef().cellAriaRole;\n        return colDefAriaRole || columnColDefAriaRole || 'gridcell';\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        // property cleanup to avoid memory leaks\n        this.expandListener = null;\n    }\n\n    private refreshAriaExpanded(): void {\n        const { node, eGridCell } = this.params;\n\n        if (this.expandListener) {\n            this.expandListener = this.expandListener();\n        }\n\n        if (!this.isExpandable()) {\n            removeAriaExpanded(eGridCell);\n            return;\n        }\n\n        const listener = () => {\n            // for react, we don't use JSX, as setting attributes via jsx is slower\n            setAriaExpanded(eGridCell, !!node.expanded);\n        };\n\n        this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;\n        listener();\n    }\n\n    private isTopLevelFooter(): boolean {\n        if (!this.gridOptionsService.get('groupIncludeTotalFooter')) { return false; }\n\n        if (this.params.value != null || this.params.node.level != -1) { return false; }\n\n        // at this point, we know it's the root node and there is no value present, so it's a footer cell.\n        // the only thing to work out is if we are displaying groups  across multiple\n        // columns (groupDisplayType: 'multipleColumns'), we only want 'total' to appear in the first column.\n\n        const colDef = this.params.colDef;\n        const doingFullWidth = colDef == null;\n        if (doingFullWidth) { return true; }\n\n        if (colDef!.showRowGroup === true) { return true; }\n\n        const rowGroupCols = this.columnModel.getRowGroupColumns();\n        // this is a sanity check, rowGroupCols should always be present\n        if (!rowGroupCols || rowGroupCols.length === 0) { return true; }\n\n        const firstRowGroupCol = rowGroupCols[0];\n\n        return firstRowGroupCol.getId() === colDef!.showRowGroup;\n    }\n\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    private isEmbeddedRowMismatch(): boolean {\n        if (!this.params.fullWidth || !this.gridOptionsService.get('embedFullWidthRows')) { return false; }\n\n        const pinnedLeftCell = this.params.pinned === 'left';\n        const pinnedRightCell = this.params.pinned === 'right';\n        const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            if (this.columnModel.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n\n        if (this.columnModel.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n\n        return !bodyCell;\n    }\n\n    private findDisplayedGroupNode(): void {\n        const column = this.params.column;\n        const rowNode = this.params.node as RowNode;\n\n        if (this.showingValueForOpenedParent) {\n            let pointer = rowNode.parent;\n\n            while (pointer != null) {\n                if (pointer.rowGroupColumn && column!.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroupNode = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n\n        // if we didn't find a displayed group, set it to the row node\n        if (missing(this.displayedGroupNode)) {\n            this.displayedGroupNode = rowNode;\n        }\n    }\n\n    private setupShowingValueForOpenedParent(): void {\n        // note - this code depends on sortService.updateGroupDataForHiddenOpenParents, where group data\n        // is updated to reflect the dragged down parents\n        const rowNode = this.params.node;\n        const column = this.params.column as Column;\n\n        if (!this.gridOptionsService.get('groupHideOpenParents')) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // hideOpenParents means rowNode.groupData can have data for the group this column is displaying, even though\n        // this rowNode isn't grouping by the column we are displaying\n\n        // if no groupData at all, we are not showing a parent value\n        if (!rowNode.groupData) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // this is the normal case, in that we are showing a group for which this column is configured. note that\n        // this means the Row Group is closed (if it was open, we would not be displaying it)\n        const showingGroupNode = rowNode.rowGroupColumn != null;\n        if (showingGroupNode) {\n            const keyOfGroupingColumn = rowNode.rowGroupColumn!.getId();\n            const configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);\n            // if showing group as normal, we didn't take group info from parent\n            if (configuredToShowThisGroupLevel) {\n                this.showingValueForOpenedParent = false;\n                return;\n            }\n        }\n\n        // see if we are showing a Group Value for the Displayed Group. if we are showing a group value, and this Row Node\n        // is not grouping by this Displayed Group, we must of gotten the value from a parent node\n        const valPresent = rowNode.groupData[column.getId()] != null;\n\n        this.showingValueForOpenedParent = valPresent;\n    }\n\n    private addValueElement(): void {\n        if (this.displayedGroupNode.footer) {\n            this.addFooterValue();\n        } else {\n            this.addGroupValue();\n            this.addChildCount();\n        }\n    }\n\n    private addGroupValue(): void {\n\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();\n        const innerCompDetails = this.getInnerCompDetails(paramsAdjusted);\n\n        const { valueFormatted, value } = paramsAdjusted;\n\n        let valueWhenNoRenderer = valueFormatted;\n        if (valueWhenNoRenderer == null) {\n            const isGroupColForNode = (\n                this.displayedGroupNode.rowGroupColumn && this.params.column?.isRowGroupDisplayed(this.displayedGroupNode.rowGroupColumn.getId())\n            );\n\n            if (this.displayedGroupNode.key === \"\" && this.displayedGroupNode.group && isGroupColForNode) {\n                const localeTextFunc = this.localeService.getLocaleTextFunc();\n                valueWhenNoRenderer = localeTextFunc('blanks', '(Blanks)');\n            } else {\n                valueWhenNoRenderer = value ?? null;\n            }\n        }\n\n        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);\n    }\n\n    private adjustParamsWithDetailsFromRelatedColumn(): GroupCellRendererParams {\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const column = this.params.column;\n\n        if (!relatedColumn) { return this.params; }\n\n        const notFullWidth = column != null;\n        if (notFullWidth) {\n            const showingThisRowGroup = column!.isRowGroupDisplayed(relatedColumn.getId());\n            if (!showingThisRowGroup) { return this.params; }\n        }\n\n        const params = this.params;\n\n        const { value, node } = this.params;\n        const valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);\n\n        // we don't update the original params, as they could of come through React,\n        // as react has RowGroupCellRenderer, which means the params could be props which\n        // would be read only\n        const paramsAdjusted = {\n            ...params,\n            valueFormatted: valueFormatted\n        };\n\n        return paramsAdjusted;\n    }\n\n    private addFooterValue(): void {\n        const footerValueGetter = this.params.footerValueGetter;\n        let footerValue = '';\n\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone = cloneObject(this.params);\n            paramsClone.value = this.params.value;\n\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            } else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            } else {\n                console.warn('AG Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        } else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const footerTotalPrefix = localeTextFunc('footerTotal', 'Total');\n            footerValue = footerTotalPrefix + ' ' + (this.params.value != null ? this.params.value : '');\n        }\n\n        const innerCompDetails = this.getInnerCompDetails(this.params);\n\n        this.comp.setInnerRenderer(innerCompDetails, footerValue);\n    }\n\n    private getInnerCompDetails(params: GroupCellRendererParams): UserCompDetails | undefined {\n\n        // for full width rows, we don't do any of the below\n        if (params.fullWidth) {\n            return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(\n                this.gridOptionsService.get('groupRowRendererParams'), params);\n        }\n\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const innerCompDetails = this.userComponentFactory\n            .getInnerRendererDetails(params, params);\n\n        // avoid using GroupCellRenderer again, otherwise stack overflow, as we insert same renderer again and again.\n        // this covers off chance user is grouping by a column that is also configured with GroupCellRenderer\n        const isGroupRowRenderer = (details: UserCompDetails | undefined) => details && details.componentClass == this.compClass;\n\n        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            return innerCompDetails;\n        }\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const relatedColDef = relatedColumn ? relatedColumn.getColDef() : undefined;\n\n        if (!relatedColDef) {\n            return;\n        }\n\n        // otherwise see if we can use the cellRenderer of the column we are grouping by\n        const relatedCompDetails = this.userComponentFactory\n            .getCellRendererDetails(relatedColDef, params);\n\n        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {\n            // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n            return relatedCompDetails;\n        }\n\n        if (isGroupRowRenderer(relatedCompDetails) &&\n            relatedColDef.cellRendererParams &&\n            relatedColDef.cellRendererParams.innerRenderer) {\n            // edge case - this comes from a column which has been grouped dynamically, that has a renderer 'group'\n            // and has an inner cell renderer\n            const res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);\n            return res;\n        }\n    }\n\n    private addChildCount(): void {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) { return; }\n\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n\n    private updateChildCount(): void {\n        const allChildrenCount = this.displayedGroupNode.allChildrenCount;\n        const showingGroupForThisNode = this.isShowRowGroupForThisRow();\n        const showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;\n        const countString = showCount ? `(${allChildrenCount})` : ``;\n        this.comp.setChildCount(countString);\n    }\n\n    private isShowRowGroupForThisRow(): boolean {\n        if (this.gridOptionsService.get('treeData')) { return true; }\n\n        const rowGroupColumn = this.displayedGroupNode.rowGroupColumn;\n\n        if (!rowGroupColumn) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());\n\n        return thisColumnIsInterested;\n    }\n\n    private addExpandAndContract(): void {\n        const params = this.params;\n        const eExpandedIcon = createIconNoSpan('groupExpanded', this.gridOptionsService, null);\n        const eContractedIcon = createIconNoSpan('groupContracted', this.gridOptionsService, null);\n\n        if (eExpandedIcon) {\n            this.eExpanded.appendChild(eExpandedIcon);\n        }\n\n        if (eContractedIcon) {\n            this.eContracted.appendChild(eContractedIcon);\n        }\n\n        const eGroupCell = params.eGridCell;\n\n        // if editing groups, then double click is to start editing\n        const isDoubleClickEdit = this.params.column?.isCellEditable(params.node) && this.gridOptionsService.get('enableGroupEdit');\n        if (!isDoubleClickEdit && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n\n        this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n\n        // expand / contract as the user hits enter\n        this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n\n        this.showExpandAndContractIcons();\n\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        const expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);\n    }\n\n    private onExpandClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // so if we expand a node, it does not also get selected.\n        stopPropagationForAgGrid(mouseEvent);\n\n        this.onExpandOrContract(mouseEvent);\n    }\n\n    private onExpandOrContract(e: MouseEvent | KeyboardEvent): void {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode: RowNode = this.displayedGroupNode;\n        const nextExpandState = !rowNode.expanded;\n\n        if (!nextExpandState && rowNode.sticky) {\n            this.scrollToStickyNode(rowNode);\n        }\n\n        rowNode.setExpanded(nextExpandState, e);\n    }\n\n    private scrollToStickyNode(rowNode: RowNode): void {\n        const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        const scrollFeature = gridBodyCtrl.getScrollFeature();\n\n        scrollFeature.setVerticalScrollPosition(rowNode.rowTop! - rowNode.stickyRowTop);\n    }\n\n    private isExpandable(): boolean {\n        if (this.showingValueForOpenedParent) { return true; }\n\n        const rowNode = this.displayedGroupNode;\n        const reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;\n        const expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n\n        if (!expandableGroup) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';\n\n        if (displayingForOneColumnOnly) {\n            const showing = this.isShowRowGroupForThisRow();\n            return showing;\n        }\n\n        return true;\n    }\n\n    private showExpandAndContractIcons(): void {\n        const { params, displayedGroupNode: displayedGroup, columnModel } = this;\n        const { node } = params;\n\n        const isExpandable = this.isExpandable();\n\n        if (isExpandable) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.showingValueForOpenedParent ? true : node.expanded;\n            this.comp.setExpandedDisplayed(expanded);\n            this.comp.setContractedDisplayed(!expanded);\n        } else {\n            // it not expandable, show neither\n            this.comp.setExpandedDisplayed(false);\n            this.comp.setContractedDisplayed(false);\n        }\n\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotMode = columnModel.isPivotMode();\n        const pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;\n        const addExpandableCss = isExpandable && !pivotModeAndLeafGroup;\n        const isTotalFooterNode = node.footer && node.level === -1;\n\n        this.comp.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);\n        this.comp.addOrRemoveCssClass('ag-row-group', addExpandableCss);\n\n        if (pivotMode) {\n            this.comp.addOrRemoveCssClass('ag-pivot-leaf-group', pivotModeAndLeafGroup);\n        } else if (!isTotalFooterNode) {\n            this.comp.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);\n        }\n    }\n\n    private onRowNodeIsExpandableChanged(): void {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n\n        // if we have no children, this impacts the indent\n        this.setIndent();\n\n        this.refreshAriaExpanded();\n    }\n\n    private setupIndent(): void {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node: IRowNode = this.params.node;\n        const suppressPadding = this.params.suppressPadding;\n\n        if (!suppressPadding) {\n            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    }\n\n    private setIndent(): void {\n        if (this.gridOptionsService.get('groupHideOpenParents')) { return; }\n\n        const params = this.params;\n        const rowNode: IRowNode = params.node;\n        // if we are only showing one group column, we don't want to be indenting based on level\n        const fullWithRow = !!params.colDef;\n        const treeData = this.gridOptionsService.get('treeData');\n        const manyDimensionThisColumn = !fullWithRow || treeData || params.colDef!.showRowGroup === true;\n        const paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;\n\n        if (this.indentClass) {\n            this.comp.addOrRemoveCssClass(this.indentClass, false);\n        }\n\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.comp.addOrRemoveCssClass(this.indentClass, true);\n    }\n\n    private addFullWidthRowDraggerIfNeeded(): void {\n        if (!this.params.fullWidth || !this.params.rowDrag) { return; }\n\n        const rowDragComp = new RowDragComp(() => this.params.value, this.params.node as RowNode);\n        this.createManagedBean(rowDragComp, this.context);\n\n        this.eGui.insertAdjacentElement('afterbegin', rowDragComp.getGui());\n    }\n\n    private isUserWantsSelected(): boolean {\n        const paramsCheckbox = this.params.checkbox;\n\n        // if a function, we always return true as change detection can show or hide the checkbox.\n        return typeof paramsCheckbox === 'function' || paramsCheckbox === true;\n    }\n\n    private addCheckboxIfNeeded(): void {\n        const rowNode = this.displayedGroupNode;\n        const checkboxNeeded = this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.getContext().createBean(cbSelectionComponent);\n\n            cbSelectionComponent.init({\n                rowNode: this.params.node as RowNode, // when groupHideOpenParents = true and group expanded, we want the checkbox to refer to leaf node state (not group node state)\n                column: this.params.column,\n                overrides: {\n                    isVisible: this.params.checkbox,\n                    callbackParams: this.params,\n                    removeHidden: true,\n                },\n            });\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => this.getContext().destroyBean(cbSelectionComponent));\n        }\n\n        this.comp.setCheckboxVisible(checkboxNeeded);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const isEnterKey = event.key === KeyCode.ENTER;\n\n        if (!isEnterKey || this.params.suppressEnterExpand) { return; }\n\n        const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n\n        if (cellEditable) { return; }\n\n        this.onExpandOrContract(event);\n    }\n\n    private onCellDblClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon\n            = isElementInEventPath(this.eExpanded, mouseEvent)\n            || isElementInEventPath(this.eContracted, mouseEvent);\n\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract(mouseEvent);\n        }\n    }\n}\n", "import { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { setAriaRole } from \"../../utils/aria\";\nimport { setDisplayed } from \"../../utils/dom\";\nimport { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { GroupCellRendererCtrl, GroupCellRendererParams, IGroupCellRenderer } from \"./groupCellRendererCtrl\";\nimport { ICellRendererComp } from \"./iCellRenderer\";\n\nexport class GroupCellRenderer extends Component implements ICellRendererComp {\n\n    private static TEMPLATE = /* html */\n        `<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>`;\n\n    @RefSelector('eExpanded') private eExpanded: HTMLElement;\n    @RefSelector('eContracted') private eContracted: HTMLElement;\n    @RefSelector('eCheckbox') private eCheckbox: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n    @RefSelector('eChildCount') private eChildCount: HTMLElement;\n\n    // this cell renderer\n    private innerCellRenderer: ICellRendererComp;\n\n    constructor() {\n        super(GroupCellRenderer.TEMPLATE);\n    }\n\n    public init(params: GroupCellRendererParams): void {\n\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (compDetails, valueToDisplay) => this.setRenderDetails(compDetails, valueToDisplay),\n            setChildCount: count => this.eChildCount.textContent = count,\n            addOrRemoveCssClass: (cssClass, value) => this.addOrRemoveCssClass(cssClass, value),\n            setContractedDisplayed: expanded => setDisplayed(this.eContracted, expanded),\n            setExpandedDisplayed: expanded => setDisplayed(this.eExpanded, expanded),\n            setCheckboxVisible: visible => this.eCheckbox.classList.toggle('ag-invisible', !visible)\n        };\n\n        const ctrl = this.createManagedBean(new GroupCellRendererCtrl());\n        const fullWidth = !params.colDef;\n        const eGui = this.getGui();\n        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);\n\n        if (fullWidth) {\n            setAriaRole(eGui, ctrl.getCellAriaRole());\n        }\n    }\n\n    private setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any): void {\n\n        if (compDetails) {\n            const componentPromise = compDetails.newAgStackInstance();\n            if (!componentPromise) { return; }\n            componentPromise.then(comp => {\n                if (!comp) { return; }\n                const destroyComp = () => this.context.destroyBean(comp);\n                if (this.isAlive()) {\n                    this.eValue.appendChild(comp.getGui());\n                    this.addDestroyFunc(destroyComp);\n                } else {\n                    destroyComp();\n                }\n            });\n        } else {\n            this.eValue.innerText = valueToDisplay;\n        }\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    public destroy(): void {\n        this.getContext().destroyBean(this.innerCellRenderer);\n        super.destroy();\n    }\n\n    public refresh(): boolean {\n        return false;\n    }\n}\n", "import { Component } from \"../../widgets/component\";\nimport { ICellRendererParams } from \"./iCellRenderer\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { IComponent } from \"../../interfaces/iComponent\";\n\nexport interface ILoadingCellRendererParams<TData = any, TContext = any> extends ICellRendererParams<TData, TContext> { }\nexport interface ILoadingCellRenderer { }\nexport interface ILoadingCellRendererComp extends ILoadingCellRenderer, IComponent<ILoadingCellRendererParams> { }\n\nexport class LoadingCellRenderer extends Component implements ILoadingCellRendererComp {\n\n    private static TEMPLATE =\n        `<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>`;\n\n    @RefSelector('eLoadingIcon') private eLoadingIcon: HTMLElement;\n    @RefSelector('eLoadingText') private eLoadingText: HTMLElement;\n\n    constructor() {\n        super(LoadingCellRenderer.TEMPLATE);\n    }\n\n    public init(params: ILoadingCellRendererParams): void {\n        params.node.failedLoad ? this.setupFailed() : this.setupLoading();\n    }\n\n    private setupFailed(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingError', 'ERR');\n    }\n\n    private setupLoading(): void {\n        const eLoadingIcon = createIconNoSpan('groupLoading', this.gridOptionsService, null);\n        if (eLoadingIcon) {\n            this.eLoadingIcon.appendChild(eLoadingIcon);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');\n    }\n\n    public refresh(params: ILoadingCellRendererParams): boolean {\n        return false;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n}", "import { IComponent } from \"../../interfaces/iComponent\";\nimport { AgGridCommon } from \"../../interfaces/iCommon\";\nimport { Component } from \"../../widgets/component\";\n\nexport interface ILoadingOverlayParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> { }\n\nexport interface ILoadingOverlay<TData = any, TContext = any> {\n    // Gets called when the `loadingOverlayComponentParams` grid option is updated\n    refresh?(params: ILoadingOverlayParams<TData, TContext>): void;\n}\n\nexport interface ILoadingOverlayComp<TData = any, TContext = any> extends IComponent<ILoadingOverlayParams<TData, TContext>>, ILoadingOverlay<TData, TContext> { }\n\nexport class LoadingOverlayComponent extends Component implements ILoadingOverlayComp {\n\n    private static DEFAULT_LOADING_OVERLAY_TEMPLATE = /* html */ `<span aria-live=\"polite\" aria-atomic=\"true\" class=\"ag-overlay-loading-center\"></span>`;\n\n    constructor() {\n        super();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: ILoadingOverlayParams): void {\n        const customTemplate = this.gridOptionsService.get('overlayLoadingTemplate');\n\n        this.setTemplate(customTemplate ?? LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE);\n\n        if (!customTemplate) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            // setTimeout is used because some screen readers only announce `aria-live` text when\n            // there is a \"text change\", so we force a change from empty.\n            setTimeout(() => {\n                this.getGui().textContent = localeTextFunc('loadingOoo', 'Loading...');\n            });\n        }\n    }\n}\n", "import { AgGridCommon } from \"../../interfaces/iCommon\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { Component } from \"../../widgets/component\";\n\nexport interface INoRowsOverlayParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> { }\n\nexport interface INoRowsOverlay<TData = any, TContext = any> {\n    // Gets called when the `noRowsOverlayComponentParams` grid option is updated\n    refresh?(params: INoRowsOverlayParams<TData, TContext>): void;\n}\n\nexport interface INoRowsOverlayComp<TData = any, TContext = any> extends IComponent<INoRowsOverlayParams<TData, TContext>>, INoRowsOverlay<TData, TContext> { }\n\nexport class NoRowsOverlayComponent extends Component implements INoRowsOverlayComp {\n    private static DEFAULT_NO_ROWS_TEMPLATE = /* html */ `<span class=\"ag-overlay-no-rows-center\"></span>`;\n\n    constructor() {\n        super();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: INoRowsOverlayParams): void {\n        const customTemplate = this.gridOptionsService.get('overlayNoRowsTemplate');\n\n        this.setTemplate(customTemplate ?? NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE);\n\n        if (!customTemplate) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            // setTimeout is used because some screen readers only announce `aria-live` text when\n            // there is a \"text change\", so we force a change from empty.\n            setTimeout(() => {\n                this.getGui().textContent = localeTextFunc('noRowsToShow', 'No Rows To Show');\n            });\n        }\n    }\n}\n", "import { PopupComponent } from '../widgets/popupComponent';\nimport { IComponent } from '../interfaces/iComponent';\nimport { escapeString } from '../utils/string';\nimport { Column } from '../entities/column';\nimport { ColumnGroup } from '../entities/columnGroup';\nimport { ColGroupDef, ColDef } from '../entities/colDef';\nimport { AgGridCommon } from '../interfaces/iCommon';\nimport { IRowNode } from '../interfaces/iRowNode';\n\nexport type TooltipLocation =\n    | 'advancedFilter'\n    | 'cell'\n    | 'columnToolPanelColumn'\n    | 'columnToolPanelColumnGroup'\n    | 'filterToolPanelColumnGroup'\n    | 'fullWidthRow'\n    | 'header'\n    | 'headerGroup'\n    | 'menu'\n    | 'pivotColumnsList'\n    | 'rowGroupColumnsList'\n    | 'setFilterValue'\n    | 'valueColumnsList'\n    | 'UNKNOWN';\n\nexport interface ITooltipParams<TData = any, TValue = any, TContext = any> extends AgGridCommon<TData, TContext> {\n    /** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */\n    location: TooltipLocation;\n    /** The value to be rendered by the tooltip. */\n    value?: TValue | null;\n    /** The formatted value to be rendered by the tooltip. */\n    valueFormatted?: string | null;\n    /** Column / ColumnGroup definition. */\n    colDef?: ColDef<TData, TValue> | ColGroupDef<TData> | null;\n    /** Column / ColumnGroup */\n    column?: Column<TValue> | ColumnGroup;\n    /** The index of the row containing the cell rendering the tooltip. */\n    rowIndex?: number;\n    /** The row node. */\n    node?: IRowNode<TData>;\n    /** Data for the row node in question. */\n    data?: TData;\n    /** A callback function that hides the tooltip */\n    hideTooltipCallback?: () => void;\n}\n\nexport interface ITooltipComp extends IComponent<ITooltipParams> { }\n\nexport class TooltipComponent extends PopupComponent implements ITooltipComp {\n    constructor() {\n        super(/* html */`<div class=\"ag-tooltip\"></div>`);\n    }\n\n    // will need to type params\n    public init(params: ITooltipParams): void {\n        const { value } = params;\n        this.getGui().textContent = escapeString(value, true) as string;\n    }\n}\n", "import { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { AgInputNumberField } from \"../../widgets/agInputNumberField\";\nimport { CellEditorInput, SimpleCellEditor } from \"./simpleCellEditor\";\nimport { exists } from \"../../utils/generic\";\nimport { KeyCode } from \"../../constants/keyCode\";\n\nexport interface INumberCellEditorParams<TData = any, TContext = any> extends ICellEditorParams<TData, number, TContext> {\n    /** Min allowed value. */\n    min?: number;\n    /** Max allowed value. */\n    max?: number;\n    /** Number of digits allowed after the decimal point. */\n    precision?: number;\n    /**\n     * Size of the value change when stepping up/down, starting from `min` or the initial value if provided.\n     * Step is also the difference between valid values.\n     * If the user-provided value isn't a multiple of the step value from the starting value, it will be considered invalid.\n     * Defaults to any value allowed.\n     */\n    step?: number;\n    /**\n     * Display stepper buttons in editor. Note: Does not work when `preventStepping` is `true`.\n     * @default false\n     */\n    showStepperButtons?: boolean;\n    /**\n     * Set to `true` to prevent key up/down from stepping the field's value.\n     * @default false\n     */\n    preventStepping?: boolean\n}\n\nclass NumberCellEditorInput implements CellEditorInput<number, INumberCellEditorParams, AgInputNumberField> {\n    private eInput: AgInputNumberField;\n    private params: INumberCellEditorParams;\n\n    public getTemplate() {\n        return /* html */`<ag-input-number-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-number-field>`;\n    }\n\n    public init(eInput: AgInputNumberField, params: INumberCellEditorParams): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.precision != null) {\n            eInput.setPrecision(params.precision);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n\n        const inputEl = eInput.getInputElement();\n        if (params.preventStepping) {\n            eInput.addManagedListener(inputEl, 'keydown', this.preventStepping);\n        } else if (params.showStepperButtons) {\n            inputEl.classList.add('ag-number-field-input-stepper');\n        }\n    }\n\n    private preventStepping(e: KeyboardEvent): void {\n        if (e.key === KeyCode.UP || e.key === KeyCode.DOWN) {\n            e.preventDefault();\n        }\n    }\n\n    public getValue(): number | null | undefined {\n        const value = this.eInput.getValue();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        let parsedValue = this.params.parseValue(value!);\n        if (parsedValue == null) {\n            return parsedValue;\n        }\n        if (typeof parsedValue === 'string') {\n            if (parsedValue === '') {\n                return null;\n            }\n            parsedValue = Number(parsedValue);\n        }\n        return isNaN(parsedValue) ? null : parsedValue;\n    }\n\n    public getStartValue(): string | null | undefined {\n        return this.params.value as any;\n    }\n}\n\nexport class NumberCellEditor extends SimpleCellEditor<number, INumberCellEditorParams, AgInputNumberField> {\n    constructor() {\n        super(new NumberCellEditorInput());\n    }\n}\n", "import { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { serialiseDate } from \"../../utils/date\";\nimport { AgInputDateField } from \"../../widgets/agInputDateField\";\nimport { CellEditorInput, SimpleCellEditor } from \"./simpleCellEditor\";\nimport { exists } from \"../../utils/generic\";\n\nexport interface IDateCellEditorParams<TData = any, TContext = any> extends ICellEditorParams<TData, Date, TContext> {\n    /** Min allowed value. Either `Date` object or string in format `'yyyy-mm-dd'`. */\n    min?: string | Date;\n    /** Max allowed value. Either `Date` object or string in format `'yyyy-mm-dd'`. */\n    max?: string | Date;\n    /**\n     * Size of the value change when stepping up/down, starting from `min` or the initial value if provided.\n     * Step is also the difference between valid values.\n     * If the user-provided value isn't a multiple of the step value from the starting value, it will be considered invalid.\n     * Defaults to any value allowed.\n     */\n    step?: number;\n}\n\nclass DateCellEditorInput implements CellEditorInput<Date, IDateCellEditorParams, AgInputDateField> {\n    private eInput: AgInputDateField;\n    private params: IDateCellEditorParams;\n\n    public getTemplate() {\n        return /* html */`<ag-input-date-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-date-field>`;\n    }\n\n    public init(eInput: AgInputDateField, params: IDateCellEditorParams): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n    }\n\n    getValue(): Date | null | undefined {\n        const value = this.eInput.getDate();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return value ?? null;\n    }\n\n    public getStartValue(): string | null | undefined {\n        const { value } = this.params;\n        if (!(value instanceof Date)) {\n            return undefined\n        }\n        return serialiseDate(value, false);\n    }\n}\n\nexport class DateCellEditor extends SimpleCellEditor<Date, IDateCellEditorParams, AgInputDateField> {\n    constructor() {\n        super(new DateCellEditorInput());\n    }\n}\n", "import { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { DataTypeService } from \"../../columns/dataTypeService\";\nimport { Autowired } from \"../../context/context\";\nimport { serialiseDate } from \"../../utils/date\";\nimport { AgInputDateField } from \"../../widgets/agInputDateField\";\nimport { CellEditorInput, SimpleCellEditor } from \"./simpleCellEditor\";\nimport { exists } from \"../../utils/generic\";\n\nexport interface IDateStringCellEditorParams<TData = any, TContext = any> extends ICellEditorParams<TData, string, TContext> {\n    /** Min allowed value. Either `Date` object or string in format `'yyyy-mm-dd'`. */\n    min?: string | Date;\n    /** Max allowed value. Either `Date` object or string in format `'yyyy-mm-dd'`. */\n    max?: string | Date;\n    /**\n     * Size of the value change when stepping up/down, starting from `min` or the initial value if provided.\n     * Step is also the difference between valid values.\n     * If the user-provided value isn't a multiple of the step value from the starting value, it will be considered invalid.\n     * Defaults to any value allowed.\n     */\n    step?: number;\n}\n\nclass DateStringCellEditorInput implements CellEditorInput<string, IDateStringCellEditorParams, AgInputDateField> {\n    private eInput: AgInputDateField;\n    private params: IDateStringCellEditorParams;\n\n    constructor(private getDataTypeService: () => DataTypeService) {}\n\n    public getTemplate() {\n        return /* html */`<ag-input-date-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-date-field>`;\n    }\n\n    public init(eInput: AgInputDateField, params: IDateStringCellEditorParams): void {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n    }\n\n    public getValue(): string | null | undefined {\n        const value = this.formatDate(this.eInput.getDate());\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value ?? '');\n    }\n\n    public getStartValue(): string | null | undefined {\n        return serialiseDate(this.parseDate(this.params.value ?? undefined) ?? null, false);\n    }\n\n    private parseDate(value: string | undefined): Date | undefined {\n        return this.getDataTypeService().getDateParserFunction(this.params.column)(value);\n    }\n\n    private formatDate(value: Date | undefined): string | undefined {\n        return this.getDataTypeService().getDateFormatterFunction(this.params.column)(value);\n    }\n}\n\nexport class DateStringCellEditor extends SimpleCellEditor<string, IDateStringCellEditorParams, AgInputDateField> {\n    @Autowired('dataTypeService') private dataTypeService: DataTypeService;\n\n    constructor() {\n        super(new DateStringCellEditorInput(() => this.dataTypeService));\n    }\n}\n", "import { ICellRenderer, ICellRendererParams } from \"./iCellRenderer\";\nimport { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { AgCheckbox } from \"../../widgets/agCheckbox\";\nimport { stopPropagationForAgGrid } from \"../../utils/event\";\nimport { CellEditingStartedEvent, CellEditingStoppedEvent, Events } from \"../../events\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { getAriaCheckboxStateName, setAriaLive } from \"../../utils/aria\";\nimport { GROUP_AUTO_COLUMN_ID } from \"../../columns/autoGroupColService\";\n\nexport interface ICheckboxCellRendererParams<TData = any, TContext = any> extends ICellRendererParams<TData, boolean, TContext> {\n    /** Set to `true` for the input to be disabled. */\n    disabled?: boolean;\n}\n\nexport class CheckboxCellRenderer extends Component implements ICellRenderer {\n    private static TEMPLATE = /* html*/`\n        <div class=\"ag-cell-wrapper ag-checkbox-cell\" role=\"presentation\">\n            <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n        </div>`;\n\n    @RefSelector('eCheckbox') private eCheckbox: AgCheckbox;\n    private params: ICheckboxCellRendererParams;\n\n    constructor() {\n        super(CheckboxCellRenderer.TEMPLATE);\n    }\n\n    public init(params: ICheckboxCellRendererParams): void {\n        this.params = params;\n        this.updateCheckbox(params);\n        const inputEl = this.eCheckbox.getInputElement();\n        inputEl.setAttribute('tabindex', '-1');\n        setAriaLive(inputEl, 'polite');\n\n        this.addManagedListener(inputEl, 'click', (event: Event) => {\n            stopPropagationForAgGrid(event);\n\n            if (this.eCheckbox.isDisabled()) {\n                return;\n            }\n    \n            const isSelected = this.eCheckbox.getValue();\n    \n            this.onCheckboxChanged(isSelected)\n        });\n\n        this.addManagedListener(inputEl, 'dblclick', (event: Event) => {\n            stopPropagationForAgGrid(event);\n        });\n\n        const eDocument = this.gridOptionsService.getDocument();\n        this.addManagedListener(this.params.eGridCell, 'keydown', (event: KeyboardEvent) => {\n            if (event.key === KeyCode.SPACE && !this.eCheckbox.isDisabled()) {\n                if (this.params.eGridCell === eDocument.activeElement) {\n                    this.eCheckbox.toggle();\n                }\n                const isSelected = this.eCheckbox.getValue();\n                this.onCheckboxChanged(isSelected);\n                event.preventDefault();\n            }\n        });\n    }\n\n    public refresh(params: ICheckboxCellRendererParams): boolean {\n        this.params = params;\n        this.updateCheckbox(params);\n        return true;\n    }\n\n    private updateCheckbox(params: ICheckboxCellRendererParams): void {\n        let isSelected: boolean | undefined;\n        let displayed = true;\n        if (params.node.group && params.column) {\n            const colId = params.column.getColId();\n            if (colId.startsWith(GROUP_AUTO_COLUMN_ID)) {\n                // if we're grouping by this column then the value is a string and we need to parse it\n                isSelected = params.value == null || (params.value as any) === '' ? undefined : (params.value as any) === 'true';\n            } else if (params.node.aggData && params.node.aggData[colId] !== undefined) {\n                isSelected = params.value ?? undefined;\n            } else {\n                displayed = false;\n            }\n        } else {\n            isSelected = params.value ?? undefined;\n        }\n        if (!displayed) {\n            this.eCheckbox.setDisplayed(false);\n            return;\n        }\n        this.eCheckbox.setValue(isSelected);\n        const disabled = params.disabled != null ? params.disabled : !params.column?.isCellEditable(params.node);\n        this.eCheckbox.setDisabled(disabled);\n\n        const translate = this.localeService.getLocaleTextFunc();\n        const stateName = getAriaCheckboxStateName(translate, isSelected);\n        const ariaLabel = disabled\n            ? stateName\n            : `${translate('ariaToggleCellValue', 'Press SPACE to toggle cell value')} (${stateName})`;\n        this.eCheckbox.setInputAriaLabel(ariaLabel);\n    }\n\n    private onCheckboxChanged(isSelected?: boolean): void {\n        const { column, node, rowIndex, value } = this.params;\n        const eventStarted: WithoutGridCommon<CellEditingStartedEvent> = {\n            type: Events.EVENT_CELL_EDITING_STARTED,\n            column: column!,\n            colDef: column?.getColDef()!,\n            data: node.data,\n            node,\n            rowIndex,\n            rowPinned: node.rowPinned,\n            value\n        };\n        this.eventService.dispatchEvent(eventStarted);\n\n        const valueChanged = this.params.node.setDataValue(this.params.column!, isSelected, 'edit');\n\n        const eventStopped: WithoutGridCommon<CellEditingStoppedEvent> = {\n            type: Events.EVENT_CELL_EDITING_STOPPED,\n            column: column!,\n            colDef: column?.getColDef()!,\n            data: node.data,\n            node,\n            rowIndex,\n            rowPinned: node.rowPinned,\n            value,\n            oldValue: value,\n            newValue: isSelected,\n            valueChanged\n        };\n        this.eventService.dispatchEvent(eventStopped);\n    }\n}\n", "import { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { AgCheckbox } from \"../../widgets/agCheckbox\";\nimport { getAriaCheckboxStateName } from \"../../utils/aria\";\nimport { Events } from \"../../eventKeys\";\n\nexport class CheckboxCellEditor extends PopupComponent implements ICellEditorComp {\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`\n        );\n    }\n\n    @RefSelector('eCheckbox') private eCheckbox: AgCheckbox;\n    private params: ICellEditorParams<any, boolean>\n\n    public init(params: ICellEditorParams<any, boolean>): void {\n        this.params = params;\n        const isSelected = params.value ?? undefined;\n\n        this.eCheckbox.setValue(isSelected);\n\n        const inputEl = this.eCheckbox.getInputElement();\n        inputEl.setAttribute('tabindex', '-1');\n\n        this.setAriaLabel(isSelected);\n\n        this.addManagedListener(\n            this.eCheckbox,\n            Events.EVENT_FIELD_VALUE_CHANGED,\n            (event: { selected?: boolean }) => this.setAriaLabel(event.selected)\n        );\n    }\n\n    public getValue(): boolean | undefined {\n        return this.eCheckbox.getValue();\n    }\n\n    public focusIn(): void {\n        this.eCheckbox.getFocusableElement().focus();\n    }\n\n    public afterGuiAttached(): void {\n        if (this.params.cellStartedEdit) {\n            this.focusIn();\n        }\n    }\n\n    public isPopup() {\n        return false;\n    }\n\n    private setAriaLabel(isSelected?: boolean): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const stateName = getAriaCheckboxStateName(translate, isSelected);\n        const ariaLabel = translate('ariaToggleCellValue', 'Press SPACE to toggle cell value');\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\n    }\n}\n", "import { Component } from './component';\nimport { createIconNoSpan } from '../utils/icon';\nimport { isNodeOrElement, loadTemplate } from '../utils/dom';\nimport { setAriaExpanded } from '../utils/aria';\nimport { IMenuItemComp, IMenuItemParams } from '../interfaces/menuItem';\n\ninterface AgMenuItemRendererParams {\n    cssClassPrefix?: string;\n    isCompact?: boolean;\n}\n\nexport class AgMenuItemRenderer extends Component implements IMenuItemComp {\n    private params: IMenuItemParams & AgMenuItemRendererParams;\n    private cssClassPrefix: string;\n\n    constructor() {\n        super();\n\n        this.setTemplate(/* html */`<div></div>`);\n    }\n\n    public init(params: IMenuItemParams & AgMenuItemRendererParams): void {\n        this.params = params;\n        this.cssClassPrefix = this.params.cssClassPrefix ?? 'ag-menu-option';\n\n        this.addIcon();\n        this.addName();\n        this.addShortcut();\n        this.addSubMenu();\n    }\n\n    public configureDefaults(): boolean {\n        return true;\n    }\n\n    private addIcon(): void {\n        if (this.params.isCompact) { return; }\n        const icon = loadTemplate(/* html */\n            `<span ref=\"eIcon\" class=\"${this.getClassName('part')} ${this.getClassName('icon')}\" role=\"presentation\"></span>`\n        );\n\n        if (this.params.checked) {\n            icon.appendChild(createIconNoSpan('check', this.gridOptionsService)!);\n        } else if (this.params.icon) {\n            if (isNodeOrElement(this.params.icon)) {\n                icon.appendChild(this.params.icon as HTMLElement);\n            } else if (typeof this.params.icon === 'string') {\n                icon.innerHTML = this.params.icon;\n            } else {\n                console.warn('AG Grid: menu item icon must be DOM node or string');\n            }\n        }\n\n        this.getGui().appendChild(icon);\n    }\n\n    private addName(): void {\n        const name = loadTemplate(/* html */\n            `<span ref=\"eName\" class=\"${this.getClassName('part')} ${this.getClassName('text')}\">${this.params.name || ''}</span>`\n        );\n\n        this.getGui().appendChild(name);\n    }\n\n    private addShortcut(): void {\n        if (this.params.isCompact) { return; }\n        const shortcut = loadTemplate(/* html */\n            `<span ref=\"eShortcut\" class=\"${this.getClassName('part')} ${this.getClassName('shortcut')}\">${this.params.shortcut || ''}</span>`\n        );\n\n        this.getGui().appendChild(shortcut);\n    }\n\n    private addSubMenu(): void {\n        const pointer = loadTemplate(/* html */\n            `<span ref=\"ePopupPointer\" class=\"${this.getClassName('part')} ${this.getClassName('popup-pointer')}\"></span>`\n        );\n\n        const eGui = this.getGui();\n\n        if (this.params.subMenu) {\n            const iconName = this.gridOptionsService.get('enableRtl') ? 'smallLeft' : 'smallRight';\n            setAriaExpanded(eGui, false);\n\n            pointer.appendChild(createIconNoSpan(iconName, this.gridOptionsService)!);\n        }\n\n        eGui.appendChild(pointer);\n    }\n\n    private getClassName(suffix: string) {\n        return `${this.cssClassPrefix}-${suffix}`;\n    }\n\n    public destroy(): void {\n        super.destroy();\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { ReadOnlyFloatingFilter } from \"../../filter/floating/provided/readOnlyFloatingFilter\";\nimport { DateFilter } from \"../../filter/provided/date/dateFilter\";\nimport { DateFloatingFilter } from \"../../filter/provided/date/dateFloatingFilter\";\nimport { DefaultDateComponent } from \"../../filter/provided/date/defaultDateComponent\";\nimport { NumberFilter } from \"../../filter/provided/number/numberFilter\";\nimport { NumberFloatingFilter } from \"../../filter/provided/number/numberFloatingFilter\";\nimport { TextFilter } from \"../../filter/provided/text/textFilter\";\nimport { TextFloatingFilter } from \"../../filter/provided/text/textFloatingFilter\";\nimport { HeaderComp } from \"../../headerRendering/cells/column/headerComp\";\nimport { SortIndicatorComp } from \"../../headerRendering/cells/column/sortIndicatorComp\";\nimport { HeaderGroupComp } from \"../../headerRendering/cells/columnGroup/headerGroupComp\";\nimport { ModuleNames } from \"../../modules/moduleNames\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry\";\nimport { LargeTextCellEditor } from \"../../rendering/cellEditors/largeTextCellEditor\";\nimport { SelectCellEditor } from \"../../rendering/cellEditors/selectCellEditor\";\nimport { TextCellEditor } from \"../../rendering/cellEditors/textCellEditor\";\nimport { AnimateShowChangeCellRenderer } from \"../../rendering/cellRenderers/animateShowChangeCellRenderer\";\nimport { AnimateSlideCellRenderer } from \"../../rendering/cellRenderers/animateSlideCellRenderer\";\nimport { GroupCellRenderer } from \"../../rendering/cellRenderers/groupCellRenderer\";\nimport { LoadingCellRenderer } from \"../../rendering/cellRenderers/loadingCellRenderer\";\nimport { LoadingOverlayComponent } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { NoRowsOverlayComponent } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { TooltipComponent } from \"../../rendering/tooltipComponent\";\nimport { doOnce } from \"../../utils/function\";\nimport { iterateObject } from '../../utils/object';\nimport { fuzzySuggestions } from '../../utils/fuzzyMatch';\nimport { NumberCellEditor } from \"../../rendering/cellEditors/numberCellEditor\";\nimport { DateCellEditor } from \"../../rendering/cellEditors/dateCellEditor\";\nimport { DateStringCellEditor } from \"../../rendering/cellEditors/dateStringCellEditor\";\nimport { CheckboxCellRenderer } from \"../../rendering/cellRenderers/checkboxCellRenderer\";\nimport { CheckboxCellEditor } from \"../../rendering/cellEditors/checkboxCellEditor\";\nimport { AgMenuItemRenderer } from \"../../widgets/agMenuItemRenderer\";\n\n@Bean('userComponentRegistry')\nexport class UserComponentRegistry extends BeanStub {\n\n    @Autowired('gridOptions') private gridOptions: GridOptions;\n\n    private agGridDefaults: { [key: string]: any } = {\n        //date\n        agDateInput: DefaultDateComponent,\n\n        //header\n        agColumnHeader: HeaderComp,\n        agColumnGroupHeader: HeaderGroupComp,\n        agSortIndicator: SortIndicatorComp,\n\n        //floating filters\n        agTextColumnFloatingFilter: TextFloatingFilter,\n        agNumberColumnFloatingFilter: NumberFloatingFilter,\n        agDateColumnFloatingFilter: DateFloatingFilter,\n        agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,\n\n        // renderers\n        agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,\n        agAnimateSlideCellRenderer: AnimateSlideCellRenderer,\n        agGroupCellRenderer: GroupCellRenderer,\n        agGroupRowRenderer: GroupCellRenderer,\n        agLoadingCellRenderer: LoadingCellRenderer,\n        agCheckboxCellRenderer: CheckboxCellRenderer,\n\n        //editors\n        agCellEditor: TextCellEditor,\n        agTextCellEditor: TextCellEditor,\n        agNumberCellEditor: NumberCellEditor,\n        agDateCellEditor: DateCellEditor,\n        agDateStringCellEditor: DateStringCellEditor,\n        agSelectCellEditor: SelectCellEditor,\n        agLargeTextCellEditor: LargeTextCellEditor,\n        agCheckboxCellEditor: CheckboxCellEditor,\n\n        //filter\n        agTextColumnFilter: TextFilter,\n        agNumberColumnFilter: NumberFilter,\n        agDateColumnFilter: DateFilter,\n\n        //overlays\n        agLoadingOverlay: LoadingOverlayComponent,\n        agNoRowsOverlay: NoRowsOverlayComponent,\n\n        // tooltips\n        agTooltipComponent: TooltipComponent,\n\n        // menu item\n        agMenuItem: AgMenuItemRenderer\n    };\n\n    /** Used to provide useful error messages if a user is trying to use an enterprise component without loading the module. */\n    private enterpriseAgDefaultCompsModule: Record<string, ModuleNames> = {\n        agSetColumnFilter: ModuleNames.SetFilterModule,\n        agSetColumnFloatingFilter: ModuleNames.SetFilterModule,\n        agMultiColumnFilter: ModuleNames.MultiFilterModule,\n        agMultiColumnFloatingFilter: ModuleNames.MultiFilterModule,\n        agGroupColumnFilter: ModuleNames.RowGroupingModule,\n        agGroupColumnFloatingFilter: ModuleNames.RowGroupingModule,\n        agRichSelect: ModuleNames.RichSelectModule,\n        agRichSelectCellEditor: ModuleNames.RichSelectModule,\n        agDetailCellRenderer: ModuleNames.MasterDetailModule,\n        agSparklineCellRenderer: ModuleNames.SparklinesModule\n    }\n\n    private jsComps: { [key: string]: any } = {};\n\n    @PostConstruct\n    private init(): void {\n        if (this.gridOptions.components != null) {\n            iterateObject(this.gridOptions.components, (key, component) => this.registerJsComponent(key, component));\n        }\n    }\n\n    public registerDefaultComponent(name: string, component: any) {\n\n        if (this.agGridDefaults[name]) {\n            console.error(`Trying to overwrite a default component. You should call registerComponent`);\n            return;\n        }\n\n        this.agGridDefaults[name] = component;\n    }\n\n    private registerJsComponent(name: string, component: any) {\n        this.jsComps[name] = component;\n    }\n\n    public retrieve(propertyName: string, name: string): { componentFromFramework: boolean, component: any } | null {\n\n        const createResult = (component: any, componentFromFramework: boolean) => ({componentFromFramework, component});\n\n        // FrameworkOverrides.frameworkComponent() is used in two locations:\n        // 1) for Vue, user provided components get registered via a framework specific way.\n        // 2) for React, it's how the React UI provides alternative default components (eg GroupCellRenderer and DetailCellRenderer)\n        const registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(name, this.gridOptions.components);\n        if (registeredViaFrameworkComp!=null) {\n            return createResult(registeredViaFrameworkComp, true);\n        }\n\n        const jsComponent = this.jsComps[name];\n        if (jsComponent) {\n            const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);\n            return createResult(jsComponent, isFwkComp);\n        }\n\n        const defaultComponent = this.agGridDefaults[name];\n        if (defaultComponent) {\n            return createResult(defaultComponent, false);\n        }\n\n        const moduleForComponent = this.enterpriseAgDefaultCompsModule[name];\n        if (moduleForComponent) {\n            ModuleRegistry.__assertRegistered(moduleForComponent, `AG Grid '${propertyName}' component: ${name}`, this.context.getGridId());\n        } else {\n            doOnce(() => { this.warnAboutMissingComponent(propertyName, name) }, \"MissingComp\" + name);\n        }\n\n        return null;\n    }\n\n    private warnAboutMissingComponent(propertyName: string, componentName: string) {\n        const validComponents = [\n            // Don't include the old names / internals in potential suggestions\n            ...Object.keys(this.agGridDefaults).filter(k => !['agCellEditor', 'agGroupRowRenderer', 'agSortIndicator'].includes(k)),\n            ...Object.keys(this.jsComps)];\n        const suggestions = fuzzySuggestions(componentName, validComponents, true, 0.8).values;\n\n        console.warn(`AG Grid: Could not find '${componentName}' component. It was configured as \"${propertyName}: '${componentName}'\" but it wasn't found in the list of registered components.`);\n        if (suggestions.length > 0) {\n            console.warn(`         Did you mean: [${suggestions.slice(0, 3)}]?`);\n        }\n        console.warn(`If using a custom component check it has been registered as described in: ${this.getFrameworkOverrides().getDocLink('components/')}`);\n    }\n}\n", "export interface ComponentType {\n    propertyName: string;\n    cellRenderer: boolean;\n}\n\nexport const DateComponent: ComponentType = {\n    propertyName: 'dateComponent',\n    cellRenderer: false\n};\n\nexport const HeaderComponent: ComponentType = {\n    propertyName: 'headerComponent',\n    cellRenderer: false\n};\n\nexport const HeaderGroupComponent: ComponentType = {\n    propertyName: 'headerGroupComponent',\n    cellRenderer: false\n};\n\nexport const CellRendererComponent: ComponentType = {\n    propertyName: 'cellRenderer',\n    cellRenderer: true\n};\n\nexport const CellEditorComponent: ComponentType = {\n    propertyName: 'cellEditor',\n    cellRenderer: false\n};\n\nexport const InnerRendererComponent: ComponentType = {\n    propertyName: 'innerRenderer',\n    cellRenderer: true\n};\n\nexport const LoadingOverlayComponent: ComponentType = {\n    propertyName: 'loadingOverlayComponent',\n    cellRenderer: false\n};\n\nexport const NoRowsOverlayComponent: ComponentType = {\n    propertyName: 'noRowsOverlayComponent',\n    cellRenderer: false\n};\n\nexport const TooltipComponent: ComponentType = {\n    propertyName: 'tooltipComponent',\n    cellRenderer: false\n};\n\nexport const FilterComponent: ComponentType = {\n    propertyName: 'filter',\n    cellRenderer: false\n};\n\nexport const FloatingFilterComponent: ComponentType = {\n    propertyName: 'floatingFilterComponent',\n    cellRenderer: false\n};\n\nexport const ToolPanelComponent: ComponentType = {\n    propertyName: 'toolPanel',\n    cellRenderer: false\n};\n\nexport const StatusPanelComponent: ComponentType = {\n    propertyName: 'statusPanel',\n    cellRenderer: false\n};\n\nexport const FullWidth: ComponentType = {\n    propertyName: 'fullWidthCellRenderer',\n    cellRenderer: true\n};\n\nexport const FullWidthLoading: ComponentType = {\n    propertyName: 'loadingCellRenderer',\n    cellRenderer: true\n};\n\nexport const FullWidthGroup: ComponentType = {\n    propertyName: 'groupRowRenderer',\n    cellRenderer: true\n};\n\nexport const FullWidthDetail: ComponentType = {\n    propertyName: 'detailCellRenderer',\n    cellRenderer: true\n};\n\nexport const MenuItemComponent: ComponentType = {\n    propertyName: 'menuItem',\n    cellRenderer: false\n};\n", "export class FloatingFilterMapper {\n    private static filterToFloatingFilterMapping: { [p: string]: string; } = {\n        set: 'agSetColumnFloatingFilter',\n        agSetColumnFilter: 'agSetColumnFloatingFilter',\n\n        multi: 'agMultiColumnFloatingFilter',\n        agMultiColumnFilter: 'agMultiColumnFloatingFilter',\n\n        group: 'agGroupColumnFloatingFilter',\n        agGroupColumnFilter: 'agGroupColumnFloatingFilter',\n\n        number: 'agNumberColumnFloatingFilter',\n        agNumberColumnFilter: 'agNumberColumnFloatingFilter',\n\n        date: 'agDateColumnFloatingFilter',\n        agDateColumnFilter: 'agDateColumnFloatingFilter',\n\n        text: 'agTextColumnFloatingFilter',\n        agTextColumnFilter: 'agTextColumnFloatingFilter'\n    };\n\n    public static getFloatingFilterType(filterType: string): string {\n        return this.filterToFloatingFilterMapping[filterType];\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, Optional } from \"../../context/context\";\nimport { CellEditorSelectorFunc, CellEditorSelectorResult, CellRendererSelectorFunc, ColDef, ColGroupDef } from \"../../entities/colDef\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { ToolPanelDef } from \"../../interfaces/iSideBar\";\nimport { IFloatingFilterParams } from \"../../filter/floating/floatingFilter\";\nimport { IHeaderParams } from \"../../headerRendering/cells/column/headerComp\";\nimport { IHeaderGroupParams } from \"../../headerRendering/cells/columnGroup/headerGroupComp\";\nimport { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { IFilterDef, IFilterParams } from \"../../interfaces/iFilter\";\nimport { SetFilterParams } from \"../../interfaces/iSetFilter\";\nimport { IStatusPanelParams, StatusPanelDef } from \"../../interfaces/iStatusPanel\";\nimport { IToolPanelParams } from \"../../interfaces/iToolPanel\";\nimport { GroupCellRendererParams } from \"../../rendering/cellRenderers/groupCellRendererCtrl\";\nimport { ICellRendererParams, ISetFilterCellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { IDateParams } from \"../../rendering/dateComponent\";\nimport { ILoadingOverlayParams } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayParams } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { AgPromise } from \"../../utils\";\nimport { mergeDeep } from '../../utils/object';\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport {\n    CellEditorComponent,\n    CellRendererComponent,\n    ComponentType,\n    DateComponent,\n    FilterComponent,\n    FloatingFilterComponent,\n    FullWidth,\n    FullWidthDetail,\n    FullWidthGroup,\n    FullWidthLoading,\n    HeaderComponent,\n    HeaderGroupComponent,\n    InnerRendererComponent,\n    LoadingOverlayComponent,\n    MenuItemComponent,\n    NoRowsOverlayComponent,\n    StatusPanelComponent,\n    ToolPanelComponent,\n    TooltipComponent\n} from \"./componentTypes\";\nimport { FrameworkComponentWrapper } from \"./frameworkComponentWrapper\";\nimport { UserComponentRegistry } from \"./userComponentRegistry\";\nimport { FloatingFilterMapper } from '../../filter/floating/floatingFilterMapper';\nimport { AgGridCommon, WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { RichSelectParams } from \"../../widgets/agRichSelect\";\nimport { IMenuItemParams, MenuItemDef } from \"../../interfaces/menuItem\";\n\nexport type DefinitionObject =\n    GridOptions\n    | ColDef\n    | ColGroupDef\n    | IFilterDef\n    | SetFilterParams\n    | RichSelectParams\n    | ToolPanelDef\n    | StatusPanelDef\n    | MenuItemDef;\n\nexport interface UserCompDetails {\n    componentClass: any;\n    componentFromFramework: boolean;\n    params: any;\n    type: ComponentType;\n    popupFromSelector?: boolean,\n    popupPositionFromSelector?: 'over' | 'under',\n    newAgStackInstance: () => AgPromise<any>;\n}\n\n@Bean('userComponentFactory')\nexport class UserComponentFactory extends BeanStub {\n\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('agComponentUtils') private readonly agComponentUtils: AgComponentUtils;\n    @Autowired('componentMetadataProvider') private readonly componentMetadataProvider: ComponentMetadataProvider;\n    @Autowired('userComponentRegistry') private readonly userComponentRegistry: UserComponentRegistry;\n    @Optional('frameworkComponentWrapper') private readonly frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    public getHeaderCompDetails(colDef: ColDef, params: WithoutGridCommon<IHeaderParams>): UserCompDetails | undefined {\n        return this.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\n    }\n\n    public getHeaderGroupCompDetails(params: WithoutGridCommon<IHeaderGroupParams>): UserCompDetails | undefined {\n        const colGroupDef = params.columnGroup.getColGroupDef()!;\n        return this.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public getFullWidthCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true)!;\n    }\n\n    public getFullWidthLoadingCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthLoading, 'agLoadingCellRenderer', params, true)!;\n    }\n\n    public getFullWidthGroupCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthGroup, 'agGroupRowRenderer', params, true)!;\n    }\n\n    public getFullWidthDetailCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthDetail, 'agDetailCellRenderer', params, true)!;\n    }\n\n    // CELL RENDERER\n    public getInnerRendererDetails(def: GroupCellRendererParams, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getFullWidthGroupRowInnerCellRenderer(def: any, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n\n    public getCellRendererDetails(def: ColDef | RichSelectParams, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    // CELL EDITOR\n    public getCellEditorDetails(def: ColDef, params: WithoutGridCommon<ICellEditorParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\n    }\n\n    // FILTER\n    public getFilterDetails(def: IFilterDef, params: WithoutGridCommon<IFilterParams>, defaultFilter: string): UserCompDetails | undefined {\n        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);\n    }\n\n    public getDateCompDetails(params: WithoutGridCommon<IDateParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, DateComponent, 'agDateInput', params, true)!;\n    }\n\n    public getLoadingOverlayCompDetails(params: WithoutGridCommon<ILoadingOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, 'agLoadingOverlay', params, true)!;\n    }\n\n    public getNoRowsOverlayCompDetails(params: WithoutGridCommon<INoRowsOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, 'agNoRowsOverlay', params, true)!;\n    }\n\n    public getTooltipCompDetails(params: WithoutGridCommon<ITooltipParams>): UserCompDetails {\n        return this.getCompDetails(params.colDef!, TooltipComponent, 'agTooltipComponent', params, true)!;\n    }\n\n    public getSetFilterCellRendererDetails<TData, V>(def: SetFilterParams<TData, V>, params: WithoutGridCommon<ISetFilterCellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    public getFloatingFilterCompDetails(def: IFilterDef, params: WithoutGridCommon<IFloatingFilterParams<any>>, defaultFloatingFilter: string | null): UserCompDetails | undefined {\n        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);\n    }\n\n    public getToolPanelCompDetails(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): UserCompDetails {\n        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true)!;\n    }\n\n    public getStatusPanelCompDetails(def: StatusPanelDef, params: WithoutGridCommon<IStatusPanelParams>): UserCompDetails {\n        return this.getCompDetails(def, StatusPanelComponent, null, params, true)!;\n    }\n\n    public getMenuItemCompDetails(def: MenuItemDef, params: WithoutGridCommon<IMenuItemParams>): UserCompDetails {\n        return this.getCompDetails(def, MenuItemComponent, 'agMenuItem', params, true)!;\n    }\n\n    private getCompDetails(defObject: DefinitionObject, type: ComponentType, defaultName: string | null | undefined, params: any, mandatory = false): UserCompDetails | undefined {\n\n        const { propertyName, cellRenderer } = type;\n\n        let { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector } = this.getCompKeys(defObject, type, params);\n\n        const lookupFromRegistry = (key: string) => {\n            const item = this.userComponentRegistry.retrieve(propertyName, key);\n            if (item) {\n                jsComp = !item.componentFromFramework ? item.component : undefined;\n                fwComp = item.componentFromFramework ? item.component : undefined;\n            }\n        };\n\n        // if compOption is a string, means we need to look the item up\n        if (compName != null) {\n            lookupFromRegistry(compName);\n        }\n\n        // if lookup brought nothing back, and we have a default, lookup the default\n        if (jsComp == null && fwComp == null && defaultName != null) {\n            lookupFromRegistry(defaultName);\n        }\n\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\n        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {\n            jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);\n        }\n\n        if (!jsComp && !fwComp) {\n            if (mandatory) {\n                console.error(`AG Grid: Could not find component ${compName}, did you forget to configure this component?`);\n            }\n            return;\n        }\n\n        const paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);\n\n        const componentFromFramework = jsComp == null;\n        const componentClass = jsComp ? jsComp : fwComp;\n\n        return {\n            componentFromFramework,\n            componentClass,\n            params: paramsMerged,\n            type: type,\n            popupFromSelector,\n            popupPositionFromSelector,\n            newAgStackInstance: () => this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type)\n        };\n    }\n\n    private getCompKeys(defObject: DefinitionObject, type: ComponentType, params?: any): {\n        compName?: string,\n        jsComp: any,\n        fwComp: any,\n        paramsFromSelector: any,\n        popupFromSelector?: boolean,\n        popupPositionFromSelector?: 'over' | 'under'\n    } {\n\n        const { propertyName } = type;\n\n        let compName: string | undefined;\n        let jsComp: any;\n        let fwComp: any;\n\n        let paramsFromSelector: any;\n        let popupFromSelector: boolean | undefined;\n        let popupPositionFromSelector: 'over' | 'under' | undefined;\n\n        // there are two types of js comps, class based and func based. we can only check for\n        // class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based\n        // const isJsClassComp = (comp: any) => this.agComponentUtils.doesImplementIComponent(comp);\n        // const fwActive = this.frameworkComponentWrapper != null;\n\n        // pull from defObject if available\n        if (defObject) {\n            const defObjectAny = defObject as any;\n\n            // if selector, use this\n            const selectorFunc: CellEditorSelectorFunc | CellRendererSelectorFunc = defObjectAny[propertyName + 'Selector'];\n            const selectorRes = selectorFunc ? selectorFunc(params) : null;\n\n            const assignComp = (providedJsComp: any) => {\n                if (typeof providedJsComp === 'string') {\n                    compName = providedJsComp as string;\n                } else if (providedJsComp != null && providedJsComp !== true) {\n                    const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);\n                    if (isFwkComp) {\n                        fwComp = providedJsComp;\n                    } else {\n                        jsComp = providedJsComp;\n                    }\n                }\n            };\n\n            if (selectorRes) {\n                assignComp(selectorRes.component);\n                paramsFromSelector = selectorRes.params;\n                popupFromSelector = (selectorRes as CellEditorSelectorResult).popup;\n                popupPositionFromSelector = (selectorRes as CellEditorSelectorResult).popupPosition;\n            } else {\n                // if no selector, or result of selector is empty, take from defObject\n                assignComp(defObjectAny[propertyName]);\n            }\n        }\n\n        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };\n    }\n\n    private newAgStackInstance(\n        ComponentClass: any,\n        componentFromFramework: boolean,\n        params: any,\n        type: ComponentType\n    ): AgPromise<any> {\n        const propertyName = type.propertyName;\n        const jsComponent = !componentFromFramework;\n        // using javascript component\n        let instance: any;\n\n        if (jsComponent) {\n            instance = new ComponentClass();\n        } else {\n            // Using framework component\n            const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n            instance = this.frameworkComponentWrapper.wrap(\n                ComponentClass,\n                thisComponentConfig.mandatoryMethodList,\n                thisComponentConfig.optionalMethodList,\n                type\n            );\n        }\n\n        const deferredInit = this.initComponent(instance, params);\n\n        if (deferredInit == null) {\n            return AgPromise.resolve(instance);\n        }\n        return deferredInit.then(() => instance);\n    }\n\n    // used by Floating Filter\n    public mergeParamsWithApplicationProvidedParams(\n        defObject: DefinitionObject,\n        type: ComponentType,\n        paramsFromGrid: any,\n        paramsFromSelector: any = null\n    ): any {\n        const params: AgGridCommon<any, any> = this.gridOptionsService.getGridCommonParams();\n\n        mergeDeep(params, paramsFromGrid);\n\n        // pull user params from either the old prop name and new prop name\n        // eg either cellRendererParams and cellCompParams\n        const defObjectAny = defObject as any;\n        const userParams = defObjectAny && defObjectAny[type.propertyName + 'Params'];\n\n        if (typeof userParams === 'function') {\n            const userParamsFromFunc = userParams(paramsFromGrid);\n            mergeDeep(params, userParamsFromFunc);\n        } else if (typeof userParams === 'object') {\n            mergeDeep(params, userParams);\n        }\n\n        mergeDeep(params, paramsFromSelector);\n\n        return params;\n    }\n\n    private initComponent(component: any, params: any): AgPromise<void> | void {\n        this.context.createBean(component);\n        if (component.init == null) { return; }\n        return component.init(params);\n    }\n\n    public getDefaultFloatingFilterType(def: IFilterDef, getFromDefault: () => string): string | null {\n        if (def == null) { return null; }\n\n        let defaultFloatingFilterType: string | null = null;\n\n        let { compName, jsComp, fwComp }\n            = this.getCompKeys(def, FilterComponent);\n\n        if (compName) {\n            // will be undefined if not in the map\n            defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);\n        } else {\n            const usingDefaultFilter = (jsComp == null && fwComp == null) && (def.filter === true);\n            if (usingDefaultFilter) {\n                defaultFloatingFilterType = getFromDefault();\n            }\n        }\n\n        return defaultFloatingFilterType;\n    }\n}\n", "import { ColDef, ColGroupDef } from \"../entities/colDef\";\n\ntype ColKey = keyof (ColDef) | (keyof ColGroupDef);\n\nexport class ColDefUtil {\n\n    private static ColDefPropertyMap: Record<ColKey, undefined> = {\n        headerName: undefined,\n        columnGroupShow: undefined,\n        headerClass: undefined,\n        toolPanelClass: undefined,\n        headerValueGetter: undefined,\n        pivotKeys: undefined,\n        groupId: undefined,\n        colId: undefined,\n        sort: undefined,\n        initialSort: undefined,\n        field: undefined,\n        type: undefined,\n        cellDataType: undefined,\n        tooltipComponent: undefined,\n        tooltipField: undefined,\n        headerTooltip: undefined,\n        cellClass: undefined,\n        showRowGroup: undefined,\n        filter: undefined,\n        initialAggFunc: undefined,\n        defaultAggFunc: undefined,\n        aggFunc: undefined,\n        pinned: undefined,\n        initialPinned: undefined,\n        chartDataType: undefined,\n        cellAriaRole: undefined,\n        cellEditorPopupPosition: undefined,\n        headerGroupComponent: undefined,\n        headerGroupComponentParams: undefined,\n        cellStyle: undefined,\n        cellRenderer: undefined,\n        cellRendererParams: undefined,\n        cellEditor: undefined,\n        cellEditorParams: undefined,\n        filterParams: undefined,\n        pivotValueColumn: undefined,\n        headerComponent: undefined,\n        headerComponentParams: undefined,\n        floatingFilterComponent: undefined,\n        floatingFilterComponentParams: undefined,\n        tooltipComponentParams: undefined,\n        refData: undefined,\n        columnsMenuParams: undefined,\n        columnChooserParams: undefined,\n        children: undefined,\n        sortingOrder: undefined,\n        allowedAggFuncs: undefined,\n        menuTabs: undefined,\n        pivotTotalColumnIds: undefined,\n        cellClassRules: undefined,\n        icons: undefined,\n        sortIndex: undefined,\n        initialSortIndex: undefined,\n        flex: undefined,\n        initialFlex: undefined,\n        width: undefined,\n        initialWidth: undefined,\n        minWidth: undefined,\n        maxWidth: undefined,\n        rowGroupIndex: undefined,\n        initialRowGroupIndex: undefined,\n        pivotIndex: undefined,\n        initialPivotIndex: undefined,\n        suppressCellFlash: undefined,\n        suppressColumnsToolPanel: undefined,\n        suppressFiltersToolPanel: undefined,\n        openByDefault: undefined,\n        marryChildren: undefined,\n        suppressStickyLabel: undefined,\n        hide: undefined,\n        initialHide: undefined,\n        rowGroup: undefined,\n        initialRowGroup: undefined,\n        pivot: undefined,\n        initialPivot: undefined,\n        checkboxSelection: undefined,\n        showDisabledCheckboxes: undefined,\n        headerCheckboxSelection: undefined,\n        headerCheckboxSelectionFilteredOnly: undefined,\n        headerCheckboxSelectionCurrentPageOnly: undefined,\n        suppressMenu: undefined,\n        suppressHeaderMenuButton: undefined,\n        suppressMovable: undefined,\n        lockPosition: undefined,\n        lockVisible: undefined,\n        lockPinned: undefined,\n        unSortIcon: undefined,\n        suppressSizeToFit: undefined,\n        suppressAutoSize: undefined,\n        enableRowGroup: undefined,\n        enablePivot: undefined,\n        enableValue: undefined,\n        editable: undefined,\n        suppressPaste: undefined,\n        suppressNavigable: undefined,\n        enableCellChangeFlash: undefined,\n        rowDrag: undefined,\n        dndSource: undefined,\n        autoHeight: undefined,\n        wrapText: undefined,\n        sortable: undefined,\n        resizable: undefined,\n        singleClickEdit: undefined,\n        floatingFilter: undefined,\n        cellEditorPopup: undefined,\n        suppressFillHandle: undefined,\n        wrapHeaderText: undefined,\n        autoHeaderHeight: undefined,\n        dndSourceOnRowDrag: undefined,\n        valueGetter: undefined,\n        valueSetter: undefined,\n        filterValueGetter: undefined,\n        keyCreator: undefined,\n        valueFormatter: undefined,\n        valueParser: undefined,\n        comparator: undefined,\n        equals: undefined,\n        pivotComparator: undefined,\n        suppressKeyboardEvent: undefined,\n        suppressHeaderKeyboardEvent: undefined,\n        colSpan: undefined,\n        rowSpan: undefined,\n        getQuickFilterText: undefined,\n        onCellValueChanged: undefined,\n        onCellClicked: undefined,\n        onCellDoubleClicked: undefined,\n        onCellContextMenu: undefined,\n        rowDragText: undefined,\n        tooltipValueGetter: undefined,\n        cellRendererSelector: undefined,\n        cellEditorSelector: undefined,\n        suppressSpanHeaderHeight: undefined,\n        useValueFormatterForExport: undefined,\n        useValueParserForImport: undefined,\n        mainMenuItems: undefined,\n        contextMenuItems: undefined,\n        suppressFloatingFilterButton: undefined,\n        suppressHeaderFilterButton: undefined,\n        suppressHeaderContextMenu: undefined,\n    };\n\n    public static ALL_PROPERTIES: ColKey[] = Object.keys(ColDefUtil.ColDefPropertyMap) as ColKey[];\n}\n", "import { Column } from \"../entities/column\";\nimport { ExportFileNameGetter, ExportParams } from \"./exportParams\";\nimport { AgGridCommon } from \"./iCommon\";\nimport { XmlElement } from \"./iXmlFactory\";\n\n// Excel Styles\nexport interface ExcelStyle {\n    /** The id of the Excel Style, this should match a CSS cell class. */\n    id: string;\n    /** Use this property to customise cell alignment properties. */\n    alignment?: ExcelAlignment;\n    /** Use this property to customise cell borders. */\n    borders?: ExcelBorders;\n    /** Use this property to specify the type of data being exported. */\n    dataType?: ExcelDataType;\n    /** Use this property to customise the font used in the cell. */\n    font?: ExcelFont;\n    /** Use this property to customise the cell background. */\n    interior?: ExcelInterior;\n    /** Use this property to customise the cell value as a formatted number. */\n    numberFormat?: ExcelNumberFormat;\n    /** Use this property to setup cell protection. */\n    protection?: ExcelProtection;\n    /**\n     * @deprecated Legacy property\n     */\n    name?: string;\n}\n\nexport interface ExcelAlignment {\n    /**\n     * Use this property to change the cell horizontal alignment.\n     * @default 'Automatic'\n     */\n    horizontal?: 'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed';\n    /**\n     * Use this property to change the level of indentation in the cell.\n     * @default 0\n     */\n    indent?: number;\n    /**\n     * Use this property to change the cell reading order.\n     * @default 'LeftToRight'\n     */\n    readingOrder?: 'RightToLeft' | 'LeftToRight' | 'Context';\n    /**\n     * The number of degrees between 0 and 359 to rotate the text.\n     * @default 0\n     */\n    rotate?: number;\n    /**\n     * If set to `true`, the font size of the cell will automatically change to force the text to fit within the cell.\n     * @default false\n     */\n    shrinkToFit?: boolean;\n    /**\n     * Use this property to change the cell vertical alignment.\n     * @default 'Automatic'\n     */\n    vertical?: 'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed';\n    /**\n     * If set to `true`, multiline text will be displayed as multiline by Excel.\n     * @default false\n     */\n    wrapText?: boolean;\n    /**\n     * @deprecated Legacy property\n     */\n    verticalText?: boolean;\n}\n\nexport interface ExcelBorders {\n    /** Use to set the cell's bottom border. */\n    borderBottom?: ExcelBorder;\n    /** Use to set the cell's left border. */\n    borderLeft?: ExcelBorder;\n    /** Use to set the cell's right border. */\n    borderRight?: ExcelBorder;\n    /** Use to set the cell's top border. */\n    borderTop?: ExcelBorder;\n}\n\nexport interface ExcelBorder {\n    /**\n     * The color or the border.\n     * @default 'black'\n     */\n    color?: string;\n    /**\n     * The style of the border.\n     * @default 'None'\n     */\n    lineStyle?: 'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double';\n    /**\n     * The thickness of the border from 0 (thin) to 3 (thick).\n     * @default 0\n     */\n    weight?: 0 | 1 | 2 | 3;\n}\n\nexport interface ExcelFont {\n    /**\n     * Set to `true` to set the cell text to bold.\n     * @default false\n     */\n    bold?: boolean;\n    /**\n     * The color of the cell font.\n     * @default '#000000'\n     */\n    color?: string;\n    /**\n     * The family of the font to used in the cell.\n     * Options: `Automatic`,`Roman`,`Swiss`,`Modern`,`Script`,`Decorative`,\n     * @default 'Automatic'\n     */\n    family?: string;\n    /**\n     * The name of the font to be used in the cell.\n     * @default 'Calibri'\n     */\n    fontName?: string;\n    /**\n     * Set to `true` to display the cell font as italic.\n     * @default false\n     */\n    italic?: boolean;\n    /**\n     * Set to `true` to add a text outline.\n     * @default false\n     */\n    outline?: boolean;\n    /**\n     * Set to `true` to add text shadow.\n     * @default false\n     */\n    shadow?: boolean;\n    /**\n     * Set this property to used a different font size other than the default.\n     */\n    size?: number;\n    /**\n     * Set to `true` to add a strikeThrough line.\n     * @default false\n     */\n    strikeThrough?: boolean;\n    /**\n     * Use this property to underline the cell text.     \n     */\n    underline?: 'Single' | 'Double';\n    /** Use this property to change the default font alignment. Note: This is different than setting cell vertical alignment. */\n    verticalAlign?: 'Superscript' | 'Subscript';\n    /**\n     * @deprecated Legacy property\n     */\n    charSet?: number;\n}\n\nexport interface ExcelInterior {\n    /** Use this property to set background color patterns. */\n    pattern: 'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross';\n    /** The colour to be used as a secondary colour combined with patterns. */\n    color?: string;\n    /** The pattern color. */\n    patternColor?: string;\n}\n\nexport interface ExcelNumberFormat {\n    /** Use this property to provide a pattern to format a number. (eg. 10000 could become $10,000.00). */\n    format: string;\n}\n\nexport interface ExcelProtection {\n    /**\n     * Set to `false` to disable cell protection (locking)\n     * @default true\n     */\n    protected: boolean;\n    /**\n     * Set to `true` to hide formulas within protected cells.\n     * @default false\n     */\n    hideFormula: boolean;\n}\n\n// Excel Structure\nexport interface ExcelWorksheet {\n    name: string;\n    table: ExcelTable;\n}\n\nexport interface ExcelTable {\n    columns: ExcelColumn[];\n    rows: ExcelRow[];\n}\n\nexport interface ExcelColumn {\n    min?: number;\n    max?: number;\n    outlineLevel?: number;\n    width?: number;\n    s?: number;\n    hidden?: boolean;\n    bestFit?: boolean;\n    displayName?: string;\n    filterAllowed?: boolean;\n}\n\nexport interface ExcelRow {\n    /** Collapsed state. */\n    collapsed?: boolean;\n    /** Hidden state. */\n    hidden?: boolean;\n    /** The height of the row. */\n    height?: number;\n    /** The indentation level if the current row is part of a row group. */\n    outlineLevel?: number;\n    /** An array of ExcelCells. */\n    cells: ExcelCell[];\n}\n\nexport interface ExcelCell {\n    /** The data that will be added to the cell. */\n    data?: ExcelData;\n\n    /** Cell reference. */\n    ref?: string;\n\n    /** Collapsible ranges. */\n    collapsibleRanges?: number[][];\n\n    /** The ExcelStyle id to be associated with the cell. */\n    styleId?: string | string[];\n    \n    /**\n     * The number of cells to span across (1 means span 2 columns).\n     * @default 0\n     */\n    mergeAcross?: number;\n}\n\nexport interface ExcelImagePosition {\n    /** The row containing this image. This property is set automatically, don't change it unless you know what you are doing. */\n    row?: number;\n    /**\n     * The amount of rows this image will cover.\n     * @default 1\n     *  */\n    rowSpan?: number;\n    /** The column containing this image. This property is set automatically, don't change it unless you know what you are doing. */\n    column?: number;\n    /**\n     * The amount of columns this image will cover.\n     * @default 1\n     */\n    colSpan?: number;\n    /**\n     * The amount in pixels the image should be offset horizontally.\n     * @default 0\n     */\n    offsetX?: number;\n    /**\n     * The amount in pixels the image should be offset vertically.\n     * @default 0\n     */\n    offsetY?: number;\n}\n\nexport interface ExcelImage {\n    /**\n     * The image `id`. This field is required so the same image doesn't get imported multiple times.\n     */\n    id: string;\n    /**\n     * A base64 string that represents the image being imported.\n     */\n    base64: string;\n    /** The type of image being exported. */\n    imageType: 'jpg' | 'png' | 'gif';\n    /** Alt Text for the image. */\n    altText?: string;\n    /**\n     * If set to `true`, the image will cover the whole cell that is being imported to.\n     * @default false\n     */\n    fitCell?: boolean;\n    /**\n     * Set a value between 0 - 100 that will indicate the percentage of transparency of the image.\n     * @default 0\n     */\n    transparency?: number;\n    /**\n     * Set a value between 0 - 359 that will indicate the number of degrees to rotate the image clockwise.\n     * @default 0\n     */\n    rotation?: number;\n    /** Set this property to select a preset that changes the appearance of the image. */\n    recolor?: 'Grayscale' | 'Sepia' | 'Washout';\n    /** The width of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */\n    width?: number;\n    /** The height of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */\n    height?: number;\n    /** Position of the image. */\n    position?: ExcelImagePosition;\n}\n\n/*\n * OOXML Data Types\n * (str): String\n * (s): Shared String\n * (f): Formula\n * (inlineStr): Inline string\n * Note: Inline strings are placed in a `is` element instead of `v`\n * (n) Number\n * (b) Boolean\n * (d) DateTime\n * (e) Error\n*/\nexport type ExcelDataType = 'String' | 'Formula' | 'Number' | 'Boolean' | 'DateTime' | 'Error';\nexport type ExcelOOXMLDataType = 'str' | 's' | 'f' | 'inlineStr' | 'n' | 'b' | 'd' | 'e' | 'empty';\n\nexport interface ExcelData {\n    /** The type of data being in the cell. */\n    type: ExcelDataType | ExcelOOXMLDataType;\n    /** The value of the cell. */\n    value: string | null;\n}\n\nexport interface ExcelRelationship {\n    Id: string;\n    Type: string;\n    Target: string;\n}\n\nexport interface ExcelContentType {\n    name: 'Default' | 'Override';\n    ContentType: string;\n    Extension?: string;\n    PartName?: string;\n}\n\nexport interface ExcelOOXMLTemplate {\n    getTemplate(config?: any, idx?: number, currentSheet?: number): XmlElement;\n    convertType?(type: string): string;\n}\n\n// Excel Export\nexport enum ExcelFactoryMode { SINGLE_SHEET, MULTI_SHEET }\n\nexport interface ExcelSheetNameGetterParams<TData = any, TContext = any> extends AgGridCommon<TData, TContext> {}\n\nexport type ExcelSheetNameGetter = (params?: ExcelSheetNameGetterParams) => string;\n\nexport interface ColumnWidthCallbackParams {\n    column: Column | null;\n    index: number;\n}\n\nexport interface RowHeightCallbackParams {\n    rowIndex: number;\n}\n\nexport interface ExcelExportParams extends ExportParams<ExcelRow[]> {\n    /**\n     * The author of the exported file.\n     * @default \"AG Grid\"\n     * */\n    author?: string;\n    /**\n     * If set to `true`, this will try to convert any cell that starts with `=` to a formula, instead of setting the cell value as regular string that starts with `=`.\n     * @default false\n     */\n    autoConvertFormulas?: boolean;\n    /**\n     * Defines the default column width. If no value is present, each column will have value currently set in the application with a min value of 75px. This property can also be supplied a callback function that returns a number.\n     */\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    /**\n     * The default value for the font size of the Excel document.\n     * @default 11\n     */\n    fontSize?: number;\n    /**\n     * The height in pixels of header rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    /**\n     * The height in pixels of all rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    /**\n     * The name of the sheet in Excel where the grid will be exported. Either a string or a function that returns a\n     * string can be used. If a function is used, it will be called once before the export starts.\n     * There is a max limit of 31 characters per sheet name.\n     * @default 'ag-grid'\n     */\n    sheetName?: string | ExcelSheetNameGetter;\n    /** The Excel document page margins. Relevant for printing. */\n    margins?: ExcelSheetMargin;\n    /** Allows you to setup the page orientation and size. */\n    pageSetup?: ExcelSheetPageSetup;\n    /**\n     * Used to add an Excel table to the spreadsheet.\n     * Set to `true` to use default export table config, or provide a config object.\n     *\n     * @default false\n     **/\n    exportAsExcelTable?: boolean | ExcelTableConfig;\n    /** The configuration for header and footers. */\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    /**\n     * If `true`, the outline (controls to expand and collapse) for Row Groups will not be added automatically to the Excel Document.\n     * @default false.\n     */\n    suppressRowOutline?: boolean;\n    /**\n     * If `true`, the outline (controls to expand and collapse) for Group Columns will not be added automatically to the Excel Document.\n     * @default false.\n     */\n    suppressColumnOutline?: boolean;\n\n    /**\n     * The expand/collapse state of each row group in the Excel Document.\n     *  - expanded: All row groups will be expanded by default.\n     *  - collapsed: All row groups will be collapsed by default.\n     *  - match: The row groups will match their current state in the Grid.\n     * @default 'expanded'\n     */\n    rowGroupExpandState?: 'expanded' | 'collapsed' | 'match';\n    /**\n     * The mimeType of the Excel file.\n     * @default 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n     */\n    mimeType?: string;\n    /** Use to export an image for the gridCell in question. */\n    addImageToCell?: (rowIndex: number, column: Column, value: string) => { image: ExcelImage, value?: string } | undefined;\n}\n\nexport interface ExcelExportMultipleSheetParams {\n    /**\n     * The author of the exported file.\n     * @default 'AG Grid'\n     */\n    author?: string;\n    /**\n     * Array of strings containing the raw data for Excel workbook sheets.\n     * This property is only used when exporting to multiple sheets using `api.exportMultipleSheetsAsExcel()` and the data for each sheet is obtained by calling `api.getSheetDataForExcel()`.\n     */\n    data: string[];\n    /**\n     * String to use as the file name or a function that returns a string.\n     * @default 'export.xlsx'\n     */\n    fileName?: string | ExportFileNameGetter;\n    /**\n     * The default value for the font size of the Excel document.\n     * @default 11\n     */\n    fontSize?: number;\n    /**\n     * The mimeType of the Excel file.\n     * @default 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n     */\n    mimeType?: string;\n}\n\nexport interface ExcelHeaderFooterConfig {\n    /** The configuration for header and footer on every page. */\n    all?: ExcelHeaderFooter;\n    /** The configuration for header and footer on the first page only. */\n    first?: ExcelHeaderFooter;\n    /** The configuration for header and footer on even numbered pages only. */\n    even?: ExcelHeaderFooter;\n}\nexport interface ExcelHeaderFooter {\n    /** An array of maximum 3 items (`Left`, `Center`, `Right`), containing header configurations. */\n    header?: ExcelHeaderFooterContent[];\n    /** An array of maximum 3 items (`Left`, `Center`, `Right`), containing footer configurations. */\n    footer?: ExcelHeaderFooterContent[];\n}\n\nexport interface ExcelHeaderFooterContent {\n    /** The value of the text to be included in the header. */\n    value: string;\n    /**\n     * Configures where the text should be added: `Left`, `Center` or `Right`.\n     * @default 'Left'\n     */\n    position?: 'Left' | 'Center' | 'Right';\n    /** The font style of the header/footer value. */\n    font?: ExcelFont;\n}\n\nexport interface IExcelCreator {\n    getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined;\n    getSheetDataForExcel(params?: ExcelExportParams): string;\n    getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined;\n\n    exportDataAsExcel(params?: ExcelExportParams): void;\n    exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void;\n\n    /** private methods */\n    setFactoryMode(factoryMode: ExcelFactoryMode): void;\n    getFactoryMode(): ExcelFactoryMode;\n}\n\nexport interface ExcelSheetMargin {\n    /**\n     * The sheet top margin.\n     * @default 0.75\n     */\n    top?: number;\n    /**\n     * The sheet right margin.\n     * @default 0.7\n     */\n    right?: number;\n    /**\n     * The sheet bottom margin.\n     * @default 0.75\n     */\n    bottom?: number;\n    /**\n     * The sheet left margin.\n     * @default 0.7\n     */\n    left?: number;\n    /**\n     * The sheet header margin.\n     * @default 0.3\n     */\n    header?: number;\n    /**\n     * The sheet footer margin.\n     * @default 0.3\n     */\n    footer?: number;\n}\n\nexport interface ExcelSheetPageSetup {\n    /**\n     * Use this property to change the print orientation.\n     * @default 'Portrait'\n     */\n    orientation?: 'Portrait' | 'Landscape';\n    /**\n     * Use this property to set the sheet size.\n     * @default 'Letter'\n     */\n    pageSize?: 'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard';\n}\n\nexport interface ExcelTableConfig {\n    /**\n     * This property is used to set the table name. It should be an alphanumeric string with no special characters.\n     * @default 'AG-GRID-TABLE'\n     */\n    name?: string;\n\n    /**\n     * Set this property to `false` to disable the filter button at the exported Excel table header.\n     * Set it to `true` to show the filter button on all columns.\n     * Set it to `match` to show the filter button only if the column has a filter allowed.\n     *\n     * @default match\n     */\n    showFilterButton?: boolean | 'match';\n\n    /**\n     * Set this property to `false` to hide the row stripes.\n     *\n     * @default true\n     */\n    showRowStripes?: boolean;\n\n    /**\n     * Set this property to `true` to show column stripes.\n     *\n     * @default false\n     */\n    showColumnStripes?: boolean;\n\n    /**\n     * Set this property to `true` to show the first column in bold/highlighted style.\n     *\n     * @default false\n     */\n    highlightFirstColumn?: boolean;\n\n    /**\n     * Set this property to `true` to show the last column in bold/highlighted style.\n     *\n     * @default false\n     */\n    highlightLastColumn?: boolean;\n}\n", "import { Column } from \"../entities/column\";\nimport { AgEvent, SelectionEventSourceType } from \"../events\";\n\nexport type RowNodeEventType =\n    'rowSelected' |\n    'selectableChanged' |\n    'displayedChanged' |\n    'dataChanged' |\n    'cellChanged' |\n    'masterChanged' |\n    'heightChanged' |\n    'topChanged' |\n    'groupChanged' |\n    'allChildrenCountChanged' |\n    'firstChildChanged' |\n    'lastChildChanged' |\n    'childIndexChanged' |\n    'rowIndexChanged' |\n    'expandedChanged' |\n    'hasChildrenChanged' |\n    'uiLevelChanged' |\n    'rowHighlightChanged' |\n    'mouseEnter' |\n    'mouseLeave' |\n    'draggingChanged';\n\nexport interface SetSelectedParams {\n    // true or false, whatever you want to set selection to\n    newValue: boolean;\n    // whether to remove other selections after this selection is done\n    clearSelection?: boolean;\n    // true when action is NOT on this node, ie user clicked a group and this is the child of a group\n    suppressFinishActions?: boolean;\n    // gets used when user shift-selects a range\n    rangeSelect?: boolean;\n    // used in group selection, if true, filtered out children will not be selected\n    groupSelectsFiltered?: boolean;\n    // event source, if from an event\n    source: SelectionEventSourceType;\n}\n\nexport interface RowNodeEvent<TData = any> extends AgEvent {\n    /** Event identifier */\n    type: RowNodeEventType;\n    node: IRowNode<TData>;\n}\n\nexport interface DataChangedEvent<TData = any> extends RowNodeEvent<TData> {\n    oldData: TData | undefined;\n    newData: TData | undefined;\n    update: boolean;\n}\n\nexport interface CellChangedEvent<TData = any> extends RowNodeEvent<TData> {\n    column: Column;\n    newValue: TData | undefined;\n    oldValue: TData | undefined;\n}\n\nexport enum RowHighlightPosition { Above, Below }\n\nexport type RowPinnedType = 'top' | 'bottom' | null | undefined;\n\nexport interface VerticalScrollPosition { top: number, bottom: number; }\n\n\ninterface BaseRowNode<TData = any> {\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\n    id: string | undefined;\n    /**\n     * The data as provided by the application.\n     * Can be `undefined` when using row grouping or during grid initialisation.\n     */\n    data: TData | undefined;\n\n    /**\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */\n    displayed: boolean\n    /** Either `'top'` or `'bottom'` if row pinned, otherwise `undefined` or `null`. */\n    rowPinned: RowPinnedType;\n    /** Is this row selectable. */\n    selectable: boolean;\n    /** The height, in pixels, of this row. */\n    rowHeight: number | null | undefined;\n    /** The row top position in pixels. */\n    rowTop: number | null;\n\n\n    /** `true` if this node is a group node (i.e. it has children) */\n    group: boolean | undefined;\n\n    /** `true` if this is the first child in this group. Changes when data is sorted. */\n    firstChild: boolean;\n    /** `true` if this is the last child in this group. Changes when data is sorted. */\n    lastChild: boolean;\n    /** Index of this row with respect to its parent when grouping. Changes when data is sorted. */\n    childIndex: number;\n\n    /** How many levels this node is from the top when grouping. */\n    level: number;\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`).*/\n    uiLevel: number;\n    /** The parent node to this node, or empty if top level. */\n    parent: IRowNode<TData> | null;\n\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\n    stub: boolean;\n    /** Used by server side row model, `true` if this row node failed a load. */\n    failedLoad: boolean;\n\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n    rowIndex: number | null;\n\n    /** If using quick filter, stores a string representation of the row for searching against. */\n    quickFilterAggregateText: string | null;\n\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail). */\n    master: boolean;\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row). */\n    detail: boolean;\n}\n\ninterface GroupRowNode<TData = any> {\n    /** The field we are grouping on from our row data. */\n    field: string | null;\n    /** The key value for this group. */\n    key: string | null;\n\n    /** If using row grouping, contains the group values for this group. */\n    groupData: { [key: string]: any | null; } | null;\n    /** If using row grouping and aggregation, contains the aggregation data. */\n    aggData: any;\n\n\n    /** The row group column used for this group. */\n    rowGroupColumn: Column | null;\n    /**\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n    */\n    rowGroupIndex: number | null;\n    /** `true` if group is expanded, otherwise `false`. */\n    expanded: boolean;\n\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\n    leafGroup: boolean;\n    /** All lowest level nodes beneath this node, no groups. */\n    allLeafChildren: IRowNode<TData>[];\n    /** Number of children and grand children. */\n    allChildrenCount: number | null;\n    /** Children of this group. If multi levels of grouping, shows only immediate children. */\n    childrenAfterGroup: IRowNode<TData>[] | null;\n    /** Sorted children of this group. */\n    childrenAfterSort: IRowNode<TData>[] | null;\n    /** Filtered children of this group. */\n    childrenAfterFilter: IRowNode<TData>[] | null;\n\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\n    footer: boolean;\n    /** If using footers, reference to the footer node for this group. */\n    sibling: IRowNode<TData>;\n}\n\n\nexport interface IRowNode<TData = any> extends BaseRowNode<TData>, GroupRowNode<TData> {\n\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact. Default: `false`\n     * @param source - Source property that will appear in the `selectionChanged` event. Default: `'api'`\n     */\n    setSelected(newValue: boolean, clearSelection?: boolean, source?: SelectionEventSourceType): void;\n\n    /** Returns:\n     * - `true` if node is selected.\n     * - `false` if the node isn't selected.\n     * - `undefined` if it's partially selected (group where not all children are selected). \n     */\n    isSelected(): boolean | undefined;\n\n    /**\n     * Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`.\n     * - `false` if the node isn't pinned.\n     */\n    isRowPinned(): boolean;\n\n    /** Returns:\n    * - `true` if the node can be expanded, i.e it is a group or master row.\n    * - `false` if the node cannot be expanded.\n    */\n    isExpandable(): boolean;\n    /**\n     * Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.\n     */\n    setExpanded(expanded: boolean, e?: MouseEvent | KeyboardEvent): void;\n\n    /**\n     * Returns:\n     * - `true` if the node is a full width cell.\n     * - `false` if the node is not a full width cell.\n     */\n    isFullWidthCell(): boolean;\n\n    /**\n     * Returns:\n     * - `true` if the node is currently hovered.\n     * - `false` if the node is not hovered.\n     */\n    isHovered(): boolean;\n\n    /** Add an event listener. */\n    addEventListener(eventType: RowNodeEventType, listener: Function): void;\n    /** Remove event listener. */\n    removeEventListener(eventType: RowNodeEventType, listener: Function): void;\n\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`.\n     */\n    resetQuickFilterAggregateText(): void;\n\n    /** Perform a depth-first search of this node and its children. */\n    depthFirstSearch(callback: (rowNode: IRowNode<TData>) => void): void;\n\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows.\n     * @param rowHeight - new height of the row\n     * @param estimated - is this an estimated height. Default: `false`\n     */\n    setRowHeight(rowHeight: number | undefined | null, estimated?: boolean): void\n\n    /**\n     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    setData(data: TData): void;\n\n    /**\n     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    updateData(data: TData): void;\n\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `true` if the value was changed, otherwise `false`.\n     */\n    setDataValue(colKey: string | Column, newValue: any, eventSource?: string): boolean;\n\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    getRoute(): string[] | undefined;\n}", "export class AutoScrollService {\n\n    private tickingInterval: number | null = null;\n\n    private scrollHorizontally: boolean;\n    private scrollVertically: boolean;\n\n    private tickLeft: boolean;\n    private tickRight: boolean;\n    private tickUp: boolean;\n    private tickDown: boolean;\n\n    private scrollContainer: HTMLElement;\n    private scrollByTick: number;\n\n    private getVerticalPosition: () => number;\n    private setVerticalPosition: (position: number) => void;\n\n    private getHorizontalPosition: () => number;\n    private setHorizontalPosition: (position: number) => void;\n\n    private shouldSkipVerticalScroll: () => boolean;\n    private shouldSkipHorizontalScroll: () => boolean;\n\n    private onScrollCallback: (() => void) | null = null;\n\n    private tickCount: number;\n\n    constructor(params: {\n        scrollContainer: HTMLElement,\n        scrollAxis: 'x' | 'y' | 'xy',\n        scrollByTick?: number,\n        getVerticalPosition?: () => number,\n        setVerticalPosition?: (position: number) => void,\n        getHorizontalPosition?: () => number,\n        setHorizontalPosition?: (position: number) => void,\n        shouldSkipVerticalScroll?: () => boolean,\n        shouldSkipHorizontalScroll?: () => boolean,\n        onScrollCallback?: () => void\n    }) {\n        this.scrollContainer = params.scrollContainer;\n        this.scrollHorizontally = params.scrollAxis.indexOf('x') !== -1;\n        this.scrollVertically = params.scrollAxis.indexOf('y') !== -1;\n\n        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;\n\n        if (params.onScrollCallback) {\n            this.onScrollCallback = params.onScrollCallback;\n        }\n\n        if (this.scrollVertically) {\n            this.getVerticalPosition = params.getVerticalPosition!;\n            this.setVerticalPosition = params.setVerticalPosition!;\n        }\n\n        if (this.scrollHorizontally) {\n            this.getHorizontalPosition = params.getHorizontalPosition!;\n            this.setHorizontalPosition = params.setHorizontalPosition!;\n        }\n\n        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || (() => false);\n        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || (() => false);\n    }\n\n    public check(mouseEvent: MouseEvent, forceSkipVerticalScroll: boolean = false): void {\n        const skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();\n\n        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) { return; }\n\n        const rect = this.scrollContainer.getBoundingClientRect();\n        const scrollTick = this.scrollByTick;\n\n        this.tickLeft = mouseEvent.clientX < (rect.left + scrollTick);\n        this.tickRight = mouseEvent.clientX > (rect.right - scrollTick);\n        this.tickUp = mouseEvent.clientY < (rect.top + scrollTick) && !skipVerticalScroll;\n        this.tickDown = mouseEvent.clientY > (rect.bottom - scrollTick) && !skipVerticalScroll;\n\n        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {\n            this.ensureTickingStarted();\n        } else {\n            this.ensureCleared();\n        }\n    }\n\n    private ensureTickingStarted(): void {\n        if (this.tickingInterval === null) {\n            this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);\n            this.tickCount = 0;\n        }\n    }\n\n    private doTick(): void {\n        this.tickCount++;\n\n        let tickAmount: number;\n\n        tickAmount = this.tickCount > 20 ? 200 : (this.tickCount > 10 ? 80 : 40);\n\n        if (this.scrollVertically) {\n            const vScrollPosition = this.getVerticalPosition();\n            if (this.tickUp) {\n                this.setVerticalPosition(vScrollPosition - tickAmount);\n            }\n\n            if (this.tickDown) {\n                this.setVerticalPosition(vScrollPosition + tickAmount);\n            }\n        }\n\n        if (this.scrollHorizontally) {\n            const hScrollPosition = this.getHorizontalPosition();\n            if (this.tickLeft) {\n                this.setHorizontalPosition(hScrollPosition - tickAmount);\n            }\n\n            if (this.tickRight) {\n                this.setHorizontalPosition(hScrollPosition + tickAmount);\n            }\n        }\n\n        if (this.onScrollCallback) {\n            this.onScrollCallback();\n        }\n    }\n\n    public ensureCleared(): void {\n        if (this.tickingInterval) {\n            window.clearInterval(this.tickingInterval);\n            this.tickingInterval = null;\n        }\n    }\n}\n", "import {\n    DragAndDropService,\n    DraggingEvent,\n    DragSourceType,\n    DropTarget\n} from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, Optional, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { FocusService } from \"../focusService\";\nimport { IRangeService } from \"../interfaces/IRangeService\";\nimport { RowDragEndEvent, RowDragEnterEvent, RowDragEvent, RowDragLeaveEvent, RowDragMoveEvent } from \"../events\";\nimport { Events } from \"../eventKeys\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { RowHighlightPosition } from \"../interfaces/iRowNode\";\nimport { ISelectionService } from \"../interfaces/iSelectionService\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { last } from '../utils/array';\nimport { SortController } from \"../sortController\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { missingOrEmpty } from \"../utils/generic\";\nimport { warnOnce } from \"../utils/function\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { AutoScrollService } from \"../autoScrollService\";\nimport { VerticalDirection } from \"../constants/direction\";\n\nexport interface RowDropZoneEvents {\n    /** Callback function that will be executed when the rowDrag enters the target. */\n    onDragEnter?: (params: RowDragEnterEvent) => void;\n    /** Callback function that will be executed when the rowDrag leaves the target */\n    onDragLeave?: (params: RowDragLeaveEvent) => void;\n    /**\n     * Callback function that will be executed when the rowDrag is dragged inside the target.\n     * Note: this gets called multiple times.\n     */\n    onDragging?: (params: RowDragMoveEvent) => void;\n    /** Callback function that will be executed when the rowDrag drops rows within the target. */\n    onDragStop?: (params: RowDragEndEvent) => void;\n}\n\nexport interface RowDropZoneParams extends RowDropZoneEvents {\n    /** A callback method that returns the DropZone HTMLElement. */\n    getContainer: () => HTMLElement;\n}\n\nexport class RowDragFeature extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    // this feature is only created when row model is ClientSide, so we can type it as ClientSide\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Optional('rangeService') private rangeService: IRangeService;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private eContainer: HTMLElement;\n    private isMultiRowDrag: boolean = false;\n    private lastDraggingEvent: DraggingEvent;\n    private autoScrollService: AutoScrollService;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsService.isRowModelType('clientSide')) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.ctrlsService.whenReady(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCon.getBodyViewportElement(),\n                scrollAxis: 'y',\n                getVerticalPosition: () => gridBodyCon.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCon.getScrollFeature().setVerticalScrollPosition(position),\n                onScrollCallback: () => { this.onDragging(this.lastDraggingEvent); }\n            });\n        });\n    }\n\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.RowDrag;\n    }\n\n    public getIconName(): string {\n        const managedDrag = this.gridOptionsService.get('rowDragManaged');\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return DragAndDropService.ICON_NOT_ALLOWED;\n        }\n\n        return DragAndDropService.ICON_MOVE;\n    }\n\n    public shouldPreventRowMove(): boolean {\n        const rowGroupCols = this.columnModel.getRowGroupColumns();\n        if (rowGroupCols.length) {\n            return true;\n        }\n        const isFilterPresent = this.filterManager.isAnyFilterPresent();\n        if (isFilterPresent) {\n            return true;\n        }\n        const isSortActive = this.sortController.isSortActive();\n        if (isSortActive) {\n            return true;\n        }\n        return false;\n    }\n\n    private getRowNodes(draggingEvent: DraggingEvent): RowNode[] {\n        if (!this.isFromThisGrid(draggingEvent)) {\n            return (draggingEvent.dragItem.rowNodes || []) as RowNode[];\n        }\n\n        const isRowDragMultiRow = this.gridOptionsService.get('rowDragMultiRow');\n        const selectedNodes = [...this.selectionService.getSelectedNodes()].sort(\n            (a, b) => {\n                if (a.rowIndex == null || b.rowIndex == null) { return 0; }\n\n                return this.getRowIndexNumber(a) - this.getRowIndexNumber(b);\n            }\n        );\n\n        const currentNode = draggingEvent.dragItem.rowNode! as RowNode;\n\n        if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {\n            this.isMultiRowDrag = true;\n            return selectedNodes;\n        }\n\n        this.isMultiRowDrag = false;\n\n        return [currentNode];\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // builds a lits of all rows being dragged before firing events\n        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);\n\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(true);\n        });\n\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    public onDragging(draggingEvent: DraggingEvent): void {\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    private isFromThisGrid(draggingEvent: DraggingEvent) {\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\n\n        return dragSourceDomDataKey === this.gridOptionsService.getDomDataKey();\n    }\n\n    private isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const gridGui = gridBodyCon.getGui();\n        const { dropZoneTarget } = draggingEvent;\n\n        return !gridGui.contains(dropZoneTarget);\n    }\n\n    private onEnterOrDragging(draggingEvent: DraggingEvent): void {\n        // this event is fired for enter and move\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n\n        this.lastDraggingEvent = draggingEvent;\n\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const managedDrag = this.gridOptionsService.get('rowDragManaged');\n\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n\n        this.autoScrollService.check(draggingEvent.event);\n    }\n\n    private doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void {\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\n        const managedDrag = this.gridOptionsService.get('rowDragManaged');\n        const rowNodes = draggingEvent.dragItem.rowNodes! as RowNode[];\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return;\n        }\n\n        if (this.gridOptionsService.get('suppressMoveWhenRowDragging') || !isFromThisGrid) {\n            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\n            }\n        } else {\n            this.moveRows(rowNodes, pixel);\n        }\n    }\n\n    private getRowIndexNumber(rowNode: RowNode): number {\n        return parseInt(last(rowNode.getRowIndexString().split('-')), 10);\n    }\n\n    private moveRowAndClearHighlight(draggingEvent: DraggingEvent): void {\n        const lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const rowNodes = draggingEvent.dragItem.rowNodes as RowNode[];\n\n        let increment = isBelow ? 1 : 0;\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            rowNodes!.forEach(rowNode => {\n                if (rowNode.rowTop! < pixel) {\n                    increment -= 1;\n                }\n            });\n            this.moveRows(rowNodes!, pixel, increment);\n        } else {\n            const getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n\n            let addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\n\n            if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {\n                addIndex--;\n            }\n\n            this.clientSideRowModel.updateRowData({\n                add: rowNodes!\n                    .map(node => node.data)\n                    .filter(data => !this.clientSideRowModel.getRowNode(\n                        getRowIdFunc ? getRowIdFunc({ data, level: 0 }) : data.id)\n                    ),\n                addIndex\n            });\n        }\n\n        this.clearRowHighlight();\n    }\n\n    private clearRowHighlight(): void {\n        this.clientSideRowModel.highlightRowAtPixel(null);\n    }\n\n    private moveRows(rowNodes: RowNode[], pixel: number, increment: number = 0): void {\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\n\n        if (rowWasMoved) {\n            this.focusService.clearFocusedCell();\n            if (this.rangeService) {\n                this.rangeService.removeAllCellRanges();\n            }\n        }\n    }\n\n    public addRowDropZone(params: RowDropZoneParams & { fromGrid?: boolean }): void {\n        if (!params.getContainer()) {\n            warnOnce('addRowDropZone - A container target needs to be provided');\n            return;\n        }\n\n        if (this.dragAndDropService.findExternalZone(params)) {\n            console.warn('AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.');\n            return;\n        }\n\n        let processedParams: RowDropZoneParams = {\n            getContainer: params.getContainer\n        };\n\n        if (params.fromGrid) {\n            processedParams = params;\n        } else {\n            if (params.onDragEnter) {\n                processedParams.onDragEnter = (e) => {\n                    params.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                };\n            }\n            if (params.onDragLeave) {\n                processedParams.onDragLeave = (e) => {\n                    params.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                };\n            }\n            if (params.onDragging) {\n                processedParams.onDragging = (e) => {\n                    params.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                };\n            }\n            if (params.onDragStop) {\n                processedParams.onDragStop = (e) => {\n                    params.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                };\n            }\n        }\n\n        this.dragAndDropService.addDropTarget({\n            isInterestedIn: (type: DragSourceType) => type === DragSourceType.RowDrag,\n            getIconName: () => DragAndDropService.ICON_MOVE,\n            external: true,\n            ...processedParams as any\n        });\n    }\n\n    public getRowDropZone(events?: RowDropZoneEvents): RowDropZoneParams {\n        const getContainer = this.getContainer.bind(this);\n        const onDragEnter = this.onDragEnter.bind(this);\n        const onDragLeave = this.onDragLeave.bind(this);\n        const onDragging = this.onDragging.bind(this);\n        const onDragStop = this.onDragStop.bind(this);\n\n        if (!events) {\n            return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, /* @private */ fromGrid: true } as RowDropZoneParams;\n        }\n\n        return {\n            getContainer,\n            onDragEnter: events.onDragEnter\n                ? ((e) => {\n                    onDragEnter(e);\n                    events.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                })\n                : onDragEnter,\n            onDragLeave: events.onDragLeave\n                ? ((e) => {\n                    onDragLeave(e);\n                    events.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                })\n                : onDragLeave,\n            onDragging: events.onDragging\n                ? ((e) => {\n                    onDragging(e);\n                    events.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                })\n                : onDragging,\n            onDragStop: events.onDragStop\n                ? ((e) => {\n                    onDragStop(e);\n                    events.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                })\n                : onDragStop,\n            fromGrid: true /* @private */\n        } as RowDropZoneParams;\n    }\n\n    private draggingToRowDragEvent(type: string, draggingEvent: DraggingEvent): RowDragEvent {\n        const yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();\n\n        let overIndex = -1;\n        let overNode: RowNode | undefined;\n\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n\n        let vDirectionString: string | null;\n\n        switch (draggingEvent.vDirection) {\n            case VerticalDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case VerticalDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n\n        const event: RowDragEvent = this.gridOptionsService.addGridCommonParams({\n            type: type,\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode!,\n            nodes: draggingEvent.dragItem.rowNodes!,\n            overIndex: overIndex,\n            overNode: overNode,\n            y: yNormalised,\n            vDirection: vDirectionString!\n        });\n\n        return event;\n    }\n\n    private dispatchGridEvent(type: string, draggingEvent: DraggingEvent): void {\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (this.gridOptionsService.get('rowDragManaged')) {\n            this.clearRowHighlight();\n        }\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            this.isMultiRowDrag = false;\n        }\n    }\n\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (\n            this.gridOptionsService.get('rowDragManaged') &&\n            (this.gridOptionsService.get('suppressMoveWhenRowDragging') || !this.isFromThisGrid(draggingEvent)) &&\n            !this.isDropZoneWithinThisGrid(draggingEvent)\n        ) {\n            this.moveRowAndClearHighlight(draggingEvent);\n        }\n    }\n\n    private stopDragging(draggingEvent: DraggingEvent): void {\n        this.autoScrollService.ensureCleared();\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(false);\n        });\n    }\n}\n", "import { Bean, PreDestroy, Autowired } from \"../context/context\";\nimport { DragStartedEvent, DragStoppedEvent, Events } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists } from \"../utils/generic\";\nimport { removeFromArray } from \"../utils/array\";\nimport { areEventsNear } from \"../utils/mouse\";\nimport { MouseEventService } from \"../gridBodyComp/mouseEventService\";\nimport { isBrowserSafari } from \"../utils/browser\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { isFocusableFormField } from \"../utils/dom\";\n\n/** Adds drag listening onto an element. In AG Grid this is used twice, first is resizing columns,\n * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */\n@Bean('dragService')\nexport class DragService extends BeanStub {\n\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n\n    private currentDragParams: DragListenerParams | null;\n    private dragging: boolean;\n    private startTarget: EventTarget | null;\n    private mouseStartEvent: MouseEvent | null;\n    private touchLastTime: Touch | null;\n    private touchStart: Touch | null;\n\n    private dragEndFunctions: Function[] = [];\n\n    private dragSources: DragSourceAndListener[] = [];\n\n    @PreDestroy\n    private removeAllListeners(): void {\n        this.dragSources.forEach(this.removeListener.bind(this));\n        this.dragSources.length = 0;\n    }\n\n    private removeListener(dragSourceAndListener: DragSourceAndListener): void {\n        const element = dragSourceAndListener.dragSource.eElement;\n        const mouseDownListener = dragSourceAndListener.mouseDownListener;\n        element.removeEventListener('mousedown', mouseDownListener);\n\n        // remove touch listener only if it exists\n        if (dragSourceAndListener.touchEnabled) {\n            const touchStartListener = dragSourceAndListener.touchStartListener;\n            element.removeEventListener('touchstart', touchStartListener!, {passive:true} as any);\n        }\n    }\n\n    public removeDragSource(params: DragListenerParams): void {\n        const dragSourceAndListener = this.dragSources.find(item => item.dragSource === params);\n\n        if (!dragSourceAndListener) { return; }\n\n        this.removeListener(dragSourceAndListener);\n        removeFromArray(this.dragSources, dragSourceAndListener);\n    }\n\n    public isDragging(): boolean {\n        return this.dragging;\n    }\n\n    public addDragSource(params: DragListenerParams): void {\n        const mouseListener = this.onMouseDown.bind(this, params);\n        const { eElement, includeTouch, stopPropagationForTouch } = params;\n\n        eElement.addEventListener('mousedown', mouseListener);\n\n        let touchListener: ((touchEvent: TouchEvent) => void) | null = null;\n\n        const suppressTouch = this.gridOptionsService.get('suppressTouch');\n\n        if (includeTouch && !suppressTouch) {\n            touchListener = (touchEvent: TouchEvent) => {\n                if (isFocusableFormField(touchEvent.target as HTMLElement)) { return; }\n                if (touchEvent.cancelable) {\n                    touchEvent.preventDefault();\n                    if (stopPropagationForTouch) {\n                        touchEvent.stopPropagation();\n                    }\n                }\n                this.onTouchStart(params, touchEvent);\n            };\n            // we set passive=false, as we want to prevent default on this event\n            eElement.addEventListener('touchstart', touchListener, { passive: false });\n        }\n\n        this.dragSources.push({\n            dragSource: params,\n            mouseDownListener: mouseListener,\n            touchStartListener: touchListener,\n            touchEnabled: !!includeTouch\n        });\n    }\n\n    public getStartTarget(): EventTarget | null {\n        return this.startTarget;\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onTouchStart(params: DragListenerParams, touchEvent: TouchEvent): void {\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        const touch = touchEvent.touches[0];\n\n        this.touchLastTime = touch;\n        this.touchStart = touch;\n\n        const touchMoveEvent = (e: TouchEvent) => this.onTouchMove(e, params.eElement);\n        const touchEndEvent = (e: TouchEvent) => this.onTouchUp(e, params.eElement);\n        const documentTouchMove = (e: TouchEvent) => { if (e.cancelable) { e.preventDefault(); } };\n\n        const target = touchEvent.target as Document | ShadowRoot | EventTarget;\n        const events = [\n            // Prevents the page document from moving while we are dragging items around.\n            // preventDefault needs to be called in the touchmove listener and never inside the\n            // touchstart, because using touchstart causes the click event to be cancelled on touch devices.\n            { target: this.gridOptionsService.getRootNode(), type: 'touchmove', listener: documentTouchMove, options: { passive: false } },\n            { target, type: 'touchmove', listener: touchMoveEvent, options: { passive: true } },\n            { target, type: 'touchend', listener: touchEndEvent, options: { passive: true} },\n            { target, type: 'touchcancel', listener: touchEndEvent, options: { passive: true} }\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n\n        // see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onCommonMove(touch, this.touchStart, params.eElement);\n        }\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onMouseDown(params: DragListenerParams, mouseEvent: MouseEvent): void {\n        const e = mouseEvent as any;\n\n        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {\n            return;\n        }\n\n        // if there are two elements with parent / child relationship, and both are draggable,\n        // when we drag the child, we should NOT drag the parent. an example of this is row moving\n        // and range selection - row moving should get preference when use drags the rowDrag component.\n        if (e._alreadyProcessedByDragService) { return; }\n\n        e._alreadyProcessedByDragService = true;\n\n        // only interested in left button clicks\n        if (mouseEvent.button !== 0) { return; }\n\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\n            mouseEvent.preventDefault();\n        }\n\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        this.mouseStartEvent = mouseEvent;\n        this.startTarget = mouseEvent.target;\n\n        const mouseMoveEvent = (event: MouseEvent) => this.onMouseMove(event, params.eElement);\n        const mouseUpEvent = (event: MouseEvent) => this.onMouseUp(event, params.eElement);\n        const contextEvent = (event: MouseEvent) => event.preventDefault();\n\n        const target = this.gridOptionsService.getRootNode();\n        const events = [\n            { target, type: 'mousemove', listener: mouseMoveEvent },\n            { target, type: 'mouseup', listener: mouseUpEvent },\n            { target, type: 'contextmenu', listener: contextEvent }\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n\n        //see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onMouseMove(mouseEvent, params.eElement);\n        }\n    }\n\n    private addTemporaryEvents(\n        events: {\n            target: Document | ShadowRoot | EventTarget,\n            type: string,\n            listener: (e: MouseEvent | TouchEvent, el: HTMLElement) => void,\n            options?: any\n        }[]\n    ): void {\n        events.forEach((currentEvent) => {\n            const { target, type, listener, options } = currentEvent;\n            target.addEventListener(type, listener as any, options);\n        });\n\n        this.dragEndFunctions.push(() => {\n            events.forEach((currentEvent) => {\n                const { target, type, listener, options } = currentEvent;\n                target.removeEventListener(type, listener as any, options);\n            });\n        });\n    }\n\n    // returns true if the event is close to the original event by X pixels either vertically or horizontally.\n    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n    private isEventNearStartEvent(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): boolean {\n        // by default, we wait 4 pixels before starting the drag\n        const { dragStartPixels } = this.currentDragParams!;\n        const requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;\n        return areEventsNear(currentEvent, startEvent, requiredPixelDiff);\n    }\n\n    private getFirstActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            if (touchList[i].identifier === this.touchStart!.identifier) {\n                return touchList[i];\n            }\n        }\n        return null;\n    }\n\n    private onCommonMove(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch, el: Element): void {\n        if (!this.dragging) {\n            // if mouse hasn't travelled from the start position enough, do nothing\n            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) { return; }\n\n            this.dragging = true;\n            const event: WithoutGridCommon<DragStartedEvent> = {\n                type: Events.EVENT_DRAG_STARTED,\n                target: el\n            };\n            this.eventService.dispatchEvent(event);\n\n            this.currentDragParams!.onDragStart(startEvent);\n            // we need ONE drag action at the startEvent, so that we are guaranteed the drop target\n            // at the start gets notified. this is because the drag can start outside of the element\n            // that started it, as the mouse is allowed drag away from the mouse down before it's\n            // considered a drag (the isEventNearStartEvent() above). if we didn't do this, then\n            // it would be possible to click a column by the edge, then drag outside of the drop zone\n            // in less than 4 pixels and the drag officially starts outside of the header but the header\n            // wouldn't be notified of the dragging.\n            this.currentDragParams!.onDragging(startEvent);\n        }\n\n        this.currentDragParams!.onDragging(currentEvent);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent, el: Element): void {\n        const touch = this.getFirstActiveTouch(touchEvent.touches);\n        if (!touch) { return; }\n\n        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');\n        this.onCommonMove(touch, this.touchStart!, el);\n    }\n\n    // only gets called after a mouse down - as this is only added after mouseDown\n    // and is removed when mouseUp happens\n    private onMouseMove(mouseEvent: MouseEvent, el: Element): void {\n        if (isBrowserSafari()) {\n            const eDocument = this.gridOptionsService.getDocument();\n            eDocument.getSelection()?.removeAllRanges();\n        }\n\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\n            mouseEvent.preventDefault();\n        }\n\n        this.onCommonMove(mouseEvent, this.mouseStartEvent!, el);\n    }\n\n    private shouldPreventMouseEvent(mouseEvent: MouseEvent): boolean {\n        const isEnableCellTextSelect = this.gridOptionsService.get('enableCellTextSelection');\n        const isMouseMove = mouseEvent.type === 'mousemove';\n\n        return (\n            // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove\n            // to avoid the grid text being selected while dragging components.\n            ((isEnableCellTextSelect && isMouseMove)) &&\n            mouseEvent.cancelable &&\n            this.mouseEventService.isEventFromThisGrid(mouseEvent) &&\n            !this.isOverFormFieldElement(mouseEvent)\n        );\n    }\n\n    private isOverFormFieldElement(mouseEvent: MouseEvent): boolean {\n        const el = mouseEvent.target as HTMLElement | null;\n        const tagName = el?.tagName.toLocaleLowerCase();\n\n        return !!tagName?.match('^a$|textarea|input|select|button');\n    }\n\n    public onTouchUp(touchEvent: TouchEvent, el: Element): void {\n        let touch = this.getFirstActiveTouch(touchEvent.changedTouches);\n\n        // i haven't worked this out yet, but there is no matching touch\n        // when we get the touch up event. to get around this, we swap in\n        // the last touch. this is a hack to 'get it working' while we\n        // figure out what's going on, why we are not getting a touch in\n        // current event.\n        if (!touch) {\n            touch = this.touchLastTime;\n        }\n\n        // if mouse was left up before we started to move, then this is a tap.\n        // we check this before onUpCommon as onUpCommon resets the dragging\n        // let tap = !this.dragging;\n        // let tapTarget = this.currentDragParams.eElement;\n\n        this.onUpCommon(touch!, el);\n\n        // if tap, tell user\n        // console.log(`${Math.random()} tap = ${tap}`);\n        // if (tap) {\n        //     tapTarget.click();\n        // }\n    }\n\n    public onMouseUp(mouseEvent: MouseEvent, el: Element): void {\n        this.onUpCommon(mouseEvent, el);\n    }\n\n    public onUpCommon(eventOrTouch: MouseEvent | Touch, el: Element): void {\n        if (this.dragging) {\n            this.dragging = false;\n            this.currentDragParams!.onDragStop(eventOrTouch);\n            const event: WithoutGridCommon<DragStoppedEvent> = {\n                type: Events.EVENT_DRAG_STOPPED,\n                target: el\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        this.mouseStartEvent = null;\n        this.startTarget = null;\n        this.touchStart = null;\n        this.touchLastTime = null;\n        this.currentDragParams = null;\n\n        this.dragEndFunctions.forEach(func => func());\n        this.dragEndFunctions.length = 0;\n    }\n}\n\ninterface DragSourceAndListener {\n    dragSource: DragListenerParams;\n    mouseDownListener: (mouseEvent: MouseEvent) => void;\n    touchEnabled: boolean;\n    touchStartListener: ((touchEvent: TouchEvent) => void) | null;\n}\n\nexport interface DragListenerParams {\n    /** After how many pixels of dragging should the drag operation start. Default is 4px. */\n    dragStartPixels?: number;\n    /** Dom element to add the drag handling to */\n    eElement: Element;\n    /** Some places may wish to ignore certain events, eg range selection ignores shift clicks */\n    skipMouseEvent?: (mouseEvent: MouseEvent) => boolean;\n    /** Callback for drag starting */\n    onDragStart: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for drag stopping */\n    onDragStop: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for mouse move while dragging */\n    onDragging: (mouseEvent: MouseEvent | Touch) => void;\n    /** Include touch events for this Drag Listener */\n    includeTouch?: boolean;\n    /** If `true`, it will stop the propagation of Touch Events */\n    stopPropagationForTouch?: boolean;\n}\n", "import { AutoScrollService } from \"../autoScrollService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { AgEvent } from \"../events\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { radioCssClass } from \"../utils/dom\";\nimport { Component } from \"../widgets/component\";\nimport { VirtualList } from \"../widgets/virtualList\";\nimport { DragAndDropService, DraggingEvent, DragSourceType, DropTarget } from \"./dragAndDropService\";\n\nconst LIST_ITEM_HOVERED = 'ag-list-item-hovered';\n\nexport interface VirtualListDragItem<R extends Component> {\n    rowIndex: number;\n    position: 'top' | 'bottom';\n    component: R;\n}\n\nexport interface VirtualListDragParams<C extends Component, R extends Component, V, E extends AgEvent> {\n    eventSource: Window | HTMLElement | IEventEmitter;\n    listItemDragStartEvent: string;\n    listItemDragEndEvent: string;\n    dragSourceType: DragSourceType;\n    getCurrentDragValue: (listItemDragStartEvent: E) => V;\n    isMoveBlocked: (currentDragValue: V | null) => boolean;\n    getNumRows: (comp: C) => number;\n    moveItem: (currentDragValue: V | null, lastHoveredListItem: VirtualListDragItem<R> | null) => void;\n}\n\nexport class VirtualListDragFeature<C extends Component, R extends Component, V, E extends AgEvent> extends BeanStub {\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n\n    private currentDragValue: V | null = null;\n    private lastHoveredListItem: VirtualListDragItem<R> | null = null;\n    private autoScrollService: AutoScrollService;\n    private moveBlocked: boolean;\n\n    constructor(\n        private readonly comp: C,\n        private readonly virtualList: VirtualList,\n        private readonly params: VirtualListDragParams<C, R, V, E>\n    ) { super(); }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.params.eventSource, this.params.listItemDragStartEvent, this.listItemDragStart.bind(this));\n        this.addManagedListener(this.params.eventSource, this.params.listItemDragEndEvent, this.listItemDragEnd.bind(this));\n\n        this.createDropTarget();\n        this.createAutoScrollService();\n    }\n\n    private listItemDragStart(event: E): void {\n        this.currentDragValue = this.params.getCurrentDragValue(event);\n        this.moveBlocked = this.params.isMoveBlocked(this.currentDragValue);\n    }\n\n    private listItemDragEnd(): void {\n        window.setTimeout(() => {\n            this.currentDragValue = null;\n            this.moveBlocked = false;\n        }, 10);\n    }\n\n    private createDropTarget(): void {\n        const dropTarget: DropTarget = {\n            isInterestedIn: (type: DragSourceType) => type === this.params.dragSourceType,\n            getIconName: () => this.moveBlocked ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE,\n            getContainer: () => this.comp.getGui(),\n            onDragging: (e) => this.onDragging(e),\n            onDragStop: () => this.onDragStop(),\n            onDragLeave: () => this.onDragLeave()\n        };\n\n        this.dragAndDropService.addDropTarget(dropTarget);\n    }\n\n    private createAutoScrollService(): void {\n        const virtualListGui = this.virtualList.getGui();\n        this.autoScrollService = new AutoScrollService({\n            scrollContainer: virtualListGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => virtualListGui.scrollTop,\n            setVerticalPosition: (position) => virtualListGui.scrollTop = position\n        });\n    }\n\n    private onDragging(e: DraggingEvent) {\n        if (!this.currentDragValue || this.moveBlocked) { return; }\n\n        const hoveredListItem = this.getListDragItem(e);\n        const comp = this.virtualList.getComponentAt(hoveredListItem.rowIndex);\n\n        if (!comp) { return; }\n\n        const el = comp!.getGui().parentElement as HTMLElement;\n\n        if (\n            this.lastHoveredListItem &&\n            this.lastHoveredListItem.rowIndex === hoveredListItem.rowIndex &&\n            this.lastHoveredListItem.position === hoveredListItem.position\n        ) { return; }\n\n        this.autoScrollService.check(e.event);\n        this.clearHoveredItems();\n        this.lastHoveredListItem = hoveredListItem;\n\n        radioCssClass(el, LIST_ITEM_HOVERED);\n        radioCssClass(el, `ag-item-highlight-${hoveredListItem.position}`);\n    }\n\n    private getListDragItem(e: DraggingEvent): VirtualListDragItem<R> {\n        const virtualListGui = this.virtualList.getGui();\n        const paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop as string);\n        const rowHeight = this.virtualList.getRowHeight();\n        const scrollTop = this.virtualList.getScrollTop();\n        const rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);\n        const maxLen = this.params.getNumRows(this.comp) - 1;\n        const normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;\n\n        return {\n            rowIndex: normalizedRowIndex,\n            position: (Math.round(rowIndex) > rowIndex || rowIndex > maxLen) ? 'bottom' : 'top',\n            component: this.virtualList.getComponentAt(normalizedRowIndex) as R\n        };\n    }\n\n    private onDragStop() {\n        if (this.moveBlocked) { return; }\n\n        this.params.moveItem(this.currentDragValue, this.lastHoveredListItem);\n\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n\n    private onDragLeave() {\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n\n    private clearHoveredItems(): void {\n        const virtualListGui = this.virtualList.getGui();\n        virtualListGui.querySelectorAll(`.${LIST_ITEM_HOVERED}`).forEach(el => {\n            [\n                LIST_ITEM_HOVERED,\n                'ag-item-highlight-top',\n                'ag-item-highlight-bottom'\n            ].forEach(cls => {\n                (el as HTMLElement).classList.remove(cls);\n            });\n        });\n        this.lastHoveredListItem = null;\n    }\n}\n", "import { AlignedGridsService } from \"./alignedGridsService\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ApplyColumnStateParams, ColumnModel, ColumnState, ISizeColumnsToFitParams } from \"./columns/columnModel\";\nimport { Autowired, Bean, Context, Optional, PostConstruct } from \"./context/context\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { CellPosition } from \"./entities/cellPositionUtils\";\nimport { ColDef, ColGroupDef, ColumnChooserParams, HeaderLocation, IAggFunc } from \"./entities/colDef\";\nimport { Column, ColumnPinnedType } from \"./entities/column\";\nimport {\n    ChartRef,\n    DomLayoutType,\n    GetChartToolbarItems,\n    GetContextMenuItems,\n    GetMainMenuItems,\n    GetRowIdFunc,\n    GetServerSideGroupKey,\n    GridOptions,\n    IsApplyServerSideTransaction,\n    IsRowMaster,\n    IsRowSelectable,\n    IsServerSideGroup,\n    RowClassParams,\n    RowGroupingDisplayType,\n    ServerSideGroupLevelParams,\n    UseGroupFooter\n} from \"./entities/gridOptions\";\nimport {\n    GetGroupRowAggParams,\n    GetServerSideGroupLevelParamsParams,\n    InitialGroupOrderComparatorParams,\n    IsFullWidthRowParams,\n    IsServerSideGroupOpenByDefaultParams,\n    NavigateToNextCellParams,\n    NavigateToNextHeaderParams,\n    PaginationNumberFormatterParams,\n    PostProcessPopupParams,\n    PostSortRowsParams,\n    ProcessRowParams,\n    RowHeightParams,\n    TabToNextCellParams,\n    TabToNextHeaderParams\n} from \"./interfaces/iCallbackParams\";\nimport { IRowNode, RowPinnedType } from \"./interfaces/iRowNode\";\nimport { AgEvent, AgEventListener, AgGlobalEventListener, ColumnEventType, FilterChangedEventSourceType, GridPreDestroyedEvent, SelectionEventSourceType } from \"./events\";\nimport { EventService } from \"./eventService\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { FocusService } from \"./focusService\";\nimport { GridBodyCtrl } from \"./gridBodyComp/gridBodyCtrl\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowDropZoneEvents, RowDropZoneParams } from \"./gridBodyComp/rowDragFeature\";\nimport { GridOptionsService } from \"./gridOptionsService\";\nimport { HeaderPosition } from \"./headerRendering/common/headerPosition\";\nimport { CsvExportParams, ProcessCellForExportParams } from \"./interfaces/exportParams\";\nimport { IAggFuncService } from \"./interfaces/iAggFuncService\";\nimport { ICellEditor } from \"./interfaces/iCellEditor\";\nimport {\n    ChartDownloadParams,\n    ChartModel,\n    CloseChartToolPanelParams,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    GetChartImageDataUrlParams,\n    IChartService,\n    OpenChartToolPanelParams, UpdateChartParams,\n} from './interfaces/IChartService';\nimport { ClientSideRowModelStep, IClientSideRowModel } from \"./interfaces/iClientSideRowModel\";\nimport { IClipboardCopyParams, IClipboardCopyRowsParams, IClipboardService } from \"./interfaces/iClipboardService\";\nimport { IColumnToolPanel } from \"./interfaces/iColumnToolPanel\";\nimport { ICsvCreator } from \"./interfaces/iCsvCreator\";\nimport { IDatasource } from \"./interfaces/iDatasource\";\nimport {\n    ExcelExportMultipleSheetParams,\n    ExcelExportParams,\n    ExcelFactoryMode,\n    IExcelCreator\n} from \"./interfaces/iExcelCreator\";\nimport { FilterModel, IFilter } from \"./interfaces/iFilter\";\nimport { IFiltersToolPanel } from \"./interfaces/iFiltersToolPanel\";\nimport { IInfiniteRowModel } from \"./interfaces/iInfiniteRowModel\";\nimport { CellRange, CellRangeParams, IRangeService } from \"./interfaces/IRangeService\";\nimport { IRowModel, RowModelType } from \"./interfaces/iRowModel\";\nimport { IServerSideDatasource } from \"./interfaces/iServerSideDatasource\";\nimport {\n    IServerSideRowModel,\n    IServerSideTransactionManager,\n    RefreshServerSideParams\n} from \"./interfaces/iServerSideRowModel\";\nimport { ServerSideGroupLevelState } from \"./interfaces/IServerSideStore\";\nimport { ISideBarService, SideBarDef } from \"./interfaces/iSideBar\";\nimport { IStatusBarService } from \"./interfaces/iStatusBarService\";\nimport { IStatusPanel } from \"./interfaces/iStatusPanel\";\nimport { IToolPanel } from \"./interfaces/iToolPanel\";\nimport { IViewportDatasource } from \"./interfaces/iViewportDatasource\";\nimport { RowDataTransaction } from \"./interfaces/rowDataTransaction\";\nimport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nimport { ServerSideTransaction, ServerSideTransactionResult } from \"./interfaces/serverSideTransaction\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ICellRenderer } from \"./rendering/cellRenderers/iCellRenderer\";\nimport {\n    FlashCellsParams,\n    GetCellEditorInstancesParams,\n    GetCellRendererInstancesParams,\n    RedrawRowsParams,\n    RefreshCellsParams,\n    RowRenderer\n} from \"./rendering/rowRenderer\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nimport { SortController } from \"./sortController\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { exists, missing } from \"./utils/generic\";\nimport { iterateObject, removeAllReferences } from \"./utils/object\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { ISelectionService } from \"./interfaces/iSelectionService\";\nimport { IServerSideGroupSelectionState, IServerSideSelectionState } from \"./interfaces/iServerSideSelection\";\nimport { DataTypeDefinition } from \"./entities/dataType\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { AdvancedFilterModel } from \"./interfaces/advancedFilterModel\";\nimport { LoadSuccessParams } from \"./rowNodeCache/rowNodeBlock\";\nimport { Events } from './eventKeys';\nimport { IAdvancedFilterBuilderParams } from \"./interfaces/iAdvancedFilterBuilderParams\";\nimport { IHeaderColumn } from \"./interfaces/iHeaderColumn\";\nimport { ProvidedColumnGroup } from \"./entities/providedColumnGroup\";\nimport { ColumnGroup } from \"./entities/columnGroup\";\nimport { OverlayService } from \"./rendering/overlays/overlayService\";\nimport { GridState } from \"./interfaces/gridState\";\nimport { StateService } from \"./misc/stateService\";\nimport { IExpansionService } from \"./interfaces/iExpansionService\";\nimport { warnOnce } from \"./utils/function\";\nimport { ApiEventService } from \"./misc/apiEventService\";\nimport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nimport { ManagedGridOptionKey, ManagedGridOptions } from \"./propertyKeys\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\nimport { MenuService } from \"./misc/menuService\";\n\nexport interface DetailGridInfo {\n    /**\n     * Id of the detail grid, the format is `detail_{ROW-ID}`,\n     * where `ROW-ID` is the `id` of the parent row.\n     */\n    id: string;\n    /** Grid api of the detail grid. */\n    api?: GridApi;\n    /** @deprecated v31 ColumnApi has been deprecated and all methods moved to the api. */\n    columnApi?: ColumnApi;\n}\n\nexport interface StartEditingCellParams {\n    /** The row index of the row to start editing */\n    rowIndex: number;\n    /** The column key of the row to start editing */\n    colKey: string | Column;\n    /** Set to `'top'` or `'bottom'` to start editing a pinned row */\n    rowPinned?: RowPinnedType;\n    /** The key to pass to the cell editor */\n    key?: string;\n}\n\nexport function unwrapUserComp<T>(comp: T): T {\n    const compAsAny = comp as any;\n    const isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;\n    return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;\n}\n\n@Bean('gridApi')\nexport class GridApi<TData = any> {\n\n    @Optional('csvCreator') private csvCreator: ICsvCreator;\n    @Optional('excelCreator') private excelCreator: IExcelCreator;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('navigationService') private navigationService: NavigationService;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n    @Autowired('gridOptionsService') private gos: GridOptionsService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('alignedGridsService') private alignedGridsService: AlignedGridsService;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('context') private context: Context;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n    @Optional('aggFuncService') private aggFuncService: IAggFuncService;\n    @Autowired('menuService') private menuService: MenuService;\n    @Autowired('valueCache') private valueCache: ValueCache;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Optional('statusBarService') private statusBarService: IStatusBarService;\n    @Optional('chartService') private chartService: IChartService;\n    @Optional('undoRedoService') private undoRedoService: UndoRedoService;\n    @Optional('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n    @Optional('ssrmTransactionManager') private serverSideTransactionManager: IServerSideTransactionManager;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('overlayService') private overlayService: OverlayService;\n    @Optional('sideBarService') private sideBarService?: ISideBarService;\n    @Autowired('stateService') private stateService: StateService;\n    @Autowired('expansionService') private expansionService: IExpansionService;\n    @Autowired('apiEventService') private apiEventService: ApiEventService;\n    @Autowired('frameworkOverrides') private frameworkOverrides: IFrameworkOverrides;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private infiniteRowModel: IInfiniteRowModel;\n\n    private serverSideRowModel: IServerSideRowModel;\n\n    private detailGridInfoMap: { [id: string]: DetailGridInfo | undefined; } = {};\n\n    private destroyCalled = false;\n\n    @PostConstruct\n    private init(): void {\n        switch (this.rowModel.getType()) {\n            case 'clientSide':\n                this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n                break;\n            case 'infinite':\n                this.infiniteRowModel = this.rowModel as IInfiniteRowModel;\n                break;\n            case 'serverSide':\n                this.serverSideRowModel = this.rowModel as IServerSideRowModel;\n                break;\n        }\n\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __getAlignedGridService(): AlignedGridsService {\n        return this.alignedGridsService;\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __getContext(): Context {\n        return this.context;\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __getModel(): IRowModel {\n        return this.rowModel;\n    }\n\n    /** Returns the `gridId` for the current grid as specified via the gridOptions property `gridId` or the auto assigned grid id if none was provided. */\n    public getGridId(): string {\n        return this.context.getGridId();\n    }\n\n    /** Register a detail grid with the master grid when it is created. */\n    public addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void {\n        this.detailGridInfoMap[id] = gridInfo;\n    }\n\n    /** Unregister a detail grid from the master grid when it is destroyed. */\n    public removeDetailGridInfo(id: string): void {\n        this.detailGridInfoMap[id] = undefined;\n    }\n\n    /** Returns the `DetailGridInfo` corresponding to the supplied `detailGridId`. */\n    public getDetailGridInfo(id: string): DetailGridInfo | undefined {\n        return this.detailGridInfoMap[id];\n    }\n\n    /** Iterates through each `DetailGridInfo` in the grid and calls the supplied callback on each. */\n    public forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void) {\n        let index = 0;\n        iterateObject(this.detailGridInfoMap, (id: string, gridInfo: DetailGridInfo) => {\n            // check for undefined, as old references will still be lying around\n            if (exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    }\n\n    /** Similar to `exportDataAsCsv`, except returns the result as a string rather than download it. */\n    public getDataAsCsv(params?: CsvExportParams): string | undefined {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv', this.context.getGridId())) {\n            return this.csvCreator.getDataAsCsv(params);\n        }\n    }\n\n    /** Downloads a CSV export of the grid's data. */\n    public exportDataAsCsv(params?: CsvExportParams): void {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv', this.context.getGridId())) {\n            this.csvCreator.exportDataAsCsv(params);\n        }\n    }\n\n    private assertNotExcelMultiSheet(method: keyof GridApi, params?: ExcelExportParams): boolean {\n        if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.' + method, this.context.getGridId())) { return false }\n        if (this.excelCreator.getFactoryMode() === ExcelFactoryMode.MULTI_SHEET) {\n            console.warn(\"AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'\");\n            return false;\n        }\n        return true;\n    }\n\n    /** Similar to `exportDataAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */\n    public getDataAsExcel(params?: ExcelExportParams): string | Blob | undefined {\n        if (this.assertNotExcelMultiSheet('getDataAsExcel', params)) {\n            return this.excelCreator.getDataAsExcel(params);\n        }\n    }\n\n    /** Downloads an Excel export of the grid's data. */\n    public exportDataAsExcel(params?: ExcelExportParams): void {\n        if (this.assertNotExcelMultiSheet('exportDataAsExcel', params)) {\n            this.excelCreator.exportDataAsExcel(params);\n        }\n    }\n\n    /** This is method to be used to get the grid's data as a sheet, that will later be exported either by `getMultipleSheetsAsExcel()` or `exportMultipleSheetsAsExcel()`. */\n    public getSheetDataForExcel(params?: ExcelExportParams): string | undefined {\n        if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.getSheetDataForExcel', this.context.getGridId())) { return; }\n        this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET);\n\n        return this.excelCreator.getSheetDataForExcel(params);\n    }\n\n    /** Similar to `exportMultipleSheetsAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */\n    public getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.getMultipleSheetsAsExcel', this.context.getGridId())) {\n            return this.excelCreator.getMultipleSheetsAsExcel(params);\n        }\n    }\n\n    /** Downloads an Excel export of multiple sheets in one file. */\n    public exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.exportMultipleSheetsAsExcel', this.context.getGridId())) {\n            this.excelCreator.exportMultipleSheetsAsExcel(params);\n        }\n    }\n\n    /**\n     * Sets an ARIA property in the grid panel (element with `role=\\\"grid\\\"`), and removes an ARIA property when the value is null.\n     *\n     * Example: `api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\\\"my grid\\\"`.\n     *\n     * `api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element.\n     */\n    public setGridAriaProperty(property: string, value: string | null): void {\n        if (!property) { return; }\n        const eGrid = this.ctrlsService.getGridBodyCtrl().getGui();\n        const ariaProperty = `aria-${property}`;\n\n        if (value === null) {\n            eGrid.removeAttribute(ariaProperty);\n        } else {\n            eGrid.setAttribute(ariaProperty, value);\n        }\n\n    }\n\n    private logMissingRowModel(apiMethod: keyof GridApi, ...requiredRowModels: RowModelType[]) {\n        console.error(`AG Grid: api.${apiMethod} can only be called when gridOptions.rowModelType is ${requiredRowModels.join(' or ')}`);\n    }\n\n    private logDeprecation(version: string, apiMethod: StartsWithGridApi, replacement: StartsWithGridApi, message?: string) {\n        warnOnce(`Since ${version} api.${apiMethod} is deprecated. Please use ${replacement} instead. ${message}`);\n    }\n\n    /** Gets the number of top pinned rows. */\n    public getPinnedTopRowCount(): number {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    }\n\n    /** Gets the number of bottom pinned rows. */\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    }\n\n    /** Gets the top pinned row with the specified index. */\n    public getPinnedTopRow(index: number): IRowNode | undefined {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    }\n\n    /** Gets the bottom pinned row with the specified index. */\n    public getPinnedBottomRow(index: number): IRowNode | undefined {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    }\n\n    public expireValueCache(): void {\n        this.valueCache.expire();\n    }\n\n    /**\n     * Returns an object with two properties:\n     *  - `top`: The top pixel position of the current scroll in the grid\n     *  - `bottom`: The bottom pixel position of the current scroll in the grid\n     */\n    public getVerticalPixelRange(): { top: number, bottom: number; } {\n        return this.gridBodyCtrl.getScrollFeature().getVScrollPosition();\n    }\n\n    /**\n     * Returns an object with two properties:\n     * - `left`: The left pixel position of the current scroll in the grid\n     * - `right`: The right pixel position of the current scroll in the grid\n     */\n    public getHorizontalPixelRange(): { left: number, right: number; } {\n        return this.gridBodyCtrl.getScrollFeature().getHScrollPosition();\n    }\n\n    /** Performs change detection on all cells, refreshing cells where required. */\n    public refreshCells(params: RefreshCellsParams<TData> = {}): void {\n        this.frameworkOverrides.wrapIncoming(() => this.rowRenderer.refreshCells(params));\n    }\n\n    /** Flash rows, columns or individual cells. */\n    public flashCells(params: FlashCellsParams<TData> = {}): void {\n        const warning = (prop: 'fade' | 'flash') => warnOnce(`Since v31.1 api.flashCells parameter '${prop}Delay' is deprecated. Please use '${prop}Duration' instead.`);\n        if(exists(params.fadeDelay)){ warning('fade') }\n        if(exists(params.flashDelay)){ warning('flash') }\n\n        this.frameworkOverrides.wrapIncoming(() => this.rowRenderer.flashCells(params));\n    }\n\n    /** Remove row(s) from the DOM and recreate them again from scratch. */\n    public redrawRows(params: RedrawRowsParams<TData> = {}): void {\n        const rowNodes = params ? params.rowNodes : undefined;\n        this.frameworkOverrides.wrapIncoming(() => this.rowRenderer.redrawRows(rowNodes));\n    }\n\n    /** Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed. */\n    public refreshHeader() {\n        this.frameworkOverrides.wrapIncoming(() => this.ctrlsService.getHeaderRowContainerCtrls().forEach(c => c.refresh()));\n    }\n\n    /** Returns `true` if any filter is set. This includes quick filter, column filter, external filter or advanced filter. */\n    public isAnyFilterPresent(): boolean {\n        return this.filterManager.isAnyFilterPresent();\n    }\n\n    /** Returns `true` if any column filter is set, otherwise `false`. */\n    public isColumnFilterPresent(): boolean {\n        return this.filterManager.isColumnFilterPresent() || this.filterManager.isAggregateFilterPresent();\n    }\n\n    /** Returns `true` if the Quick Filter is set, otherwise `false`. */\n    public isQuickFilterPresent(): boolean {\n        return this.filterManager.isQuickFilterPresent();\n    }\n\n    /**\n     * Returns the row model inside the table.\n     * From here you can see the original rows, rows after filter has been applied,\n     * rows after aggregation has been applied, and the final set of 'to be displayed' rows.\n     *\n     * @deprecated As of v31.1, getModel() is deprecated and will not be available in future versions.\n     * Please use the appropriate grid API methods instead\n     */\n    public getModel(): IRowModel {\n        warnOnce('Since v31.1 getModel() is deprecated. Please use the appropriate grid API methods instead.');\n        return this.rowModel;\n    }\n\n    /** Expand or collapse a specific row node, optionally expanding/collapsing all of its parent nodes. */\n    public setRowNodeExpanded(rowNode: IRowNode, expanded: boolean, expandParents?: boolean): void {\n        this.expansionService.setRowNodeExpanded(rowNode, expanded, expandParents);\n    }\n\n    /**\n     * Informs the grid that row group expanded state has changed and it needs to rerender the group nodes.\n     * Typically called after updating the row node expanded state explicitly, i.e `rowNode.expanded = false`,\n     * across multiple groups and you want to update the grid view in a single rerender instead of on every group change.\n     */\n    public onGroupExpandedOrCollapsed() {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('onGroupExpandedOrCollapsed', 'clientSide');\n            return;\n        }\n        this.expansionService.onGroupExpandedOrCollapsed();\n    }\n\n    /**\n     * Refresh the Client-Side Row Model, executing the grouping, filtering and sorting again.\n     * Optionally provide the step you wish the refresh to apply from. Defaults to `everything`.\n     */\n    public refreshClientSideRowModel(step?: ClientSideRowModelStep): any {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('refreshClientSideRowModel', 'clientSide');\n            return;\n        }\n\n        this.clientSideRowModel.refreshModel(step);\n    }\n\n    /** Returns `true` when there are no more animation frames left to process. */\n    public isAnimationFrameQueueEmpty(): boolean {\n        return this.animationFrameService.isQueueEmpty();\n    }\n\n    public flushAllAnimationFrames(): void {\n        this.animationFrameService.flushAllFrames();\n    }\n\n    /**\n     * Returns the row node with the given ID.\n     * The row node ID is the one you provide from the callback `getRowId(params)`,\n     * otherwise the ID is a number (cast as string) auto-generated by the grid when\n     * the row data is set.\n     */\n    public getRowNode(id: string): IRowNode<TData> | undefined {\n        return this.rowModel.getRowNode(id);\n    }\n\n    /**\n     * Gets the sizes that various UI elements will be rendered at with the current theme.\n     * If you override the row or header height using `gridOptions`, the override value you provided will be returned.\n     */\n    public getSizesForCurrentTheme() {\n        return {\n            rowHeight: this.gos.getRowHeightAsNumber(),\n            headerHeight: this.columnModel.getHeaderHeight()\n        };\n    }\n\n    /** Expand all groups. */\n    public expandAll() {\n        if (this.clientSideRowModel || this.serverSideRowModel) {\n            this.expansionService.expandAll(true);\n        } else {\n            this.logMissingRowModel('expandAll', 'clientSide', 'serverSide');\n        }\n    }\n\n    /** Collapse all groups. */\n    public collapseAll() {\n        if (this.clientSideRowModel || this.serverSideRowModel) {\n            this.expansionService.expandAll(false);\n        } else {\n            this.logMissingRowModel('collapseAll', 'clientSide', 'serverSide');\n        }\n    }\n\n    /**\n     * Registers a callback to a virtual row.\n     * A virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered).\n     * Unlike normal events, you do not need to unregister rendered row listeners.\n     * When the rendered row is removed from the grid, all associated rendered row listeners will also be removed.\n     * listen for this event if your `cellRenderer` needs to do cleanup when the row no longer exists.\n     */\n    public addRenderedRowListener(eventName: string, rowIndex: number, callback: Function) {\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback as any);\n    }\n\n    /** Get the current Quick Filter text from the grid, or `undefined` if none is set. */\n    public getQuickFilter(): string | undefined {\n        return this.gos.get('quickFilterText');\n    }\n\n\n    /** Get the state of the Advanced Filter. Used for saving Advanced Filter state */\n    public getAdvancedFilterModel(): AdvancedFilterModel | null {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, 'api.getAdvancedFilterModel', this.context.getGridId())) {\n            return this.filterManager.getAdvancedFilterModel();\n        }\n        return null;\n    }\n\n    /** Set the state of the Advanced Filter. Used for restoring Advanced Filter state */\n    public setAdvancedFilterModel(advancedFilterModel: AdvancedFilterModel | null): void {\n        this.filterManager.setAdvancedFilterModel(advancedFilterModel);\n    }\n\n    /** Open the Advanced Filter Builder dialog (if enabled). */\n    public showAdvancedFilterBuilder(): void {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, 'api.setAdvancedFilterModel', this.context.getGridId())) {\n            this.filterManager.showAdvancedFilterBuilder('api');\n        }\n    }\n\n    /**\n     * Set all of the provided nodes selection state to the provided value.\n     */\n    public setNodesSelected(params: { nodes: IRowNode[], newValue: boolean, source?: SelectionEventSourceType }) {\n        const allNodesValid = params.nodes.every(node => {\n            if (node.rowPinned) {\n                console.warn('AG Grid: cannot select pinned rows');\n                return false;\n            }\n\n            if (node.id === undefined) {\n                console.warn('AG Grid: cannot select node until id for node is known');\n                return false;\n            }\n            return true;\n        });\n\n        if (!allNodesValid) {\n            return;\n        }\n\n\n        const { nodes, source, newValue } = params;\n        const nodesAsRowNode = nodes as RowNode[];\n        this.selectionService.setNodesSelected({ nodes: nodesAsRowNode, source: source ?? 'api', newValue });\n    }\n\n\n    /**\n     * Select all rows, regardless of filtering and rows that are not visible due to grouping being enabled and their groups not expanded.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`\n     */\n    public selectAll(source: SelectionEventSourceType = 'apiSelectAll') {\n        this.selectionService.selectAllRowNodes({ source });\n    }\n\n    /**\n     * Clear all row selections, regardless of filtering.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`\n     */\n    public deselectAll(source: SelectionEventSourceType = 'apiSelectAll') {\n        this.selectionService.deselectAllRowNodes({ source });\n    }\n\n    /**\n     * Select all filtered rows.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`\n     */\n    public selectAllFiltered(source: SelectionEventSourceType = 'apiSelectAllFiltered') {\n        this.selectionService.selectAllRowNodes({ source, justFiltered: true });\n    }\n\n    /**\n     * Clear all filtered selections.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`\n     */\n    public deselectAllFiltered(source: SelectionEventSourceType = 'apiSelectAllFiltered') {\n        this.selectionService.deselectAllRowNodes({ source, justFiltered: true });\n    }\n\n    /**\n     * Returns an object containing rules matching the selected rows in the SSRM.\n     * \n     * If `groupSelectsChildren=false` the returned object will be flat, and will conform to IServerSideSelectionState.\n     * If `groupSelectsChildren=true` the returned object will be hierarchical, and will conform to IServerSideGroupSelectionState.\n     */\n    public getServerSideSelectionState(): IServerSideSelectionState | IServerSideGroupSelectionState | null {\n        if (missing(this.serverSideRowModel)) {\n            this.logMissingRowModel('getServerSideSelectionState', 'serverSide');\n            return null;\n        }\n\n        return this.selectionService.getSelectionState() as IServerSideSelectionState | IServerSideGroupSelectionState | null;\n    }\n\n    /**\n     * Set the rules matching the selected rows in the SSRM.\n     * \n     * If `groupSelectsChildren=false` the param will be flat, and should conform to IServerSideSelectionState.\n     * If `groupSelectsChildren=true` the param will be hierarchical, and should conform to IServerSideGroupSelectionState.\n     */\n    public setServerSideSelectionState(state: IServerSideSelectionState | IServerSideGroupSelectionState) {\n        if (missing(this.serverSideRowModel)) {\n            this.logMissingRowModel('setServerSideSelectionState', 'serverSide');\n            return;\n        }\n\n        this.selectionService.setSelectionState(state, 'api');\n    }\n\n    /**\n     * Select all rows on the current page.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`\n     */\n    public selectAllOnCurrentPage(source: SelectionEventSourceType = 'apiSelectAllCurrentPage') {\n        this.selectionService.selectAllRowNodes({ source, justCurrentPage: true });\n    }\n\n    /**\n     * Clear all filtered on the current page.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`\n     */\n    public deselectAllOnCurrentPage(source: SelectionEventSourceType = 'apiSelectAllCurrentPage') {\n        this.selectionService.deselectAllRowNodes({ source, justCurrentPage: true });\n    }\n\n    /** Show the 'loading' overlay. */\n    public showLoadingOverlay(): void {\n        this.overlayService.showLoadingOverlay();\n    }\n\n    /** Show the 'no rows' overlay. */\n    public showNoRowsOverlay(): void {\n        this.overlayService.showNoRowsOverlay();\n    }\n\n    /** Hides the overlay if showing. */\n    public hideOverlay(): void {\n        this.overlayService.hideOverlay();\n    }\n\n    /**\n     * Returns an unsorted list of selected nodes.\n     * Getting the underlying node (rather than the data) is useful when working with tree / aggregated data,\n     * as the node can be traversed.\n     */\n    public getSelectedNodes(): IRowNode<TData>[] {\n        return this.selectionService.getSelectedNodes();\n    }\n    /** Returns an unsorted list of selected rows (i.e. row data that you provided). */\n    public getSelectedRows(): TData[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees.\n     * If a group has all its children selected, then the group appears in the result, but not the children.\n     * Designed for use with `'children'` as the group selection type, where groups don't actually appear in the selection normally.\n     */\n    public getBestCostNodeSelection(): IRowNode<TData>[] | undefined {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('getBestCostNodeSelection', 'clientSide');\n            return;\n        }\n        return this.selectionService.getBestCostNodeSelection();\n    }\n\n    /** Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer. */\n    public getRenderedNodes(): IRowNode<TData>[] {\n        return this.rowRenderer.getRenderedNodes();\n    }\n\n    /**\n     *  Ensures the column is visible by scrolling the table if needed.\n     *\n     * This will have no effect before the firstDataRendered event has fired.\n     *\n     * @param key - The column to ensure visible\n     * @param position - Where the column will be positioned.\n     * - `auto` - Scrolls the minimum amount to make sure the column is visible.\n     * - `start` - Scrolls the column to the start of the viewport.\n     * - `middle` - Scrolls the column to the middle of the viewport.\n     * - `end` - Scrolls the column to the end of the viewport.\n    */\n    public ensureColumnVisible(key: string | Column, position: 'auto' | 'start' | 'middle' | 'end' = 'auto') {\n        this.frameworkOverrides.wrapIncoming(() => this.gridBodyCtrl.getScrollFeature().ensureColumnVisible(key, position), 'ensureVisible');\n    }\n\n    /**\n     * Vertically scrolls the grid until the provided row index is inside the visible viewport.\n     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\n     * This will have no effect before the firstDataRendered event has fired.\n     */\n    public ensureIndexVisible(index: number, position?: 'top' | 'bottom' | 'middle' | null) {\n        this.frameworkOverrides.wrapIncoming(() => this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(index, position), 'ensureVisible');\n    }\n\n    /**\n     * Vertically scrolls the grid until the provided row (or a row matching the provided comparator) is inside the visible viewport.\n     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\n     * This will have no effect before the firstDataRendered event has fired.\n     */\n    public ensureNodeVisible(\n        nodeSelector: TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean),\n        position: 'top' | 'bottom' | 'middle' | null = null\n    ) {\n        this.frameworkOverrides.wrapIncoming(() => this.gridBodyCtrl.getScrollFeature().ensureNodeVisible(nodeSelector, position), 'ensureVisible');\n    }\n\n    /**\n     * Similar to `forEachNode`, except lists all the leaf nodes.\n     * This effectively goes through all the data that you provided to the grid before the grid performed any grouping.\n     * If using tree data, goes through all the nodes for the data you provided, including nodes that have children,\n     * but excluding groups the grid created where gaps were missing in the hierarchy.\n     */\n    public forEachLeafNode(callback: (rowNode: IRowNode<TData>) => void) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('forEachLeafNode', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    }\n\n    /**\n     * Iterates through each node (row) in the grid and calls the callback for each node.\n     * This works similar to the `forEach` method on a JavaScript array.\n     * This is called for every node, ignoring any filtering or sorting applied within the grid.\n     * If using the Infinite Row Model, then this gets called for each page loaded in the page cache.\n     */\n    public forEachNode(callback: (rowNode: IRowNode<TData>, index: number) => void, includeFooterNodes?: boolean) {\n        this.rowModel.forEachNode(callback, includeFooterNodes);\n    }\n\n    /** Similar to `forEachNode`, except skips any filtered out data. */\n    public forEachNodeAfterFilter(callback: (rowNode: IRowNode<TData>, index: number) => void) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('forEachNodeAfterFilter', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    }\n\n    /** Similar to `forEachNodeAfterFilter`, except the callbacks are called in the order the rows are displayed in the grid. */\n    public forEachNodeAfterFilterAndSort(callback: (rowNode: IRowNode<TData>, index: number) => void) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('forEachNodeAfterFilterAndSort', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    }\n\n    /**\n     * @deprecated v31.1 To get/set individual filter models, use `getColumnFilterModel` or `setColumnFilterModel` instead.\n     * To get hold of the filter instance, use `getColumnFilterInstance` which returns the instance asynchronously.\n     */\n    public getFilterInstance<TFilter extends IFilter>(key: string | Column, callback?: (filter: TFilter | null) => void): TFilter | null | undefined {\n        warnOnce(`'getFilterInstance' is deprecated. To get/set individual filter models, use 'getColumnFilterModel' or 'setColumnFilterModel' instead. To get hold of the filter instance, use 'getColumnFilterInstance' which returns the instance asynchronously.`);\n        return this.filterManager.getFilterInstance(key, callback);\n    }\n\n    /**\n     * Returns the filter component instance for a column.\n     * For getting/setting models for individual column filters, use `getColumnFilterModel` and `setColumnFilterModel` instead of this.\n     * `key` can be a column ID or a `Column` object.\n     */\n    public getColumnFilterInstance<TFilter extends IFilter>(key: string | Column): Promise<TFilter | null | undefined> {\n        return this.filterManager.getColumnFilterInstance(key);\n    }\n\n    /** Destroys a filter. Useful to force a particular filter to be created from scratch again. */\n    public destroyFilter(key: string | Column) {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, 'api');\n        }\n    }\n\n    /** Gets the status panel instance corresponding to the supplied `id`. */\n    public getStatusPanel<TStatusPanel = IStatusPanel>(key: string): TStatusPanel | undefined {\n        if (!ModuleRegistry.__assertRegistered(ModuleNames.StatusBarModule, 'api.getStatusPanel', this.context.getGridId())) { return; }\n        const comp = this.statusBarService.getStatusPanel(key);\n        return unwrapUserComp(comp) as any;\n    }\n\n    public getColumnDef<TValue = any>(key: string | Column<TValue>): ColDef<TData, TValue> | null {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        }\n        return null;\n    }\n\n    /**\n     * Returns the current column definitions.\n    */\n    public getColumnDefs(): (ColDef<TData> | ColGroupDef<TData>)[] | undefined { return this.columnModel.getColumnDefs(); }\n\n    /**\n     * Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.\n     * @param source The source of the filter change event. If not specified defaults to `'api'`.\n     */\n    public onFilterChanged(source: FilterChangedEventSourceType = 'api') {\n        this.filterManager.onFilterChanged({ source });\n    }\n\n    /**\n     * Gets the grid to act as if the sort was changed.\n     * Useful if you update some values and want to get the grid to reorder them according to the new values.\n     */\n    public onSortChanged() {\n        this.sortController.onSortChanged('api');\n    }\n\n    /**\n     * Sets the state of all the column filters. Provide it with what you get from `getFilterModel()` to restore filter state.\n     * If inferring cell data types, and row data is provided asynchronously and is yet to be set,\n     * the filter model will be applied asynchronously after row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition,\n     * or provide cell data types for every column.\n     */\n    public setFilterModel(model: FilterModel | null): void {\n        this.frameworkOverrides.wrapIncoming(() => this.filterManager.setFilterModel(model));\n    }\n\n    /** Gets the current state of all the column filters. Used for saving filter state. */\n    public getFilterModel(): FilterModel {\n        return this.filterManager.getFilterModel();\n    }\n\n    /**\n     * Gets the current filter model for the specified column.\n     * Will return `null` if no active filter.\n     */\n    public getColumnFilterModel<TModel>(column: string | Column): TModel | null {\n        return this.filterManager.getColumnFilterModel(column);\n    }\n\n    /**\n     * Sets the filter model for the specified column.\n     * Setting a `model` of `null` will reset the filter (make inactive).\n     * Must wait on the response before calling `api.onFilterChanged()`.\n     */\n    public setColumnFilterModel<TModel>(column: string | Column, model: TModel | null): Promise<void> {\n        return this.filterManager.setColumnFilterModel(column, model);\n    }\n\n    /** Returns the focused cell (or the last focused cell if the grid lost focus). */\n    public getFocusedCell(): CellPosition | null {\n        return this.focusService.getFocusedCell();\n    }\n\n    /** Clears the focused cell. */\n    public clearFocusedCell(): void {\n        return this.focusService.clearFocusedCell();\n    }\n\n    /** Sets the focus to the specified cell. `rowPinned` can be either 'top', 'bottom' or null (for not pinned). */\n    public setFocusedCell(rowIndex: number, colKey: string | Column, rowPinned?: RowPinnedType) {\n        this.focusService.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });\n    }\n\n    /** Adds a drop zone outside of the grid where rows can be dropped. */\n    public addRowDropZone(params: RowDropZoneParams): void {\n        this.gridBodyCtrl.getRowDragFeature().addRowDropZone(params);\n    }\n\n    /** Removes an external drop zone added by `addRowDropZone`. */\n    public removeRowDropZone(params: RowDropZoneParams): void {\n        const activeDropTarget = this.dragAndDropService.findExternalZone(params);\n\n        if (activeDropTarget) {\n            this.dragAndDropService.removeDropTarget(activeDropTarget);\n        }\n    }\n\n    /** Returns the `RowDropZoneParams` to be used by another grid's `addRowDropZone` method. */\n    public getRowDropZoneParams(events?: RowDropZoneEvents): RowDropZoneParams {\n        return this.gridBodyCtrl.getRowDragFeature().getRowDropZone(events);\n    }\n\n    private assertSideBarLoaded(apiMethod: keyof GridApi): boolean {\n        return ModuleRegistry.__assertRegistered(ModuleNames.SideBarModule, 'api.' + apiMethod, this.context.getGridId());\n    }\n\n    /** Returns `true` if the side bar is visible. */\n    public isSideBarVisible(): boolean {\n        return this.assertSideBarLoaded('isSideBarVisible') && this.sideBarService!.getSideBarComp().isDisplayed();\n    }\n\n    /** Show/hide the entire side bar, including any visible panel and the tab buttons. */\n    public setSideBarVisible(show: boolean) {\n        if (this.assertSideBarLoaded('setSideBarVisible')) {\n            this.sideBarService!.getSideBarComp().setDisplayed(show);\n        }\n    }\n\n    /** Sets the side bar position relative to the grid. Possible values are `'left'` or `'right'`. */\n    public setSideBarPosition(position: 'left' | 'right') {\n        if (this.assertSideBarLoaded('setSideBarPosition')) {\n            this.sideBarService!.getSideBarComp().setSideBarPosition(position);\n        }\n    }\n\n    /** Opens a particular tool panel. Provide the ID of the tool panel to open. */\n    public openToolPanel(key: string) {\n        if (this.assertSideBarLoaded('openToolPanel')) {\n            this.sideBarService!.getSideBarComp().openToolPanel(key, 'api');\n        }\n    }\n\n    /** Closes the currently open tool panel (if any). */\n    public closeToolPanel() {\n        if (this.assertSideBarLoaded('closeToolPanel')) {\n            this.sideBarService!.getSideBarComp().close('api');\n        }\n    }\n\n    /** Returns the ID of the currently shown tool panel if any, otherwise `null`. */\n    public getOpenedToolPanel(): string | null {\n        if (this.assertSideBarLoaded('getOpenedToolPanel')) {\n            return this.sideBarService!.getSideBarComp().openedItem()\n        }\n        return null;\n    }\n\n    /** Force refresh all tool panels by calling their `refresh` method. */\n    public refreshToolPanel(): void {\n        if (this.assertSideBarLoaded('refreshToolPanel')) {\n            this.sideBarService!.getSideBarComp().refresh();\n        }\n    }\n\n    /** Returns `true` if the tool panel is showing, otherwise `false`. */\n    public isToolPanelShowing(): boolean {\n        return this.assertSideBarLoaded('isToolPanelShowing') && this.sideBarService!.getSideBarComp().isToolPanelShowing();\n    }\n\n    public getToolPanelInstance(id: 'columns'): IColumnToolPanel | undefined;\n    public getToolPanelInstance(id: 'filters'): IFiltersToolPanel | undefined;\n    // This override is a duplicate but is required to make the general override public.\n    public getToolPanelInstance<TToolPanel = IToolPanel>(id: string): TToolPanel | undefined;\n    /** Gets the tool panel instance corresponding to the supplied `id`. */\n    public getToolPanelInstance<TToolPanel = IToolPanel>(id: string): TToolPanel | undefined {\n        if (this.assertSideBarLoaded('getToolPanelInstance')) {\n            const comp = this.sideBarService!.getSideBarComp().getToolPanelInstance(id);\n            return unwrapUserComp(comp) as any;\n        }\n    }\n\n    /** Returns the current side bar configuration. If a shortcut was used, returns the detailed long form. */\n    public getSideBar(): SideBarDef | undefined {\n        if (this.assertSideBarLoaded('getSideBar')) {\n            return this.sideBarService!.getSideBarComp().getDef();\n        }\n        return undefined;\n    }\n\n    /** Tells the grid to recalculate the row heights. */\n    public resetRowHeights() {\n        if (exists(this.clientSideRowModel)) {\n            if (this.columnModel.isAutoRowHeightActive()) {\n                console.warn('AG Grid: calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.');\n                return;\n            }\n            this.clientSideRowModel.resetRowHeights();\n        }\n    }\n\n    /**\n     * Sets the `rowCount` and `maxRowFound` properties.\n     * The second parameter, `maxRowFound`, is optional and if left out, only `rowCount` is set.\n     * Set `rowCount` to adjust the height of the vertical scroll.\n     * Set `maxRowFound` to enable / disable searching for more rows.\n     * Use this method if you add or remove rows into the dataset and need to reset the number of rows or instruct the grid that the entire row count is no longer known.\n     */\n    public setRowCount(rowCount: number, maxRowFound?: boolean): void {\n        if (this.serverSideRowModel) {\n            if (this.columnModel.isRowGroupEmpty()) {\n                this.serverSideRowModel.setRowCount(rowCount, maxRowFound);\n                return;\n            }\n            console.error('AG Grid: setRowCount cannot be used while using row grouping.');\n            return;\n        }\n\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.setRowCount(rowCount, maxRowFound);\n            return;\n        }\n\n        this.logMissingRowModel('setRowCount', 'infinite', 'serverSide');\n    }\n\n    /** Tells the grid a row height has changed. To be used after calling `rowNode.setRowHeight(newHeight)`. */\n    public onRowHeightChanged() {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.onRowHeightChanged();\n        } else if (this.serverSideRowModel) {\n            this.serverSideRowModel.onRowHeightChanged();\n        }\n    }\n\n    /**\n     * Gets the value for a column for a particular `rowNode` (row).\n     * This is useful if you want the raw value of a cell e.g. if implementing your own CSV export.\n     */\n    public getValue<TValue = any>(colKey: string | Column<TValue>, rowNode: IRowNode): TValue | null | undefined {\n        let column = this.columnModel.getPrimaryColumn(colKey);\n        if (missing(column)) {\n            column = this.columnModel.getGridColumn(colKey);\n        }\n        if (missing(column)) {\n            return null;\n        }\n        return this.valueService.getValue(column, rowNode);\n    }\n\n    /**\n     * Add an event listener for the specified `eventType`.\n     * Works similar to `addEventListener` for a browser DOM element.\n     * Listeners will be automatically removed when the grid is destroyed.\n     */\n    public addEventListener(eventType: string, listener: Function): void {\n        this.apiEventService.addEventListener(eventType, listener as AgEventListener);\n    }\n\n    /**\n     * Add an event listener for all event types coming from the grid.\n     * Listeners will be automatically removed when the grid is destroyed.\n     */\n    public addGlobalListener(listener: Function): void {\n        this.apiEventService.addGlobalListener(listener as AgGlobalEventListener);\n    }\n\n    /** Remove an event listener. */\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.apiEventService.removeEventListener(eventType, listener as AgEventListener);\n    }\n\n    /** Remove a global event listener. */\n    public removeGlobalListener(listener: Function): void {\n        this.apiEventService.removeGlobalListener(listener as AgGlobalEventListener);\n    }\n\n    public dispatchEvent(event: AgEvent): void {\n        this.eventService.dispatchEvent(event);\n    }\n\n    /** Will destroy the grid and release resources. If you are using a framework you do not need to call this, as the grid links in with the framework lifecycle. However if you are using Web Components or native JavaScript, you do need to call this, to avoid a memory leak in your application. */\n    public destroy(): void {\n\n        // Get framework link before this is destroyed\n        const preDestroyLink = `See ${this.frameworkOverrides.getDocLink('grid-lifecycle/#grid-pre-destroyed')}`;\n\n        // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n        // of context.destroy(). so we need to stop the infinite loop.\n        if (this.destroyCalled) { return; }\n\n        const event: WithoutGridCommon<GridPreDestroyedEvent<TData>> = {\n            type: Events.EVENT_GRID_PRE_DESTROYED,\n            state: this.getState()\n        };\n        this.dispatchEvent(event);\n\n        // Set after pre-destroy so user can still use the api in pre-destroy event and it is not marked as destroyed yet.\n        this.destroyCalled = true;\n\n        // destroy the UI first (as they use the services)\n        const gridCtrl = this.ctrlsService.getGridCtrl();\n        if (gridCtrl) {\n            gridCtrl.destroyGridUi();\n        }\n\n        // destroy the services\n        this.context.destroy();\n\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in the API so at least the core grid can be garbage collected.\n        removeAllReferences<GridApi>(this, ['isDestroyed'], preDestroyLink);\n    }\n\n    /** Returns `true` if the grid has been destroyed. */\n    public isDestroyed(): boolean {\n        return this.destroyCalled;\n    }\n\n    /** Reset the Quick Filter cache text on every rowNode. */\n    public resetQuickFilter(): void {\n        this.filterManager.resetQuickFilterCache();\n    }\n\n    /** Returns the list of selected cell ranges. */\n    public getCellRanges(): CellRange[] | null {\n        if (this.rangeService) {\n            return this.rangeService.getCellRanges();\n        }\n\n        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, 'api.getCellRanges', this.context.getGridId());\n        return null;\n    }\n\n    /** Adds the provided cell range to the selected ranges. */\n    public addCellRange(params: CellRangeParams): void {\n        if (this.rangeService) {\n            this.rangeService.addCellRange(params);\n            return;\n        }\n        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, 'api.addCellRange', this.context.getGridId());\n    }\n\n    /** Clears the selected ranges. */\n    public clearRangeSelection(): void {\n        if (this.rangeService) {\n            this.rangeService.removeAllCellRanges();\n        }\n        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, 'gridApi.clearRangeSelection', this.context.getGridId());\n    }\n    /** Reverts the last cell edit. */\n    public undoCellEditing(): void {\n        this.undoRedoService.undo('api');\n    }\n    /** Re-applies the most recently undone cell edit. */\n    public redoCellEditing(): void {\n        this.undoRedoService.redo('api');\n    }\n\n    /** Returns current number of available cell edit undo operations. */\n    public getCurrentUndoSize(): number {\n        return this.undoRedoService.getCurrentUndoStackSize();\n    }\n    /** Returns current number of available cell edit redo operations. */\n    public getCurrentRedoSize(): number {\n        return this.undoRedoService.getCurrentRedoStackSize();\n    }\n\n    private assertChart<T>(methodName: string ,func: () => T): T | undefined {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.' + methodName, this.context.getGridId())) {\n            return this.frameworkOverrides.wrapIncoming(() => func());\n        }\n    }\n\n    /** Returns a list of models with information about the charts that are currently rendered from the grid. */\n    public getChartModels(): ChartModel[] | undefined {\n        return this.assertChart('getChartModels', () => this.chartService.getChartModels());\n    }\n\n    /** Returns the `ChartRef` using the supplied `chartId`. */\n    public getChartRef(chartId: string): ChartRef | undefined {\n        return this.assertChart('getChartRef', () => this.chartService.getChartRef(chartId));\n    }\n\n    /** Returns a base64-encoded image data URL for the referenced chartId. */\n    public getChartImageDataURL(params: GetChartImageDataUrlParams): string | undefined {\n        return this.assertChart('getChartImageDataURL', () => this.chartService.getChartImageDataURL(params));\n    }\n\n    /** Starts a browser-based image download for the referenced chartId. */\n    public downloadChart(params: ChartDownloadParams) {\n        return this.assertChart('downloadChart', () => this.chartService.downloadChart(params));\n    }\n\n    /** Open the Chart Tool Panel. */\n    public openChartToolPanel(params: OpenChartToolPanelParams) {\n        return this.assertChart('openChartToolPanel', () => this.chartService.openChartToolPanel(params));\n    }\n\n    /** Close the Chart Tool Panel. */\n    public closeChartToolPanel(params: CloseChartToolPanelParams) {\n        return this.assertChart('closeChartToolPanel', () => this.chartService.closeChartToolPanel(params.chartId));\n    }\n\n    /** Used to programmatically create charts from a range. */\n    public createRangeChart(params: CreateRangeChartParams): ChartRef | undefined {\n        return this.assertChart('createRangeChart', () => this.chartService.createRangeChart(params));\n    }\n\n    /** Used to programmatically create pivot charts from a grid. */\n    public createPivotChart(params: CreatePivotChartParams): ChartRef | undefined {\n        return this.assertChart('createPivotChart', () => this.chartService.createPivotChart(params));\n    }\n\n    /** Used to programmatically create cross filter charts from a range. */\n    public createCrossFilterChart(params: CreateCrossFilterChartParams): ChartRef | undefined {\n        return this.assertChart('createCrossFilterChart', () => this.chartService.createCrossFilterChart(params));\n    }\n\n    /** Used to programmatically update a chart. */\n    public updateChart(params: UpdateChartParams): void {\n        return this.assertChart('updateChart', () => this.chartService.updateChart(params));\n    }\n\n    /** Restores a chart using the `ChartModel` that was previously obtained from `getChartModels()`. */\n    public restoreChart(chartModel: ChartModel, chartContainer?: HTMLElement): ChartRef | undefined {\n        return this.assertChart('restoreChart', () => this.chartService.restoreChart(chartModel, chartContainer));\n    }\n\n    private assertClipboard<T>(methodName: string, func: () => T): void {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api' + methodName, this.context.getGridId())) {\n            func();\n        }\n    }\n    /** Copies data to clipboard by following the same rules as pressing Ctrl+C. */\n    public copyToClipboard(params?: IClipboardCopyParams) {\n        this.assertClipboard('copyToClipboard', () => this.clipboardService.copyToClipboard(params));\n    }\n\n    /** Cuts data to clipboard by following the same rules as pressing Ctrl+X. */\n    public cutToClipboard(params?: IClipboardCopyParams) {\n        this.assertClipboard('cutToClipboard', () => this.clipboardService.cutToClipboard(params));\n    }\n\n    /** Copies the selected rows to the clipboard. */\n    public copySelectedRowsToClipboard(params?: IClipboardCopyRowsParams): void {\n        this.assertClipboard('copySelectedRowsToClipboard', () => this.clipboardService.copySelectedRowsToClipboard(params));\n    }\n\n    /** Copies the selected ranges to the clipboard. */\n    public copySelectedRangeToClipboard(params?: IClipboardCopyParams): void {\n        this.assertClipboard('copySelectedRangeToClipboard', () => this.clipboardService.copySelectedRangeToClipboard(params));\n    }\n\n    /** Copies the selected range down, similar to `Ctrl + D` in Excel. */\n    public copySelectedRangeDown(): void {\n        this.assertClipboard('copySelectedRangeDown', () => this.clipboardService.copyRangeDown());\n    }\n\n    /** Pastes the data from the Clipboard into the focused cell of the grid. If no grid cell is focused, calling this method has no effect. */\n    public pasteFromClipboard(): void {\n        this.assertClipboard('pasteFromClipboard', () => this.clipboardService.pasteFromClipboard());\n    }\n\n    /** @deprecated v31.1 Use `IHeaderParams.showColumnMenu` within a header component, or `api.showColumnMenu` elsewhere. */\n    public showColumnMenuAfterButtonClick(colKey: string | Column, buttonElement: HTMLElement): void {\n        warnOnce(`'showColumnMenuAfterButtonClick' is deprecated. Use 'IHeaderParams.showColumnMenu' within a header component, or 'api.showColumnMenu' elsewhere.`);\n        // use grid column so works with pivot mode\n        const column = this.columnModel.getGridColumn(colKey)!;\n        this.menuService.showColumnMenu({\n            column,\n            buttonElement,\n            positionBy: 'button'\n        });\n    }\n\n    /** @deprecated v31.1 Use `IHeaderParams.showColumnMenuAfterMouseClick` within a header component, or `api.showColumnMenu` elsewhere. */\n    public showColumnMenuAfterMouseClick(colKey: string | Column, mouseEvent: MouseEvent | Touch): void {\n        warnOnce(`'showColumnMenuAfterMouseClick' is deprecated. Use 'IHeaderParams.showColumnMenuAfterMouseClick' within a header component, or 'api.showColumnMenu' elsewhere.`);\n        // use grid column so works with pivot mode\n        let column = this.columnModel.getGridColumn(colKey);\n        if (!column) {\n            column = this.columnModel.getPrimaryColumn(colKey);\n        }\n        if (!column) {\n            console.error(`AG Grid: column '${colKey}' not found`);\n            return;\n        }\n        this.menuService.showColumnMenu({\n            column,\n            mouseEvent,\n            positionBy: 'mouse'\n        });\n    }\n\n    /** Show the column chooser. */\n    public showColumnChooser(params?: ColumnChooserParams): void {\n        this.menuService.showColumnChooser({ chooserParams: params });\n    }\n\n    /** Show the filter for the provided column. */\n    public showColumnFilter(colKey: string | Column): void {\n        const column = this.columnModel.getGridColumn(colKey);\n        if (!column) {\n            console.error(`AG Grid: column '${colKey}' not found`);\n            return;\n        }\n        this.menuService.showFilterMenu({\n            column,\n            containerType: 'columnFilter',\n            positionBy: 'auto'\n        });\n    }\n\n    /** Show the column menu for the provided column. */\n    public showColumnMenu(colKey: string | Column): void {\n        const column = this.columnModel.getGridColumn(colKey);\n        if (!column) {\n            console.error(`AG Grid: column '${colKey}' not found`);\n            return;\n        }\n        this.menuService.showColumnMenu({\n            column,\n            positionBy: 'auto'\n        });\n    }\n\n    /** Hides any visible context menu or column menu. */\n    public hidePopupMenu(): void {\n        this.menuService.hidePopupMenu();\n    }\n\n    /** Hide the column chooser if visible. */\n    public hideColumnChooser(): void {\n        this.menuService.hideColumnChooser();\n    }\n\n    /** Navigates the grid focus to the next cell, as if tabbing. */\n    public tabToNextCell(event?: KeyboardEvent): boolean {\n        return this.navigationService.tabToNextCell(false, event);\n    }\n\n    /** Navigates the grid focus to the previous cell, as if shift-tabbing. */\n    public tabToPreviousCell(event?: KeyboardEvent): boolean {\n        return this.navigationService.tabToNextCell(true, event);\n    }\n\n    /** Returns the list of active cell renderer instances. */\n    public getCellRendererInstances(params: GetCellRendererInstancesParams<TData> = {}): ICellRenderer[] {\n        const res = this.rowRenderer.getCellRendererInstances(params);\n        const unwrapped = res.map(unwrapUserComp);\n        return unwrapped;\n    }\n\n    /** Returns the list of active cell editor instances. Optionally provide parameters to restrict to certain columns / row nodes. */\n    public getCellEditorInstances(params: GetCellEditorInstancesParams<TData> = {}): ICellEditor[] {\n        const res = this.rowRenderer.getCellEditorInstances(params);\n        const unwrapped = res.map(unwrapUserComp);\n        return unwrapped;\n    }\n\n    /** If the grid is editing, returns back details of the editing cell(s). */\n    public getEditingCells(): CellPosition[] {\n        return this.rowRenderer.getEditingCells();\n    }\n\n    /** If a cell is editing, it stops the editing. Pass `true` if you want to cancel the editing (i.e. don't accept changes). */\n    public stopEditing(cancel: boolean = false): void {\n        this.rowRenderer.stopEditing(cancel);\n    }\n\n    /** Start editing the provided cell. If another cell is editing, the editing will be stopped in that other cell. */\n    public startEditingCell(params: StartEditingCellParams): void {\n        const column = this.columnModel.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(`AG Grid: no column found for ${params.colKey}`);\n            return;\n        }\n        const cellPosition: CellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned || null,\n            column: column\n        };\n        const notPinned = params.rowPinned == null;\n        if (notPinned) {\n            this.ensureIndexVisible(params.rowIndex);\n        }\n\n        this.ensureColumnVisible(params.colKey);\n\n        const cell = this.navigationService.getCellByPosition(cellPosition);\n        if (!cell) { return; }\n        if (!this.focusService.isCellFocused(cellPosition)) {\n            this.focusService.setFocusedCell(cellPosition);\n        }\n        cell.startRowOrCellEdit(params.key);\n    }\n\n    /** @deprecated v31.1 addAggFunc(key, func) is  deprecated, please use addAggFuncs({ key: func }) instead. */\n    public addAggFunc(key: string, aggFunc: IAggFunc): void {\n        this.logDeprecation('v31.1', 'addAggFunc(key, func)', 'addAggFuncs({ key: func })');\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs({ key: aggFunc });\n        }\n    }\n\n    /** Add aggregations function with the specified keys. */\n    public addAggFuncs(aggFuncs: { [key: string]: IAggFunc; }): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    }\n\n    /** Clears all aggregation functions (including those provided by the grid). */\n    public clearAggFuncs(): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    }\n\n    /** Apply transactions to the server side row model. */\n    public applyServerSideTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult | undefined {\n        if (!this.serverSideTransactionManager) {\n            this.logMissingRowModel('applyServerSideTransaction', 'serverSide');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransaction(transaction);\n    }\n\n    /** Batch apply transactions to the server side row model. */\n    public applyServerSideTransactionAsync(transaction: ServerSideTransaction, callback?: (res: ServerSideTransactionResult) => void): void {\n        if (!this.serverSideTransactionManager) {\n            this.logMissingRowModel('applyServerSideTransactionAsync', 'serverSide');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);\n    }\n\n    /**\n     * Applies row data to a server side store.\n     * New rows will overwrite rows at the same index in the same way as if provided by a datasource success callback.\n    */\n    public applyServerSideRowData(params: { successParams: LoadSuccessParams, route?: string[], startRow?: number }) {\n        const startRow = params.startRow ?? 0;\n        const route = params.route ?? [];\n        if (startRow < 0) {\n            console.warn(`AG Grid: invalid value ${params.startRow} for startRow, the value should be >= 0`);\n            return;\n        }\n\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.applyRowData(params.successParams, startRow, route);\n        } else {\n            this.logMissingRowModel('setServerSideDatasource', 'serverSide');\n        }\n    }\n\n    /** Gets all failed server side loads to retry. */\n    public retryServerSideLoads(): void {\n        if (!this.serverSideRowModel) {\n            this.logMissingRowModel('retryServerSideLoads', 'serverSide');\n            return;\n        }\n        this.serverSideRowModel.retryLoads();\n    }\n\n    public flushServerSideAsyncTransactions(): void {\n        if (!this.serverSideTransactionManager) {\n            this.logMissingRowModel('flushServerSideAsyncTransactions', 'serverSide');\n            return;\n        }\n        return this.serverSideTransactionManager.flushAsyncTransactions();\n    }\n\n    /** Update row data. Pass a transaction object with lists for `add`, `remove` and `update`. */\n    public applyTransaction(rowDataTransaction: RowDataTransaction<TData>): RowNodeTransaction<TData> | null | undefined {\n        if (!this.clientSideRowModel) {\n            this.logMissingRowModel('applyTransaction', 'clientSide');\n            return;\n        }\n        return this.frameworkOverrides.wrapIncoming(() => this.clientSideRowModel.updateRowData(rowDataTransaction));\n    }\n\n    /** Same as `applyTransaction` except executes asynchronously for efficiency. */\n    public applyTransactionAsync(rowDataTransaction: RowDataTransaction<TData>, callback?: (res: RowNodeTransaction<TData>) => void): void {\n        if (!this.clientSideRowModel) {\n            this.logMissingRowModel('applyTransactionAsync', 'clientSide');\n            return;\n        }\n        this.frameworkOverrides.wrapIncoming(() => this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback));\n    }\n\n    /** Executes any remaining asynchronous grid transactions, if any are waiting to be executed. */\n    public flushAsyncTransactions(): void {\n        if (!this.clientSideRowModel) {\n            this.logMissingRowModel('flushAsyncTransactions', 'clientSide');\n            return;\n        }\n        this.frameworkOverrides.wrapIncoming(() => this.clientSideRowModel.flushAsyncTransactions());\n    }\n\n    /**\n     * Marks all the currently loaded blocks in the cache for reload.\n     * If you have 10 blocks in the cache, all 10 will be marked for reload.\n     * The old data will continue to be displayed until the new data is loaded.\n     */\n    public refreshInfiniteCache(): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.refreshCache();\n        } else {\n            this.logMissingRowModel('refreshInfiniteCache', 'infinite');\n        }\n    }\n\n    /**\n     * Purges the cache.\n     * The grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2).\n     * The grid will display nothing while the new blocks are loaded.\n     * Use this to immediately remove the old data from the user.\n     */\n    public purgeInfiniteCache(): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.purgeCache();\n        } else {\n            this.logMissingRowModel('purgeInfiniteCache', 'infinite');\n        }\n    }\n\n    /**\n     * Refresh a server-side store level.\n     * If you pass no parameters, then the top level store is refreshed.\n     * To refresh a child level, pass in the string of keys to get to the desired level.\n     * Once the store refresh is complete, the storeRefreshed event is fired.\n     */\n    public refreshServerSide(params?: RefreshServerSideParams): void {\n        if (!this.serverSideRowModel) {\n            this.logMissingRowModel('refreshServerSide', 'serverSide');\n            return;\n        }\n        this.serverSideRowModel.refreshStore(params);\n    }\n\n    /** Returns info on all server side group levels. */\n    public getServerSideGroupLevelState(): ServerSideGroupLevelState[] {\n        if (!this.serverSideRowModel) {\n            this.logMissingRowModel('getServerSideGroupLevelState', 'serverSide')\n            return [];\n        }\n        return this.serverSideRowModel.getStoreState();\n    }\n\n    /** The row count defines how many rows the grid allows scrolling to. */\n    public getInfiniteRowCount(): number | undefined {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getRowCount();\n        } else {\n            this.logMissingRowModel('getInfiniteRowCount', 'infinite')\n        }\n    }\n\n    /** Returns `true` if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll. */\n    public isLastRowIndexKnown(): boolean | undefined {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.isLastRowIndexKnown();\n        } else {\n            this.logMissingRowModel('isLastRowIndexKnown', 'infinite');\n        }\n    }\n\n    /**\n     * Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working.\n     */\n    public getCacheBlockState(): any {\n        return this.rowNodeBlockLoader.getBlockState();\n    }\n\n    /** @deprecated v31.1 `getFirstDisplayedRow` is deprecated. Please use `getFirstDisplayedRowIndex` instead. */\n    public getFirstDisplayedRow(): number {\n        this.logDeprecation('v31.1', 'getFirstDisplayedRow', 'getFirstDisplayedRowIndex');\n        return this.getFirstDisplayedRowIndex();\n    }\n    /** Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer). */\n    public getFirstDisplayedRowIndex(): number {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    }\n\n    /** @deprecated v31.1 `getLastDisplayedRow` is deprecated. Please use `getLastDisplayedRowIndex` instead. */\n    public getLastDisplayedRow(): number {\n        this.logDeprecation('v31.1', 'getLastDisplayedRow', 'getLastDisplayedRowIndex');\n        return this.getLastDisplayedRowIndex();\n    }\n    /** Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer). */\n    public getLastDisplayedRowIndex(): number {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    }\n\n    /** Returns the displayed `RowNode` at the given `index`. */\n    public getDisplayedRowAtIndex(index: number): IRowNode<TData> | undefined {\n        return this.rowModel.getRow(index);\n    }\n\n    /** Returns the total number of displayed rows. */\n    public getDisplayedRowCount(): number {\n        return this.rowModel.getRowCount();\n    }\n\n\n    /**\n     * Returns `true` when the last page is known.\n     * This will always be `true` if you are using the Client-Side Row Model for pagination.\n     * Returns `false` when the last page is not known; this only happens when using Infinite Row Model.\n     */\n    public paginationIsLastPageFound(): boolean {\n        return this.paginationProxy.isLastPageFound();\n    }\n\n    /** Returns how many rows are being shown per page. */\n    public paginationGetPageSize(): number {\n        return this.paginationProxy.getPageSize();\n    }\n\n    /** Returns the 0-based index of the page which is showing. */\n    public paginationGetCurrentPage(): number {\n        return this.paginationProxy.getCurrentPage();\n    }\n\n    /** Returns the total number of pages. Returns `null` if `paginationIsLastPageFound() === false`. */\n    public paginationGetTotalPages(): number {\n        return this.paginationProxy.getTotalPages();\n    }\n\n    /** The total number of rows. Returns `null` if `paginationIsLastPageFound() === false`. */\n    public paginationGetRowCount(): number {\n        return this.paginationProxy.getMasterRowCount();\n    }\n\n    /** Navigates to the next page. */\n    public paginationGoToNextPage(): void {\n        this.paginationProxy.goToNextPage();\n    }\n\n    /** Navigates to the previous page. */\n    public paginationGoToPreviousPage(): void {\n        this.paginationProxy.goToPreviousPage();\n    }\n\n    /** Navigates to the first page. */\n    public paginationGoToFirstPage(): void {\n        this.paginationProxy.goToFirstPage();\n    }\n\n    /** Navigates to the last page. */\n    public paginationGoToLastPage(): void {\n        this.paginationProxy.goToLastPage();\n    }\n\n    /** Goes to the specified page. If the page requested doesn't exist, it will go to the last page. */\n    public paginationGoToPage(page: number): void {\n        this.paginationProxy.goToPage(page);\n    }\n\n    // Methods migrated from old ColumnApi\n\n    /**\n     * Adjusts the size of columns to fit the available horizontal space.\n     *\n     * Note: it is not recommended to call this method rapidly e.g. in response\n     * to window resize events or as the container size is animated. This can\n     * cause the scrollbar to flicker. Use column flex for smoother results.\n     * \n     * If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     **/\n    public sizeColumnsToFit(paramsOrGridWidth?: ISizeColumnsToFitParams | number) {\n        if (typeof paramsOrGridWidth === 'number') {\n            this.columnModel.sizeColumnsToFit(paramsOrGridWidth, 'api');\n        } else {\n            this.gridBodyCtrl.sizeColumnsToFit(paramsOrGridWidth);\n        }\n    }\n\n    /** Call this if you want to open or close a column group. */\n    public setColumnGroupOpened(group: ProvidedColumnGroup | string, newValue: boolean): void { this.columnModel.setColumnGroupOpened(group, newValue, 'api'); }\n    /** Returns the column group with the given name. */\n    public getColumnGroup(name: string, instanceId?: number): ColumnGroup | null { return this.columnModel.getColumnGroup(name, instanceId); }\n    /** Returns the provided column group with the given name. */\n    public getProvidedColumnGroup(name: string): ProvidedColumnGroup | null { return this.columnModel.getProvidedColumnGroup(name); }\n\n    /** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */\n    public getDisplayNameForColumn(column: Column, location: HeaderLocation): string { return this.columnModel.getDisplayNameForColumn(column, location) || ''; }\n    /** Returns the display name for a column group (when grouping columns). */\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: HeaderLocation): string { return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || ''; }\n\n    /** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */\n    public getColumn<TValue = any>(key: string | ColDef<TData, TValue> | Column<TValue>): Column<TValue> | null { return this.columnModel.getPrimaryColumn(key); }\n    /** Returns all the columns, regardless of visible or not. */\n    public getColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n    /** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */\n    public applyColumnState(params: ApplyColumnStateParams): boolean { return this.columnModel.applyColumnState(params, 'api'); }\n    /** Gets the state of the columns. Typically used when saving column state. */\n    public getColumnState(): ColumnState[] { return this.columnModel.getColumnState(); }\n    /** Sets the state back to match the originally provided column definitions. */\n    public resetColumnState(): void { this.columnModel.resetColumnState('api'); }\n    /** Gets the state of the column groups. Typically used when saving column group state. */\n    public getColumnGroupState(): { groupId: string, open: boolean }[] { return this.columnModel.getColumnGroupState(); }\n    /** Sets the state of the column group state from a previous state. */\n    public setColumnGroupState(stateItems: ({ groupId: string, open: boolean })[]): void { this.columnModel.setColumnGroupState(stateItems, 'api'); }\n    /** Sets the state back to match the originally provided column definitions. */\n    public resetColumnGroupState(): void { this.columnModel.resetColumnGroupState('api'); }\n\n    /** Returns `true` if pinning left or right, otherwise `false`. */\n    public isPinning(): boolean { return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight(); }\n    /** Returns `true` if pinning left, otherwise `false`. */\n    public isPinningLeft(): boolean { return this.columnModel.isPinningLeft(); }\n    /** Returns `true` if pinning right, otherwise `false`. */\n    public isPinningRight(): boolean { return this.columnModel.isPinningRight(); }\n    /** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */\n    public getDisplayedColAfter(col: Column): Column | null { return this.columnModel.getDisplayedColAfter(col); }\n    /** Same as `getVisibleColAfter` except gives column to the left. */\n    public getDisplayedColBefore(col: Column): Column | null { return this.columnModel.getDisplayedColBefore(col); }\n    /** @deprecated v31.1 setColumnVisible(key, visible) deprecated, please use setColumnsVisible([key], visible) instead. */\n    public setColumnVisible(key: string | Column, visible: boolean): void { \n        this.logDeprecation('v31.1', 'setColumnVisible(key,visible)', 'setColumnsVisible([key],visible)');\n        this.columnModel.setColumnsVisible([key], visible, 'api'); \n    }\n    /** Sets the visibility of columns. Key can be the column ID or `Column` object. */\n    public setColumnsVisible(keys: (string | Column)[], visible: boolean): void { this.columnModel.setColumnsVisible(keys, visible, 'api'); }\n    /** @deprecated v31.1 setColumnPinned(key, pinned) deprecated, please use setColumnsPinned([key], pinned) instead. */\n    public setColumnPinned(key: string | ColDef | Column, pinned: ColumnPinnedType): void { \n        this.logDeprecation('v31.1', 'setColumnPinned(key,pinned)', 'setColumnsPinned([key],pinned)');\n        this.columnModel.setColumnsPinned([key], pinned, 'api'); \n    }\n    /** Set a column's pinned / unpinned state. Key can be the column ID, field, `ColDef` object or `Column` object. */\n    public setColumnsPinned(keys: (string | ColDef |Column)[], pinned: ColumnPinnedType): void { this.columnModel.setColumnsPinned(keys, pinned, 'api'); }\n\n    /**\n     * Returns all the grid columns, same as `getColumns()`, except\n     *\n     *  a) it has the order of the columns that are presented in the grid\n     *\n     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.\n     */\n    public getAllGridColumns(): Column[] { return this.columnModel.getAllGridColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */\n    public getDisplayedLeftColumns(): Column[] { return this.columnModel.getDisplayedLeftColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */\n    public getDisplayedCenterColumns(): Column[] { return this.columnModel.getDisplayedCenterColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */\n    public getDisplayedRightColumns(): Column[] { return this.columnModel.getDisplayedRightColumns(); }\n    /** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */\n    public getAllDisplayedColumns(): Column[] { return this.columnModel.getAllDisplayedColumns(); }\n    /** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */\n    public getAllDisplayedVirtualColumns(): Column[] { return this.columnModel.getViewportColumns(); }\n\n    /** @deprecated v31.1 moveColumn(key, toIndex) deprecated, please use moveColumns([key], toIndex) instead. */\n    public moveColumn(key: string | ColDef | Column, toIndex: number): void {\n        this.logDeprecation('v31.1', 'moveColumn(key, toIndex)', 'moveColumns([key], toIndex)');\n        this.columnModel.moveColumns([key], toIndex, 'api');\n    }\n    /** Moves the column at `fromIdex` to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */\n    public moveColumnByIndex(fromIndex: number, toIndex: number): void { this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api'); }\n    /** Moves columns to `toIndex`. The columns are first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */\n    public moveColumns(columnsToMoveKeys: (string | ColDef | Column)[], toIndex: number) { this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api'); }\n    /** Move the column to a new position in the row grouping order. */\n    public moveRowGroupColumn(fromIndex: number, toIndex: number): void { this.columnModel.moveRowGroupColumn(fromIndex, toIndex, 'api'); }\n    /** Sets the agg function for a column. `aggFunc` can be one of the built-in aggregations or a custom aggregation by name or direct function. */\n    public setColumnAggFunc(key: string | ColDef | Column, aggFunc: string | IAggFunc | null | undefined): void { this.columnModel.setColumnAggFunc(key, aggFunc, 'api'); }\n    /** @deprecated v31.1 setColumnWidths(key, newWidth) deprecated, please use setColumnWidths( [{key: newWidth}] ) instead. */\n    public setColumnWidth(key: string | ColDef | Column, newWidth: number, finished: boolean = true, source: ColumnEventType = 'api'): void {\n        this.logDeprecation('v31.1', 'setColumnWidth(col, width)', 'setColumnWidths([{key: col, newWidth: width}])');\n        this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);\n    }\n    /** Sets the column widths of the columns provided. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    public setColumnWidths(columnWidths: { key: string | ColDef | Column, newWidth: number }[], finished: boolean = true, source: ColumnEventType = 'api'): void {\n        this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n    }\n\n    /** Get the pivot mode. */\n    public isPivotMode(): boolean { return this.columnModel.isPivotMode(); }\n\n    /** Returns the pivot result column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */\n    public getPivotResultColumn<TValue = any>(pivotKeys: string[], valueColKey: string | ColDef<TData, TValue> | Column<TValue>): Column<TValue> | null { return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey); }\n\n    /** Set the value columns to the provided list of columns. */\n    public setValueColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.setValueColumns(colKeys, 'api'); }\n    /** Get a list of the existing value columns. */\n    public getValueColumns(): Column[] { return this.columnModel.getValueColumns(); }\n    /** @deprecated v31.1 removeValueColumn(colKey) deprecated, please use removeValueColumns([colKey]) instead. */\n    public removeValueColumn(colKey: (string | ColDef | Column)): void {\n        this.logDeprecation('v31.1', 'removeValueColumn(colKey)', 'removeValueColumns([colKey])');\n        this.columnModel.removeValueColumns([colKey], 'api'); \n    }\n    /** Remove the given list of columns from the existing set of value columns. */\n    public removeValueColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.removeValueColumns(colKeys, 'api'); }\n    /** @deprecated v31.1 addValueColumn(colKey) deprecated, please use addValueColumns([colKey]) instead. */\n    public addValueColumn(colKey: (string | ColDef | Column)): void {\n        this.logDeprecation('v31.1', 'addValueColumn(colKey)', 'addValueColumns([colKey])');\n        this.columnModel.addValueColumns([colKey], 'api');\n    }\n    /** Add the given list of columns to the existing set of value columns. */\n    public addValueColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.addValueColumns(colKeys, 'api'); }\n\n    /** Set the row group columns. */\n    public setRowGroupColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.setRowGroupColumns(colKeys, 'api'); }\n    /** @deprecated v31.1 removeRowGroupColumn(colKey) deprecated, please use removeRowGroupColumns([colKey]) instead. */\n    public removeRowGroupColumn(colKey: string | ColDef | Column): void {\n        this.logDeprecation('v31.1', 'removeRowGroupColumn(colKey)', 'removeRowGroupColumns([colKey])');\n        this.columnModel.removeRowGroupColumns([colKey], 'api');\n    }\n    /** Remove columns from the row groups. */\n    public removeRowGroupColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.removeRowGroupColumns(colKeys, 'api'); }\n    /** @deprecated v31.1 addRowGroupColumn(colKey) deprecated, please use addRowGroupColumns([colKey]) instead. */\n    public addRowGroupColumn(colKey: string | ColDef | Column): void { \n        this.logDeprecation('v31.1', 'addRowGroupColumn(colKey)', 'addRowGroupColumns([colKey])');\n        this.columnModel.addRowGroupColumns([colKey], 'api');\n    }\n    /** Add columns to the row groups. */\n    public addRowGroupColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.addRowGroupColumns(colKeys, 'api'); }\n    /** Get row group columns. */\n    public getRowGroupColumns(): Column[] { return this.columnModel.getRowGroupColumns(); }\n\n    /** Set the pivot columns. */\n    public setPivotColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.setPivotColumns(colKeys, 'api'); }\n    /** @deprecated v31.1 removePivotColumn(colKey) deprecated, please use removePivotColumns([colKey]) instead. */\n    public removePivotColumn(colKey: string | ColDef | Column): void {\n        this.logDeprecation('v31.1', 'removePivotColumn(colKey)', 'removePivotColumns([colKey])');\n        this.columnModel.removePivotColumns([colKey], 'api');\n    }\n    /** Remove pivot columns. */\n    public removePivotColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.removePivotColumns(colKeys, 'api'); }\n    /** @deprecated v31.1 addPivotColumn(colKey) deprecated, please use addPivotColumns([colKey]) instead. */\n    public addPivotColumn(colKey: string | ColDef | Column): void {\n        this.logDeprecation('v31.1', 'addPivotColumn(colKey)', 'addPivotColumns([colKey])');\n        this.columnModel.addPivotColumns([colKey], 'api');\n    }\n    /** Add pivot columns. */\n    public addPivotColumns(colKeys: (string | ColDef | Column)[]): void { this.columnModel.addPivotColumns(colKeys, 'api'); }\n    /** Get the pivot columns. */\n    public getPivotColumns(): Column[] { return this.columnModel.getPivotColumns(); }\n\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */\n    public getLeftDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeLeft(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */\n    public getCenterDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeCentre(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */\n    public getRightDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeRight(); }\n    /** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */\n    public getAllDisplayedColumnGroups(): IHeaderColumn[] | null { return this.columnModel.getAllDisplayedTrees(); }\n    /** @deprecated v31.1 autoSizeColumn(key) deprecated, please use autoSizeColumns([colKey]) instead. */\n    public autoSizeColumn(key: string | ColDef | Column, skipHeader?: boolean): void {\n        this.logDeprecation('v31.1', 'autoSizeColumn(key, skipHeader)', 'autoSizeColumns([key], skipHeader)');\n        return this.columnModel.autoSizeColumns({ columns: [key], skipHeader: skipHeader, source: 'api'});\n    }\n\n    /**\n     * Auto-sizes columns based on their contents. If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     */\n    public autoSizeColumns(keys: (string | ColDef | Column)[], skipHeader?: boolean): void {\n        this.columnModel.autoSizeColumns({ columns: keys, skipHeader: skipHeader, source: 'api'});\n    }\n\n    /**\n     * Calls `autoSizeColumns` on all displayed columns. If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     */\n    public autoSizeAllColumns(skipHeader?: boolean): void { this.columnModel.autoSizeAllColumns('api', skipHeader); }\n\n    /** Set the pivot result columns. */\n    public setPivotResultColumns(colDefs: (ColDef | ColGroupDef)[]): void { this.columnModel.setSecondaryColumns(colDefs, 'api'); }\n\n    /** Returns the grid's pivot result columns. */\n    public getPivotResultColumns(): Column[] | null { return this.columnModel.getSecondaryColumns(); }\n\n    /** Get the current state of the grid. Can be used in conjunction with the `initialState` grid option to save and restore grid state. */\n    public getState(): GridState {\n        return this.stateService.getState();\n    }\n\n    /**\n     * Returns the grid option value for a provided key.\n     */\n    public getGridOption<Key extends keyof GridOptions<TData>>(key: Key): GridOptions<TData>[Key] {\n        return this.gos.get(key);\n    }\n\n    /**\n     * Updates a single gridOption to the new value provided. (Cannot be used on `Initial` properties.)\n     * If updating multiple options, it is recommended to instead use `api.updateGridOptions()` which batches update logic.\n     */\n    public setGridOption<Key extends ManagedGridOptionKey>(key: Key, value: GridOptions<TData>[Key]): void {\n        this.updateGridOptions({ [key]: value });\n    }\n\n    /**\n     * Updates the provided subset of gridOptions with the provided values. (Cannot be used on `Initial` properties.)\n     */    \n    public updateGridOptions<TDataUpdate extends TData>(options: ManagedGridOptions<TDataUpdate>): void {\n        // NOTE: The TDataUpdate generic is used to ensure that the update options match the generic passed into the GridApi above as TData.\n        // This is required because if we just use TData directly then Typescript will get into an infinite loop due to callbacks which recursively include the GridApi.\n        this.gos.updateGridOptions({ options });\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __internalUpdateGridOptions(options: GridOptions): void {\n        this.gos.updateGridOptions({ options, source: 'gridOptionsUpdated' });\n    }\n\n    private deprecatedUpdateGridOption<K extends keyof GridOptions & ManagedGridOptionKey>(key: K, value: GridOptions<TData>[K]) {\n        warnOnce(`set${key.charAt(0).toUpperCase()}${key.slice(1, key.length)} is deprecated. Please use 'api.setGridOption('${key}', newValue)' or 'api.updateGridOptions({ ${key}: newValue })' instead.`);\n        this.setGridOption(key, value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the top pinned rows. Call with no rows / undefined to clear top pinned rows. \n     **/\n    public setPivotMode(pivotMode: boolean) {\n        this.deprecatedUpdateGridOption('pivotMode', pivotMode);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the top pinned rows. Call with no rows / undefined to clear top pinned rows. \n     **/\n    public setPinnedTopRowData(rows?: any[]): void {\n        this.deprecatedUpdateGridOption('pinnedTopRowData', rows);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the bottom pinned rows. Call with no rows / undefined to clear bottom pinned rows.\n     * */\n    public setPinnedBottomRowData(rows?: any[]): void {\n        this.deprecatedUpdateGridOption('pinnedBottomRowData', rows);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * DOM element to use as the popup parent for grid popups (context menu, column menu etc).\n     * */\n    public setPopupParent(ePopupParent: HTMLElement): void {\n        this.deprecatedUpdateGridOption('popupParent', ePopupParent);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setSuppressModelUpdateAfterUpdateTransaction(value: boolean) {\n        this.deprecatedUpdateGridOption('suppressModelUpdateAfterUpdateTransaction', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Resets the data type definitions. This will update the columns in the grid.\n     * */\n    public setDataTypeDefinitions(dataTypeDefinitions: {\n        [cellDataType: string]: DataTypeDefinition<TData>;\n    }): void {\n        this.deprecatedUpdateGridOption('dataTypeDefinitions', dataTypeDefinitions);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set whether the grid paginates the data or not.\n     *  - `true` to enable pagination\n     *  - `false` to disable pagination\n     */\n    public setPagination(value: boolean) {\n        this.deprecatedUpdateGridOption('pagination', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `paginationPageSize`, then re-paginates the grid so the changes are applied immediately.\n     * */\n    public paginationSetPageSize(size?: number): void {\n        this.deprecatedUpdateGridOption('paginationPageSize', size);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Resets the side bar to the provided configuration. The parameter is the same as the sideBar grid property. The side bar is re-created from scratch with the new config.\n     * */\n    public setSideBar(def: SideBarDef | string | string[] | boolean): void {\n        this.deprecatedUpdateGridOption('sideBar', def);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setSuppressClipboardPaste(value: boolean): void {\n        this.deprecatedUpdateGridOption('suppressClipboardPaste', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setGroupRemoveSingleChildren(value: boolean) {\n        this.deprecatedUpdateGridOption('groupRemoveSingleChildren', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setGroupRemoveLowestSingleChildren(value: boolean) {\n        this.deprecatedUpdateGridOption('groupRemoveLowestSingleChildren', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setGroupDisplayType(value: RowGroupingDisplayType) {\n        this.deprecatedUpdateGridOption('groupDisplayType', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `groupIncludeFooter` property\n     */\n    public setGroupIncludeFooter(value: boolean | UseGroupFooter<TData>) {\n        this.deprecatedUpdateGridOption('groupIncludeFooter', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `groupIncludeTotalFooter` property\n     */\n    public setGroupIncludeTotalFooter(value: boolean) {\n        this.deprecatedUpdateGridOption('groupIncludeTotalFooter', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setRowClass(className: string | undefined): void {\n        this.deprecatedUpdateGridOption('rowClass', className);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `deltaSort` property\n     * */\n    public setDeltaSort(enable: boolean): void {\n        this.deprecatedUpdateGridOption('deltaSort', enable);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `suppressRowDrag` property.\n     * */\n    public setSuppressRowDrag(value: boolean): void {\n        this.deprecatedUpdateGridOption('suppressRowDrag', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `suppressMoveWhenRowDragging` property.\n     * */\n    public setSuppressMoveWhenRowDragging(value: boolean): void {\n        this.deprecatedUpdateGridOption('suppressMoveWhenRowDragging', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `suppressRowClickSelection` property.\n     * */\n    public setSuppressRowClickSelection(value: boolean): void {\n        this.deprecatedUpdateGridOption('suppressRowClickSelection', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Enable/disable the Advanced Filter\n     * */\n    public setEnableAdvancedFilter(enabled: boolean): void {\n        this.deprecatedUpdateGridOption('enableAdvancedFilter', enabled);\n    }\n\n    /** \n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `includeHiddenColumnsInAdvancedFilter` grid option.\n     * By default hidden columns are excluded from the Advanced Filter.\n     * Set to `true` to include them.\n     */\n    public setIncludeHiddenColumnsInAdvancedFilter(value: boolean): void {\n        this.deprecatedUpdateGridOption('includeHiddenColumnsInAdvancedFilter', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * DOM element to use as the parent for the Advanced Filter, to allow it to appear outside of the grid.\n     * Set to `null` to appear inside the grid.\n     */\n    public setAdvancedFilterParent(advancedFilterParent: HTMLElement | null): void {\n        this.deprecatedUpdateGridOption('advancedFilterParent', advancedFilterParent);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the Advanced Filter Builder parameters.\n     * */\n    public setAdvancedFilterBuilderParams(params?: IAdvancedFilterBuilderParams): void {\n        this.deprecatedUpdateGridOption('advancedFilterBuilderParams', params);\n    }\n\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Pass a Quick Filter text into the grid for filtering.\n     * */\n    public setQuickFilter(newFilter: string): void {\n        warnOnce(`setQuickFilter is deprecated. Please use 'api.setGridOption('quickFilterText', newValue)' or 'api.updateGridOptions({ quickFilterText: newValue })' instead.`);\n        this.gos.updateGridOptions({ options: { quickFilterText: newFilter }});\n    }\n\n    /** \n     * @deprecated As of v30, hidden columns are excluded from the Quick Filter by default. To include hidden columns, use `setIncludeHiddenColumnsInQuickFilter` instead.\n     */\n    public setExcludeHiddenColumnsFromQuickFilter(value: boolean): void {\n        this.deprecatedUpdateGridOption('includeHiddenColumnsInQuickFilter', !value);\n    }\n\n    /** \n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `includeHiddenColumnsInQuickFilter` grid option.\n     * By default hidden columns are excluded from the Quick Filter.\n     * Set to `true` to include them.\n     */\n    public setIncludeHiddenColumnsInQuickFilter(value: boolean): void {\n        this.deprecatedUpdateGridOption('includeHiddenColumnsInQuickFilter', value);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `quickFilterParser` grid option,\n     * which changes how the Quick Filter splits the Quick Filter text into search terms.\n     */\n    public setQuickFilterParser(quickFilterParser?: (quickFilter: string) => string[]): void {\n        this.deprecatedUpdateGridOption('quickFilterParser', quickFilterParser);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `quickFilterMatcher` grid option,\n     * which changes the matching logic for whether a row passes the Quick Filter.\n     */\n    public setQuickFilterMatcher(quickFilterMatcher?: (quickFilterParts: string[], rowQuickFilterAggregateText: string) => boolean): void {\n        this.deprecatedUpdateGridOption('quickFilterMatcher', quickFilterMatcher);\n    }\n\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * If `true`, the horizontal scrollbar will always be present, even if not required. Otherwise, it will only be displayed when necessary.\n     * */\n    public setAlwaysShowHorizontalScroll(show: boolean) {\n        this.deprecatedUpdateGridOption('alwaysShowHorizontalScroll', show);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * If `true`, the vertical scrollbar will always be present, even if not required. Otherwise it will only be displayed when necessary.\n     * */\n    public setAlwaysShowVerticalScroll(show: boolean) {\n        this.deprecatedUpdateGridOption('alwaysShowVerticalScroll', show);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    public setFunctionsReadOnly(readOnly: boolean) {\n        this.deprecatedUpdateGridOption('functionsReadOnly', readOnly);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new column definitions. The grid will redraw all the column headers, and then redraw all of the rows.\n     */\n    public setColumnDefs(colDefs: (ColDef<TData> | ColGroupDef<TData>)[], source: ColumnEventType = \"api\") {\n        warnOnce(`setColumnDefs is deprecated. Please use 'api.setGridOption('columnDefs', newValue)' or 'api.updateGridOptions({ columnDefs: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { columnDefs: colDefs },\n            source: source as any,\n        });\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new auto group column definition. The grid will recreate any auto-group columns if present.\n     * */\n    public setAutoGroupColumnDef(colDef: ColDef<TData>, source: ColumnEventType = \"api\") {\n        warnOnce(`setAutoGroupColumnDef is deprecated. Please use 'api.setGridOption('autoGroupColumnDef', newValue)' or 'api.updateGridOptions({ autoGroupColumnDef: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { autoGroupColumnDef: colDef },\n            source: source as any,\n        });\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new Default Column Definition.\n     * */\n    public setDefaultColDef(colDef: ColDef<TData>, source: ColumnEventType = \"api\") {\n        warnOnce(`setDefaultColDef is deprecated. Please use 'api.setGridOption('defaultColDef', newValue)' or 'api.updateGridOptions({ defaultColDef: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { defaultColDef: colDef },\n            source: source as any,\n        });\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new Column Types.\n     * */\n    public setColumnTypes(columnTypes: { string: ColDef<TData> }, source: ColumnEventType = \"api\") {\n        warnOnce(`setColumnTypes is deprecated. Please use 'api.setGridOption('columnTypes', newValue)' or 'api.updateGridOptions({ columnTypes: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { columnTypes: columnTypes },\n            source: source as any,\n        });\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `treeData` property.\n     * */\n    public setTreeData(newTreeData: boolean): void {\n        this.deprecatedUpdateGridOption('treeData', newTreeData);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set new datasource for Server-Side Row Model.\n     * */\n    public setServerSideDatasource(datasource: IServerSideDatasource) {\n        this.deprecatedUpdateGridOption('serverSideDatasource', datasource);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * \n     * Note this purges all the cached data and reloads all the rows of the grid.\n     * */\n    public setCacheBlockSize(blockSize: number) {\n        this.deprecatedUpdateGridOption('cacheBlockSize', blockSize);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set new datasource for Infinite Row Model.\n     * */\n    public setDatasource(datasource: IDatasource) {\n        this.deprecatedUpdateGridOption('datasource', datasource);\n    }\n\n    /** \n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set new datasource for Viewport Row Model.\n     * */\n    public setViewportDatasource(viewportDatasource: IViewportDatasource) {\n        this.deprecatedUpdateGridOption('viewportDatasource', viewportDatasource);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the row data.\n     * */\n    public setRowData(rowData: TData[]) {\n        this.deprecatedUpdateGridOption('rowData', rowData);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `enableCellTextSelection` property.\n     * */\n    public setEnableCellTextSelection(selectable: boolean) {\n        this.deprecatedUpdateGridOption('enableCellTextSelection', selectable);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing the column label header.\n     * */\n    public setHeaderHeight(headerHeight?: number) {\n        this.deprecatedUpdateGridOption('headerHeight', headerHeight);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Defaults to `normal` if no domLayout provided.\n     */\n    public setDomLayout(domLayout?: DomLayoutType) {\n        this.deprecatedUpdateGridOption('domLayout', domLayout);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the preferred direction for the selection fill handle.\n     * */\n    public setFillHandleDirection(direction: 'x' | 'y' | 'xy') {\n        this.deprecatedUpdateGridOption('fillHandleDirection', direction);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the rows containing header column groups.\n     * */\n    public setGroupHeaderHeight(headerHeight?: number) {\n        this.deprecatedUpdateGridOption('groupHeaderHeight', headerHeight);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing the floating filters.\n     * */\n    public setFloatingFiltersHeight(headerHeight?: number) {\n        this.deprecatedUpdateGridOption('floatingFiltersHeight', headerHeight);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing the columns when in pivot mode.\n     * */\n    public setPivotHeaderHeight(headerHeight?: number) {\n        this.deprecatedUpdateGridOption('pivotHeaderHeight', headerHeight);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing header column groups when in pivot mode.\n     * */\n    public setPivotGroupHeaderHeight(headerHeight?: number) {\n        this.deprecatedUpdateGridOption('pivotGroupHeaderHeight', headerHeight);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setAnimateRows(animateRows: boolean): void {\n        this.deprecatedUpdateGridOption('animateRows', animateRows);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsExternalFilterPresent(isExternalFilterPresentFunc: () => boolean): void {\n        this.deprecatedUpdateGridOption('isExternalFilterPresent', isExternalFilterPresentFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setDoesExternalFilterPass(doesExternalFilterPassFunc: (node: IRowNode) => boolean): void {\n        this.deprecatedUpdateGridOption('doesExternalFilterPass', doesExternalFilterPassFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setNavigateToNextCell(navigateToNextCellFunc: (params: NavigateToNextCellParams) => (CellPosition | null)): void {\n        this.deprecatedUpdateGridOption('navigateToNextCell', navigateToNextCellFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setTabToNextCell(tabToNextCellFunc: (params: TabToNextCellParams) => (CellPosition | null)): void {\n        this.deprecatedUpdateGridOption('tabToNextCell', tabToNextCellFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setTabToNextHeader(tabToNextHeaderFunc: (params: TabToNextHeaderParams) => (HeaderPosition | null)): void {\n        this.deprecatedUpdateGridOption('tabToNextHeader', tabToNextHeaderFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setNavigateToNextHeader(navigateToNextHeaderFunc: (params: NavigateToNextHeaderParams) => (HeaderPosition | null)): void {\n        this.deprecatedUpdateGridOption('navigateToNextHeader', navigateToNextHeaderFunc);\n    }\n\n    public setRowGroupPanelShow(rowGroupPanelShow: 'always' | 'onlyWhenGrouping' | 'never'): void {\n        this.deprecatedUpdateGridOption('rowGroupPanelShow', rowGroupPanelShow);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetGroupRowAgg(getGroupRowAggFunc: (params: GetGroupRowAggParams) => any): void {\n        this.deprecatedUpdateGridOption('getGroupRowAgg', getGroupRowAggFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetBusinessKeyForNode(getBusinessKeyForNodeFunc: (nodes: IRowNode) => string): void {\n        this.deprecatedUpdateGridOption('getBusinessKeyForNode', getBusinessKeyForNodeFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetChildCount(getChildCountFunc: (dataItem: any) => number): void {\n        this.deprecatedUpdateGridOption('getChildCount', getChildCountFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setProcessRowPostCreate(processRowPostCreateFunc: (params: ProcessRowParams) => void): void {\n        this.deprecatedUpdateGridOption('processRowPostCreate', processRowPostCreateFunc);\n    }\n\n    /**\n     * @deprecated v31 `getRowId` is a static property and cannot be updated.\n     *  */\n    public setGetRowId(getRowIdFunc: GetRowIdFunc): void {\n        warnOnce(`getRowId is a static property and can no longer be updated.`);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetRowClass(rowClassFunc: (params: RowClassParams) => string | string[]): void {\n        this.deprecatedUpdateGridOption('getRowClass', rowClassFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsFullWidthRow(isFullWidthRowFunc: (params: IsFullWidthRowParams) => boolean): void {\n        this.deprecatedUpdateGridOption('isFullWidthRow', isFullWidthRowFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsRowSelectable(isRowSelectableFunc: IsRowSelectable): void {\n        this.deprecatedUpdateGridOption('isRowSelectable', isRowSelectableFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsRowMaster(isRowMasterFunc: IsRowMaster): void {\n        this.deprecatedUpdateGridOption('isRowMaster', isRowMasterFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setPostSortRows(postSortRowsFunc: (params: PostSortRowsParams) => void): void {\n        this.deprecatedUpdateGridOption('postSortRows', postSortRowsFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetDocument(getDocumentFunc: () => Document): void {\n        this.deprecatedUpdateGridOption('getDocument', getDocumentFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetContextMenuItems(getContextMenuItemsFunc: GetContextMenuItems): void {\n        this.deprecatedUpdateGridOption('getContextMenuItems', getContextMenuItemsFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetMainMenuItems(getMainMenuItemsFunc: GetMainMenuItems): void {\n        this.deprecatedUpdateGridOption('getMainMenuItems', getMainMenuItemsFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setProcessCellForClipboard(processCellForClipboardFunc: (params: ProcessCellForExportParams) => any): void {\n        this.deprecatedUpdateGridOption('processCellForClipboard', processCellForClipboardFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setSendToClipboard(sendToClipboardFunc: (params: { data: string }) => void): void {\n        this.deprecatedUpdateGridOption('sendToClipboard', sendToClipboardFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setProcessCellFromClipboard(processCellFromClipboardFunc: (params: ProcessCellForExportParams) => any): void {\n        this.deprecatedUpdateGridOption('processCellFromClipboard', processCellFromClipboardFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setProcessPivotResultColDef(processPivotResultColDefFunc: (colDef: ColDef) => void): void {\n        this.deprecatedUpdateGridOption('processPivotResultColDef', processPivotResultColDefFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setProcessPivotResultColGroupDef(processPivotResultColGroupDefFunc: (colDef: ColDef) => void): void {\n        this.deprecatedUpdateGridOption('processPivotResultColGroupDef', processPivotResultColGroupDefFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setPostProcessPopup(postProcessPopupFunc: (params: PostProcessPopupParams) => void): void {\n        this.deprecatedUpdateGridOption('postProcessPopup', postProcessPopupFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setInitialGroupOrderComparator(initialGroupOrderComparatorFunc: (params: InitialGroupOrderComparatorParams) => number): void {\n        this.deprecatedUpdateGridOption('initialGroupOrderComparator', initialGroupOrderComparatorFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetChartToolbarItems(getChartToolbarItemsFunc: GetChartToolbarItems): void {\n        this.deprecatedUpdateGridOption('getChartToolbarItems', getChartToolbarItemsFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setPaginationNumberFormatter(paginationNumberFormatterFunc: (params: PaginationNumberFormatterParams) => string): void {\n        this.deprecatedUpdateGridOption('paginationNumberFormatter', paginationNumberFormatterFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetServerSideGroupLevelParams(getServerSideGroupLevelParamsFunc: (params: GetServerSideGroupLevelParamsParams) => ServerSideGroupLevelParams): void {\n        this.deprecatedUpdateGridOption('getServerSideGroupLevelParams', getServerSideGroupLevelParamsFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsServerSideGroupOpenByDefault(isServerSideGroupOpenByDefaultFunc: (params: IsServerSideGroupOpenByDefaultParams) => boolean): void {\n        this.deprecatedUpdateGridOption('isServerSideGroupOpenByDefault', isServerSideGroupOpenByDefaultFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsApplyServerSideTransaction(isApplyServerSideTransactionFunc: IsApplyServerSideTransaction): void {\n        this.deprecatedUpdateGridOption('isApplyServerSideTransaction', isApplyServerSideTransactionFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setIsServerSideGroup(isServerSideGroupFunc: IsServerSideGroup): void {\n        this.deprecatedUpdateGridOption('isServerSideGroup', isServerSideGroupFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetServerSideGroupKey(getServerSideGroupKeyFunc: GetServerSideGroupKey): void {\n        this.deprecatedUpdateGridOption('getServerSideGroupKey', getServerSideGroupKeyFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetRowStyle(rowStyleFunc: (params: RowClassParams) => {}): void {\n        this.deprecatedUpdateGridOption('getRowStyle', rowStyleFunc);\n    }\n\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    public setGetRowHeight(rowHeightFunc: (params: RowHeightParams) => number): void {\n        this.deprecatedUpdateGridOption('getRowHeight', rowHeightFunc);\n    }\n}\n\n/** Utility type to support adding params to a grid api method. */\ntype StartsWithGridApi = `${keyof GridApi}${string}`;", "import { ColumnModel } from \"../columns/columnModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { GetQuickFilterTextParams } from \"../entities/colDef\";\nimport { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Events } from \"../eventKeys\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { exists } from \"../utils/generic\";\nimport { ValueService } from \"../valueService/valueService\";\n\n@Bean('quickFilterService')\nexport class QuickFilterService extends BeanStub {\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private rowModel: IRowModel;\n\n    public static readonly EVENT_QUICK_FILTER_CHANGED = 'quickFilterChanged';\n    private static readonly QUICK_FILTER_SEPARATOR = '\\n';\n\n    private quickFilter: string | null = null;\n    private quickFilterParts: string[] | null = null;\n    private parser?: (quickFilter: string) => string[];\n    private matcher?: (quickFilterParts: string[], rowQuickFilterAggregateText: string) => boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.resetQuickFilterCache());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.resetQuickFilterCache());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.resetQuickFilterCache());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => {\n            if (!this.gridOptionsService.get('includeHiddenColumnsInQuickFilter')) {\n                this.resetQuickFilterCache();\n            }\n        });\n\n        this.addManagedPropertyListener('quickFilterText', (e) => this.setQuickFilter(e.currentValue));\n        this.addManagedPropertyListener('includeHiddenColumnsInQuickFilter', () => this.onIncludeHiddenColumnsInQuickFilterChanged());\n\n        this.quickFilter = this.parseQuickFilter(this.gridOptionsService.get('quickFilterText'));\n        this.parser = this.gridOptionsService.get('quickFilterParser');\n        this.matcher = this.gridOptionsService.get('quickFilterMatcher');\n        this.setQuickFilterParts();\n\n        this.addManagedPropertyListeners(['quickFilterMatcher', 'quickFilterParser'], () => this.setQuickFilterParserAndMatcher());\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.quickFilter !== null;\n    }\n\n    public doesRowPassQuickFilter(node: RowNode): boolean {\n        const usingCache = this.gridOptionsService.get('cacheQuickFilter');\n\n        if (this.matcher) {\n            return this.doesRowPassQuickFilterMatcher(usingCache, node);\n        }\n\n        // each part must pass, if any fails, then the whole filter fails\n        return this.quickFilterParts!.every(part =>\n            usingCache ? this.doesRowPassQuickFilterCache(node, part) : this.doesRowPassQuickFilterNoCache(node, part)\n        );\n    }\n\n    public resetQuickFilterCache(): void {\n        this.rowModel.forEachNode(node => node.quickFilterAggregateText = null);\n    }\n\n    private setQuickFilterParts(): void {\n        const { quickFilter, parser } = this;\n        if (quickFilter) {\n            this.quickFilterParts = parser ? parser(quickFilter) : quickFilter.split(' ');\n        } else {\n            this.quickFilterParts = null;\n        }\n    }\n\n    private parseQuickFilter(newFilter?: string): string | null {\n        if (!exists(newFilter)) {\n            return null;\n        }\n\n        if (!this.gridOptionsService.isRowModelType('clientSide')) {\n            console.warn('AG Grid - Quick filtering only works with the Client-Side Row Model');\n            return null;\n        }\n\n        return newFilter.toUpperCase();\n    }\n\n    private setQuickFilter(newFilter: string | undefined): void {\n        if (newFilter != null && typeof newFilter !== 'string') {\n            console.warn(`AG Grid - Grid option quickFilterText only supports string inputs, received: ${typeof newFilter}`);\n            return;\n        }\n\n        const parsedFilter = this.parseQuickFilter(newFilter);\n\n        if (this.quickFilter !== parsedFilter) {\n            this.quickFilter = parsedFilter;\n            this.setQuickFilterParts();\n            this.dispatchEvent({ type: QuickFilterService.EVENT_QUICK_FILTER_CHANGED });\n        }\n    }\n\n    private setQuickFilterParserAndMatcher(): void {\n        const parser = this.gridOptionsService.get('quickFilterParser');\n        const matcher = this.gridOptionsService.get('quickFilterMatcher');\n        const hasChanged = parser !== this.parser || matcher !== this.matcher;\n        this.parser = parser;\n        this.matcher = matcher;\n        if (hasChanged) {\n            this.setQuickFilterParts();\n            this.dispatchEvent({ type: QuickFilterService.EVENT_QUICK_FILTER_CHANGED });\n        }\n    }\n\n    private onIncludeHiddenColumnsInQuickFilterChanged(): void {\n        this.columnModel.refreshQuickFilterColumns();\n        this.resetQuickFilterCache();\n        if (this.isQuickFilterPresent()) {\n            this.dispatchEvent({ type: QuickFilterService.EVENT_QUICK_FILTER_CHANGED });\n        }\n    }\n\n    private doesRowPassQuickFilterNoCache(node: RowNode, filterPart: string): boolean {\n        const columns = this.columnModel.getAllColumnsForQuickFilter();\n\n        return columns.some(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            return exists(part) && part.indexOf(filterPart) >= 0;\n        });\n    }\n\n    private doesRowPassQuickFilterCache(node: RowNode, filterPart: string): boolean {\n        this.checkGenerateQuickFilterAggregateText(node);\n\n        return node.quickFilterAggregateText!.indexOf(filterPart) >= 0;\n    }\n\n    private doesRowPassQuickFilterMatcher(usingCache: boolean, node: RowNode): boolean {\n        let quickFilterAggregateText: string;\n        if (usingCache) {\n            this.checkGenerateQuickFilterAggregateText(node);\n            quickFilterAggregateText = node.quickFilterAggregateText!;\n        } else {\n            quickFilterAggregateText = this.getQuickFilterAggregateText(node);\n        }\n        const { quickFilterParts, matcher } = this;\n        return matcher!(quickFilterParts!, quickFilterAggregateText);\n    }\n\n    private checkGenerateQuickFilterAggregateText(node: RowNode): void {\n        if (!node.quickFilterAggregateText) {\n            node.quickFilterAggregateText = this.getQuickFilterAggregateText(node)\n        }\n    }\n\n    private getQuickFilterTextForColumn(column: Column, node: RowNode): string {\n        let value = this.valueService.getValue(column, node, true);\n        const colDef = column.getColDef();\n\n        if (colDef.getQuickFilterText) {\n            const params: GetQuickFilterTextParams = this.gridOptionsService.addGridCommonParams({\n                value,\n                node,\n                data: node.data,\n                column,\n                colDef\n            });\n\n            value = colDef.getQuickFilterText(params);\n        }\n\n        return exists(value) ? value.toString().toUpperCase() : null;\n    }\n\n    private getQuickFilterAggregateText(node: RowNode): string {\n        const stringParts: string[] = [];\n        const columns = this.columnModel.getAllColumnsForQuickFilter();\n\n        columns.forEach(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            if (exists(part)) {\n                stringParts.push(part);\n            }\n        });\n\n        return stringParts.join(QuickFilterService.QUICK_FILTER_SEPARATOR);\n    }\n}", "import { AgPromise, _ } from '../utils';\nimport { ValueService } from '../valueService/valueService';\nimport { ColumnModel } from '../columns/columnModel';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { Autowired, Bean, Optional, PostConstruct } from '../context/context';\nimport { IRowModel } from '../interfaces/iRowModel';\nimport { ColumnEventType, Events, FilterChangedEvent, FilterModifiedEvent, FilterOpenedEvent, FilterDestroyedEvent, AdvancedFilterEnabledChangedEvent, FilterChangedEventSourceType } from '../events';\nimport { IFilterComp, IFilter, IFilterParams, FilterModel } from '../interfaces/iFilter';\nimport { ColDef } from '../entities/colDef';\nimport { UserCompDetails, UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { BeanStub } from '../context/beanStub';\nimport { convertToSet } from '../utils/set';\nimport { exists } from '../utils/generic';\nimport { mergeDeep, cloneObject } from '../utils/object';\nimport { loadTemplate } from '../utils/dom';\nimport { RowRenderer } from '../rendering/rowRenderer';\nimport { WithoutGridCommon } from '../interfaces/iCommon';\nimport { FilterComponent } from '../components/framework/componentTypes';\nimport { IFloatingFilterParams, IFloatingFilterParentCallback } from './floating/floatingFilter';\nimport { unwrapUserComp } from '../gridApi';\nimport { AdvancedFilterModel } from '../interfaces/advancedFilterModel';\nimport { IAdvancedFilterService } from '../interfaces/iAdvancedFilterService';\nimport { warnOnce } from '../utils/function';\nimport { DataTypeService } from '../columns/dataTypeService';\nimport { QuickFilterService } from './quickFilterService';\n\nexport type FilterRequestSource = 'COLUMN_MENU' | 'TOOLBAR' | 'NO_UI';\n\n@Bean('filterManager')\nexport class FilterManager extends BeanStub {\n\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('dataTypeService') private dataTypeService: DataTypeService;\n    @Autowired('quickFilterService') private quickFilterService: QuickFilterService;\n    @Optional('advancedFilterService') private advancedFilterService: IAdvancedFilterService;\n\n    private allColumnFilters = new Map<string, FilterWrapper>();\n    private allColumnListeners = new Map<string, (() => null) | undefined>();\n    private activeAggregateFilters: IFilterComp[] = [];\n    private activeColumnFilters: IFilterComp[] = [];\n\n    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\n    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\n    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\n    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\n    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\n    private processingFilterChange = false;\n\n    // A cached version of gridOptions.isExternalFilterPresent so its not called for every row\n    private externalFilterPresent: boolean;\n\n    private aggFiltering: boolean;\n\n    // when we're waiting for cell data types to be inferred, we need to defer filter model updates\n    private filterModelUpdateQueue: { model: FilterModel | null, source: FilterChangedEventSourceType }[] = [];\n    private columnFilterModelUpdateQueue: { key: string | Column, model: any, resolve: () => void }[] = [];\n    private advancedFilterModelUpdateQueue: (AdvancedFilterModel | null | undefined)[] = [];\n\n    private initialFilterModel: FilterModel;\n\n    @PostConstruct\n    public init(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, () => this.onColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.updateAdvancedFilterColumns());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => this.updateAdvancedFilterColumns());\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, () => this.onNewRowsLoaded('rowDataUpdated'));\n\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\n        this.addManagedPropertyListeners(['isExternalFilterPresent', 'doesExternalFilterPass'], () => {\n            this.onFilterChanged({ source: 'api' });\n        });\n\n        this.updateAggFiltering();\n        this.addManagedPropertyListener('groupAggFiltering', () => {\n            this.updateAggFiltering();\n            this.onFilterChanged();\n        });\n\n        this.addManagedPropertyListener('advancedFilterModel', (event) => this.setAdvancedFilterModel(event.currentValue));\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,\n            ({ enabled }: AdvancedFilterEnabledChangedEvent) => this.onAdvancedFilterEnabledChanged(enabled));\n\n        this.addManagedListener(this.eventService, Events.EVENT_DATA_TYPES_INFERRED, () => this.processFilterModelUpdateQueue());\n        this.addManagedListener(this.quickFilterService, QuickFilterService.EVENT_QUICK_FILTER_CHANGED, () => this.onFilterChanged({ source: 'quickFilter' }));\n\n        this.initialFilterModel = {\n            ...this.gridOptionsService.get('initialState')?.filter?.filterModel ?? {}\n        };\n    }\n\n    private isExternalFilterPresentCallback() {\n        const isFilterPresent = this.gridOptionsService.getCallback('isExternalFilterPresent');\n        if (typeof isFilterPresent === 'function') {\n            return isFilterPresent({});\n        }\n        return false;\n    }\n\n    private doesExternalFilterPass(node: RowNode) {\n        const doesFilterPass = this.gridOptionsService.get('doesExternalFilterPass');\n        if (typeof doesFilterPass === 'function') {\n            return doesFilterPass(node);\n        }\n        return false;\n    }\n\n    public setFilterModel(model: FilterModel | null, source: FilterChangedEventSourceType = 'api'): void {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return;\n        }\n\n        if (this.dataTypeService.isPendingInference()) {\n            this.filterModelUpdateQueue.push({ model, source });\n            return;\n        }\n\n        const allPromises: AgPromise<void>[] = [];\n        const previousModel = this.getFilterModel();\n\n        if (model) {\n            // mark the filters as we set them, so any active filters left over we stop\n            const modelKeys = convertToSet(Object.keys(model));\n\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const newModel = model[colId];\n\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, newModel));\n                modelKeys.delete(colId);\n            });\n\n            // at this point, processedFields contains data for which we don't have a filter working yet\n            modelKeys.forEach(colId => {\n                const column = this.columnModel.getPrimaryColumn(colId) || this.columnModel.getGridColumn(colId);\n\n                if (!column) {\n                    console.warn('AG Grid: setFilterModel() - no column found for colId: ' + colId);\n                    return;\n                }\n\n                if (!column.isFilterAllowed()) {\n                    console.warn('AG Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: ' + colId);\n                    return;\n                }\n\n                const filterWrapper = this.getOrCreateFilterWrapper(column, 'NO_UI');\n                if (!filterWrapper) {\n                    console.warn('AG-Grid: setFilterModel() - unable to fully apply model, unable to create filter for colId: ' + colId);\n                    return;\n                }\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, model[colId]));\n            });\n        } else {\n            this.allColumnFilters.forEach(filterWrapper => {\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, null));\n            });\n        }\n\n        AgPromise.all(allPromises).then(() => {\n            const currentModel = this.getFilterModel();\n\n            const columns: Column[] = [];\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const before = previousModel ? previousModel[colId] : null;\n                const after = currentModel ? currentModel[colId] : null;\n\n                if (!_.jsonEquals(before, after)) {\n                    columns.push(filterWrapper.column);\n                }\n            });\n\n            if (columns.length > 0) {\n                this.onFilterChanged({ columns, source });\n            }\n        });\n    }\n\n    private setModelOnFilterWrapper(filterPromise: AgPromise<IFilterComp>, newModel: any): AgPromise<void> {\n        return new AgPromise<void>(resolve => {\n            filterPromise.then(filter => {\n                if (typeof filter!.setModel !== 'function') {\n                    console.warn('AG Grid: filter missing setModel method, which is needed for setFilterModel');\n                    resolve();\n                }\n\n                (filter!.setModel(newModel) || AgPromise.resolve()).then(() => resolve());\n            });\n        });\n    }\n\n    public getFilterModel(): FilterModel {\n        const result: FilterModel = {};\n\n        this.allColumnFilters.forEach((filterWrapper, key) => {\n            const model = this.getModelFromFilterWrapper(filterWrapper);\n\n            if (exists(model)) {\n                result[key] = model;\n            }\n        });\n\n        return result;\n    }\n\n    private getModelFromFilterWrapper(filterWrapper: FilterWrapper): any {\n        // because user can provide filters, we provide useful error checking and messages\n        const filterPromise = filterWrapper.filterPromise;\n        const filter = filterPromise!.resolveNow(null, promiseFilter => promiseFilter);\n\n        if (filter == null) {\n            // filter still being created. returned initial state if it exists and hasn't been applied yet\n            return this.initialFilterModel[filterWrapper.column.getColId()] ?? null;\n        }\n\n        if (typeof filter.getModel !== 'function') {\n            console.warn('AG Grid: filter API missing getModel method, which is needed for getFilterModel');\n            return null;\n        }\n\n        return filter.getModel();\n    }\n\n    public isColumnFilterPresent(): boolean {\n        return this.activeColumnFilters.length > 0;\n    }\n\n    public isAggregateFilterPresent(): boolean {\n        return !!this.activeAggregateFilters.length;\n    }\n\n    public isExternalFilterPresent(): boolean {\n        return this.externalFilterPresent;\n    }\n\n    public isChildFilterPresent(): boolean {\n        return this.isColumnFilterPresent()\n            || this.isQuickFilterPresent() \n            || this.isExternalFilterPresent()\n            || this.isAdvancedFilterPresent();\n    }\n\n    private isAdvancedFilterPresent(): boolean {\n        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isFilterPresent();\n    }\n\n    private onAdvancedFilterEnabledChanged(enabled: boolean): void {\n        if (enabled) {\n            if (this.allColumnFilters.size) {\n                this.allColumnFilters.forEach(filterWrapper => this.disposeFilterWrapper(filterWrapper, 'advancedFilterEnabled'));\n                this.onFilterChanged({ source: 'advancedFilter' });\n            }\n        } else {\n            if (this.advancedFilterService?.isFilterPresent()) {\n                this.advancedFilterService.setModel(null);\n                this.onFilterChanged({ source: 'advancedFilter' });\n            }\n        }\n    }\n\n    public isAdvancedFilterEnabled(): boolean {\n        return !!this.advancedFilterService?.isEnabled();\n    }\n\n    public isAdvancedFilterHeaderActive(): boolean {\n        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isHeaderActive();\n    }\n\n    private doAggregateFiltersPass(node: RowNode, filterToSkip?: IFilterComp) {\n        return this.doColumnFiltersPass(node, filterToSkip, true);\n    }\n\n    // called by:\n    // 1) onFilterChanged()\n    // 2) onNewRowsLoaded()\n    private updateActiveFilters(): void {\n        this.activeColumnFilters.length = 0;\n        this.activeAggregateFilters.length = 0;\n\n        const isFilterActive = (filter: IFilter | null) => {\n            if (!filter) { return false; } // this never happens, including to avoid compile error\n            if (!filter.isFilterActive) {\n                console.warn('AG Grid: Filter is missing isFilterActive() method');\n                return false;\n            }\n            return filter.isFilterActive();\n        };\n\n        const groupFilterEnabled = !!this.gridOptionsService.getGroupAggFiltering();\n\n        const isAggFilter = (column: Column) => {\n            const isSecondary = !column.isPrimary();\n            // the only filters that can appear on secondary columns are groupAgg filters\n            if (isSecondary) { return true; }\n\n            const isShowingPrimaryColumns = !this.columnModel.isPivotActive();\n            const isValueActive = column.isValueActive();\n\n            // primary columns are only ever groupAgg filters if a) value is active and b) showing primary columns\n            if (!isValueActive || !isShowingPrimaryColumns) { return false; }\n\n            // from here on we know: isPrimary=true, isValueActive=true, isShowingPrimaryColumns=true\n            if (this.columnModel.isPivotMode()) {\n                // primary column is pretending to be a pivot column, ie pivotMode=true, but we are\n                // still showing primary columns\n                return true;\n            }\n            // we are not pivoting, so we groupFilter when it's an agg column\n            return groupFilterEnabled;\n        };\n\n        this.allColumnFilters.forEach(filterWrapper => {\n            if (filterWrapper.filterPromise!.resolveNow(false, isFilterActive)) {\n                const filterComp = filterWrapper.filterPromise!.resolveNow(null, filter => filter);\n                if (isAggFilter(filterWrapper.column)) {\n                    this.activeAggregateFilters.push(filterComp!);\n                } else {\n                    this.activeColumnFilters.push(filterComp!);\n                }\n            }\n        });\n    }\n\n    private updateFilterFlagInColumns(source: ColumnEventType, additionalEventAttributes?: any): void {\n        this.allColumnFilters.forEach(filterWrapper => {\n            const isFilterActive = filterWrapper.filterPromise!.resolveNow(false, filter => filter!.isFilterActive());\n\n            filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);\n        });\n    }\n\n    public isAnyFilterPresent(): boolean {\n        return this.isQuickFilterPresent() || this.isColumnFilterPresent() || this.isAggregateFilterPresent() || this.isExternalFilterPresent() || this.isAdvancedFilterPresent();\n    }\n\n    private doColumnFiltersPass(node: RowNode, filterToSkip?: IFilterComp, targetAggregates?: boolean): boolean {\n        const { data, aggData } = node;\n\n        const targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;\n        const targetedData = targetAggregates ? aggData : data;\n        for (let i = 0; i < targetedFilters.length; i++) {\n            const filter = targetedFilters[i];\n\n            if (filter == null || filter === filterToSkip) { continue; }\n\n            if (typeof filter.doesFilterPass !== 'function') {\n                // because users can do custom filters, give nice error message\n                throw new Error('Filter is missing method doesFilterPass');\n            }\n\n            if (!filter.doesFilterPass({ node, data: targetedData })) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public resetQuickFilterCache(): void {\n        this.quickFilterService.resetQuickFilterCache();\n    }\n\n    private refreshFiltersForAggregations() {\n        const isAggFiltering = this.gridOptionsService.getGroupAggFiltering();\n        if (isAggFiltering) {\n            this.onFilterChanged();\n        }\n    }\n\n    // sometimes (especially in React) the filter can call onFilterChanged when we are in the middle\n    // of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.\n    // this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)\n    // which results in React State getting applied in the main application, triggering a useEffect() to\n    // be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was\n    // getting it's useEffect() triggered in this way.\n    public callOnFilterChangedOutsideRenderCycle(params: {\n        source?: FilterChangedEventSourceType,\n        filterInstance?: IFilterComp,\n        additionalEventAttributes?: any,\n        columns?: Column[],\n    }): void {\n        const action = () => this.onFilterChanged(params);\n        if (this.rowRenderer.isRefreshInProgress()) {\n            setTimeout(action, 0);\n        } else {\n            action();\n        }\n    }\n\n    public onFilterChanged(params: {\n        source?: FilterChangedEventSourceType,\n        filterInstance?: IFilterComp,\n        additionalEventAttributes?: any,\n        columns?: Column[],\n    } = {}): void {\n        const { source, filterInstance, additionalEventAttributes, columns } = params;\n\n        this.updateDependantFilters();\n        this.updateActiveFilters();\n        this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes);\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\n\n        this.allColumnFilters.forEach(filterWrapper => {\n            if (!filterWrapper.filterPromise) { return; }\n            filterWrapper.filterPromise.then(filter => {\n                if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {\n                    filter!.onAnyFilterChanged();\n                }\n            });\n        });\n\n        const filterChangedEvent: WithoutGridCommon<FilterChangedEvent> = {\n            source,\n            type: Events.EVENT_FILTER_CHANGED,\n            columns: columns || [],\n        };\n\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n\n        // because internal events are not async in ag-grid, when the dispatchEvent\n        // method comes back, we know all listeners have finished executing.\n        this.processingFilterChange = true;\n\n        this.eventService.dispatchEvent(filterChangedEvent);\n\n        this.processingFilterChange = false;\n    }\n\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\n        // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing\n        // changes when filtering\n        const allowShowChangeAfterFilter = this.gridOptionsService.get('allowShowChangeAfterFilter') ?? false;\n        return !allowShowChangeAfterFilter && this.processingFilterChange;\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.quickFilterService.isQuickFilterPresent();\n    }\n\n    private updateAggFiltering(): void {\n        this.aggFiltering = !!this.gridOptionsService.getGroupAggFiltering();\n    }\n\n    public isAggregateQuickFilterPresent(): boolean {\n        return this.isQuickFilterPresent() && (this.aggFiltering || this.columnModel.isPivotMode());\n    }\n\n    private isNonAggregateQuickFilterPresent(): boolean {\n        return this.isQuickFilterPresent() && !(this.aggFiltering || this.columnModel.isPivotMode());\n    }\n\n    public doesRowPassOtherFilters(filterToSkip: IFilterComp, node: any): boolean {\n        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });\n    }\n\n    public doesRowPassAggregateFilters(params: {\n        rowNode: RowNode;\n        filterInstanceToSkip?: IFilterComp;\n    }): boolean {\n        // check quick filter\n        if (this.isAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {\n            return false;\n        }\n\n        if (this.isAggregateFilterPresent() && !this.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    public doesRowPassFilter(params: {\n        rowNode: RowNode,\n        filterInstanceToSkip?: IFilterComp;\n    }): boolean {\n        // the row must pass ALL of the filters, so if any of them fail,\n        // we return true. that means if a row passes the quick filter,\n        // but fails the column filter, it fails overall\n\n        // first up, check quick filter\n        if (this.isNonAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {\n            return false;\n        }\n\n        // secondly, give the client a chance to reject this row\n        if (this.isExternalFilterPresent() && !this.doesExternalFilterPass(params.rowNode)) {\n            return false;\n        }\n\n        // lastly, check column filter\n        if (this.isColumnFilterPresent() && !this.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)) {\n            return false;\n        }\n\n        if (this.isAdvancedFilterPresent() && !this.advancedFilterService.doesFilterPass(params.rowNode)) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    public onNewRowsLoaded(source: ColumnEventType): void {\n        this.allColumnFilters.forEach(filterWrapper => {\n            filterWrapper.filterPromise!.then(filter => {\n                if (filter!.onNewRowsLoaded) {\n                    filter!.onNewRowsLoaded();\n                }\n            });\n        });\n\n        this.updateFilterFlagInColumns(source, { afterDataChange: true });\n        this.updateActiveFilters();\n    }\n\n    private createValueGetter(column: Column): IFilterParams['valueGetter'] {\n        return ({ node }) => this.valueService.getValue(column, node as RowNode, true);\n    }\n\n    private createGetValue(filterColumn: Column): IFilterParams['getValue'] {\n        return (rowNode, column) => {\n            const columnToUse = column ? this.columnModel.getGridColumn(column) : filterColumn;\n            return columnToUse ? this.valueService.getValue(columnToUse, rowNode, true) : undefined;\n        };\n    }\n\n    public getFilterComponent(column: Column, source: FilterRequestSource, createIfDoesNotExist = true): AgPromise<IFilterComp> | null {\n        if (createIfDoesNotExist) {\n            return this.getOrCreateFilterWrapper(column, source)?.filterPromise || null;\n        }\n\n        const filterWrapper = this.cachedFilter(column);\n\n        return filterWrapper ? filterWrapper.filterPromise : null;\n    }\n\n    public isFilterActive(column: Column): boolean {\n        const filterWrapper = this.cachedFilter(column);\n\n        return !!filterWrapper && filterWrapper.filterPromise!.resolveNow(false, filter => filter!.isFilterActive());\n    }\n\n    public getOrCreateFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper | null {\n        if (!column.isFilterAllowed()) {\n            return null;\n        }\n\n        let filterWrapper = this.cachedFilter(column);\n\n        if (!filterWrapper) {\n            filterWrapper = this.createFilterWrapper(column, source);\n            this.setColumnFilterWrapper(column, filterWrapper);\n        } else if (source !== 'NO_UI') {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    public cachedFilter(column: Column): FilterWrapper | undefined {\n        return this.allColumnFilters.get(column.getColId());\n    }\n\n    private getDefaultFilter(column: Column): string {\n        let defaultFilter;\n        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {\n            defaultFilter = 'agSetColumnFilter';\n        } else {\n            const cellDataType = this.dataTypeService.getBaseDataType(column);\n            if (cellDataType === 'number') {\n                defaultFilter = 'agNumberColumnFilter';\n            } else if (cellDataType === 'date' || cellDataType === 'dateString') {\n                defaultFilter = 'agDateColumnFilter';\n            } else {\n                defaultFilter = 'agTextColumnFilter';\n            }\n        }\n        return defaultFilter;\n    }\n\n    public getDefaultFloatingFilter(column: Column): string {\n        let defaultFloatingFilterType: string;\n        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {\n            defaultFloatingFilterType = 'agSetColumnFloatingFilter';\n        } else {\n            const cellDataType = this.dataTypeService.getBaseDataType(column);\n            if (cellDataType === 'number') {\n                defaultFloatingFilterType = 'agNumberColumnFloatingFilter';\n            } else if (cellDataType === 'date' || cellDataType === 'dateString') {\n                defaultFloatingFilterType = 'agDateColumnFloatingFilter';\n            } else {\n                defaultFloatingFilterType = 'agTextColumnFloatingFilter';\n            }\n        }\n        return defaultFloatingFilterType;\n    }\n\n    private createFilterInstance(column: Column): {\n        filterPromise: (() => (AgPromise<IFilterComp> | null)) | null,\n        compDetails: UserCompDetails | null\n    } {\n        const defaultFilter = this.getDefaultFilter(column);\n\n        const colDef = column.getColDef();\n\n        let filterInstance: IFilterComp;\n\n        const params: IFilterParams = {\n            ...this.createFilterParams(column, colDef),\n            filterModifiedCallback: () => this.filterModifiedCallbackFactory(filterInstance, column)(),\n            filterChangedCallback: (additionalEventAttributes?: any) => this.filterChangedCallbackFactory(filterInstance, column)(additionalEventAttributes),\n            doesRowPassOtherFilter: node => this.doesRowPassOtherFilters(filterInstance, node),\n        };\n\n        const compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);\n        if (!compDetails) { return { filterPromise: null, compDetails: null }; }\n        return {\n            filterPromise: () => {\n                const filterPromise = compDetails.newAgStackInstance();\n                if (filterPromise) {\n                    filterPromise.then(r => filterInstance = r!);\n                }\n                return filterPromise;\n            },\n            compDetails\n        };\n    }\n\n    public createFilterParams(column: Column, colDef: ColDef): IFilterParams {\n        const params: IFilterParams = this.gridOptionsService.addGridCommonParams({\n            column,\n            colDef: cloneObject(colDef),\n            rowModel: this.rowModel,\n            filterChangedCallback: () => { },\n            filterModifiedCallback: () => { },\n            valueGetter: this.createValueGetter(column),\n            getValue: this.createGetValue(column),\n            doesRowPassOtherFilter: () => true,\n        });\n\n        return params;\n    }\n\n    private createFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper {\n        const filterWrapper: FilterWrapper = {\n            column: column,\n            filterPromise: null,\n            compiledElement: null,\n            guiPromise: AgPromise.resolve(null),\n            compDetails: null\n        };\n\n        const { filterPromise, compDetails } = this.createFilterInstance(column);\n        filterWrapper.filterPromise = filterPromise?.() ?? null;\n        filterWrapper.compDetails = compDetails;\n\n        if (filterPromise) {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    private putIntoGui(filterWrapper: FilterWrapper, source: FilterRequestSource): void {\n        const eFilterGui = document.createElement('div');\n\n        eFilterGui.className = 'ag-filter';\n\n        filterWrapper.guiPromise = new AgPromise<HTMLElement>(resolve => {\n            filterWrapper.filterPromise!.then(filter => {\n                let guiFromFilter = filter!.getGui();\n\n                if (!exists(guiFromFilter)) {\n                    console.warn(`AG Grid: getGui method from filter returned ${guiFromFilter}, it should be a DOM element or an HTML template string.`);\n                }\n\n                // for backwards compatibility with Angular 1 - we\n                // used to allow providing back HTML from getGui().\n                // once we move away from supporting Angular 1\n                // directly, we can change this.\n                if (typeof guiFromFilter === 'string') {\n                    guiFromFilter = loadTemplate(guiFromFilter as string);\n                }\n\n                eFilterGui.appendChild(guiFromFilter);\n                resolve(eFilterGui);\n                const event: WithoutGridCommon<FilterOpenedEvent> = {\n                    type: Events.EVENT_FILTER_OPENED,\n                    column: filterWrapper.column,\n                    source,\n                    eGui: eFilterGui\n                };\n\n                this.eventService.dispatchEvent(event);\n            });\n        });\n    }\n\n    private onColumnsChanged(): void {\n        const columns: Column[] = [];\n\n        this.allColumnFilters.forEach((wrapper, colId) => {\n            let currentColumn: Column | null;\n            if (wrapper.column.isPrimary()) {\n                currentColumn = this.columnModel.getPrimaryColumn(colId);\n            } else {\n                currentColumn = this.columnModel.getGridColumn(colId);\n            }\n            if (currentColumn) { return; }\n\n            columns.push(wrapper.column);\n            this.disposeFilterWrapper(wrapper, 'columnChanged');\n            this.disposeColumnListener(colId);\n        });\n\n        if (columns.length > 0) {\n            // When a filter changes as a side effect of a column changes,\n            // we report 'api' as the source, so that the client can distinguish\n            this.onFilterChanged({ columns, source: 'api' });\n        } else {\n            // onFilterChanged does this already\n            this.updateDependantFilters();\n        }\n    }\n\n    private updateDependantFilters(): void {\n        // Group column filters can be dependant on underlying column filters, but don't normally get created until they're used for the first time.\n        // Instead, create them by default when any filter changes.\n        const groupColumns = this.columnModel.getGroupAutoColumns();\n        groupColumns?.forEach(groupColumn => {\n            if (groupColumn.getColDef().filter === 'agGroupColumnFilter') {\n                this.getOrCreateFilterWrapper(groupColumn, 'NO_UI');\n            }\n        });\n    }\n\n    // for group filters, can change dynamically whether they are allowed or not\n    public isFilterAllowed(column: Column): boolean {\n        if (this.isAdvancedFilterEnabled()) {\n            return false;\n        }\n        const isFilterAllowed = column.isFilterAllowed();\n        if (!isFilterAllowed) {\n            return false;\n        }\n        const filterWrapper = this.allColumnFilters.get(column.getColId());\n        return filterWrapper?.filterPromise?.resolveNow(\n            true,\n            // defer to filter component isFilterAllowed if it exists\n            filter => (typeof (filter as any)?.isFilterAllowed === 'function')\n                ? (filter as any)?.isFilterAllowed()\n                : true\n        ) ?? true;\n    }\n\n    public getFloatingFilterCompDetails(column: Column, showParentFilter: () => void): UserCompDetails | undefined {\n        const parentFilterInstance = (callback: IFloatingFilterParentCallback<IFilter>) => {\n            const filterComponent = this.getFilterComponent(column, 'NO_UI');\n\n            if (filterComponent == null) { return; }\n\n            filterComponent.then(instance => {\n                callback(unwrapUserComp(instance!));\n            });\n        };\n\n        const colDef = column.getColDef();\n        const filterParams = {\n            ...this.createFilterParams(column, colDef),\n            filterChangedCallback: () => parentFilterInstance(filterInstance => this.filterChangedCallbackFactory(filterInstance as IFilterComp, column)()),\n        }\n        const finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, FilterComponent, filterParams);\n\n        let defaultFloatingFilterType = this.userComponentFactory.getDefaultFloatingFilterType(colDef, () => this.getDefaultFloatingFilter(column));\n\n        if (defaultFloatingFilterType == null) {\n            defaultFloatingFilterType = 'agReadOnlyFloatingFilter';\n        }\n\n        const params: WithoutGridCommon<IFloatingFilterParams<IFilter>> = {\n            column: column,\n            filterParams: finalFilterParams,\n            currentParentModel: () => this.getCurrentFloatingFilterParentModel(column),\n            parentFilterInstance,\n            showParentFilter,\n            suppressFilterButton: false // This one might be overridden from the colDef\n        };\n\n        return this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);\n    }\n\n    public getCurrentFloatingFilterParentModel(column: Column): any {\n        const filterComponent = this.getFilterComponent(column, 'NO_UI', false);\n\n        return filterComponent ? filterComponent.resolveNow(null, filter => filter && filter.getModel()) : null;\n    }\n\n    // destroys the filter, so it no longer takes part\n    public destroyFilter(column: Column, source: 'api' | 'columnChanged' | 'paramsUpdated' = 'api'): void {\n        const colId = column.getColId();\n        const filterWrapper = this.allColumnFilters.get(colId);\n\n        this.disposeColumnListener(colId);\n\n        delete this.initialFilterModel[colId];\n\n        if (filterWrapper) {\n            this.disposeFilterWrapper(filterWrapper, source);\n            this.onFilterChanged({\n                columns: [column],\n                source: 'api',\n            });\n        }\n    }\n\n    private disposeColumnListener(colId: string): void {\n        const columnListener = this.allColumnListeners.get(colId);\n\n        if (columnListener) {\n            this.allColumnListeners.delete(colId);\n            columnListener();\n        }\n    }\n\n    private disposeFilterWrapper(filterWrapper: FilterWrapper, source: 'api' | 'columnChanged' | 'gridDestroyed' | 'advancedFilterEnabled' | 'paramsUpdated'): void {\n        filterWrapper.filterPromise!.then(filter => {\n            this.getContext().destroyBean(filter);\n\n            filterWrapper.column.setFilterActive(false, 'filterDestroyed');\n\n            this.allColumnFilters.delete(filterWrapper.column.getColId());\n\n            const event: WithoutGridCommon<FilterDestroyedEvent> = {\n                type: Events.EVENT_FILTER_DESTROYED,\n                source,\n                column: filterWrapper.column,\n            };\n            this.eventService.dispatchEvent(event);\n        });\n    }\n\n    private filterModifiedCallbackFactory(filter: IFilterComp<any>, column: Column<any>) {\n        return () => {\n            const event: WithoutGridCommon<FilterModifiedEvent> = {\n                type: Events.EVENT_FILTER_MODIFIED,\n                column,\n                filterInstance: filter,\n            };\n\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private filterChangedCallbackFactory(filter: IFilterComp<any>, column: Column<any>) {\n        return (additionalEventAttributes?: any) => {\n            const source: FilterChangedEventSourceType = additionalEventAttributes?.source ?? 'api';\n            const params = {\n                filter,\n                additionalEventAttributes,\n                columns: [column],\n                source,\n            };\n            this.callOnFilterChangedOutsideRenderCycle(params);\n        };\n    }\n\n    private checkDestroyFilter(colId: string): void {\n        const filterWrapper = this.allColumnFilters.get(colId);\n        if (!filterWrapper) {\n            return;\n        }\n\n        const column = filterWrapper.column;\n        const { compDetails } = column.isFilterAllowed()\n            ? this.createFilterInstance(column)\n            : { compDetails: null };\n\n        // Case when filter component changes\n        if (this.areFilterCompsDifferent(filterWrapper.compDetails, compDetails)) {\n            this.destroyFilter(column, 'paramsUpdated');\n            return;\n        }\n\n        // Case when filter params changes\n        const newFilterParams = column.getColDef().filterParams;\n        // When filter wrapper does not have promise to retrieve FilterComp, destroy\n        if (!filterWrapper.filterPromise) {\n            this.destroyFilter(column, 'paramsUpdated');\n            return;\n        }\n\n        // Otherwise - Check for refresh method before destruction\n        // If refresh() method is implemented - call it and destroy filter if it returns false\n        // Otherwise - do nothing ( filter will not be destroyed - we assume new params are compatible with old ones )\n        filterWrapper.filterPromise.then(filter => {\n            const shouldRefreshFilter = filter?.refresh ? filter.refresh({\n                ...this.createFilterParams(column, column.getColDef()),\n                filterModifiedCallback: this.filterModifiedCallbackFactory(filter, column),\n                filterChangedCallback: this.filterChangedCallbackFactory(filter, column),\n                doesRowPassOtherFilter: node => this.doesRowPassOtherFilters(filter, node),\n                ...newFilterParams,\n            }) : true;\n            // framework wrapper always implements optional methods, but returns null if no underlying method\n            if (shouldRefreshFilter === false) {\n                this.destroyFilter(column, 'paramsUpdated');\n            }\n        });\n    }\n\n    private setColumnFilterWrapper(column: Column, filterWrapper: FilterWrapper): void {\n        const colId = column.getColId();\n        this.allColumnFilters.set(colId, filterWrapper);\n        this.allColumnListeners.set(\n            colId,\n            this.addManagedListener(\n                column,\n                Column.EVENT_COL_DEF_CHANGED,\n                () => this.checkDestroyFilter(colId),\n            ),\n        );\n    }\n\n    public areFilterCompsDifferent(oldCompDetails: UserCompDetails | null, newCompDetails: UserCompDetails | null): boolean {\n        if (!newCompDetails || !oldCompDetails) {\n            return true;\n        }\n        const { componentClass: oldComponentClass } = oldCompDetails;\n        const { componentClass: newComponentClass } = newCompDetails;\n        const isSameComponentClass = oldComponentClass === newComponentClass ||\n            // react hooks returns new wrappers, so check nested render method\n            (oldComponentClass?.render && newComponentClass?.render &&\n                oldComponentClass.render === newComponentClass.render);\n        return !isSameComponentClass;\n    }\n\n    public getAdvancedFilterModel(): AdvancedFilterModel | null {\n        return this.isAdvancedFilterEnabled() ? this.advancedFilterService.getModel() : null;\n    }\n\n    public setAdvancedFilterModel(expression: AdvancedFilterModel | null | undefined): void {\n        if (!this.isAdvancedFilterEnabled()) { return; }\n        if (this.dataTypeService.isPendingInference()) {\n            this.advancedFilterModelUpdateQueue.push(expression);\n            return;\n        }\n        this.advancedFilterService.setModel(expression ?? null);\n        this.onFilterChanged({ source: 'advancedFilter' });\n    }\n\n    public showAdvancedFilterBuilder(source: 'api' | 'ui'): void {\n        if (!this.isAdvancedFilterEnabled()) { return; }\n        this.advancedFilterService.getCtrl().toggleFilterBuilder(source, true);\n    }\n\n    private updateAdvancedFilterColumns(): void {\n        if (!this.isAdvancedFilterEnabled()) { return; }\n        if (this.advancedFilterService.updateValidity()) {\n            this.onFilterChanged({ source: 'advancedFilter' });\n        }\n    }\n\n    public hasFloatingFilters(): boolean {\n        if (this.isAdvancedFilterEnabled()) { return false; }\n        const gridColumns = this.columnModel.getAllGridColumns();\n        return gridColumns.some(col => col.getColDef().floatingFilter);\n    }\n\n    public getFilterInstance<TFilter extends IFilter>(key: string | Column, callback?: (filter: TFilter | null) => void): TFilter | null | undefined {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return undefined;\n        }\n        const res = this.getFilterInstanceImpl(key, instance => {\n            if (!callback) { return; }\n            const unwrapped = unwrapUserComp(instance) as any;\n            callback(unwrapped);\n        });\n        const unwrapped = unwrapUserComp(res);\n        return unwrapped as any;\n    }\n\n    public getColumnFilterInstance<TFilter extends IFilter>(key: string | Column): Promise<TFilter | null | undefined> {\n        return new Promise(resolve => {\n            this.getFilterInstance(key, filter => {\n                resolve(filter as any);\n            })\n        });\n    }\n\n    private getFilterInstanceImpl(key: string | Column, callback: (filter: IFilter) => void): IFilter | null | undefined {\n        const column = this.columnModel.getPrimaryColumn(key);\n\n        if (!column) { return undefined; }\n\n        const filterPromise = this.getFilterComponent(column, 'NO_UI');\n        const currentValue = filterPromise && filterPromise.resolveNow<IFilterComp | null>(null, filterComp => filterComp);\n\n        if (currentValue) {\n            setTimeout(callback, 0, currentValue);\n        } else if (filterPromise) {\n            filterPromise.then(comp => {\n                callback(comp!);\n            });\n        }\n\n        return currentValue;\n    }\n\n    private warnAdvancedFilters(): void {\n        warnOnce('Column Filter API methods have been disabled as Advanced Filters are enabled.');\n    }\n\n    public setupAdvancedFilterHeaderComp(eCompToInsertBefore: HTMLElement): void {\n        this.advancedFilterService?.getCtrl().setupHeaderComp(eCompToInsertBefore);\n    }\n\n    public getHeaderRowCount(): number {\n        return this.isAdvancedFilterHeaderActive() ? 1 : 0;\n    }\n\n    public getHeaderHeight(): number {\n        return this.isAdvancedFilterHeaderActive() ? this.advancedFilterService.getCtrl().getHeaderHeight() : 0;\n    }\n\n    private processFilterModelUpdateQueue(): void {\n        this.filterModelUpdateQueue.forEach(({ model, source }) => this.setFilterModel(model, source));\n        this.filterModelUpdateQueue = [];\n        this.columnFilterModelUpdateQueue.forEach(({ key, model, resolve }) => {\n            this.setColumnFilterModel(key, model).then(() => resolve());\n        });\n        this.columnFilterModelUpdateQueue = [];\n        this.advancedFilterModelUpdateQueue.forEach(model => this.setAdvancedFilterModel(model));\n        this.advancedFilterModelUpdateQueue = [];\n    }\n\n    public getColumnFilterModel(key: string | Column): any {\n        const filterWrapper = this.getFilterWrapper(key);\n        return filterWrapper ? this.getModelFromFilterWrapper(filterWrapper) : null;\n    }\n\n    public setColumnFilterModel(key: string | Column, model: any): Promise<void> {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return Promise.resolve();\n        }\n        if (this.dataTypeService.isPendingInference()) {\n            let resolve: () => void = () => {};\n            const promise = new Promise<void>(res => {\n                resolve = res;\n            });\n            this.columnFilterModelUpdateQueue.push({ key, model, resolve });\n            return promise;\n        }\n\n        const column = this.columnModel.getPrimaryColumn(key);\n        const filterWrapper = column ? this.getOrCreateFilterWrapper(column, 'NO_UI') : null;\n        const convertPromise = <T>(promise: AgPromise<T>): Promise<T> => {\n            return new Promise(resolve => {\n                promise.then(result => resolve(result!));\n            });\n        };\n        return filterWrapper ? convertPromise(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, model)) : Promise.resolve();\n        \n    }\n\n    private getFilterWrapper(key: string | Column): FilterWrapper | null {\n        const column = this.columnModel.getPrimaryColumn(key);\n        return column ? this.cachedFilter(column) ?? null : null;\n    }\n\n    protected destroy() {\n        super.destroy();\n        this.allColumnFilters.forEach(filterWrapper => this.disposeFilterWrapper(filterWrapper, 'gridDestroyed'));\n        // don't need to destroy the listeners as they are managed listeners\n        this.allColumnListeners.clear();\n    }\n}\n\nexport interface FilterWrapper {\n    compiledElement: any;\n    column: Column;\n    filterPromise: AgPromise<IFilterComp> | null;\n    guiPromise: AgPromise<HTMLElement | null>;\n    compDetails: UserCompDetails | null;\n}\n", "import { Component } from \"../../../widgets/component\";\nimport { AbstractHeaderCellCtrl } from \"./abstractHeaderCellCtrl\";\n\nexport abstract class AbstractHeaderCellComp<T extends AbstractHeaderCellCtrl> extends Component {\n\n    protected ctrl: T;\n\n    constructor(template: string, ctrl: T) {\n        super(template);\n        this.ctrl = ctrl;\n    }\n\n    public getCtrl(): T {\n        return this.ctrl;\n    }\n}", "import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { PostConstruct, PreDestroy } from '../../../context/context';\nimport { IFloatingFilterComp } from '../../../filter/floating/floatingFilter';\nimport { AgPromise } from '../../../utils';\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\nimport { HeaderFilterCellCtrl, IHeaderFilterCellComp } from './headerFilterCellCtrl';\n\nexport class HeaderFilterCellComp extends AbstractHeaderCellComp<HeaderFilterCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-cell ag-floating-filter\" role=\"gridcell\">\n            <div ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\n            <div class=\"ag-floating-filter-button ag-hidden\" ref=\"eButtonWrapper\" role=\"presentation\">\n                <button type=\"button\" class=\"ag-button ag-floating-filter-button-button\" ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\n            </div>\n        </div>`;\n\n    @RefSelector('eFloatingFilterBody') private readonly eFloatingFilterBody: HTMLElement;\n    @RefSelector('eButtonWrapper') private readonly eButtonWrapper: HTMLElement;\n    @RefSelector('eButtonShowMainFilter') private readonly eButtonShowMainFilter: HTMLElement;\n\n    private floatingFilterComp: IFloatingFilterComp | undefined;\n    private compPromise: AgPromise<IFloatingFilterComp> | null;\n\n    constructor(ctrl: HeaderFilterCellCtrl) {\n        super(HeaderFilterCellComp.TEMPLATE, ctrl);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n\n        const compProxy: IHeaderFilterCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveBodyCssClass: (cssClassName, on) => this.eFloatingFilterBody.classList.toggle(cssClassName, on),\n            setButtonWrapperDisplayed: (displayed) => setDisplayed(this.eButtonWrapper, displayed),\n            setCompDetails: compDetails => this.setCompDetails(compDetails),\n            getFloatingFilterComp: () => this.compPromise,\n            setWidth: width => eGui.style.width = width,\n            setMenuIcon: eIcon => this.eButtonShowMainFilter.appendChild(eIcon)\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);\n    }\n\n    private setCompDetails(compDetails?: UserCompDetails | null): void {\n        if (!compDetails) {\n            this.destroyFloatingFilterComp();\n            this.compPromise = null;\n            return;\n        }\n        // because we are providing defaultFloatingFilterType, we know it will never be undefined;\n        this.compPromise = compDetails.newAgStackInstance();\n        this.compPromise.then(comp => this.afterCompCreated(comp));\n    }\n\n    @PreDestroy\n    private destroyFloatingFilterComp(): void {\n        if (this.floatingFilterComp) {\n            this.eFloatingFilterBody.removeChild(this.floatingFilterComp.getGui());\n            this.floatingFilterComp = this.destroyBean(this.floatingFilterComp);\n        }\n    }\n\n    private afterCompCreated(comp: IFloatingFilterComp | null): void {\n        if (!comp) { return; }\n\n        if (!this.isAlive()) {\n            this.destroyBean(comp);\n            return;\n        }\n\n        this.destroyFloatingFilterComp();\n\n        this.floatingFilterComp = comp;\n        this.eFloatingFilterBody.appendChild(comp.getGui());\n\n        if (comp.afterGuiAttached) {\n            comp.afterGuiAttached();\n        }\n    }\n}\n", "import { PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { DomLayoutType } from \"../entities/gridOptions\";\nimport { warnOnce } from \"../utils/function\";\n\nexport interface LayoutView {\n    updateLayoutClasses(layoutClass: string, params: UpdateLayoutClassesParams): void;\n}\n\nexport enum LayoutCssClasses {\n    AUTO_HEIGHT = 'ag-layout-auto-height',\n    NORMAL = 'ag-layout-normal',\n    PRINT = 'ag-layout-print'\n}\n\nexport interface UpdateLayoutClassesParams {\n    autoHeight: boolean;\n    normal: boolean;\n    print: boolean;\n}\n\nexport class LayoutFeature extends BeanStub {\n    private view: LayoutView;\n\n    constructor(view: LayoutView) {\n        super();\n        this.view = view;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedPropertyListener('domLayout', this.updateLayoutClasses.bind(this));\n        this.updateLayoutClasses();\n    }\n\n    private updateLayoutClasses(): void {\n        const domLayout = this.getDomLayout();\n        const params = {\n            autoHeight: domLayout === 'autoHeight',\n            normal: domLayout === 'normal',\n            print: domLayout === 'print'\n        };\n        const cssClass = params.autoHeight ? LayoutCssClasses.AUTO_HEIGHT :\n                            params.print ? LayoutCssClasses.PRINT : LayoutCssClasses.NORMAL;\n        this.view.updateLayoutClasses(cssClass, params);\n    }\n\n    // returns either 'print', 'autoHeight' or 'normal' (normal is the default)\n    private getDomLayout(): DomLayoutType {\n        const domLayout: DomLayoutType = this.gridOptionsService.get('domLayout') ?? 'normal';\n        const validLayouts: DomLayoutType[] = ['normal', 'print', 'autoHeight'];\n\n        if (validLayouts.indexOf(domLayout) === -1) {\n            warnOnce(`${domLayout} is not valid for DOM Layout, valid values are 'normal', 'autoHeight', 'print'.`);\n            return 'normal';\n        }\n\n        return domLayout;\n    }\n\n}", "import { Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Events } from \"../eventKeys\";\nimport { debounce } from \"../utils/function\";\nimport { BodyScrollEvent, BodyScrollEndEvent } from \"../events\";\nimport { isIOSUserAgent } from \"../utils/browser\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowContainerHeightService } from \"../rendering/rowContainerHeightService\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { RowContainerCtrl } from \"./rowContainer/rowContainerCtrl\";\nimport { Column } from \"../entities/column\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { IRowNode, VerticalScrollPosition } from \"../interfaces/iRowNode\";\nimport { getInnerHeight, getScrollLeft, isRtlNegativeScroll, setScrollLeft } from \"../utils/dom\";\n\nenum ScrollDirection {\n    Vertical,\n    Horizontal\n};\n\nenum ScrollSource {\n    Container,\n    FakeContainer\n};\n\nexport class GridBodyScrollFeature extends BeanStub {\n\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('rowContainerHeightService') private heightScaler: RowContainerHeightService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private enableRtl: boolean;\n\n    private lastScrollSource: (number | null)[] = [null, null];\n\n    private eBodyViewport: HTMLElement;\n\n    private scrollLeft = -1;\n    private nextScrollTop = -1;\n    private scrollTop = -1;\n    \n    // Used to provide approximate values of scrollTop and offsetHeight\n    // without forcing the browser to recalculate styles.\n    private lastOffsetHeight = -1;\n    private lastScrollTop = -1;\n\n    private scrollTimer: number | undefined;\n\n    private readonly resetLastHScrollDebounced: () => void;\n    private readonly resetLastVScrollDebounced: () => void;\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n\n    constructor(eBodyViewport: HTMLElement) {\n        super();\n        this.eBodyViewport = eBodyViewport;\n        this.resetLastHScrollDebounced = debounce(() => this.lastScrollSource[ScrollDirection.Horizontal] = null, 500);\n        this.resetLastVScrollDebounced = debounce(() => this.lastScrollSource[ScrollDirection.Vertical] = null, 500);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsService.get('enableRtl');\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCtrl = p.centerRowContainerCtrl;\n            this.onDisplayedColumnsWidthChanged();\n            this.addScrollListener();\n        });\n    }\n\n    private addScrollListener() {\n        const fakeHScroll = this.ctrlsService.getFakeHScrollComp();\n        const fakeVScroll = this.ctrlsService.getFakeVScrollComp();\n\n        this.addManagedListener(this.centerRowContainerCtrl.getViewportElement(), 'scroll', this.onHScroll.bind(this));\n        fakeHScroll.onScrollCallback(this.onFakeHScroll.bind(this));\n\n        const isDebounce = this.gridOptionsService.get('debounceVerticalScrollbar');\n\n        const onVScroll = isDebounce ?\n            debounce(this.onVScroll.bind(this), 100) : this.onVScroll.bind(this);\n        const onFakeVScroll = isDebounce ?\n            debounce(this.onFakeVScroll.bind(this), 100) : this.onFakeVScroll.bind(this);\n\n        this.addManagedListener(this.eBodyViewport, 'scroll', onVScroll);\n        fakeVScroll.onScrollCallback(onFakeVScroll);\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        if (this.enableRtl) {\n            // because RTL is all backwards, a change in the width of the row\n            // can cause a change in the scroll position, without a scroll event,\n            // because the scroll position in RTL is a function that depends on\n            // the width. to be convinced of this, take out this line, enable RTL,\n            // scroll all the way to the left and then resize a column\n            this.horizontallyScrollHeaderCenterAndFloatingCenter();\n        }\n    }\n\n    public horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft?: number): void {\n        // when doing RTL, this method gets called once prematurely\n        const notYetInitialised = this.centerRowContainerCtrl == null;\n        if (notYetInitialised) { return; }\n\n        if (scrollLeft === undefined) {\n            scrollLeft = this.centerRowContainerCtrl.getCenterViewportScrollLeft();\n        }\n\n        const offset = this.enableRtl ? scrollLeft : -scrollLeft;\n        const topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();\n        const stickyTopCenterContainer = this.ctrlsService.getStickyTopCenterRowContainerCtrl();\n        const bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();\n        const fakeHScroll = this.ctrlsService.getFakeHScrollComp();\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n\n        centerHeaderContainer.setHorizontalScroll(-offset);\n        bottomCenterContainer.setContainerTranslateX(offset);\n        topCenterContainer.setContainerTranslateX(offset);\n        stickyTopCenterContainer.setContainerTranslateX(offset);\n\n        const centerViewport = this.centerRowContainerCtrl.getViewportElement();\n        const isCenterViewportLastHorizontal = this.lastScrollSource[ScrollDirection.Horizontal] === ScrollSource.Container;\n\n        scrollLeft = Math.abs(scrollLeft);\n\n        if (isCenterViewportLastHorizontal) {\n            fakeHScroll.setScrollPosition(scrollLeft);\n        } else {\n            setScrollLeft(centerViewport, scrollLeft, this.enableRtl);\n        }\n    }\n\n    private isControllingScroll(source: ScrollSource, direction: ScrollDirection): boolean {\n        if (this.lastScrollSource[direction] == null) {\n            this.lastScrollSource[direction] = source;\n            return true;\n        }\n\n        return this.lastScrollSource[direction] === source;\n    }\n\n    private onFakeHScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Horizontal)) { return; }\n        this.onHScrollCommon(ScrollSource.FakeContainer);\n    }\n\n    private onHScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Horizontal)) { return; }\n        this.onHScrollCommon(ScrollSource.Container);\n    }\n\n    private onHScrollCommon(source: ScrollSource): void {\n        const centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();\n        const { scrollLeft } = centerContainerViewport;\n\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, scrollLeft, true)) {\n            return;\n        }\n\n        let newScrollLeft: number;\n\n        if (source === ScrollSource.Container) {\n            newScrollLeft = getScrollLeft(centerContainerViewport, this.enableRtl);\n        } else {\n            newScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();\n        }\n\n        // we do Math.round() rather than Math.floor(), to mirror how scroll values are applied.\n        // eg if a scale is applied (ie user has zoomed the browser), then applying scroll=200\n        // could result in 199.88, which then floor(199.88) = 199, however round(199.88) = 200.\n        // initially Math.floor() was used, however this caused (almost) infinite loop with aligned grids,\n        // as the scroll would move 1px at at time bouncing from one grid to the next (eg one grid would cause\n        // scroll to 200px, the next to 199px, then the first back to 198px and so on).\n        this.doHorizontalScroll(Math.round(newScrollLeft));\n        this.resetLastHScrollDebounced();\n    }\n\n    private onFakeVScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Vertical)) { return; }\n        this.onVScrollCommon(ScrollSource.FakeContainer);\n    }\n\n    private onVScroll(): void {\n        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Vertical)) { return; }\n        this.onVScrollCommon(ScrollSource.Container);\n    }\n\n    private onVScrollCommon(source: ScrollSource): void {\n        let scrollTop: number;\n\n        if (source === ScrollSource.Container) {\n            scrollTop = this.eBodyViewport.scrollTop;\n        } else {\n            scrollTop = this.ctrlsService.getFakeVScrollComp().getScrollPosition();\n        }\n\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Vertical, scrollTop, true)) { return; }\n        this.animationFrameService.setScrollTop(scrollTop);\n        this.nextScrollTop = scrollTop;\n\n        if (source === ScrollSource.Container) {\n            this.ctrlsService.getFakeVScrollComp().setScrollPosition(scrollTop);\n        } else {\n            this.eBodyViewport.scrollTop = scrollTop;\n        }\n\n        // the `scrollGridIfNeeded` will recalculate the rows to be rendered by the grid\n        // so it should only be called after `eBodyViewport` has been scrolled to the correct\n        // position, otherwise the `first` and `last` row could be miscalculated.\n        if (this.gridOptionsService.get('suppressAnimationFrame')) {\n            this.scrollGridIfNeeded();\n        } else {\n            this.animationFrameService.schedule();\n        }\n\n        this.resetLastVScrollDebounced();\n    }\n\n    private doHorizontalScroll(scrollLeft: number): void {\n        const fakeScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();\n\n        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) { return; }\n\n        this.scrollLeft = scrollLeft;\n\n        this.fireScrollEvent(ScrollDirection.Horizontal);\n        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);\n        this.centerRowContainerCtrl.onHorizontalViewportChanged(true);\n    }\n\n    private fireScrollEvent(direction: ScrollDirection): void {\n        const bodyScrollEvent: WithoutGridCommon<BodyScrollEvent> = {\n            type: Events.EVENT_BODY_SCROLL,\n            direction: direction === ScrollDirection.Horizontal ? 'horizontal' : 'vertical',\n            left: this.scrollLeft,\n            top: this.scrollTop\n        };\n\n        this.eventService.dispatchEvent(bodyScrollEvent);\n\n        window.clearTimeout(this.scrollTimer);\n        this.scrollTimer = undefined;\n\n        this.scrollTimer = window.setTimeout(() => {\n            const bodyScrollEndEvent: WithoutGridCommon<BodyScrollEndEvent> = {\n                ...bodyScrollEvent,\n                type: Events.EVENT_BODY_SCROLL_END\n            };\n\n            this.eventService.dispatchEvent(bodyScrollEndEvent);\n        }, 100);\n    }\n\n    private shouldBlockScrollUpdate(direction: ScrollDirection, scrollTo: number, touchOnly: boolean = false): boolean {\n        // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport\n        // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually\n        // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,\n        // as otherwise it was causing the rows and header to flicker.\n\n        // sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to\n        // ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event\n        // could be 10px before the max position, and then current scroll event could be 20px after the max position).\n        // if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in\n        // actual fact the user has exceeded the max scroll and thus scroll should be set to the max.\n\n        if (touchOnly && !isIOSUserAgent()) { return false; }\n\n        if (direction === ScrollDirection.Vertical) {\n            return this.shouldBlockVerticalScroll(scrollTo)\n        }\n\n        return this.shouldBlockHorizontalScroll(scrollTo);\n    }\n\n    private shouldBlockVerticalScroll(scrollTo: number): boolean {\n        const clientHeight = getInnerHeight(this.eBodyViewport);\n        const { scrollHeight } = this.eBodyViewport;\n\n        if (scrollTo < 0 || (scrollTo + clientHeight > scrollHeight)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private shouldBlockHorizontalScroll(scrollTo: number): boolean {\n        const clientWidth = this.centerRowContainerCtrl.getCenterWidth();\n        const { scrollWidth } = this.centerRowContainerCtrl.getViewportElement();\n\n        if (this.enableRtl && isRtlNegativeScroll()) {\n            if (scrollTo > 0) { return true; }\n        } else if (scrollTo < 0) { return true; }\n\n        if (Math.abs(scrollTo) + clientWidth > scrollWidth) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private redrawRowsAfterScroll(): void {\n        this.fireScrollEvent(ScrollDirection.Vertical);\n    }\n\n\n    // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.\n    // (which happens with some implementations of tabbing). this can result in horizontal scroll getting\n    // reset back to the left, however no scroll event is fired. so we need to get header to also scroll\n    // back to the left to be kept in sync.\n    // adding and removing the grid from the DOM both resets the scroll position and\n    // triggers a resize event, so notify listeners if the scroll position has changed\n    public checkScrollLeft(): void {\n        if (this.scrollLeft !== this.centerRowContainerCtrl.getCenterViewportScrollLeft()) {\n            this.onHScrollCommon(ScrollSource.Container);\n        }\n    }\n\n    public scrollGridIfNeeded(): boolean {\n        const frameNeeded = this.scrollTop != this.nextScrollTop;\n\n        if (frameNeeded) {\n            this.scrollTop = this.nextScrollTop;\n            this.redrawRowsAfterScroll();\n        }\n\n        return frameNeeded;\n    }\n\n    // called by scrollHorizontally method and alignedGridsService\n    public setHorizontalScrollPosition(hScrollPosition: number, fromAlignedGridsService = false): void {\n        const minScrollLeft = 0;\n        const maxScrollLeft = this.centerRowContainerCtrl.getViewportElement().scrollWidth - this.centerRowContainerCtrl.getCenterWidth();\n\n        // if this is call is coming from the alignedGridsService, we don't need to validate the\n        // scroll, because it has already been validated by the grid firing the scroll event.\n        if (!fromAlignedGridsService && this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, hScrollPosition)) {\n            if (this.enableRtl && isRtlNegativeScroll()) {\n                hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;\n            } else {\n                hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);\n            }\n        }\n\n        setScrollLeft(this.centerRowContainerCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);\n        // we need to manually do the event handling (rather than wait for the event)\n        // for the alignedGridsService, as if we don't, the aligned grid service gets\n        // notified async, and then it's 'consuming' flag doesn't get used right, and\n        // we can end up with an infinite loop\n        this.doHorizontalScroll(hScrollPosition);\n    }\n\n    public setVerticalScrollPosition(vScrollPosition: number): void {\n        this.eBodyViewport.scrollTop = vScrollPosition;\n    }\n\n    public getVScrollPosition(): VerticalScrollPosition {\n        this.lastScrollTop = this.eBodyViewport.scrollTop;\n        this.lastOffsetHeight = this.eBodyViewport.offsetHeight;\n        const result = {\n            top: this.lastScrollTop,\n            bottom: this.lastScrollTop + this.lastOffsetHeight\n        };\n        return result;\n    }\n\n    /** Get an approximate scroll position that returns the last real value read.\n     * This is useful for avoiding repeated DOM reads that force the browser to recalculate styles.\n     * This can have big performance improvements but may not be 100% accurate so only use if this is acceptable.\n     */\n    public getApproximateVScollPosition(): VerticalScrollPosition{\n        if(this.lastScrollTop >= 0 && this.lastOffsetHeight >= 0){\n            return {\n                top: this.scrollTop,\n                bottom: this.scrollTop + this.lastOffsetHeight\n            }\n        }\n        return this.getVScrollPosition();\n    }\n\n    public getHScrollPosition(): { left: number, right: number; } {\n        return this.centerRowContainerCtrl.getHScrollPosition();\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        return this.centerRowContainerCtrl.isHorizontalScrollShowing();\n    }\n\n    // called by the headerRootComp and moveColumnController\n    public scrollHorizontally(pixels: number): number {\n        const oldScrollPosition = this.centerRowContainerCtrl.getViewportElement().scrollLeft;\n\n        this.setHorizontalScrollPosition(oldScrollPosition + pixels);\n        return this.centerRowContainerCtrl.getViewportElement().scrollLeft - oldScrollPosition;\n    }\n\n    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top\n    public scrollToTop(): void {\n        this.eBodyViewport.scrollTop = 0;\n    }\n\n    // Valid values for position are bottom, middle and top\n    public ensureNodeVisible<TData = any>(\n        comparator: TData | IRowNode<TData> | ((row: IRowNode<TData>) => boolean),\n        position: 'top' | 'bottom' | 'middle' | null = null\n    ) {\n        // look for the node index we want to display\n        const rowCount = this.rowModel.getRowCount();\n        let indexToSelect = -1;\n        // go through all the nodes, find the one we want to show\n        for (let i = 0; i < rowCount; i++) {\n            const node = this.rowModel.getRow(i);\n            if (typeof comparator === 'function') {\n                // Have to assert type here, as type could be TData & Function\n                const predicate = comparator as ((row: IRowNode<TData>) => boolean);\n                if (node && predicate(node)) {\n                    indexToSelect = i;\n                    break;\n                }\n            } else {\n                // check object equality against node and data\n                if (comparator === node || comparator === node!.data) {\n                    indexToSelect = i;\n                    break;\n                }\n            }\n        }\n        if (indexToSelect >= 0) {\n            this.ensureIndexVisible(indexToSelect, position);\n        }\n    }\n\n    // Valid values for position are bottom, middle and top\n    // position should be {'top','middle','bottom', or undefined/null}.\n    // if undefined/null, then the grid will to the minimal amount of scrolling,\n    // eg if grid needs to scroll up, it scrolls until row is on top,\n    //    if grid needs to scroll down, it scrolls until row is on bottom,\n    //    if row is already in view, grid does not scroll\n    public ensureIndexVisible(index: number, position?: 'top' | 'bottom' | 'middle' | null) {\n        // if for print or auto height, everything is always visible\n        if (this.gridOptionsService.isDomLayout('print')) { return; }\n\n        const rowCount = this.paginationProxy.getRowCount();\n\n        if (typeof index !== 'number' || index < 0 || index >= rowCount) {\n            console.warn('AG Grid: Invalid row index for ensureIndexVisible: ' + index);\n            return;\n        }\n\n        const isPaging = this.gridOptionsService.get('pagination');\n        const paginationPanelEnabled = isPaging && !this.gridOptionsService.get('suppressPaginationPanel');\n\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            if (!paginationPanelEnabled) {\n                this.paginationProxy.goToPageWithIndex(index);\n            }\n\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            const stickyTopHeight = gridBodyCtrl.getStickyTopHeight();\n\n            const rowNode = this.paginationProxy.getRow(index);\n            let rowGotShiftedDuringOperation: boolean;\n\n            do {\n                const startingRowTop = rowNode!.rowTop;\n                const startingRowHeight = rowNode!.rowHeight;\n\n                const paginationOffset = this.paginationProxy.getPixelOffset();\n                const rowTopPixel = rowNode!.rowTop! - paginationOffset;\n                const rowBottomPixel = rowTopPixel + rowNode!.rowHeight!;\n\n                const scrollPosition = this.getVScrollPosition();\n                const heightOffset = this.heightScaler.getDivStretchOffset();\n\n                const vScrollTop = scrollPosition.top + heightOffset;\n                const vScrollBottom = scrollPosition.bottom + heightOffset;\n\n                const viewportHeight = vScrollBottom - vScrollTop;\n\n                // work out the pixels for top, middle and bottom up front,\n                // make the if/else below easier to read\n                const pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);\n                const pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);\n                // make sure if middle, the row is not outside the top of the grid\n                const pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);\n\n                const rowAboveViewport = (vScrollTop + stickyTopHeight) > rowTopPixel;\n                const rowBelowViewport = vScrollBottom < rowBottomPixel;\n\n                let newScrollPosition: number | null = null;\n\n                if (position === 'top') {\n                    newScrollPosition = pxTop;\n                } else if (position === 'bottom') {\n                    newScrollPosition = pxBottom;\n                } else if (position === 'middle') {\n                    newScrollPosition = pxMiddle;\n                } else if (rowAboveViewport) {\n                    // if row is before, scroll up with row at top\n                    newScrollPosition = pxTop - stickyTopHeight;\n                } else if (rowBelowViewport) {\n                    // if row is after, scroll down with row at bottom\n                    newScrollPosition = pxBottom;\n                }\n\n                if (newScrollPosition !== null) {\n                    this.setVerticalScrollPosition(newScrollPosition);\n                    this.rowRenderer.redraw({ afterScroll: true });\n                }\n\n                // the row can get shifted if during the rendering (during rowRenderer.redraw()),\n                // the height of a row changes due to lazy calculation of row heights when using\n                // colDef.autoHeight or gridOptions.getRowHeight.\n                // if row was shifted, then the position we scrolled to is incorrect.\n                rowGotShiftedDuringOperation = (startingRowTop !== rowNode!.rowTop)\n                    || (startingRowHeight !== rowNode!.rowHeight);\n\n            } while (rowGotShiftedDuringOperation);\n\n            // so when we return back to user, the cells have rendered\n            this.animationFrameService.flushAllFrames();\n        });\n    }\n\n    public ensureColumnVisible(key: any, position: 'auto' | 'start' | 'middle' | 'end' = 'auto'): void {\n        const column = this.columnModel.getGridColumn(key);\n\n        if (!column) { return; }\n\n        // calling ensureColumnVisible on a pinned column doesn't make sense\n        if (column.isPinned()) { return; }\n\n        // defensive\n        if (!this.columnModel.isColumnDisplayed(column)) { return; }\n\n        const newHorizontalScroll: number | null = this.getPositionedHorizontalScroll(column, position);\n\n        this.getFrameworkOverrides().wrapIncoming(() => {\n\n            if (newHorizontalScroll !== null) {\n                this.centerRowContainerCtrl.setCenterViewportScrollLeft(newHorizontalScroll);\n            }\n\n            // this will happen anyway, as the move will cause a 'scroll' event on the body, however\n            // it is possible that the ensureColumnVisible method is called from within AG Grid and\n            // the caller will need to have the columns rendered to continue, which will be before\n            // the event has been worked on (which is the case for cell navigation).\n            this.centerRowContainerCtrl.onHorizontalViewportChanged();\n\n            // so when we return back to user, the cells have rendered\n            this.animationFrameService.flushAllFrames();\n        });\n    }\n\n    public setScrollPosition(top: number, left: number): void {\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            this.centerRowContainerCtrl.setCenterViewportScrollLeft(left);\n            this.setVerticalScrollPosition(top);\n            this.rowRenderer.redraw({ afterScroll: true });\n            this.animationFrameService.flushAllFrames();\n        });\n    }\n\n    private getPositionedHorizontalScroll(column: Column, position: 'auto' | 'start' | 'middle' | 'end'): number | null {\n        const { columnBeforeStart, columnAfterEnd } = this.isColumnOutsideViewport(column);\n\n        const viewportTooSmallForColumn = this.centerRowContainerCtrl.getCenterWidth() < column.getActualWidth();\n        const viewportWidth = this.centerRowContainerCtrl.getCenterWidth();\n\n        const isRtl = this.enableRtl;\n\n        let alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;\n        let alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;\n\n        if (position !== 'auto') {\n            alignColToStart = position === 'start';\n            alignColToEnd = position === 'end';\n        }\n\n        const isMiddle = position === 'middle';\n\n        if (alignColToStart || alignColToEnd || isMiddle) {\n            const { colLeft, colMiddle, colRight } = this.getColumnBounds(column);\n\n            if (isMiddle) {\n                return colMiddle - viewportWidth / 2;\n            }\n\n            if (alignColToStart) {\n                return isRtl ?  colRight : colLeft;\n            }\n\n            return isRtl ? (colLeft - viewportWidth) : (colRight - viewportWidth);\n        }\n\n        return null;\n    }\n\n    private isColumnOutsideViewport(column: Column): { columnBeforeStart: boolean, columnAfterEnd: boolean } {\n        const { start: viewportStart, end: viewportEnd } = this.getViewportBounds();\n        const { colLeft, colRight } = this.getColumnBounds(column);\n\n        const isRtl = this.enableRtl;\n\n        const columnBeforeStart = isRtl ? (viewportStart > colRight) : (viewportEnd < colRight);\n        const columnAfterEnd = isRtl ? (viewportEnd < colLeft) : (viewportStart > colLeft);\n\n        return { columnBeforeStart, columnAfterEnd };\n    }\n\n    private getColumnBounds(column: Column): { colLeft: number, colMiddle: number, colRight: number } {\n        const isRtl = this.enableRtl;\n        const bodyWidth = this.columnModel.getBodyContainerWidth();\n        const colWidth = column.getActualWidth();\n        const colLeft = column.getLeft()!;\n        const multiplier = isRtl ? -1 : 1;\n\n        const colLeftPixel = isRtl ? (bodyWidth - colLeft) : colLeft;\n        const colRightPixel = colLeftPixel + colWidth * multiplier;\n        const colMidPixel = colLeftPixel + colWidth / 2 * multiplier;\n\n        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };\n    }\n\n    private getViewportBounds(): { start: number, end: number, width: number } {\n        const viewportWidth = this.centerRowContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerRowContainerCtrl.getCenterViewportScrollLeft();\n\n        const viewportStartPixel = scrollPosition;\n        const viewportEndPixel = viewportWidth + scrollPosition;\n\n        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };\n    }\n}", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired } from \"../context/context\";\nimport { LayoutFeature, LayoutView } from \"../styling/layoutFeature\";\nimport { Events } from \"../eventKeys\";\nimport { RowContainerHeightService } from \"../rendering/rowContainerHeightService\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { ColumnModel, ISizeColumnsToFitParams } from \"../columns/columnModel\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\nimport { GridBodyScrollFeature } from \"./gridBodyScrollFeature\";\nimport { getInnerWidth, isElementChildOfClass, isVerticalScrollShowing } from \"../utils/dom\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { RowDragFeature } from \"./rowDragFeature\";\nimport { DragAndDropService } from \"../dragAndDrop/dragAndDropService\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { getTabIndex, isInvisibleScrollbar, isIOSUserAgent } from \"../utils/browser\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { PopupService } from \"../widgets/popupService\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { TouchListener, LongTapEvent } from \"../widgets/touchListener\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { MenuService, ShowContextMenuParams } from \"../misc/menuService\";\n\nexport enum RowAnimationCssClasses {\n    ANIMATION_ON = 'ag-row-animation',\n    ANIMATION_OFF = 'ag-row-no-animation'\n}\n\nexport const CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';\n\nconst CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';\nconst CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';\n\nexport interface IGridBodyComp extends LayoutView {\n    setColumnMovingCss(cssClass: string, on: boolean): void;\n    setCellSelectableCss(cssClass: string | null, on: boolean): void;\n    setTopHeight(height: number): void;\n    setTopDisplay(display: string): void;\n    setBottomHeight(height: number): void;\n    setBottomDisplay(display: string): void;\n    setStickyTopHeight(height: string): void;\n    setStickyTopTop(offsetTop: string): void;\n    setStickyTopWidth(width: string): void;\n    setColumnCount(count: number): void;\n    setRowCount(count: number): void;\n    setRowAnimationCssOnBodyViewport(cssClass: string, animate: boolean): void;\n    setAlwaysVerticalScrollClass(cssClass: string | null, on: boolean): void;\n    setPinnedTopBottomOverflowY(overflow: 'scroll' | 'hidden'): void;\n    registerBodyViewportResizeListener(listener: (() => void)): void;\n    setBodyViewportWidth(width: string): void;\n}\n\nexport class GridBodyCtrl extends BeanStub {\n\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('rowContainerHeightService') private rowContainerHeightService: RowContainerHeightService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('menuService') private menuService: MenuService;\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('popupService') public popupService: PopupService;\n    @Autowired('mouseEventService') public mouseEventService: MouseEventService;\n    @Autowired('rowModel') public rowModel: IRowModel;\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    private comp: IGridBodyComp;\n    private eGridBody: HTMLElement;\n    private eBodyViewport: HTMLElement;\n    private eTop: HTMLElement;\n    private eBottom: HTMLElement;\n    private eStickyTop: HTMLElement;\n    private stickyTopHeight: number = 0;\n\n    private bodyScrollFeature: GridBodyScrollFeature;\n    private rowDragFeature: RowDragFeature;\n\n    public getScrollFeature(): GridBodyScrollFeature {\n        return this.bodyScrollFeature;\n    }\n\n    public getBodyViewportElement(): HTMLElement {\n        return this.eBodyViewport;\n    }\n\n    public setComp(\n        comp: IGridBodyComp,\n        eGridBody: HTMLElement,\n        eBodyViewport: HTMLElement,\n        eTop: HTMLElement,\n        eBottom: HTMLElement,\n        eStickyTop: HTMLElement\n    ): void {\n        this.comp = comp;\n        this.eGridBody = eGridBody;\n        this.eBodyViewport = eBodyViewport;\n        this.eTop = eTop;\n        this.eBottom = eBottom;\n        this.eStickyTop = eStickyTop;\n\n        this.setCellTextSelection(this.gridOptionsService.get('enableCellTextSelection'));\n        this.addManagedPropertyListener('enableCellTextSelection', (props) => this.setCellTextSelection(props.currentValue));\n\n        this.createManagedBean(new LayoutFeature(this.comp));\n        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));\n        this.addRowDragListener();\n\n        this.setupRowAnimationCssClass();\n\n        this.addEventListeners();\n        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop]);\n        this.onGridColumnsChanged();\n        this.addBodyViewportListener();\n        this.setFloatingHeights();\n        this.disableBrowserDragging();\n        this.addStopEditingWhenGridLosesFocus();\n\n        this.filterManager.setupAdvancedFilterHeaderComp(eTop);\n\n        this.ctrlsService.registerGridBodyCtrl(this);\n    }\n\n    public getComp(): IGridBodyComp {\n        return this.comp;\n    }\n\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));\n    }\n\n    private addFocusListeners(elements: HTMLElement[]): void {\n        elements.forEach(element => {\n            this.addManagedListener(element, 'focusin', (e: FocusEvent) => {\n                const { target } = e;\n                // element being focused is nested?\n                const isFocusedElementNested = isElementChildOfClass(target as HTMLElement, 'ag-root', element);\n\n                element.classList.toggle('ag-has-focus', !isFocusedElementNested);\n            });\n\n            this.addManagedListener(element, 'focusout', (e: FocusEvent) => {\n                const { target, relatedTarget } = e;\n                const gridContainRelatedTarget = element.contains(relatedTarget as HTMLElement);\n                const isNestedRelatedTarget = isElementChildOfClass(relatedTarget as HTMLElement, 'ag-root', element);\n                const isNestedTarget = isElementChildOfClass(target as HTMLElement, 'ag-root', element);\n\n                // element losing focus belongs to a nested grid,\n                // it should not be handled here.\n                if (isNestedTarget) { return; }\n\n                // the grid does not contain, or the focus element is within\n                // a nested grid\n                if (!gridContainRelatedTarget || isNestedRelatedTarget) {\n                    element.classList.remove('ag-has-focus');\n                }\n            });\n        });\n    }\n\n    // used by ColumnAnimationService\n    public setColumnMovingCss(moving: boolean): void {\n        this.comp.setColumnMovingCss(CSS_CLASS_COLUMN_MOVING, moving);\n    }\n\n    public setCellTextSelection(selectable: boolean = false): void {\n        this.comp.setCellSelectableCss(CSS_CLASS_CELL_SELECTABLE, selectable);\n    }\n\n    private onScrollVisibilityChanged(): void {\n        const visible = this.scrollVisibleService.isVerticalScrollShowing();\n        this.setVerticalScrollPaddingVisible(visible);\n        this.setStickyTopWidth(visible);\n\n        const scrollbarWidth = visible ? (this.gridOptionsService.getScrollbarWidth() || 0) : 0;\n        const pad = isInvisibleScrollbar() ? 16 : 0;\n        const width = `calc(100% + ${scrollbarWidth + pad}px)`;\n\n        this.animationFrameService.requestAnimationFrame(() => this.comp.setBodyViewportWidth(width));\n    }\n\n    private onGridColumnsChanged(): void {\n        const columns = this.columnModel.getAllGridColumns();\n        this.comp.setColumnCount(columns.length);\n    }\n\n    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)\n    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.\n    private disableBrowserDragging(): void {\n        this.addManagedListener(this.eGridBody, 'dragstart', (event: MouseEvent) => {\n            if (event.target instanceof HTMLImageElement) {\n                event.preventDefault();\n                return false;\n            }\n        });\n    }\n\n    private addStopEditingWhenGridLosesFocus(): void {\n        if (!this.gridOptionsService.get('stopEditingWhenCellsLoseFocus')) { return; }\n\n        const focusOutListener = (event: FocusEvent): void => {\n            // this is the element the focus is moving to\n            const elementWithFocus = event.relatedTarget as HTMLElement;\n\n            if (getTabIndex(elementWithFocus) === null) {\n                this.rowRenderer.stopEditing();\n                return;\n            }\n\n            let clickInsideGrid =\n                // see if click came from inside the viewports\n                viewports.some(viewport => viewport.contains(elementWithFocus))\n                // and also that it's not from a detail grid\n                && this.mouseEventService.isElementInThisGrid(elementWithFocus);\n\n            if (!clickInsideGrid) {\n                const popupService = this.popupService;\n\n                clickInsideGrid =\n                    popupService.getActivePopups().some(popup => popup.contains(elementWithFocus)) ||\n                    popupService.isElementWithinCustomPopup(elementWithFocus);\n            }\n\n            if (!clickInsideGrid) {\n                this.rowRenderer.stopEditing();\n            }\n        };\n\n        const viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop];\n\n        viewports.forEach(viewport => this.addManagedListener(viewport, 'focusout', focusOutListener));\n    }\n\n    public updateRowCount(): void {\n        const headerCount = this.headerNavigationService.getHeaderRowCount() + this.filterManager.getHeaderRowCount();\n\n        const rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;\n        const total = rowCount === -1 ? -1 : (headerCount + rowCount);\n\n        this.comp.setRowCount(total);\n    }\n\n    public registerBodyViewportResizeListener(listener: (() => void)): void {\n        this.comp.registerBodyViewportResizeListener(listener);\n    }\n\n    public setVerticalScrollPaddingVisible(visible: boolean): void {\n        const overflowY = visible ? 'scroll' : 'hidden';\n        this.comp.setPinnedTopBottomOverflowY(overflowY);\n    }\n\n    public isVerticalScrollShowing(): boolean {\n        const show = this.gridOptionsService.get('alwaysShowVerticalScroll');\n        const cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;\n        const allowVerticalScroll = this.gridOptionsService.isDomLayout('normal');\n        this.comp.setAlwaysVerticalScrollClass(cssClass, show);\n        return show || (allowVerticalScroll && isVerticalScrollShowing(this.eBodyViewport));\n    }\n\n    private setupRowAnimationCssClass(): void {\n        const listener = () => {\n            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,\n            // when scaling and doing row animation.\n            const animateRows = this.gridOptionsService.isAnimateRows() && !this.rowContainerHeightService.isStretching();\n            const animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;\n            this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);\n        };\n\n        listener();\n\n        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);\n        this.addManagedPropertyListener('animateRows', listener);\n    }\n\n    public getGridBodyElement(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    private addBodyViewportListener(): void {\n        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing\n        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell\n        const listener = this.onBodyViewportContextMenu.bind(this);\n        this.addManagedListener(this.eBodyViewport, 'contextmenu', listener);\n        this.mockContextMenuForIPad(listener);\n\n        this.addManagedListener(this.eBodyViewport, 'wheel', this.onBodyViewportWheel.bind(this));\n        this.addManagedListener(this.eStickyTop, 'wheel', this.onStickyTopWheel.bind(this));\n\n        // allow mouseWheel on the Full Width Container to Scroll the Viewport\n        this.addFullWidthContainerWheelListener();\n    }\n\n    private addFullWidthContainerWheelListener(): void {\n        const fullWidthContainer = this.eBodyViewport.querySelector('.ag-full-width-container');\n        const eCenterColsViewport = this.eBodyViewport.querySelector('.ag-center-cols-viewport');\n\n        if (fullWidthContainer && eCenterColsViewport) {\n            this.addManagedListener(fullWidthContainer, 'wheel', (e: WheelEvent) => this.onFullWidthContainerWheel(e, eCenterColsViewport));\n        }\n    }\n\n    private onFullWidthContainerWheel(e: WheelEvent, eCenterColsViewport: Element): void {\n        if (\n            !e.deltaX ||\n            Math.abs(e.deltaY) > Math.abs(e.deltaX) ||\n            !this.mouseEventService.isEventFromThisGrid(e)\n        ) { return; }\n\n        e.preventDefault();\n        eCenterColsViewport.scrollBy({ left: e.deltaX });\n    }\n\n    private onBodyViewportContextMenu(mouseEvent?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent): void {\n        if (!mouseEvent && !touchEvent) { return; }\n\n        if (this.gridOptionsService.get('preventDefaultOnContextMenu')) {\n            const event = (mouseEvent || touchEvent)!;\n            event.preventDefault();\n        }\n\n        const { target } = (mouseEvent || touch)!;\n\n        if (target === this.eBodyViewport || target === this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {\n            // show it\n            this.menuService.showContextMenu({ mouseEvent, touchEvent, value: null, anchorToElement: this.eGridBody } as ShowContextMenuParams);\n        }\n    }\n\n    private mockContextMenuForIPad(listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void): void {\n        // we do NOT want this when not in iPad\n        if (!isIOSUserAgent()) { return; }\n\n        const touchListener = new TouchListener(this.eBodyViewport);\n        const longTapListener = (event: LongTapEvent) => {\n            listener(undefined, event.touchStart, event.touchEvent);\n        };\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n\n    private onBodyViewportWheel(e: WheelEvent): void {\n        if (!this.gridOptionsService.get('suppressScrollWhenPopupsAreOpen')) { return; }\n\n        if (this.popupService.hasAnchoredPopup()) {\n            e.preventDefault();\n        }\n    }\n\n    private onStickyTopWheel(e: WheelEvent): void {\n        e.preventDefault();\n\n        if (e.offsetY) {\n            this.scrollVertically(e.deltaY);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    // called by rowDragFeature\n    public scrollVertically(pixels: number): number {\n        const oldScrollPosition = this.eBodyViewport.scrollTop;\n\n        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);\n        return this.eBodyViewport.scrollTop - oldScrollPosition;\n    }\n\n    private addRowDragListener(): void {\n        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));\n        this.dragAndDropService.addDropTarget(this.rowDragFeature);\n    }\n\n    public getRowDragFeature(): RowDragFeature {\n        return this.rowDragFeature;\n    }\n\n    private onPinnedRowDataChanged(): void {\n        this.setFloatingHeights();\n    }\n\n    private setFloatingHeights(): void {\n        const { pinnedRowModel } = this;\n\n        let floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();\n        let floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();\n        this.comp.setTopHeight(floatingTopHeight);\n        this.comp.setBottomHeight(floatingBottomHeight);\n        this.comp.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');\n        this.comp.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');\n        this.setStickyTopOffsetTop();\n    }\n\n    public setStickyTopHeight(height: number = 0): void {\n        // console.log('setting sticky top height ' + height);\n        this.comp.setStickyTopHeight(`${height}px`);\n        this.stickyTopHeight = height;\n    }\n\n    public getStickyTopHeight(): number {\n        return this.stickyTopHeight;\n    }\n\n    private setStickyTopWidth(vScrollVisible: boolean) {\n        if (!vScrollVisible) {\n            this.comp.setStickyTopWidth('100%');\n        } else {\n            const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n            this.comp.setStickyTopWidth(`calc(100% - ${scrollbarWidth}px)`);\n        }\n    }\n\n    private onHeaderHeightChanged(): void {\n        this.setStickyTopOffsetTop();\n    }\n\n    private setStickyTopOffsetTop(): void {\n        const headerCtrl = this.ctrlsService.getGridHeaderCtrl();\n        const headerHeight = headerCtrl.getHeaderHeight() + this.filterManager.getHeaderHeight();\n        const pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();\n\n        let height = 0;\n\n        if (headerHeight > 0) { height += headerHeight + 1; }\n        if (pinnedTopHeight > 0) { height += pinnedTopHeight + 1; }\n\n        this.comp.setStickyTopTop(`${height}px`);\n    }\n\n    // method will call itself if no available width. this covers if the grid\n    // isn't visible, but is just about to be visible.\n    public sizeColumnsToFit(\n        params?: ISizeColumnsToFitParams,\n        nextTimeout?: number,\n    ) {\n        const removeScrollWidth = this.isVerticalScrollShowing();\n        const scrollWidthToRemove = removeScrollWidth ? this.gridOptionsService.getScrollbarWidth() : 0;\n        // bodyViewportWidth should be calculated from eGridBody, not eBodyViewport\n        // because we change the width of the bodyViewport to hide the real browser scrollbar\n        const bodyViewportWidth = getInnerWidth(this.eGridBody);\n        const availableWidth = bodyViewportWidth - scrollWidthToRemove;\n\n        if (availableWidth > 0) {\n            this.columnModel.sizeColumnsToFit(availableWidth, \"sizeColumnsToFit\", false, params);\n            return;\n        }\n\n        if (nextTimeout === undefined) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, 100);\n            }, 0);\n        } else if (nextTimeout === 100) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, 500);\n            }, 100);\n        } else if (nextTimeout === 500) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, -1);\n            }, 500);\n        } else {\n            console.warn('AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +\n                'zero width, maybe the grid is not visible yet on the screen?');\n        }\n    }\n\n    // + rangeService\n    public addScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.addEventListener('scroll', listener, { passive: true });\n    }\n\n    // + focusService\n    public removeScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.removeEventListener('scroll', listener);\n    }\n}\n", "import { Column } from \"../entities/column\";\nimport { CellPosition } from \"../entities/cellPositionUtils\";\nimport { RowPosition } from \"../entities/rowPositionUtils\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\nimport { RowPinnedType } from \"../interfaces/iRowNode\";\n\nexport interface IRangeService {\n    isEmpty(): boolean;\n    removeAllCellRanges(silent?: boolean): void;\n    getCellRangeCount(cell: CellPosition): number;\n    isCellInAnyRange(cell: CellPosition): boolean;\n    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;\n    isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean;\n    isContiguousRange(cellRange: CellRange): boolean;\n    isMoreThanOneCell(): boolean;\n    areAllRangesAbleToMerge(): boolean;\n    onDragStart(mouseEvent: MouseEvent): void;\n    onDragStop(): void;\n    onDragging(mouseEvent: MouseEvent): void;\n    getCellRanges(): CellRange[];\n    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;\n    intersectLastRange(fromMouseClick?: boolean): void;\n    setCellRange(params: CellRangeParams): void;\n    addCellRange(params: CellRangeParams): void;\n    extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined;\n    extendLatestRangeToCell(cell: CellPosition): void;\n    updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void;\n    getRangeStartRow(cellRange: CellRange): RowPosition;\n    getRangeEndRow(cellRange: CellRange): RowPosition;\n    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;\n    setCellRanges(cellRanges: CellRange[]): void;\n    clearCellRangeCellValues(params: ClearCellRangeParams): void;\n}\n\nexport interface ISelectionHandle {\n    getGui(): HTMLElement;\n    getType(): SelectionHandleType;\n    refresh(cellCtrl: CellCtrl): void;\n}\n\nexport interface ISelectionHandleFactory {\n    createSelectionHandle(type: SelectionHandleType): ISelectionHandle;\n}\n\nexport enum SelectionHandleType { FILL, RANGE }\n\nexport enum CellRangeType { VALUE, DIMENSION }\n\nexport interface CellRange {\n    id?: string;\n    type?: CellRangeType;\n    /** The start row of the range */\n    startRow?: RowPosition;\n    /** The end row of the range */\n    endRow?: RowPosition;\n    /** The columns in the range */\n    columns: Column[];\n    /** The start column for the range */\n    startColumn: Column;\n}\n\nexport interface CellRangeParams {\n    /** Start row index */\n    rowStartIndex: number | null;\n    /** Pinned state of start row. Either 'top', 'bottom' or null */\n    rowStartPinned?: RowPinnedType;\n    /** End row index */\n    rowEndIndex: number | null;\n    /** Pinned state of end row. Either 'top', 'bottom' or null */\n    rowEndPinned?: RowPinnedType;\n\n    /** Starting column for range */\n    columnStart?: string | Column;\n    /** End column for range */\n    columnEnd?: string | Column;\n    /** Specify Columns to include instead of using `columnStart` and `columnEnd` */\n    columns?: (string | Column)[];\n}\n\nexport interface ClearCellRangeParams {\n    cellRanges?: CellRange[],\n    /** Source passed to `cellValueChanged` event */\n    cellEventSource?: string,\n    /** `true` to dispatch `rangeDeleteStart` and `rangeDeleteEnd` events */\n    dispatchWrapperEvents?: boolean,\n    /** Source passed to `rangeDeleteStart` and `rangeDeleteEnd` events */\n    wrapperEventSource?: 'deleteKey'\n}\n", "import { Beans } from \"../beans\";\nimport {\n    CellCtrl,\n    ICellComp\n} from \"./cellCtrl\";\nimport { includes, last } from \"../../utils/array\";\nimport { CellRangeType, ISelectionHandle, SelectionHandleType } from \"../../interfaces/IRangeService\";\nimport { Column } from \"../../entities/column\";\nimport { missing } from \"../../utils/generic\";\nimport { setAriaSelected } from \"../../utils/aria\";\n\nconst CSS_CELL_RANGE_SELECTED = 'ag-cell-range-selected';\nconst CSS_CELL_RANGE_CHART = 'ag-cell-range-chart';\nconst CSS_CELL_RANGE_SINGLE_CELL = 'ag-cell-range-single-cell';\nconst CSS_CELL_RANGE_CHART_CATEGORY = 'ag-cell-range-chart-category';\nconst CSS_CELL_RANGE_HANDLE = 'ag-cell-range-handle';\nconst CSS_CELL_RANGE_TOP = 'ag-cell-range-top';\nconst CSS_CELL_RANGE_RIGHT = 'ag-cell-range-right';\nconst CSS_CELL_RANGE_BOTTOM = 'ag-cell-range-bottom';\nconst CSS_CELL_RANGE_LEFT = 'ag-cell-range-left';\n\nexport class CellRangeFeature {\n\n    private beans: Beans;\n    private cellComp: ICellComp;\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private rangeCount: number;\n    private hasChartRange: boolean;\n\n    private selectionHandle: ISelectionHandle | null | undefined;\n\n    constructor(beans: Beans, ctrl: CellCtrl) {\n        this.beans = beans;\n        this.cellCtrl = ctrl;\n    }\n\n    public setComp(cellComp: ICellComp, eGui: HTMLElement): void {\n        this.cellComp = cellComp;\n        this.eGui = eGui;\n        this.onRangeSelectionChanged();\n    }\n\n    public onRangeSelectionChanged(): void {\n        // when using reactUi, given UI is async, it's possible this method is called before the comp is registered\n        if (!this.cellComp) { return; }\n\n        this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());\n        this.hasChartRange = this.getHasChartRange();\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-1`, this.rangeCount === 1);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-2`, this.rangeCount === 2);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-3`, this.rangeCount === 3);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-4`, this.rangeCount >= 4);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);\n\n        setAriaSelected(this.eGui, this.rangeCount > 0 ? true : undefined);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());\n\n        this.updateRangeBorders();\n\n        this.refreshHandle();\n    }\n\n    private updateRangeBorders(): void {\n        const rangeBorders = this.getRangeBorders();\n        const isSingleCell = this.isSingleCell();\n        const isTop = !isSingleCell && rangeBorders.top;\n        const isRight = !isSingleCell && rangeBorders.right;\n        const isBottom = !isSingleCell && rangeBorders.bottom;\n        const isLeft = !isSingleCell && rangeBorders.left;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);\n    }\n\n    private isSingleCell(): boolean {\n        const { rangeService } = this.beans;\n        return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();\n    }\n\n    private getHasChartRange(): boolean {\n        const { rangeService } = this.beans;\n\n        if (!this.rangeCount || !rangeService) { return false; }\n\n        const cellRanges = rangeService.getCellRanges();\n\n        return cellRanges.length > 0 && cellRanges.every(range => includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type));\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        // we only need to update range borders if we are in a range\n        if (this.rangeCount > 0) {\n            this.updateRangeBorders();\n            this.refreshHandle();\n        }\n    }\n\n    private getRangeBorders(): {\n        top: boolean,\n        right: boolean,\n        bottom: boolean,\n        left: boolean;\n    } {\n        const isRtl = this.beans.gridOptionsService.get('enableRtl');\n\n        let top = false;\n        let right = false;\n        let bottom = false;\n        let left = false;\n\n        const thisCol = this.cellCtrl.getCellPosition().column;\n        const { rangeService, columnModel } = this.beans;\n\n        let leftCol: Column | null;\n        let rightCol: Column | null;\n\n        if (isRtl) {\n            leftCol = columnModel.getDisplayedColAfter(thisCol);\n            rightCol = columnModel.getDisplayedColBefore(thisCol);\n        } else {\n            leftCol = columnModel.getDisplayedColBefore(thisCol);\n            rightCol = columnModel.getDisplayedColAfter(thisCol);\n        }\n\n        const ranges = rangeService.getCellRanges().filter(\n            range => rangeService.isCellInSpecificRange(this.cellCtrl.getCellPosition(), range)\n        );\n\n        // this means we are the first column in the grid\n        if (!leftCol) {\n            left = true;\n        }\n\n        // this means we are the last column in the grid\n        if (!rightCol) {\n            right = true;\n        }\n\n        for (let i = 0; i < ranges.length; i++) {\n            if (top && right && bottom && left) { break; }\n\n            const range = ranges[i];\n            const startRow = rangeService.getRangeStartRow(range);\n            const endRow = rangeService.getRangeEndRow(range);\n\n            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {\n                top = true;\n            }\n\n            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {\n                bottom = true;\n            }\n\n            if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {\n                left = true;\n            }\n\n            if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {\n                right = true;\n            }\n        }\n\n        return { top, right, bottom, left };\n    }\n\n    public refreshHandle(): void {\n        if (!this.beans.rangeService || this.beans.context.isDestroyed()) { return; }\n\n        const shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();\n\n        if (this.selectionHandle && !shouldHaveSelectionHandle) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (shouldHaveSelectionHandle) {\n            this.addSelectionHandle();\n        }\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);\n    }\n\n    private shouldHaveSelectionHandle(): boolean {\n        const { gridOptionsService, rangeService } = this.beans;\n        const cellRanges = rangeService.getCellRanges();\n        const rangesLen = cellRanges.length;\n\n        if (this.rangeCount < 1 || rangesLen < 1) {\n            return false;\n        }\n\n        const cellRange = last(cellRanges);\n        const cellPosition = this.cellCtrl.getCellPosition();\n        const isFillHandleAvailable = gridOptionsService.get('enableFillHandle') && !this.cellCtrl.isSuppressFillHandle();\n        const isRangeHandleAvailable = gridOptionsService.get('enableRangeHandle');\n\n        let handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (\n            isFillHandleAvailable || isRangeHandleAvailable\n        );\n\n        if (this.hasChartRange) {\n            const hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;\n            const isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);\n\n            this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);\n            handleIsAvailable = cellRange.type === CellRangeType.VALUE;\n        }\n\n        return handleIsAvailable &&\n            cellRange.endRow != null &&\n            rangeService.isContiguousRange(cellRange) &&\n            rangeService.isBottomRightCell(cellRange, cellPosition);\n    }\n\n    private addSelectionHandle() {\n        const { gridOptionsService, rangeService } = this.beans;\n        const cellRangeType = last(rangeService.getCellRanges()).type;\n        const selectionHandleFill = gridOptionsService.get('enableFillHandle') && missing(cellRangeType);\n        const type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;\n\n        if (this.selectionHandle && this.selectionHandle.getType() !== type) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (!this.selectionHandle) {\n            this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);\n        }\n\n        this.selectionHandle.refresh(this.cellCtrl);\n    }\n\n    public destroy(): void {\n        this.beans.context.destroyBean(this.selectionHandle);\n    }\n\n}", "import { CellCtrl } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { areEqual, last } from \"../../utils/array\";\nimport { Events } from \"../../eventKeys\";\nimport { missing } from \"../../utils/generic\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { RowNode } from \"../../entities/rowNode\";\n\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\nexport class CellPositionFeature extends BeanStub {\n\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n\n    private colsSpanning: Column[];\n    private rowSpan: number;\n\n    private beans: Beans;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    private setupRowSpan(): void {\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\n\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onNewColumnsLoaded())\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n\n        // add event handlers only after GUI is attached,\n        // so we don't get events before we are ready\n        this.setupColSpan();\n        this.setupRowSpan();\n\n        this.onLeftChanged();\n        this.onWidthChanged();\n        this.applyRowSpan();\n    }\n\n    private onNewColumnsLoaded(): void {\n        const rowSpan = this.column.getRowSpan(this.rowNode);\n        if (this.rowSpan === rowSpan) { return; }\n\n        this.rowSpan = rowSpan;\n        this.applyRowSpan(true);\n    }\n\n    private onDisplayColumnsChanged(): void {\n        const colsSpanning: Column[] = this.getColSpanningList();\n\n        if (!areEqual(this.colsSpanning, colsSpanning)) {\n            this.colsSpanning = colsSpanning;\n            this.onWidthChanged();\n            this.onLeftChanged(); // left changes when doing RTL\n        }\n    }\n\n    private setupColSpan(): void {\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n        if (this.column.getColDef().colSpan == null) { return; }\n\n        this.colsSpanning = this.getColSpanningList();\n\n        // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));\n        // because we are spanning over multiple cols, we check for width any time any cols width changes.\n        // this is expensive - really we should be explicitly checking only the cols we are spanning over\n        // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n        // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));\n    }\n\n    public onWidthChanged(): void {\n        if (!this.eGui) { return; }\n        const width = this.getCellWidth();\n        this.eGui.style.width = `${width}px`;\n    }\n\n    private getCellWidth(): number {\n        if (!this.colsSpanning) {\n            return this.column.getActualWidth();\n        }\n\n        return this.colsSpanning.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n\n    public getColSpanningList(): Column[] {\n        const colSpan = this.column.getColSpan(this.rowNode);\n        const colsSpanning: Column[] = [];\n\n        // if just one col, the col span is just the column we are in\n        if (colSpan === 1) {\n            colsSpanning.push(this.column);\n        } else {\n            let pointer: Column | null = this.column;\n            const pinned = this.column.getPinned();\n            for (let i = 0; pointer && i < colSpan; i++) {\n                colsSpanning.push(pointer);\n                pointer = this.beans.columnModel.getDisplayedColAfter(pointer);\n                if (!pointer || missing(pointer)) {\n                    break;\n                }\n                // we do not allow col spanning to span outside of pinned areas\n                if (pinned !== pointer.getPinned()) {\n                    break;\n                }\n            }\n        }\n\n        return colsSpanning;\n    }\n\n    public onLeftChanged(): void {\n        if (!this.eGui) { return; }\n        const left = this.modifyLeftForPrintLayout(this.getCellLeft());\n        this.eGui.style.left = left + 'px';\n    }\n\n    private getCellLeft(): number | null {\n        let mostLeftCol: Column;\n\n        if (this.beans.gridOptionsService.get('enableRtl') && this.colsSpanning) {\n            mostLeftCol = last(this.colsSpanning);\n        } else {\n            mostLeftCol = this.column;\n        }\n\n        return mostLeftCol.getLeft();\n    }\n\n    private modifyLeftForPrintLayout(leftPosition: number | null): number | null {\n        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === 'left') {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n        if (this.column.getPinned() === 'right') {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + (leftPosition || 0);\n        }\n\n        // is in body\n        return leftWidth + (leftPosition || 0);\n    }\n\n    private applyRowSpan(force?: boolean): void {\n\n        if (this.rowSpan === 1 && !force) { return; }\n\n        const singleRowHeight = this.beans.gridOptionsService.getRowHeightAsNumber();\n        const totalRowHeight = singleRowHeight * this.rowSpan;\n\n        this.eGui.style.height = `${totalRowHeight}px`;\n        this.eGui.style.zIndex = '1';\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}", "import { BeanStub } from \"../../context/beanStub\";\nimport { CellClassParams, CellClassRules } from \"../../entities/colDef\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { Beans } from \"../beans\";\nimport { CellStyleFunc, CellStyle } from \"../../entities/colDef\";\n\nexport class CellCustomStyleFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n    private readonly beans: Beans;\n    private staticClasses: string[] = [];\n\n    private cellComp: ICellComp;\n\n    private cellClassRules?: CellClassRules;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    public setComp(comp: ICellComp): void {\n        this.cellComp = comp;\n\n        this.applyUserStyles();\n        this.applyCellClassRules();\n        this.applyClassesFromColDef();\n    }\n\n    public applyCellClassRules(): void {\n        const colDef = this.column.getColDef();\n        const { cellClassRules } = colDef;\n        const cellClassParams: CellClassParams = this.beans.gridOptionsService.addGridCommonParams({\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            column: this.column,\n            rowIndex: this.rowNode.rowIndex!\n        });\n\n        this.beans.stylingService.processClassRules(\n            // if current was previous, skip\n            cellClassRules === this.cellClassRules ? undefined : this.cellClassRules,\n            cellClassRules,\n            cellClassParams,\n            className => this.cellComp.addOrRemoveCssClass(className, true),\n            className => this.cellComp.addOrRemoveCssClass(className, false)\n        );\n        this.cellClassRules = cellClassRules;\n    }\n\n    public applyUserStyles() {\n        const colDef = this.column.getColDef();\n\n        if (!colDef.cellStyle) { return; }\n\n        let styles: CellStyle | null | undefined;\n\n        if (typeof colDef.cellStyle === 'function') {\n            const cellStyleParams: CellClassParams = this.beans.gridOptionsService.addGridCommonParams({\n                column: this.column,\n                value: this.cellCtrl.getValue(),\n                colDef: colDef,\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!\n            });\n            const cellStyleFunc = colDef.cellStyle as CellStyleFunc;\n            styles = cellStyleFunc(cellStyleParams);\n        } else {\n            styles = colDef.cellStyle;\n        }\n\n        if (styles) {\n            this.cellComp.setUserStyles(styles);\n        }\n    }\n\n    public applyClassesFromColDef() {\n        const colDef = this.column.getColDef();\n        const cellClassParams: CellClassParams = this.beans.gridOptionsService.addGridCommonParams({\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            column: this.column,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex!\n        });\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, false));\n        }\n\n        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, true));\n        }\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}\n", "import { Autowired, Bean, Context, Optional, PostConstruct } from \"../context/context\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { GridApi } from \"../gridApi\";\nimport { ExpressionService } from \"../valueService/expressionService\";\nimport { RowRenderer } from \"./rowRenderer\";\nimport { TemplateService } from \"../templateService\";\nimport { ValueService } from \"../valueService/valueService\";\nimport { EventService } from \"../eventService\";\nimport { ColumnAnimationService } from \"./columnAnimationService\";\nimport { IRangeService, ISelectionHandleFactory } from \"../interfaces/IRangeService\";\nimport { FocusService } from \"../focusService\";\nimport { PopupService } from \"../widgets/popupService\";\nimport { ValueFormatterService } from \"./valueFormatterService\";\nimport { StylingService } from \"../styling/stylingService\";\nimport { ColumnHoverService } from \"./columnHoverService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { UserComponentFactory } from \"../components/framework/userComponentFactory\";\nimport { DragService } from \"../dragAndDrop/dragService\";\nimport { DragAndDropService } from \"../dragAndDrop/dragAndDropService\";\nimport { SortController } from \"../sortController\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { RowContainerHeightService } from \"./rowContainerHeightService\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { CellPositionUtils } from \"../entities/cellPositionUtils\";\nimport { RowPositionUtils } from \"../entities/rowPositionUtils\";\nimport { ISelectionService } from \"../interfaces/iSelectionService\";\nimport { RowCssClassCalculator } from \"./row/rowCssClassCalculator\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IServerSideRowModel } from \"../interfaces/iServerSideRowModel\";\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { NavigationService } from \"../gridBodyComp/navigationService\";\nimport { AgStackComponentsRegistry } from \"../components/agStackComponentsRegistry\";\nimport { CtrlsFactory } from \"../ctrlsFactory\";\nimport { UserComponentRegistry } from \"../components/framework/userComponentRegistry\";\nimport { ValueCache } from \"../valueService/valueCache\";\nimport { RowNodeEventThrottle } from \"../entities/rowNodeEventThrottle\";\nimport { GridOptionsService } from \"../gridOptionsService\";\nimport { LocaleService } from \"../localeService\";\nimport { Environment } from \"../environment\";\nimport { ValueParserService } from \"../valueService/valueParserService\";\nimport { SyncService } from \"../syncService\";\nimport { AriaAnnouncementService } from \"./ariaAnnouncementService\";\n\n/** Using the IoC has a slight performance consideration, which is no problem most of the\n * time, unless we are trashing objects - which is the case when scrolling and rowComp\n * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired\n * with the IoC. Instead they get passed this object which is all the beans the RowComp\n * and CellComp need. Not autowiring all the cells gives performance improvement. */\n@Bean('beans')\nexport class Beans {\n\n    @Autowired('resizeObserverService') public resizeObserverService: ResizeObserverService;\n    @Autowired('paginationProxy') public paginationProxy: PaginationProxy;\n    @Autowired('context') public context: Context;\n    @Autowired('columnApi') public columnApi: ColumnApi;\n    @Autowired('gridApi') public gridApi: GridApi;\n    @Autowired('gridOptionsService') public gridOptionsService: GridOptionsService;\n    @Autowired('expressionService') public expressionService: ExpressionService;\n    @Autowired('environment') public environment: Environment;\n    @Autowired('rowRenderer') public rowRenderer: RowRenderer;\n    @Autowired('templateService') public templateService: TemplateService;\n    @Autowired('valueService') public valueService: ValueService;\n    @Autowired('eventService') public eventService: EventService;\n    @Autowired('columnModel') public columnModel: ColumnModel;\n    @Autowired('headerNavigationService') public headerNavigationService: HeaderNavigationService;\n    @Autowired('navigationService') public navigationService: NavigationService;\n    @Autowired('columnAnimationService') public columnAnimationService: ColumnAnimationService;\n    @Optional('rangeService') public rangeService: IRangeService;\n    @Autowired('focusService') public focusService: FocusService;\n    @Autowired('popupService') public popupService: PopupService;\n    @Autowired('valueFormatterService') public valueFormatterService: ValueFormatterService;\n    @Autowired('stylingService') public stylingService: StylingService;\n    @Autowired('columnHoverService') public columnHoverService: ColumnHoverService;\n    @Autowired('userComponentFactory') public userComponentFactory: UserComponentFactory;\n    @Autowired('userComponentRegistry') public userComponentRegistry: UserComponentRegistry;\n    @Autowired('animationFrameService') public animationFrameService: AnimationFrameService;\n    @Autowired('dragService') public dragService: DragService;\n    @Autowired('dragAndDropService') public dragAndDropService: DragAndDropService;\n    @Autowired('sortController') public sortController: SortController;\n    @Autowired('filterManager') public filterManager: FilterManager;\n    @Autowired('rowContainerHeightService') public rowContainerHeightService: RowContainerHeightService;\n    @Autowired('frameworkOverrides') public frameworkOverrides: IFrameworkOverrides;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') public rowPositionUtils: RowPositionUtils;\n    @Autowired('selectionService') public selectionService: ISelectionService;\n    @Optional('selectionHandleFactory') public selectionHandleFactory: ISelectionHandleFactory;\n    @Autowired('rowCssClassCalculator') public rowCssClassCalculator: RowCssClassCalculator;\n    @Autowired('rowModel') public rowModel: IRowModel;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('ctrlsFactory') public ctrlsFactory: CtrlsFactory;\n    @Autowired('agStackComponentsRegistry') public agStackComponentsRegistry: AgStackComponentsRegistry;\n    @Autowired('valueCache') public valueCache: ValueCache;\n    @Autowired('rowNodeEventThrottle') public rowNodeEventThrottle: RowNodeEventThrottle;\n    @Autowired('localeService') public localeService: LocaleService;\n    @Autowired('valueParserService') public valueParserService: ValueParserService;\n    @Autowired('syncService') public syncService: SyncService;\n    @Autowired('ariaAnnouncementService') public ariaAnnouncementService: AriaAnnouncementService;\n\n    public clientSideRowModel: IClientSideRowModel;\n    public serverSideRowModel: IServerSideRowModel;\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsService.isRowModelType('clientSide')) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n        if (this.gridOptionsService.isRowModelType('serverSide')) {\n            this.serverSideRowModel = this.rowModel as IServerSideRowModel;\n        }\n    }\n}\n", "import { Column } from \"../../entities/column\";\nimport { CellClickedEvent, CellDoubleClickedEvent, CellMouseOutEvent, CellMouseOverEvent, Events } from \"../../events\";\nimport { isBrowserSafari, isIOSUserAgent } from \"../../utils/browser\";\nimport { isElementChildOfClass, isFocusableFormField } from \"../../utils/dom\";\nimport { isEventSupported, isStopPropagationForAgGrid } from \"../../utils/event\";\nimport { Beans } from \"../beans\";\nimport { CellCtrl } from \"./cellCtrl\";\n\nexport class CellMouseListenerFeature extends Beans {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: Beans;\n    private readonly column: Column;\n\n    private lastIPadMouseClickEvent: number;\n\n    constructor(ctrl: CellCtrl, beans: Beans, column: Column) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = column;\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        switch (eventName) {\n            case 'click':\n                this.onCellClicked(mouseEvent);\n                break;\n            case 'mousedown':\n            case 'touchstart':\n                this.onMouseDown(mouseEvent);\n                break;\n            case 'dblclick':\n                this.onCellDoubleClicked(mouseEvent);\n                break;\n            case 'mouseout':\n                this.onMouseOut(mouseEvent);\n                break;\n            case 'mouseover':\n                this.onMouseOver(mouseEvent);\n                break;\n        }\n    }\n\n    private onCellClicked(mouseEvent: MouseEvent): void {\n        // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.\n        if (this.isDoubleClickOnIPad()) {\n            this.onCellDoubleClicked(mouseEvent);\n            mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in\n\n            return;\n        }\n\n        const { eventService, rangeService, gridOptionsService } = this.beans;\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\n\n        if (rangeService && isMultiKey) {\n            // the mousedown event has created the range already, so we only intersect if there is more than one\n            // range on this cell\n            if (rangeService.getCellRangeCount(this.cellCtrl.getCellPosition()) > 1) {\n                rangeService.intersectLastRange(true);\n            }\n        }\n\n        const cellClickedEvent: CellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);\n        eventService.dispatchEvent(cellClickedEvent);\n\n        const colDef = this.column.getColDef();\n\n        if (colDef.onCellClicked) {\n            // to make callback async, do in a timeout\n            window.setTimeout(() => {\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\n                    colDef.onCellClicked!(cellClickedEvent);\n                });\n            }, 0);\n        }\n\n        const editOnSingleClick = (gridOptionsService.get('singleClickEdit') || colDef.singleClickEdit)\n            && !gridOptionsService.get('suppressClickEdit');\n\n        // edit on single click, but not if extending a range\n        if (editOnSingleClick && !(mouseEvent.shiftKey && rangeService?.getCellRanges().length != 0)) {\n            this.cellCtrl.startRowOrCellEdit();\n        }\n    }\n\n    // returns true if on iPad and this is second 'click' event in 200ms\n    private isDoubleClickOnIPad(): boolean {\n        if (!isIOSUserAgent() || isEventSupported('dblclick')) { return false; }\n\n        const nowMillis = new Date().getTime();\n        const res = nowMillis - this.lastIPadMouseClickEvent < 200;\n        this.lastIPadMouseClickEvent = nowMillis;\n\n        return res;\n    }\n\n    private onCellDoubleClicked(mouseEvent: MouseEvent) {\n        const colDef = this.column.getColDef();\n        // always dispatch event to eventService\n        const cellDoubleClickedEvent: CellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);\n        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);\n\n        // check if colDef also wants to handle event\n        if (typeof colDef.onCellDoubleClicked === 'function') {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() =>  {\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\n                    (colDef.onCellDoubleClicked as any)(cellDoubleClickedEvent);\n                });\n            }, 0);\n        }\n\n        const editOnDoubleClick = !this.beans.gridOptionsService.get('singleClickEdit')\n            && !this.beans.gridOptionsService.get('suppressClickEdit');\n        if (editOnDoubleClick) {\n            this.cellCtrl.startRowOrCellEdit(null, mouseEvent);\n        }\n    }\n\n    private onMouseDown(mouseEvent: MouseEvent): void {\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n        const target = mouseEvent.target as HTMLElement;\n        const { cellCtrl, beans } = this;\n        const { eventService, rangeService, focusService } = beans;\n\n        // do not change the range for right-clicks inside an existing range\n        if (this.isRightClickInExistingRange(mouseEvent)) {\n            return;\n        }\n\n        const ranges = rangeService && rangeService.getCellRanges().length != 0;\n\n        if (!shiftKey || !ranges) {\n            // We only need to pass true to focusCell when the browser is Safari and we are trying\n            // to focus the cell itself. This should never be true if the mousedown was triggered\n            // due to a click on a cell editor for example.\n            const forceBrowserFocus = (isBrowserSafari()) && !cellCtrl.isEditing() && !isFocusableFormField(target);\n\n            cellCtrl.focusCell(forceBrowserFocus);\n        }\n\n        // if shift clicking, and a range exists, we keep the focus on the cell that started the\n        // range as the user then changes the range selection.\n        if (shiftKey && ranges && !focusService.isCellFocused(cellCtrl.getCellPosition())) {\n            // this stops the cell from getting focused\n            mouseEvent.preventDefault();\n\n            const focusedCellPosition = focusService.getFocusedCell();\n            if (focusedCellPosition) {\n                const { column, rowIndex, rowPinned } = focusedCellPosition;\n                const focusedRowCtrl = beans.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n                const focusedCellCtrl = focusedRowCtrl?.getCellCtrl(column);\n\n                // if the focused cell is editing, need to stop editing first\n                if (focusedCellCtrl?.isEditing()) {\n                    focusedCellCtrl.stopEditing();\n                }\n\n                // focus could have been lost, so restore it to the starting cell in the range if needed\n                focusService.setFocusedCell({\n                    column,\n                    rowIndex,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: true,\n                });\n            }\n        }\n\n        // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox\n        // is focused but we don't want to change the range selection, so return here.\n        if (this.containsWidget(target)) { return; }\n\n        if (rangeService) {\n            const thisCell = this.cellCtrl.getCellPosition();\n\n            if (shiftKey) {\n                rangeService.extendLatestRangeToCell(thisCell);\n            } else {\n                const isMultiKey = ctrlKey || metaKey;\n                rangeService.setRangeToCell(thisCell, isMultiKey);\n            }\n        }\n\n        eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));\n    }\n\n    private isRightClickInExistingRange(mouseEvent: MouseEvent): boolean {\n        const { rangeService } = this.beans;\n\n        if (rangeService) {\n            const cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());\n            const isRightClick = mouseEvent.button === 2 || (mouseEvent.ctrlKey && this.beans.gridOptionsService.get('allowContextMenuWithControlKey'));\n\n            if (cellInRange && isRightClick) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private containsWidget(target: HTMLElement): boolean {\n        return isElementChildOfClass(target, 'ag-selection-checkbox', 3);\n    }\n\n    private onMouseOut(mouseEvent: MouseEvent): void {\n        if (this.mouseStayingInsideCell(mouseEvent)) { return; }\n        const cellMouseOutEvent: CellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);\n        this.beans.eventService.dispatchEvent(cellMouseOutEvent);\n        this.beans.columnHoverService.clearMouseOver();\n    }\n\n    private onMouseOver(mouseEvent: MouseEvent): void {\n        if (this.mouseStayingInsideCell(mouseEvent)) { return; }\n        const cellMouseOverEvent: CellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);\n        this.beans.eventService.dispatchEvent(cellMouseOverEvent);\n        this.beans.columnHoverService.setMouseOver([this.column]);\n    }\n\n    private mouseStayingInsideCell(e: MouseEvent): boolean {\n        if (!e.target || !e.relatedTarget) { return false; }\n        const eGui = this.cellCtrl.getGui();\n        const cellContainsTarget = eGui.contains(e.target as Node);\n        const cellContainsRelatedTarget = eGui.contains(e.relatedTarget as Node);\n        return cellContainsTarget && cellContainsRelatedTarget;\n    }\n\n    public destroy(): void {\n    }\n}", "import { BeanStub } from \"../../context/beanStub\";\nimport { CellCtrl } from \"./cellCtrl\";\nimport { Beans } from \"../beans\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { RowCtrl } from \"../row/rowCtrl\";\nimport { isDeleteKey } from \"../../utils/keyboard\";\nimport { Events } from \"../../eventKeys\";\n\nexport class CellKeyboardListenerFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: Beans;\n    private readonly rowNode: RowNode;\n    private readonly rowCtrl: RowCtrl;\n\n    private eGui: HTMLElement;\n\n    constructor(ctrl: CellCtrl, beans: Beans, column: Column, rowNode: RowNode, rowCtrl: RowCtrl) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.rowNode = rowNode;\n        this.rowCtrl = rowCtrl;\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.F2:\n                this.onF2KeyDown(event);\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.BACKSPACE:\n            case KeyCode.DELETE:\n                this.onBackspaceOrDeleteKeyDown(key, event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                this.onNavigationKeyDown(event, key);\n                break;\n        }\n    }\n\n    private onNavigationKeyDown(event: KeyboardEvent, key: string): void {\n        if (this.cellCtrl.isEditing()) { return; }\n\n        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {\n            this.onShiftRangeSelect(event);\n        } else {\n            this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);\n        }\n\n        // if we don't prevent default, the grid will scroll with the navigation keys\n        event.preventDefault();\n    }\n\n    private onShiftRangeSelect(event: KeyboardEvent): void {\n        if (!this.beans.rangeService) { return; }\n\n        const endCell = this.beans.rangeService.extendLatestRangeInDirection(event);\n\n        if (endCell) {\n            this.beans.navigationService.ensureCellVisible(endCell);\n        }\n    }\n\n    private onTabKeyDown(event: KeyboardEvent): void {\n        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);\n    }\n\n    private onBackspaceOrDeleteKeyDown(key: string, event: KeyboardEvent): void {\n        const { cellCtrl, beans, rowNode } = this;\n        const { gridOptionsService, rangeService, eventService } = beans;\n\n        if (cellCtrl.isEditing()) { return; }\n\n        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });\n\n        if (isDeleteKey(key, gridOptionsService.get('enableCellEditingOnBackspace'))) {\n            if (rangeService && gridOptionsService.get('enableRangeSelection')) {\n                rangeService.clearCellRangeCellValues({ dispatchWrapperEvents: true, wrapperEventSource: 'deleteKey' });\n            } else if (cellCtrl.isCellEditable()) {\n                rowNode.setDataValue(cellCtrl.getColumn(), null, 'cellClear');\n            }\n        } else {\n            cellCtrl.startRowOrCellEdit(key, event);\n        }\n\n        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });\n    }\n\n    private onEnterKeyDown(e: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {\n            this.cellCtrl.stopEditingAndFocus(false, e.shiftKey);\n        } else {\n            if (this.beans.gridOptionsService.get('enterNavigatesVertically')) {\n                const key = e.shiftKey ? KeyCode.UP : KeyCode.DOWN;\n                this.beans.navigationService.navigateToNextCell(null, key, this.cellCtrl.getCellPosition(), false);\n            } else {\n                this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, e);\n                if (this.cellCtrl.isEditing()) {\n                    // if we started editing, then we need to prevent default, otherwise the Enter action can get\n                    // applied to the cell editor. this happened, for example, with largeTextCellEditor where not\n                    // preventing default results in a 'new line' character getting inserted in the text area\n                    // when the editing was started\n                    e.preventDefault();\n                }\n            }\n        }\n    }\n\n    private onF2KeyDown(event: KeyboardEvent): void {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(KeyCode.F2, event);\n        }\n    }\n\n    private onEscapeKeyDown(event: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing()) {\n            this.cellCtrl.stopRowOrCellEdit(true);\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    public processCharacter(event: KeyboardEvent): void {\n        // check this, in case focus is on a (for example) a text field inside the cell,\n        // in which cse we should not be listening for these key pressed\n        const eventTarget = event.target;\n        const eventOnChildComponent = eventTarget !== this.eGui;\n\n        if (eventOnChildComponent || this.cellCtrl.isEditing()) { return; }\n\n        const key = event.key;\n        if (key === ' ') {\n            this.onSpaceKeyDown(event);\n        } else {\n            this.cellCtrl.startRowOrCellEdit(key, event);\n            // if we don't prevent default, then the event also gets applied to the text field\n            // (at least when doing the default editor), but we need to allow the editor to decide\n            // what it wants to do. we only do this IF editing was started - otherwise it messes\n            // up when the use is not doing editing, but using rendering with text fields in cellRenderer\n            // (as it would block the the user from typing into text fields).\n            event.preventDefault();\n        }\n    }\n\n    private onSpaceKeyDown(event: KeyboardEvent): void {\n        const { gridOptionsService } = this.beans;\n\n        if (!this.cellCtrl.isEditing() && gridOptionsService.isRowSelection()) {\n            const currentSelection = this.rowNode.isSelected();\n            const newSelection = !currentSelection;\n            if (newSelection || !gridOptionsService.get('suppressRowDeselection')) {\n                const groupSelectsFiltered = this.beans.gridOptionsService.get('groupSelectsFiltered');\n                const updatedCount = this.rowNode.setSelectedParams({\n                    newValue: newSelection,\n                    rangeSelect: event.shiftKey,\n                    groupSelectsFiltered: groupSelectsFiltered,\n                    event,\n                    source: 'spaceKey',\n                });\n                if (currentSelection === undefined && updatedCount === 0) {\n                    this.rowNode.setSelectedParams({\n                        newValue: false,\n                        rangeSelect: event.shiftKey,\n                        groupSelectsFiltered: groupSelectsFiltered,\n                        event,\n                        source: 'spaceKey',\n                    });\n                }\n            }\n        }\n\n        // prevent default as space key, by default, moves browser scroll down\n        event.preventDefault();\n    }\n\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Beans } from \"./beans\";\nimport { Column } from \"../entities/column\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { DndSourceOnRowDragParams } from \"../entities/colDef\";\n\nexport class DndSourceComp extends Component {\n\n    private readonly rowNode: RowNode;\n    private readonly column: Column;\n    private readonly eCell: HTMLElement;\n\n    constructor(rowNode: RowNode, column: Column, eCell: HTMLElement) {\n        super(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.eCell = eCell;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n        eGui.appendChild(createIconNoSpan('rowDrag', this.gridOptionsService, null)!);\n        // we need to stop the event propagation here to avoid starting a range selection while dragging\n        this.addGuiEventListener('mousedown', (e: MouseEvent) => {\n            e.stopPropagation();\n        });\n        this.addDragSource();\n        this.checkVisibility();\n    }\n\n    private addDragSource(): void {\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\n    }\n\n    private onDragStart(dragEvent: DragEvent): void {\n\n        const providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;\n\n        dragEvent.dataTransfer!.setDragImage(this.eCell, 0, 0);\n\n        // default behaviour is to convert data to json and set into drag component\n        const defaultOnRowDrag = () => {\n            try {\n                const jsonData = JSON.stringify(this.rowNode.data);\n\n                dragEvent.dataTransfer!.setData('application/json', jsonData);\n                dragEvent.dataTransfer!.setData('text/plain', jsonData);\n\n            } catch (e) {\n                // if we cannot convert the data to json, then we do not set the type\n            }\n        };\n\n        if (providedOnRowDrag) {\n            const params: DndSourceOnRowDragParams = this.gridOptionsService.addGridCommonParams({\n                rowNode: this.rowNode, dragEvent: dragEvent\n            });\n            providedOnRowDrag(params);\n        } else {\n            defaultOnRowDrag();\n        }\n    }\n\n    private checkVisibility(): void {\n        const visible = this.column.isDndSource(this.rowNode);\n        this.setDisplayed(visible);\n    }\n}\n", "import { AbstractColDef, HeaderClassParams, ToolPanelClassParams } from \"../../entities/colDef\";\nimport { GridOptionsService } from \"../../gridOptionsService\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Column } from \"../../entities/column\";\nimport { ProvidedColumnGroup } from \"../../entities/providedColumnGroup\";\nimport { missing } from \"../../utils/generic\";\nimport { IAbstractHeaderCellComp } from \"./abstractCell/abstractHeaderCellCtrl\";\nimport { ICellComp } from \"../../rendering/cell/cellCtrl\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\n\nconst CSS_FIRST_COLUMN = 'ag-column-first';\nconst CSS_LAST_COLUMN = 'ag-column-last';\n\nexport class CssClassApplier {\n\n    public static getHeaderClassesFromColDef(\n        abstractColDef: AbstractColDef | null,\n        gridOptionsService: GridOptionsService,\n        column: Column | null,\n        columnGroup: ColumnGroup | null\n    ): string[] {\n        if (missing(abstractColDef)) { return []; }\n\n        return this.getColumnClassesFromCollDef(\n            abstractColDef.headerClass,\n            abstractColDef,\n            gridOptionsService,\n            column,\n            columnGroup\n        );\n    }\n\n    public static getToolPanelClassesFromColDef(\n        abstractColDef: AbstractColDef | null,\n        gridOptionsService: GridOptionsService,\n        column: Column | null,\n        columnGroup: ProvidedColumnGroup | null\n    ): string[] {\n        if (missing(abstractColDef)) { return []; }\n\n        return this.getColumnClassesFromCollDef(\n            abstractColDef.toolPanelClass,\n            abstractColDef,\n            gridOptionsService,\n            column,\n            columnGroup\n        );\n    }\n\n    public static refreshFirstAndLastStyles(comp: IAbstractHeaderCellComp | ICellComp, column: Column | ColumnGroup, columnModel: ColumnModel) {\n        comp.addOrRemoveCssClass(CSS_FIRST_COLUMN, columnModel.isColumnAtEdge(column, 'first'));\n        comp.addOrRemoveCssClass(CSS_LAST_COLUMN, columnModel.isColumnAtEdge(column, 'last'));\n    }\n\n    private static getClassParams<T extends HeaderClassParams | ToolPanelClassParams>(abstractColDef: AbstractColDef,\n        gridOptionsService: GridOptionsService,\n        column: Column | null,\n        columnGroup: T['columnGroup']): T {\n        return gridOptionsService.addGridCommonParams({\n            // bad naming, as colDef here can be a group or a column,\n            // however most people won't appreciate the difference,\n            // so keeping it as colDef to avoid confusion.\n            colDef: abstractColDef,\n            column: column,\n            columnGroup: columnGroup\n        } as WithoutGridCommon<T>);\n    }\n\n    private static getColumnClassesFromCollDef<T extends HeaderClassParams | ToolPanelClassParams>(\n        classesOrFunc: string | string[] | ((params: T) => string | string[] | undefined) | null | undefined,\n        abstractColDef: AbstractColDef,\n        gridOptionsService: GridOptionsService,\n        column: Column | null,\n        columnGroup: ColumnGroup | ProvidedColumnGroup | null\n    ): string[] {\n        if (missing(classesOrFunc)) { return []; }\n\n        let classToUse: string | string[] | undefined;\n\n        if (typeof classesOrFunc === 'function') {\n            const params: T = this.getClassParams(abstractColDef, gridOptionsService, column, columnGroup);\n            classToUse = classesOrFunc(params);\n        } else {\n            classToUse = classesOrFunc;\n        }\n\n        if (typeof classToUse === 'string') { return [classToUse]; }\n        if (Array.isArray(classToUse)) { return [...classToUse]; }\n\n        return [];\n    }\n}", "import { Beans } from \"./../beans\";\nimport { Column } from \"../../entities/column\";\nimport { CellStyle } from \"../../entities/colDef\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { CellChangedEvent } from \"../../interfaces/iRowNode\";\nimport { CellPosition } from \"../../entities/cellPositionUtils\";\nimport {\n    CellContextMenuEvent,\n    CellEditingStartedEvent,\n    CellEditingStoppedEvent,\n    CellEvent,\n    CellFocusedEvent,\n    Events,\n    FlashCellsEvent\n} from \"../../events\";\nimport { CellRangeFeature } from \"./cellRangeFeature\";\nimport { exists, makeNull } from \"../../utils/generic\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CellPositionFeature } from \"./cellPositionFeature\";\nimport { escapeString } from \"../../utils/string\";\nimport { CellCustomStyleFeature } from \"./cellCustomStyleFeature\";\nimport { TooltipFeature, ITooltipFeatureCtrl } from \"../../widgets/tooltipFeature\";\nimport { RowPosition } from \"../../entities/rowPositionUtils\";\nimport { RowCtrl } from \"../row/rowCtrl\";\nimport { CellMouseListenerFeature } from \"./cellMouseListenerFeature\";\nimport { CellKeyboardListenerFeature } from \"./cellKeyboardListenerFeature\";\nimport { ICellRenderer, ICellRendererParams } from \"../cellRenderers/iCellRenderer\";\nimport { ICellEditor, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { DndSourceComp } from \"../dndSourceComp\";\nimport { warnOnce } from \"../../utils/function\";\nimport { RowDragComp } from \"../row/rowDragComp\";\nimport { getValueUsingField } from \"../../utils/object\";\nimport { getElementSize } from \"../../utils/dom\";\nimport { setAriaColIndex } from \"../../utils/aria\";\nimport { CssClassApplier } from \"../../headerRendering/cells/cssClassApplier\";\nimport { FlashCellsParams } from \"../rowRenderer\";\n\nconst CSS_CELL = 'ag-cell';\nconst CSS_AUTO_HEIGHT = 'ag-cell-auto-height';\nconst CSS_NORMAL_HEIGHT = 'ag-cell-normal-height';\nconst CSS_CELL_FOCUS = 'ag-cell-focus';\nconst CSS_CELL_FIRST_RIGHT_PINNED = 'ag-cell-first-right-pinned';\nconst CSS_CELL_LAST_LEFT_PINNED = 'ag-cell-last-left-pinned';\nconst CSS_CELL_NOT_INLINE_EDITING = 'ag-cell-not-inline-editing';\nconst CSS_COLUMN_HOVER = 'ag-column-hover';\nconst CSS_CELL_WRAP_TEXT = 'ag-cell-wrap-text';\n\nexport interface ICellComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setUserStyles(styles: CellStyle): void;\n    getFocusableElement(): HTMLElement;\n\n    setIncludeSelection(include: boolean): void;\n    setIncludeRowDrag(include: boolean): void;\n    setIncludeDndSource(include: boolean): void;\n\n    getCellEditor(): ICellEditor | null;\n    getCellRenderer(): ICellRenderer | null;\n    getParentOfValue(): HTMLElement | null;\n\n    setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any, forceNewCellRendererInstance: boolean): void;\n    setEditDetails(compDetails?: UserCompDetails, popup?: boolean, position?: 'over' | 'under', reactiveCustomComponents?: boolean): void;\n}\n\nlet instanceIdSequence = 0;\n\nexport class CellCtrl extends BeanStub {\n\n    public static DOM_DATA_KEY_CELL_CTRL = 'cellCtrl';\n\n    private instanceId: string;\n\n    private eGui: HTMLElement;\n    private cellComp: ICellComp;\n    private beans: Beans;\n    private column: Column;\n    private rowNode: RowNode;\n    private rowCtrl: RowCtrl;\n    private editCompDetails?: UserCompDetails;\n\n    private focusEventToRestore: CellFocusedEvent | undefined;\n\n    private printLayout: boolean;\n\n    private value: any;\n    private valueFormatted: any;\n\n    private cellRangeFeature: CellRangeFeature | null = null;\n    private cellPositionFeature: CellPositionFeature | null = null;\n    private cellCustomStyleFeature: CellCustomStyleFeature | null = null;\n    private tooltipFeature: TooltipFeature | null = null;\n    private cellMouseListenerFeature: CellMouseListenerFeature | null = null;\n    private cellKeyboardListenerFeature: CellKeyboardListenerFeature | null = null;\n\n    private cellPosition: CellPosition;\n    private editing: boolean;\n    \n    private includeSelection: boolean;\n    private includeDndSource: boolean;\n    private includeRowDrag: boolean;\n    private colIdSanitised: string;\n    private tabIndex: number | undefined;\n    private isAutoHeight: boolean;\n\n    private suppressRefreshCell = false;\n\n    // this comp used only for custom row drag handle (ie when user calls params.registerRowDragger)\n    private customRowDragComp: RowDragComp;\n\n    private onCellCompAttachedFuncs: (() => void)[] = [];\n\n    constructor(column: Column, rowNode: RowNode, beans: Beans, rowCtrl: RowCtrl) {\n        super();\n        this.column = column;\n        this.rowNode = rowNode;\n        this.beans = beans;\n        this.rowCtrl = rowCtrl;\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = column.getId() + '-' + instanceIdSequence++;\n\n        this.colIdSanitised = escapeString(this.column.getId())!;\n        if (!beans.gridOptionsService.get('suppressCellFocus')) {\n            this.tabIndex = -1;\n        }\n\n        this.createCellPosition();\n        this.addFeatures();\n        this.updateAndFormatValue(false);\n    }\n\n    public shouldRestoreFocus(): boolean {\n        return this.beans.focusService.shouldRestoreFocus(this.cellPosition);\n    }\n\n\n    private addFeatures(): void {\n        this.cellPositionFeature = new CellPositionFeature(this, this.beans);\n        this.addDestroyFunc(() => { this.cellPositionFeature?.destroy(); this.cellPositionFeature = null; });\n\n        this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);\n        this.addDestroyFunc(() => { this.cellCustomStyleFeature?.destroy(); this.cellCustomStyleFeature = null; });\n\n        this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);\n        this.addDestroyFunc(() => { this.cellMouseListenerFeature?.destroy(); this.cellMouseListenerFeature = null; });\n\n        this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.rowCtrl);\n        this.addDestroyFunc(() => { this.cellKeyboardListenerFeature?.destroy(); this.cellKeyboardListenerFeature = null; });\n\n        if (this.column.isTooltipEnabled()) {\n            this.enableTooltipFeature();\n            this.addDestroyFunc(() => { this.disableTooltipFeature(); });\n        }\n\n        const rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsService.get('enableRangeSelection');\n        if (rangeSelectionEnabled) {\n            this.cellRangeFeature = new CellRangeFeature(this.beans, this);\n            this.addDestroyFunc(() => { this.cellRangeFeature?.destroy(); this.cellRangeFeature = null; });\n        }\n    }\n\n    private enableTooltipFeature(value?: string, shouldDisplayTooltip?: () => boolean): void {\n        const getTooltipValue = () => {\n            const colDef = this.column.getColDef();\n            const data = this.rowNode.data;\n\n            if (colDef.tooltipField && exists(data)) {\n                return getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());\n            }\n\n            const valueGetter = colDef.tooltipValueGetter;\n\n            if (valueGetter) {\n                return valueGetter(this.beans.gridOptionsService.addGridCommonParams({\n                    location: 'cell',\n                    colDef: this.column.getColDef(),\n                    column: this.column,\n                    rowIndex: this.cellPosition.rowIndex,\n                    node: this.rowNode,\n                    data: this.rowNode.data,\n                    value: this.value,\n                    valueFormatted: this.valueFormatted,\n                }));\n            }\n\n            return null;\n        };\n\n        const isTooltipWhenTruncated = this.beans.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !this.isCellRenderer()) {\n            shouldDisplayTooltip = () => {\n                const eGui = this.getGui()\n                const textEl = eGui.children.length === 0 ? eGui : eGui.querySelector('.ag-cell-value');\n                if (!textEl) { return true; }\n\n                return textEl.scrollWidth > textEl.clientWidth;\n            }\n        }\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getRowIndex: () => this.cellPosition.rowIndex,\n            getRowNode: () => this.rowNode,\n            getGui: () => this.getGui(),\n            getLocation: () => 'cell',\n            getTooltipValue: value != null ? () => value : getTooltipValue,\n\n            // this makes no sense, why is the cell formatted value passed to the tooltip???\n            getValueFormatted: () => this.valueFormatted,\n            shouldDisplayTooltip\n        };\n\n        this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);\n    }\n\n    private disableTooltipFeature() {\n        if (!this.tooltipFeature) { return; }\n\n        this.tooltipFeature.destroy();\n        this.tooltipFeature = null;\n    }\n\n    public setComp(\n        comp: ICellComp,\n        eGui: HTMLElement,\n        eCellWrapper: HTMLElement | undefined,\n        printLayout: boolean,\n        startEditing: boolean\n    ): void {\n        this.cellComp = comp;\n        this.eGui = eGui;\n        this.printLayout = printLayout;\n\n        this.addDomData();\n\n        this.onCellFocused(this.focusEventToRestore);\n        this.applyStaticCssClasses();\n        this.setWrapText();\n\n        this.onFirstRightPinnedChanged();\n        this.onLastLeftPinnedChanged();\n        this.onColumnHover();\n        this.setupControlComps();\n\n        this.setupAutoHeight(eCellWrapper);\n\n        this.refreshFirstAndLastStyles();\n        this.refreshAriaColIndex();\n\n        this.cellPositionFeature?.setComp(eGui);\n        this.cellCustomStyleFeature?.setComp(comp);\n        this.tooltipFeature?.refreshToolTip();\n        this.cellKeyboardListenerFeature?.setComp(this.eGui);\n\n        if (this.cellRangeFeature) { this.cellRangeFeature.setComp(comp, eGui); }\n\n        if (startEditing && this.isCellEditable()) {\n            this.startEditing();\n        } else {\n            this.showValue();\n        }\n\n        if (this.onCellCompAttachedFuncs.length) {\n            this.onCellCompAttachedFuncs.forEach(func => func());\n            this.onCellCompAttachedFuncs = [];\n        }\n    }\n\n    private setupAutoHeight(eCellWrapper?: HTMLElement): void {\n        this.isAutoHeight = this.column.isAutoHeight();\n        if (!this.isAutoHeight || !eCellWrapper) { return; }\n\n        const eParentCell = eCellWrapper.parentElement!;\n        // taking minRowHeight from getRowHeightForNode means the getRowHeight() callback is used,\n        // thus allowing different min heights for different rows.\n        const minRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this.rowNode).height;\n\n        const measureHeight = (timesCalled: number) => {\n            if (this.editing) { return; }\n            // because of the retry's below, it's possible the retry's go beyond\n            // the rows life.\n            if (!this.isAlive()) { return; }\n\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = getElementSize(eParentCell);\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\n\n            const wrapperHeight = eCellWrapper!.offsetHeight;\n            const autoHeight = wrapperHeight + extraHeight;\n\n            if (timesCalled < 5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gridOptionsService.getDocument();\n                const notYetInDom = !doc || !doc.contains(eCellWrapper);\n\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight == 0;\n\n                if (notYetInDom || possiblyNoContentYet) {\n                    window.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n\n            const newHeight = Math.max(autoHeight, minRowHeight);\n            this.rowNode.setRowAutoHeight(newHeight, this.column);\n        };\n\n        const listener = () => measureHeight(0);\n\n        // do once to set size in case size doesn't change, common when cell is blank\n        listener();\n\n        const destroyResizeObserver = this.beans.resizeObserverService.observeResize(eCellWrapper, listener);\n\n        this.addDestroyFunc(() => {\n            destroyResizeObserver();\n            this.rowNode.setRowAutoHeight(undefined, this.column);\n        });\n    }\n\n    public getCellAriaRole(): string {\n        return this.column.getColDef().cellAriaRole ?? 'gridcell';\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n    public getIncludeSelection(): boolean {\n        return this.includeSelection;\n    }\n    public getIncludeRowDrag(): boolean {\n        return this.includeRowDrag;\n    }\n    public getIncludeDndSource(): boolean {\n        return this.includeDndSource;\n    }\n    public getColumnIdSanitised(): string {\n        return this.colIdSanitised;\n    }\n    public getTabIndex(): number | undefined {\n        return this.tabIndex;\n    }\n    public isCellRenderer(): boolean {\n        const colDef = this.column.getColDef();\n        return colDef.cellRenderer != null || colDef.cellRendererSelector != null;\n    }\n    public getValueToDisplay(): any {\n        return this.valueFormatted != null ? this.valueFormatted : this.value;\n    }\n\n    private showValue(forceNewCellRendererInstance = false): void {\n        const valueToDisplay = this.getValueToDisplay();\n        let compDetails: UserCompDetails | undefined;\n        if (this.isCellRenderer()) {\n            const params = this.createCellRendererParams();\n            compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);\n        }\n        this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);\n        this.refreshHandle();\n    }\n\n    private setupControlComps(): void {\n        const colDef = this.column.getColDef();\n        this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);\n        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);\n        this.includeDndSource = this.isIncludeControl(colDef.dndSource);\n\n        this.cellComp.setIncludeSelection(this.includeSelection);\n        this.cellComp.setIncludeDndSource(this.includeDndSource);\n        this.cellComp.setIncludeRowDrag(this.includeRowDrag);\n    }\n\n    public isForceWrapper(): boolean {\n        // text selection requires the value to be wrapped in another element\n        const forceWrapper = this.beans.gridOptionsService.get('enableCellTextSelection') || this.column.isAutoHeight();\n        return forceWrapper;\n    }\n\n    private isIncludeControl(value: boolean | Function | undefined): boolean {\n        const rowNodePinned = this.rowNode.rowPinned != null;\n        const isFunc = typeof value === 'function';\n        const res = rowNodePinned ? false : isFunc || value === true;\n\n        return res;\n    }\n\n    private refreshShouldDestroy(): boolean {\n        const colDef = this.column.getColDef();\n        const selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);\n        const rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);\n        const dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);\n\n        return selectionChanged || rowDragChanged || dndSourceChanged;\n    }\n\n    // either called internally if single cell editing, or called by rowRenderer if row editing\n    public startEditing(key: string | null = null, cellStartedEdit = false, event: KeyboardEvent | MouseEvent | null = null): void {\n        if (!this.isCellEditable() || this.editing) { return; }\n\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\n        if (!this.cellComp) {\n            this.onCellCompAttachedFuncs.push(() => { this.startEditing(key, cellStartedEdit, event); });\n            return;\n        }\n\n        const editorParams = this.createCellEditorParams(key, cellStartedEdit);\n        const colDef = this.column.getColDef();\n        const compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);\n        this.editCompDetails = compDetails;\n\n        // if cellEditorSelector was used, we give preference to popup and popupPosition from the selector\n        const popup = compDetails?.popupFromSelector != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup ;\n        const position: 'over' | 'under' | undefined = compDetails?.popupPositionFromSelector != null ? compDetails.popupPositionFromSelector : colDef.cellEditorPopupPosition;\n\n        this.setEditing(true);\n        this.cellComp.setEditDetails(compDetails, popup, position, this.beans.gridOptionsService.get('reactiveCustomComponents'));\n\n        const e: CellEditingStartedEvent = this.createEvent(event, Events.EVENT_CELL_EDITING_STARTED);\n        this.beans.eventService.dispatchEvent(e);\n    }\n\n    private setEditing(editing: boolean): void {\n        if (this.editing === editing) { return; }\n\n        this.editing = editing;\n        this.refreshHandle();\n    }\n\n    // pass in 'true' to cancel the editing.\n    public stopRowOrCellEdit(cancel: boolean = false) {\n        if (this.beans.gridOptionsService.get('editType') === 'fullRow') {\n            this.rowCtrl.stopEditing(cancel);\n        } else {\n            this.stopEditing(cancel);\n        }\n    }\n\n    public onPopupEditorClosed(): void {\n        if (!this.isEditing()) { return; }\n        // note: this happens because of a click outside of the grid or if the popupEditor\n        // is closed with `Escape` key. if another cell was clicked, then the editing will\n        // have already stopped and returned on the conditional above.\n        this.stopEditingAndFocus();\n    }\n\n    private takeValueFromCellEditor(cancel: boolean): { newValue?: any, newValueExists: boolean } {\n        const noValueResult = { newValueExists: false };\n\n        if (cancel) { return noValueResult; }\n\n        const cellEditor =  this.cellComp.getCellEditor();\n\n        if (!cellEditor) { return noValueResult; }\n\n        const userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();\n\n        if (userWantsToCancel) { return noValueResult; }\n\n        const newValue = cellEditor.getValue();\n\n        return {\n            newValue: newValue,\n            newValueExists: true\n        };\n    }\n\n    /**\n     * @returns `True` if the value changes, otherwise `False`.\n     */\n    private saveNewValue(oldValue: any, newValue: any): boolean {\n        if (newValue === oldValue) { return false; }\n\n        // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection\n        // getting triggered, which results in all cells getting refreshed. we do not want this refresh\n        // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.\n        // if we only did this refresh (and not the one below) then the cell would flash and not be forced.\n        this.suppressRefreshCell = true;\n        const valueChanged = this.rowNode.setDataValue(this.column, newValue, 'edit');\n        this.suppressRefreshCell = false;\n\n        return valueChanged;\n    }\n\n    /**\n     * Ends the Cell Editing\n     * @param cancel `True` if the edit process is being canceled.\n     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.\n     */\n    public stopEditing(cancel = false): boolean {\n        if (!this.editing) { return false; }\n\n        const { newValue, newValueExists } = this.takeValueFromCellEditor(cancel);\n        const oldValue = this.rowNode.getValueFromValueService(this.column);\n        let valueChanged = false;\n\n        if (newValueExists) {\n            valueChanged = this.saveNewValue(oldValue, newValue);\n        }\n\n        this.setEditing(false);\n        this.cellComp.setEditDetails(); // passing nothing stops editing\n        this.editCompDetails = undefined;\n\n        this.updateAndFormatValue(false);\n        this.refreshCell({ forceRefresh: true, suppressFlash: true });\n        this.dispatchEditingStoppedEvent(oldValue, newValue, !cancel && !!valueChanged);\n\n        return valueChanged;\n    }\n\n    private dispatchEditingStoppedEvent(oldValue: any, newValue: any, valueChanged: boolean): void {\n        const editingStoppedEvent: CellEditingStoppedEvent = {\n            ...this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED),\n            oldValue,\n            newValue,\n            valueChanged\n        };\n\n        this.beans.eventService.dispatchEvent(editingStoppedEvent);\n    }\n\n    private createCellEditorParams(key: string | null, cellStartedEdit: boolean): ICellEditorParams {\n        return this.beans.gridOptionsService.addGridCommonParams({\n            value: this.rowNode.getValueFromValueService(this.column),\n            eventKey: key,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            rowIndex: this.getCellPosition().rowIndex,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            cellStartedEdit: cellStartedEdit,\n            onKeyDown: this.onKeyDown.bind(this),\n            stopEditing: this.stopEditingAndFocus.bind(this),\n            eGridCell: this.getGui(),\n            parseValue: this.parseValue.bind(this),\n            formatValue: this.formatValue.bind(this)\n        });\n    }\n\n    private createCellRendererParams(): ICellRendererParams {\n        const res: ICellRendererParams = this.beans.gridOptionsService.addGridCommonParams({\n            value: this.value,\n            valueFormatted: this.valueFormatted,\n            getValue: () => this.rowNode.getValueFromValueService(this.column),\n            setValue: (value:any) => this.beans.valueService.setValue(this.rowNode, this.column, value),\n            formatValue: this.formatValue.bind(this),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            pinned: this.column.getPinned() as any,\n            colDef: this.column.getColDef(),\n            column: this.column,\n            rowIndex: this.getCellPosition().rowIndex,\n            refreshCell: this.refreshCell.bind(this),\n            eGridCell: this.getGui(),\n            eParentOfValue: this.cellComp.getParentOfValue()!,\n\n            registerRowDragger: (rowDraggerElement: HTMLElement, dragStartPixels: number, value?: string, suppressVisibilityChange?: boolean) => this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange),\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                if (this.tooltipFeature) {\n                    this.disableTooltipFeature();\n                }\n                this.enableTooltipFeature(value, shouldDisplayTooltip);\n                this.refreshToolTip();\n            }\n\n        });\n\n        return res;\n    }\n\n    private parseValue(newValue: any): any {\n        return this.beans.valueParserService.parseValue(this.column, this.rowNode, newValue, this.getValue());\n    }\n\n    public setFocusOutOnEditor(): void {\n        if (!this.editing) { return; }\n\n        const cellEditor = this.cellComp.getCellEditor();\n\n        if (cellEditor && cellEditor.focusOut) {\n            cellEditor.focusOut();\n        }\n    }\n\n    public setFocusInOnEditor(): void {\n        if (!this.editing) { return; }\n\n        const cellEditor = this.cellComp.getCellEditor();\n\n        if (cellEditor && cellEditor.focusIn) {\n            // if the editor is present, then we just focus it\n            cellEditor.focusIn();\n        } else {\n            // if the editor is not present, it means async cell editor (eg React fibre)\n            // and we are trying to set focus before the cell editor is present, so we\n            // focus the cell instead\n            this.focusCell(true);\n        }\n    }\n\n    public onCellChanged(event: CellChangedEvent): void {\n        const eventImpactsThisCell = event.column === this.column;\n\n        if (eventImpactsThisCell) {\n            this.refreshCell({});\n        }\n    }\n\n    public refreshOrDestroyCell(params?: { suppressFlash?: boolean, newData?: boolean, forceRefresh?: boolean; }): void {\n        if (this.refreshShouldDestroy()) {\n            this.rowCtrl?.refreshCell(this);\n        } else {\n            this.refreshCell(params);\n        }\n    }\n\n    // + stop editing {forceRefresh: true, suppressFlash: true}\n    // + event cellChanged {}\n    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything\n    // + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}\n    // + rowCtrl: api refreshCells() {animate: true/false}\n    // + rowRenderer: api softRefreshView() {}\n    public refreshCell(params?: { suppressFlash?: boolean, newData?: boolean, forceRefresh?: boolean; }) {\n        // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly\n        if (this.suppressRefreshCell || this.editing) { return; }\n\n        const colDef = this.column.getColDef();\n        const newData = params != null && !!params.newData;\n        const suppressFlash = (params != null && !!params.suppressFlash) || !!colDef.suppressCellFlash;\n        // we always refresh if cell has no value - this can happen when user provides Cell Renderer and the\n        // cell renderer doesn't rely on a value, instead it could be looking directly at the data, or maybe\n        // printing the current time (which would be silly)???. Generally speaking\n        // non of {field, valueGetter, showRowGroup} is bad in the users application, however for this edge case, it's\n        // best always refresh and take the performance hit rather than never refresh and users complaining in support\n        // that cells are not updating.\n        const noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;\n        const forceRefresh = (params && params.forceRefresh) || noValueProvided || newData;\n\n        const isCellCompReady = !!this.cellComp;\n        // Only worth comparing values if the cellComp is ready\n        const valuesDifferent = this.updateAndFormatValue(isCellCompReady);\n        const dataNeedsUpdating = forceRefresh || valuesDifferent;\n\n        // In React, due to async, it's possible a refresh was asked for before the CellComp was created and calls setComp()\n        // So we do not run the cell comp refresh logic at this point in time.\n        if (!isCellCompReady) {\n            return;\n        }\n\n        if (dataNeedsUpdating) {\n\n            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.\n            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')\n            // then we are not showing a movement in the stock price, rather we are showing different stock.\n            this.showValue(newData);\n\n            // we don't want to flash the cells when processing a filter change, as otherwise the UI would\n            // be to busy. see comment in FilterManager with regards processingFilterChange\n            const processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();\n\n            const flashCell = !suppressFlash && !processingFilterChange &&\n                (this.beans.gridOptionsService.get('enableCellChangeFlash') || colDef.enableCellChangeFlash);\n\n            if (flashCell) {\n                this.flashCell();\n            }\n\n            this.cellCustomStyleFeature?.applyUserStyles();\n            this.cellCustomStyleFeature?.applyClassesFromColDef();\n        }\n\n        this.refreshToolTip();\n\n        // we do cellClassRules even if the value has not changed, so that users who have rules that\n        // look at other parts of the row (where the other part of the row might of changed) will work.\n        this.cellCustomStyleFeature?.applyCellClassRules();\n    }\n\n    // cell editors call this, when they want to stop for reasons other\n    // than what we pick up on. eg selecting from a dropdown ends editing.\n    public stopEditingAndFocus(suppressNavigateAfterEdit = false, shiftKey: boolean = false): void {\n        this.stopRowOrCellEdit();\n        this.focusCell(true);\n\n        if (!suppressNavigateAfterEdit) {\n            this.navigateAfterEdit(shiftKey);\n        }\n    }\n\n    private navigateAfterEdit(shiftKey: boolean): void {\n        const enterNavigatesVerticallyAfterEdit = this.beans.gridOptionsService.get('enterNavigatesVerticallyAfterEdit');\n\n        if (enterNavigatesVerticallyAfterEdit) {\n            const key = shiftKey ? KeyCode.UP : KeyCode.DOWN;\n            this.beans.navigationService.navigateToNextCell(null, key, this.getCellPosition(), false);\n        }\n    }\n\n    // user can also call this via API\n    public flashCell(delays?: Pick<FlashCellsParams, 'fadeDelay' | 'flashDelay' | 'fadeDuration' | 'flashDuration'>): void {\n        const flashDuration = delays?.flashDuration ?? delays?.flashDelay;\n        const fadeDuration = delays?.fadeDuration ?? delays?.fadeDelay;\n\n        this.animateCell('data-changed', flashDuration, fadeDuration);\n    }\n\n    private animateCell(cssName: string, flashDuration?: number | null, fadeDuration?: number | null): void {\n        if (!this.cellComp) { return; }\n\n        const fullName = `ag-cell-${cssName}`;\n        const animationFullName = `ag-cell-${cssName}-animation`;\n        const { gridOptionsService } = this.beans;\n\n        if (!flashDuration) {\n            flashDuration = gridOptionsService.get('cellFlashDuration');\n        }\n\n        if (!exists(fadeDuration)) {\n            fadeDuration = gridOptionsService.get('cellFadeDuration');\n        }\n\n        // we want to highlight the cells, without any animation\n        this.cellComp.addOrRemoveCssClass(fullName, true);\n        this.cellComp.addOrRemoveCssClass(animationFullName, false);\n\n        // then once that is applied, we remove the highlight with animation\n        this.beans.frameworkOverrides.wrapIncoming(() => {\n            window.setTimeout(() => {\n                if (!this.isAlive()) { return; }\n                this.cellComp.addOrRemoveCssClass(fullName, false);\n                this.cellComp.addOrRemoveCssClass(animationFullName, true);\n\n                this.eGui.style.transition = `background-color ${fadeDuration}ms`;\n                window.setTimeout(() => {\n                    if (!this.isAlive()) { return; }\n                    // and then to leave things as we got them, we remove the animation\n                    this.cellComp.addOrRemoveCssClass(animationFullName, false);\n                    this.eGui.style.transition = '';\n                }, fadeDuration!);\n            }, flashDuration!);\n        });\n    }\n\n    public onFlashCells(event: FlashCellsEvent): void {\n        if (!this.cellComp) { return; }\n        const cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());\n        const shouldFlash = event.cells[cellId];\n        if (shouldFlash) {\n            this.animateCell('highlight');\n        }\n    }\n\n    public isCellEditable(): boolean {\n        return this.column.isCellEditable(this.rowNode);\n    }\n\n    public isSuppressFillHandle(): boolean {\n        return this.column.isSuppressFillHandle();\n    }\n\n    private formatValue(value: any): any {\n        return this.callValueFormatter(value) ?? value;\n    }\n\n    private callValueFormatter(value: any): any {\n        return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, value);\n    }\n\n    private updateAndFormatValue(compareValues: boolean): boolean {\n        const oldValue = this.value;\n        const oldValueFormatted = this.valueFormatted;\n\n        this.value = this.rowNode.getValueFromValueService(this.column);\n        this.valueFormatted = this.callValueFormatter(this.value);\n\n        if (compareValues) {\n            return !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;\n        }\n        return true;\n    }\n\n    private valuesAreEqual(val1: any, val2: any): boolean {\n        // if the user provided an equals method, use that, otherwise do simple comparison\n        const colDef = this.column.getColDef();\n        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;\n    }\n\n    public getComp(): ICellComp {\n        return this.cellComp;\n    }\n\n    public getValue(): any {\n        return this.value;\n    }\n\n    public getValueFormatted(): string {\n        return this.valueFormatted;\n    }\n\n    private addDomData(): void {\n        const element = this.getGui();\n\n        this.beans.gridOptionsService.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, this);\n        this.addDestroyFunc(() => this.beans.gridOptionsService.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, null));\n    }\n\n    public createEvent(domEvent: Event | null, eventType: string): CellEvent {\n        const event: CellEvent = this.beans.gridOptionsService.addGridCommonParams({\n            type: eventType,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            value: this.value,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            rowPinned: this.rowNode.rowPinned,\n            event: domEvent,\n            rowIndex: this.rowNode.rowIndex!\n        });\n\n        return event;\n    }\n\n    public processCharacter(event: KeyboardEvent): void {\n        this.cellKeyboardListenerFeature?.processCharacter(event);\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.cellKeyboardListenerFeature?.onKeyDown(event);\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        this.cellMouseListenerFeature?.onMouseEvent(eventName, mouseEvent);\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public refreshToolTip(): void {\n        this.tooltipFeature?.refreshToolTip();\n    }\n\n    public getColSpanningList(): Column[] {\n        return this.cellPositionFeature!.getColSpanningList();\n    }\n\n    public onLeftChanged(): void {\n        if (!this.cellComp) { return; }\n        this.cellPositionFeature?.onLeftChanged();\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        if (!this.eGui) { return; }\n        this.refreshAriaColIndex();\n        this.refreshFirstAndLastStyles();\n    }\n\n    private refreshFirstAndLastStyles(): void {\n        const { cellComp, column, beans } = this;\n        CssClassApplier.refreshFirstAndLastStyles(cellComp, column, beans.columnModel);\n    }\n\n    private refreshAriaColIndex(): void {\n        const colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);\n        setAriaColIndex(this.getGui(), colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n\n    public isSuppressNavigable(): boolean {\n        return this.column.isSuppressNavigable(this.rowNode);\n    }\n\n    public onWidthChanged(): void {\n        return this.cellPositionFeature?.onWidthChanged();\n    }\n\n    public getColumn(): Column {\n        return this.column;\n    }\n\n    public getRowNode(): RowNode {\n        return this.rowNode;\n    }\n\n    public getBeans(): Beans {\n        return this.beans;\n    }\n\n    public isPrintLayout(): boolean {\n        return this.printLayout;\n    }\n\n    public appendChild(htmlElement: HTMLElement): void {\n        this.eGui.appendChild(htmlElement);\n    }\n\n    public refreshHandle(): void {\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.refreshHandle();\n        }\n    }\n\n    public getCellPosition(): CellPosition {\n        return this.cellPosition;\n    }\n\n    public isEditing(): boolean {\n        return this.editing;\n    }\n\n    // called by rowRenderer when user navigates via tab key\n    public startRowOrCellEdit(key?: string | null, event: KeyboardEvent | MouseEvent | null = null): void {\n        \n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\n        if (!this.cellComp) {\n            this.onCellCompAttachedFuncs.push(() => { this.startRowOrCellEdit(key, event); });\n            return;\n        }\n        \n        if (this.beans.gridOptionsService.get('editType') === 'fullRow') {\n            this.rowCtrl.startRowEditing(key, this);\n        } else {\n            this.startEditing(key, true, event);\n        }\n    }\n\n    public getRowCtrl(): RowCtrl {\n        return this.rowCtrl;\n    }\n\n    public getRowPosition(): RowPosition {\n        return {\n            rowIndex: this.cellPosition.rowIndex,\n            rowPinned: this.cellPosition.rowPinned\n        };\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        if (!this.cellComp) { return; }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.updateRangeBordersIfRangeCount();\n        }\n    }\n\n    public onRangeSelectionChanged(): void {\n        if (!this.cellComp) { return; }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n\n    public isRangeSelectionEnabled(): boolean {\n        return this.cellRangeFeature != null;\n    }\n\n    public focusCell(forceBrowserFocus = false): void {\n        this.beans.focusService.setFocusedCell({\n            rowIndex: this.getCellPosition().rowIndex,\n            column: this.column,\n            rowPinned: this.rowNode.rowPinned,\n            forceBrowserFocus\n        });\n    }\n\n    public onRowIndexChanged(): void {\n        // when index changes, this influences items that need the index, so we update the\n        // grid cell so they are working off the new index.\n        this.createCellPosition();\n        // when the index of the row changes, ie means the cell may have lost or gained focus\n        this.onCellFocused();\n        // check range selection\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n\n    public onFirstRightPinnedChanged(): void {\n        if (!this.cellComp) { return; }\n        const firstRightPinned = this.column.isFirstRightPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);\n    }\n\n    public onLastLeftPinnedChanged(): void {\n        if (!this.cellComp) { return; }\n        const lastLeftPinned = this.column.isLastLeftPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);\n    }\n\n    public onCellFocused(event?: CellFocusedEvent): void {\n        if (this.beans.gridOptionsService.get('suppressCellFocus')) {\n            return;\n        }\n        const cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);\n\n        if (!this.cellComp) {\n            if (cellFocused && event?.forceBrowserFocus) {\n                // The cell comp has not been rendered yet, but the browser focus is being forced for this cell\n                // so lets save the event to apply it when setComp is called in the next turn.\n                this.focusEventToRestore = event;\n            }\n            return;\n        }\n        // Clear the saved focus event\n        this.focusEventToRestore = undefined;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);\n\n        // see if we need to force browser focus - this can happen if focus is programmatically set\n        if (cellFocused && event && event.forceBrowserFocus) {\n            const focusEl = this.cellComp.getFocusableElement();\n            focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus});\n        }\n\n        // if another cell was focused, and we are editing, then stop editing\n        const fullRowEdit = this.beans.gridOptionsService.get('editType') === 'fullRow';\n\n        if (!cellFocused && !fullRowEdit && this.editing) {\n            this.stopRowOrCellEdit();\n        }\n\n        if (cellFocused) {\n            this.rowCtrl.announceDescription();\n        }\n    }\n\n    private createCellPosition(): void {\n        this.cellPosition = {\n            rowIndex: this.rowNode.rowIndex!,\n            rowPinned: makeNull(this.rowNode.rowPinned),\n            column: this.column\n        };\n    }\n\n    // CSS Classes that only get applied once, they never change\n    private applyStaticCssClasses(): void {\n        this.cellComp.addOrRemoveCssClass(CSS_CELL, true);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);\n\n        // normal cells fill the height of the row. autoHeight cells have no height to let them\n        // fit the height of content.\n\n        const autoHeight = this.column.isAutoHeight() == true;\n        this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);\n        this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);\n    }\n\n    public onColumnHover(): void {\n        if (!this.cellComp) { return; }\n        if (!this.beans.gridOptionsService.get('columnHoverHighlight')) { return; }\n\n        const isHovered = this.beans.columnHoverService.isHovered(this.column);\n        this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);\n    }\n\n    public onColDefChanged(): void {\n        if (!this.cellComp) { return; }\n\n        const isAutoHeight = this.column.isAutoHeight();\n        if (isAutoHeight !== this.isAutoHeight) {\n            // auto height uses wrappers, so need to destroy\n            this.rowCtrl?.refreshCell(this);\n        }\n\n        const isTooltipEnabled = this.column.isTooltipEnabled();\n        if (isTooltipEnabled) {\n            this.disableTooltipFeature();\n            this.enableTooltipFeature();\n        } else {\n            this.disableTooltipFeature();\n        }\n\n        this.setWrapText();\n\n        if (!this.editing) {\n            this.refreshOrDestroyCell({ forceRefresh: true, suppressFlash: true });\n        } else {\n            const cellEditor = this.getCellEditor();\n            if (cellEditor?.refresh) {\n                const { eventKey, cellStartedEdit } = this.editCompDetails!.params;\n                const editorParams = this.createCellEditorParams(eventKey, cellStartedEdit);\n                const colDef = this.column.getColDef();\n                const compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);\n                cellEditor.refresh(compDetails!.params);\n            }\n        }\n    }\n\n    private setWrapText(): void {\n        const value = this.column.getColDef().wrapText == true;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);\n    }\n\n    public dispatchCellContextMenuEvent(event: Event | null) {\n        const colDef = this.column.getColDef();\n        const cellContextMenuEvent: CellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);\n\n        this.beans.eventService.dispatchEvent(cellContextMenuEvent);\n\n        if (colDef.onCellContextMenu) {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => {\n                this.beans.frameworkOverrides.wrapOutgoing(() => {\n                    (colDef.onCellContextMenu as any)(cellContextMenuEvent)\n                });\n            }, 0);\n        }\n    }\n\n    public getCellRenderer(): ICellRenderer | null {\n        return this.cellComp ? this.cellComp.getCellRenderer() : null;\n    }\n\n    public getCellEditor(): ICellEditor | null {\n        return this.cellComp ? this.cellComp.getCellEditor() : null;\n    }\n\n    public destroy(): void {\n        this.onCellCompAttachedFuncs = [];\n        super.destroy();\n    }\n\n    public createSelectionCheckbox(): CheckboxSelectionComponent {\n        const cbSelectionComponent = new CheckboxSelectionComponent();\n\n        this.beans.context.createBean(cbSelectionComponent);\n        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });\n\n        // put the checkbox in before the value\n        return cbSelectionComponent;\n    }\n\n    public createDndSource(): DndSourceComp {\n        const dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.eGui);\n        this.beans.context.createBean(dndSourceComp);\n\n        return dndSourceComp;\n    }\n\n    public registerRowDragger(\n        customElement: HTMLElement,\n        dragStartPixels?: number,\n        suppressVisibilityChange?: boolean\n    ): void {\n        // if previously existed, then we are only updating\n        if (this.customRowDragComp) {\n            this.customRowDragComp.setDragElement(customElement, dragStartPixels);\n            return;\n        }\n\n        const newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);\n\n        if (newComp) {\n            this.customRowDragComp = newComp;\n            this.addDestroyFunc(() => { this.beans.context.destroyBean(newComp); (this.customRowDragComp as any) = null; });\n        }\n    }\n\n    public createRowDragComp(\n        customElement?: HTMLElement,\n        dragStartPixels?: number,\n        suppressVisibilityChange?: boolean\n    ): RowDragComp | undefined {\n        const pagination = this.beans.gridOptionsService.get('pagination');\n        const rowDragManaged = this.beans.gridOptionsService.get('rowDragManaged');\n        const clientSideRowModelActive = this.beans.gridOptionsService.isRowModelType('clientSide');\n\n        if (rowDragManaged) {\n            // row dragging only available in default row model\n            if (!clientSideRowModelActive) {\n                warnOnce('managed row dragging is only allowed in the Client Side Row Model');\n                return;\n            }\n\n            if (pagination) {\n                warnOnce('managed row dragging is not possible when doing pagination');\n                return;\n            }\n        }\n\n        // otherwise (normal case) we are creating a RowDraggingComp for the first time\n        const rowDragComp = new RowDragComp(() => this.value, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);\n        this.beans.context.createBean(rowDragComp);\n\n        return rowDragComp;\n    }\n}\n", "import { ProcessRowParams } from \"../../interfaces/iCallbackParams\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CellPosition } from \"../../entities/cellPositionUtils\";\nimport { Column, ColumnPinnedType } from \"../../entities/column\";\nimport { RowClassParams, RowStyle } from \"../../entities/gridOptions\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { DataChangedEvent, IRowNode, RowHighlightPosition } from \"../../interfaces/iRowNode\";\nimport { RowPosition } from \"../../entities/rowPositionUtils\";\nimport { AgEventListener, CellFocusedEvent, Events, RowClickedEvent, RowDoubleClickedEvent, RowEditingStartedEvent, RowEditingStoppedEvent, RowEvent, RowValueChangedEvent, VirtualRowRemovedEvent } from \"../../events\";\nimport { RowContainerType } from \"../../gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { IFrameworkOverrides } from \"../../interfaces/iFrameworkOverrides\";\nimport { ModuleNames } from \"../../modules/moduleNames\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry\";\nimport { setAriaExpanded, setAriaRowIndex, setAriaSelected } from \"../../utils/aria\";\nimport { isElementChildOfClass } from \"../../utils/dom\";\nimport { isStopPropagationForAgGrid } from \"../../utils/event\";\nimport { warnOnce, executeNextVMTurn } from \"../../utils/function\";\nimport { exists, makeNull } from \"../../utils/generic\";\nimport { escapeString } from \"../../utils/string\";\nimport { Beans } from \"../beans\";\nimport { CellCtrl } from \"../cell/cellCtrl\";\nimport { ICellRenderer, ICellRendererParams } from \"../cellRenderers/iCellRenderer\";\nimport { RowCssClassCalculatorParams } from \"./rowCssClassCalculator\";\nimport { RowDragComp } from \"./rowDragComp\";\nimport { GridOptionsService } from \"../../gridOptionsService\";\nimport { ITooltipFeatureCtrl, TooltipFeature } from \"../../widgets/tooltipFeature\";\n\nenum RowType {\n    Normal = 'Normal',\n    FullWidth = 'FullWidth',\n    FullWidthLoading = 'FullWidthLoading',\n    FullWidthGroup = 'FullWidthGroup',\n    FullWidthDetail = 'FullWidthDetail'\n}\n\nlet instanceIdSequence = 0;\n\nexport interface IRowComp {\n    setDomOrder(domOrder: boolean): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setCellCtrls(cellCtrls: CellCtrl[], useFlushSync: boolean): void;\n    showFullWidth(compDetails: UserCompDetails): void;\n    getFullWidthCellRenderer(): ICellRenderer | null | undefined;\n    setTop(top: string): void;\n    setTransform(transform: string): void;\n    setRowIndex(rowIndex: string): void;\n    setRowId(rowId: string): void;\n    setRowBusinessKey(businessKey: string): void;\n    setUserStyles(styles: RowStyle | undefined): void;\n    refreshFullWidth(getUpdatedParams: () => ICellRendererParams): boolean;\n}\n\ninterface RowGui {\n    rowComp: IRowComp;\n    element: HTMLElement;\n    containerType: RowContainerType;\n}\n\ninterface CellCtrlListAndMap {\n    list: CellCtrl[];\n    map: { [key: string]: CellCtrl };\n}\n\nexport class RowCtrl extends BeanStub {\n\n    public static DOM_DATA_KEY_ROW_CTRL = 'renderedRow';\n\n    private instanceId: string;\n\n    private readonly rowNode: RowNode;\n    private readonly beans: Beans;\n    // The RowCtrl is never Wired, so it needs its own access\n    // to the gridOptionsService to be able to call `addManagedPropertyListener`\n    protected readonly gridOptionsService: GridOptionsService;\n    private tooltipFeature: TooltipFeature | undefined;\n\n    private rowType: RowType;\n\n    private leftGui: RowGui | undefined;\n    private centerGui: RowGui | undefined;\n    private rightGui: RowGui | undefined;\n    private fullWidthGui: RowGui | undefined;\n\n    private allRowGuis: RowGui[] = [];\n\n    private firstRowOnPage: boolean;\n    private lastRowOnPage: boolean;\n\n    private active = true;\n\n    private stoppingRowEdit: boolean;\n    private editingRow: boolean;\n    private rowFocused: boolean;\n\n    private centerCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n    private leftCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n    private rightCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n\n    private slideInAnimation: { [key in RowContainerType]: boolean } = {\n        left: false,\n        center: false,\n        right: false,\n        fullWidth: false\n    };\n\n    private fadeInAnimation: { [key in RowContainerType]: boolean } = {\n        left: false,\n        center: false,\n        right: false,\n        fullWidth: false\n    };\n\n    private rowDragComps: BeanStub[] = [];\n\n    private readonly useAnimationFrameForCreate: boolean;\n\n    private paginationPage: number;\n\n    private lastMouseDownOnDragger = false;\n\n    private rowLevel: number;\n    private rowStyles: RowStyle | undefined;\n    private readonly emptyStyle: RowStyle = {};\n    private readonly printLayout: boolean;\n    private readonly suppressRowTransform: boolean;\n\n    private updateColumnListsPending = false;\n\n    private rowId: string | null = null;\n    private tabIndex: number | undefined;\n    private businessKeySanitised: string | null = null;\n    private businessKeyForNodeFunc: ((node: IRowNode<any>) => string) | undefined;\n\n    constructor(\n        rowNode: RowNode,\n        beans: Beans,\n        animateIn: boolean,\n        useAnimationFrameForCreate: boolean,\n        printLayout: boolean\n    ) {\n        super();\n        this.beans = beans;\n        this.gridOptionsService = beans.gridOptionsService;\n        this.rowNode = rowNode;\n        this.paginationPage = beans.paginationProxy.getCurrentPage();\n        this.useAnimationFrameForCreate = useAnimationFrameForCreate;\n        this.printLayout = printLayout;\n        this.suppressRowTransform = this.gridOptionsService.get('suppressRowTransform');\n\n        this.instanceId = rowNode.id + '-' + instanceIdSequence++;\n        this.rowId = escapeString(rowNode.id);\n\n        this.initRowBusinessKey();\n\n        this.rowFocused = beans.focusService.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\n        this.rowLevel = beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n\n        this.setRowType();\n        this.setAnimateFlags(animateIn);\n        this.rowStyles = this.processStylesFromGridOptions();\n\n        // calls to `isFullWidth()` only work after `setRowType` has been called.\n        if (this.isFullWidth() && !this.gridOptionsService.get('suppressCellFocus')) {\n            this.tabIndex = -1;\n        }\n\n        this.addListeners();\n    }\n\n    private initRowBusinessKey(): void {\n        this.businessKeyForNodeFunc = this.gridOptionsService.get('getBusinessKeyForNode');\n        this.updateRowBusinessKey();\n    }\n\n    private updateRowBusinessKey(): void {\n        if (typeof this.businessKeyForNodeFunc !== 'function') { return; }\n        const businessKey = this.businessKeyForNodeFunc(this.rowNode);\n        this.businessKeySanitised = escapeString(businessKey!);\n    }\n\n    public getRowId() {\n        return this.rowId;\n    }\n    public getRowStyles() {\n        return this.rowStyles;\n    }\n    public getTabIndex() {\n        return this.tabIndex;\n    }\n\n    public isSticky(): boolean {\n        return this.rowNode.sticky;\n    }\n\n    public getBeans(): Beans {\n        return this.beans;\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n\n    public setComp(rowComp: IRowComp, element: HTMLElement, containerType: RowContainerType): void {\n        const gui: RowGui = { rowComp, element, containerType };\n        this.allRowGuis.push(gui);\n\n        if (containerType === RowContainerType.LEFT) {\n            this.leftGui = gui;\n        } else if (containerType === RowContainerType.RIGHT) {\n            this.rightGui = gui;\n        } else if (containerType === RowContainerType.FULL_WIDTH) {\n            this.fullWidthGui = gui;\n        } else {\n            this.centerGui = gui;\n        }\n\n        this.initialiseRowComp(gui);\n\n        // pinned rows render before the main grid body in the SSRM, only fire the event after the main body has rendered.\n        if (this.rowType !== 'FullWidthLoading' && !this.rowNode.rowPinned) {\n            // this is fired within setComp as we know that the component renderer is now trying to render.\n            // linked with the fact the function implementation queues behind requestAnimationFrame should allow\n            // us to be certain that all rendering is done by the time the event fires.\n            this.beans.rowRenderer.dispatchFirstDataRenderedEvent();\n        }\n    }\n\n    public unsetComp(containerType: RowContainerType): void {\n        this.allRowGuis = this.allRowGuis\n            .filter(rowGui => rowGui.containerType !== containerType);\n\n        switch (containerType) {\n            case RowContainerType.LEFT:\n                this.leftGui = undefined;\n                break;\n            case RowContainerType.RIGHT:\n                this.rightGui = undefined;\n                break;\n            case RowContainerType.FULL_WIDTH:\n                this.fullWidthGui = undefined;\n                break;\n            case RowContainerType.CENTER:\n                this.centerGui = undefined;\n                break;\n            default:\n        }\n    }\n\n    public isCacheable(): boolean {\n        return this.rowType === RowType.FullWidthDetail\n            && this.gridOptionsService.get('keepDetailRows');\n    }\n\n    public setCached(cached: boolean): void {\n        const displayValue = cached ? 'none' : '';\n        this.allRowGuis.forEach(rg => rg.element.style.display = displayValue);\n    }\n\n    private initialiseRowComp(gui: RowGui): void {\n        const gos = this.gridOptionsService;\n\n        this.listenOnDomOrder(gui);\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n        this.onRowHeightChanged(gui);\n        this.updateRowIndexes(gui);\n        this.setFocusedClasses(gui);\n        this.setStylesFromGridOptions(false, gui); // no need to calculate styles already set in constructor\n\n        if (gos.isRowSelection() && this.rowNode.selectable) {\n            this.onRowSelected(gui);\n        }\n\n        this.updateColumnLists(!this.useAnimationFrameForCreate);\n\n        const comp = gui.rowComp;\n\n        const initialRowClasses = this.getInitialRowClasses(gui.containerType);\n        initialRowClasses.forEach(name => comp.addOrRemoveCssClass(name, true));\n\n        this.executeSlideAndFadeAnimations(gui);\n\n        if (this.rowNode.group) {\n            setAriaExpanded(gui.element, this.rowNode.expanded == true);\n        }\n\n        this.setRowCompRowId(comp);\n        this.setRowCompRowBusinessKey(comp);\n\n        // DOM DATA\n        gos.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, this);\n        this.addDestroyFunc(\n            () => gos.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, null)\n        );\n\n        // adding hover functionality adds listener to this row, so we\n        // do it lazily in an animation frame\n        if (this.useAnimationFrameForCreate) {\n            this.beans.animationFrameService.createTask(\n                this.addHoverFunctionality.bind(this, gui.element),\n                this.rowNode.rowIndex!,\n                'createTasksP2'\n            );\n        } else {\n            this.addHoverFunctionality(gui.element);\n        }\n\n        if (this.isFullWidth()) {\n            this.setupFullWidth(gui);\n        }\n\n        if (gos.get('rowDragEntireRow')) {\n            this.addRowDraggerToRow(gui);\n        }\n\n        if (this.useAnimationFrameForCreate) {\n            // the height animation we only want active after the row is alive for 1 second.\n            // this stops the row animation working when rows are initially created. otherwise\n            // auto-height rows get inserted into the dom and resized immediately, which gives\n            // very bad UX (eg 10 rows get inserted, then all 10 expand, look particularly bad\n            // when scrolling). so this makes sure when rows are shown for the first time, they\n            // are resized immediately without animation.\n            this.beans.animationFrameService.addDestroyTask(() => {\n                if (!this.isAlive()) { return; }\n                gui.rowComp.addOrRemoveCssClass('ag-after-created', true);\n            });\n        }\n\n        this.executeProcessRowPostCreateFunc();\n    }\n\n    private setRowCompRowBusinessKey(comp: IRowComp): void {\n        if (this.businessKeySanitised == null) { return; }\n        comp.setRowBusinessKey(this.businessKeySanitised);\n    }\n    public getBusinessKey(): string | null {\n        return this.businessKeySanitised;\n    }\n\n    private setRowCompRowId(comp: IRowComp) {\n        this.rowId = escapeString(this.rowNode.id);\n        if (this.rowId == null) { return; }\n\n        comp.setRowId(this.rowId);\n    }\n\n    private executeSlideAndFadeAnimations(gui: RowGui): void {\n        const {containerType} = gui;\n\n        const shouldSlide = this.slideInAnimation[containerType];\n        if (shouldSlide) {\n            executeNextVMTurn(() => {\n                this.onTopChanged();\n            });\n            this.slideInAnimation[containerType] = false;\n        }\n\n        const shouldFade = this.fadeInAnimation[containerType];\n        if (shouldFade) {\n            executeNextVMTurn(() => {\n                gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', false);\n            });\n            this.fadeInAnimation[containerType] = false;\n        }\n    }\n\n    private addRowDraggerToRow(gui: RowGui) {\n        if (this.gridOptionsService.get('enableRangeSelection')) {\n            warnOnce('Setting `rowDragEntireRow: true` in the gridOptions doesn\\'t work with `enableRangeSelection: true`');\n            return;\n        }\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const rowDragComp = new RowDragComp(\n            () => `1 ${translate('rowDragRow', 'row')}`,\n            this.rowNode,\n            undefined,\n            gui.element,\n            undefined, true\n        );\n        const rowDragBean = this.createBean(rowDragComp, this.beans.context);\n        this.rowDragComps.push(rowDragBean);\n    }\n\n    private setupFullWidth(gui: RowGui): void {\n\n        const pinned = this.getPinnedForContainer(gui.containerType);\n\n        if (this.rowType == RowType.FullWidthDetail) {\n            if (!ModuleRegistry.__assertRegistered(ModuleNames.MasterDetailModule, \"cell renderer 'agDetailCellRenderer' (for master detail)\", this.beans.context.getGridId())) {\n                return;\n            }\n        }\n\n        const compDetails = this.createFullWidthCompDetails(gui.element, pinned);\n        gui.rowComp.showFullWidth(compDetails);\n    }\n\n    public isPrintLayout(): boolean {\n        return this.printLayout;\n    }\n\n    public getFullWidthCellRenderers(): (ICellRenderer<any> | null | undefined)[] {\n        if (this.gridOptionsService.get('embedFullWidthRows')) {\n            return this.allRowGuis.map(gui => gui?.rowComp?.getFullWidthCellRenderer());\n        }\n        return [this.fullWidthGui?.rowComp?.getFullWidthCellRenderer()];\n    }\n\n    // use by autoWidthCalculator, as it clones the elements\n    public getCellElement(column: Column): HTMLElement | null {\n        const cellCtrl = this.getCellCtrl(column);\n        return cellCtrl ? cellCtrl.getGui() : null;\n    }\n\n    public executeProcessRowPostCreateFunc(): void {\n        const func = this.gridOptionsService.getCallback('processRowPostCreate');\n        if (!func || !this.areAllContainersReady()) { return; }\n\n        const params: WithoutGridCommon<ProcessRowParams> = {\n            // areAllContainersReady asserts that centerGui is not null\n            eRow: this.centerGui!.element,\n            ePinnedLeftRow: this.leftGui ? this.leftGui.element : undefined,\n            ePinnedRightRow: this.rightGui ? this.rightGui.element : undefined,\n            node: this.rowNode,\n            rowIndex: this.rowNode.rowIndex!,\n            addRenderedRowListener: this.addEventListener.bind(this),\n        };\n        func(params);\n    }\n\n    private areAllContainersReady(): boolean {\n        const isLeftReady = !!this.leftGui || !this.beans.columnModel.isPinningLeft();\n        const isCenterReady = !!this.centerGui;\n        const isRightReady = !!this.rightGui || !this.beans.columnModel.isPinningRight();\n\n        return isLeftReady && isCenterReady && isRightReady;\n    }\n\n    private setRowType(): void {\n        const isStub = this.rowNode.stub;\n        const isFullWidthCell = this.rowNode.isFullWidthCell();\n        const isDetailCell = this.gridOptionsService.get('masterDetail') && this.rowNode.detail;\n        const pivotMode = this.beans.columnModel.isPivotMode();\n        // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking\n        // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'\n        // so each can be set independently (as a customer complained about footers getting full width, hence\n        // introducing this logic)\n        const isGroupRow = !!this.rowNode.group && !this.rowNode.footer;\n        const isFullWidthGroup = isGroupRow && this.gridOptionsService.isGroupUseEntireRow(pivotMode);\n\n        if (isStub) {\n            this.rowType = RowType.FullWidthLoading;\n        } else if (isDetailCell) {\n            this.rowType = RowType.FullWidthDetail;\n        } else if (isFullWidthCell) {\n            this.rowType = RowType.FullWidth;\n        } else if (isFullWidthGroup) {\n            this.rowType = RowType.FullWidthGroup;\n        } else {\n            this.rowType = RowType.Normal;\n        }\n    }\n\n    private updateColumnLists(suppressAnimationFrame = false, useFlushSync = false): void {\n        if (this.isFullWidth()) { return; }\n\n        const noAnimation = suppressAnimationFrame\n            || this.gridOptionsService.get('suppressAnimationFrame')\n            || this.printLayout;\n\n        if (noAnimation) {\n            this.updateColumnListsImpl(useFlushSync);\n            return;\n        }\n\n        if (this.updateColumnListsPending) { return; }\n        this.beans.animationFrameService.createTask(\n            () => {\n                if (!this.active) { return; }\n                this.updateColumnListsImpl(true);\n            },\n            this.rowNode.rowIndex!,\n            'createTasksP1'\n        );\n        this.updateColumnListsPending = true;\n    }\n\n    private createCellCtrls(prev: CellCtrlListAndMap, cols: Column[], pinned: ColumnPinnedType = null): CellCtrlListAndMap {\n        const res: CellCtrlListAndMap = {\n            list: [],\n            map: {}\n        };\n\n        const addCell = (colInstanceId: number, cellCtrl: CellCtrl) => {\n            res.list.push(cellCtrl);\n            res.map[colInstanceId] = cellCtrl;\n        };\n\n        cols.forEach(col => {\n            // we use instanceId's rather than colId as it's possible there is a Column with same Id,\n            // but it's referring to a different column instance. Happens a lot with pivot, as pivot col id's are\n            // reused eg pivot_0, pivot_1 etc\n            const colInstanceId = col.getInstanceId();\n            let cellCtrl = prev.map[colInstanceId];\n            if (!cellCtrl) {\n                cellCtrl = new CellCtrl(col, this.rowNode, this.beans, this);\n            }\n            addCell(colInstanceId, cellCtrl);\n        });\n\n        prev.list.forEach(prevCellCtrl => {\n            const cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;\n            if (cellInResult) { return; }\n\n            const keepCell = !this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);\n            if (keepCell) {\n                addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);\n                return;\n            }\n\n            prevCellCtrl.destroy();\n        });\n\n        return res;\n    }\n\n    private updateColumnListsImpl(useFlushSync: boolean): void {\n        this.updateColumnListsPending = false;\n        this.createAllCellCtrls();\n\n        this.setCellCtrls(useFlushSync);\n    }\n\n    private setCellCtrls(useFlushSync: boolean) {\n        this.allRowGuis.forEach(item => {\n            const cellControls = this.getCellCtrlsForContainer(item.containerType);\n            item.rowComp.setCellCtrls(cellControls, useFlushSync);\n        });\n    }\n\n    private getCellCtrlsForContainer(containerType: RowContainerType) {\n        \n        switch (containerType) {\n            case RowContainerType.LEFT:\n                return this.leftCellCtrls.list;\n            case RowContainerType.RIGHT:\n                return this.rightCellCtrls.list;\n            case RowContainerType.FULL_WIDTH:\n                return [];\n            case RowContainerType.CENTER:\n                return this.centerCellCtrls.list;\n            default:\n                const exhaustiveCheck: never = containerType;\n                throw new Error(`Unhandled case: ${exhaustiveCheck}`);\n        }\n    }\n\n    private createAllCellCtrls() {\n        const columnModel = this.beans.columnModel;\n        if (this.printLayout) {\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());\n            this.leftCellCtrls = { list: [], map: {} };\n            this.rightCellCtrls = { list: [], map: {} };\n        } else {\n            const centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);\n\n            const leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);\n            this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, 'left');\n\n            const rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);\n            this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, 'right');\n        }\n    }\n\n    private isCellEligibleToBeRemoved(cellCtrl: CellCtrl, nextContainerPinned: ColumnPinnedType): boolean {\n        const REMOVE_CELL = true;\n        const KEEP_CELL = false;\n\n        // always remove the cell if it's not rendered or if it's in the wrong pinned location\n        const column = cellCtrl.getColumn();\n        if (column.getPinned() != nextContainerPinned) { return REMOVE_CELL; }\n\n        // we want to try and keep editing and focused cells\n        const editing = cellCtrl.isEditing();\n        const focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());\n\n        const mightWantToKeepCell = editing || focused;\n\n        if (mightWantToKeepCell) {\n            const column = cellCtrl.getColumn();\n            const displayedColumns = this.beans.columnModel.getAllDisplayedColumns();\n            const cellStillDisplayed = displayedColumns.indexOf(column) >= 0;\n            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;\n        }\n\n        return REMOVE_CELL;\n    }\n\n    public getDomOrder(): boolean {\n        const isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n        return isEnsureDomOrder || this.gridOptionsService.isDomLayout('print');\n    }\n\n    private listenOnDomOrder(gui: RowGui): void {\n        const listener = () => {\n            gui.rowComp.setDomOrder(this.getDomOrder());\n        };\n\n        this.addManagedPropertyListener('domLayout', listener);\n        this.addManagedPropertyListener('ensureDomOrder', listener);\n    }\n\n    private setAnimateFlags(animateIn: boolean): void {\n        if (this.isSticky() || !animateIn) { return; }\n\n        const oldRowTopExists = exists(this.rowNode.oldRowTop);\n        const pinningLeft = this.beans.columnModel.isPinningLeft();\n        const pinningRight = this.beans.columnModel.isPinningRight();\n\n        if (oldRowTopExists) {\n            if (this.isFullWidth() && !this.gridOptionsService.get('embedFullWidthRows')) {\n                this.slideInAnimation.fullWidth = true;\n                return;\n            }\n\n            // if the row had a previous position, we slide it in\n            this.slideInAnimation.center = true;\n            this.slideInAnimation.left = pinningLeft;\n            this.slideInAnimation.right = pinningRight;\n        } else {\n            if (this.isFullWidth() && !this.gridOptionsService.get('embedFullWidthRows')) {\n                this.fadeInAnimation.fullWidth = true;\n                return;\n            }\n\n            // if the row had no previous position, we fade it in\n            this.fadeInAnimation.center = true;\n            this.fadeInAnimation.left = pinningLeft;\n            this.fadeInAnimation.right = pinningRight;\n        }\n    }\n\n    public isEditing(): boolean {\n        return this.editingRow;\n    }\n\n    public isFullWidth(): boolean {\n        return this.rowType !== RowType.Normal;\n    }\n\n    public getRowType(): RowType {\n        return this.rowType;\n    }\n\n    public refreshFullWidth(): boolean {\n        // returns 'true' if refresh succeeded\n        const tryRefresh = (gui: RowGui | undefined, pinned: ColumnPinnedType): boolean => {\n            if (!gui) { return true; } // no refresh needed\n\n            return gui.rowComp.refreshFullWidth(() => {\n                const compDetails = this.createFullWidthCompDetails(gui.element, pinned);\n                return compDetails.params;\n            });\n        };\n\n        const fullWidthSuccess = tryRefresh(this.fullWidthGui, null);\n        const centerSuccess = tryRefresh(this.centerGui, null);\n        const leftSuccess = tryRefresh(this.leftGui, 'left');\n        const rightSuccess = tryRefresh(this.rightGui, 'right');\n\n        const allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;\n\n        return allFullWidthRowsRefreshed;\n    }\n\n    private addListeners(): void {\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, () => this.onRowHeightChanged());\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, () => this.onRowSelected());\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));\n        \n        if (this.rowNode.detail) {\n            // if the master row node has updated data, we also want to try to refresh the detail row\n            this.addManagedListener(this.rowNode.parent!, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));\n        }\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.postProcessCss.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.postProcessRowDragging.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));\n\n        const eventService = this.beans.eventService;\n        this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUS_CLEARED, this.onCellFocusChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.refreshFirstAndLastRowStyles.bind(this));\n\n        this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.updateColumnLists.bind(this));\n\n        this.addDestroyFunc(() => {\n            this.destroyBeans(this.rowDragComps, this.beans.context);\n            if (this.tooltipFeature) {\n                this.tooltipFeature = this.destroyBean(this.tooltipFeature, this.beans.context);\n            }\n        });\n        this.addManagedPropertyListeners(['rowDragEntireRow'], () => {\n            const useRowDragEntireRow = this.gridOptionsService.get('rowDragEntireRow');\n            if (useRowDragEntireRow) {\n                this.allRowGuis.forEach(gui => {\n                    this.addRowDraggerToRow(gui);\n                });\n                return;\n            }\n            this.destroyBeans(this.rowDragComps, this.beans.context);\n            this.rowDragComps = [];\n        });\n\n        this.addListenersForCellComps();\n    }\n\n    private addListenersForCellComps(): void {\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onRowIndexChanged());\n        });\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, event => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onCellChanged(event));\n        });\n    }\n\n    private onRowNodeDataChanged(event: DataChangedEvent): void {\n        // if the row is rendered incorrectly, as the requirements for whether this is a FW row have changed, we force re-render this row.\n        const fullWidthChanged = this.isFullWidth() !== !!this.rowNode.isFullWidthCell();\n        if (fullWidthChanged) {\n            this.beans.rowRenderer.redrawRow(this.rowNode);\n            return;\n        }\n\n        // this bit of logic handles trying to refresh the FW row ctrl, or delegating to removing/recreating it if unsupported.\n        if (this.isFullWidth()) {\n            const refresh = this.refreshFullWidth();\n            if (!refresh) {\n                this.beans.rowRenderer.redrawRow(this.rowNode);\n            }\n            return;\n        }\n\n        // if this is an update, we want to refresh, as this will allow the user to put in a transition\n        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case\n        // we will want to completely replace the cells\n        this.getAllCellCtrls().forEach(cellCtrl =>\n            cellCtrl.refreshCell({\n                suppressFlash: !event.update,\n                newData: !event.update\n            })\n        );\n\n        // as data has changed update the dom row id attributes\n        this.allRowGuis.forEach(gui => {\n            this.setRowCompRowId(gui.rowComp);\n            this.updateRowBusinessKey();\n            this.setRowCompRowBusinessKey(gui.rowComp);\n        });\n\n        // check for selected also, as this could be after lazy loading of the row data, in which case\n        // the id might of just gotten set inside the row and the row selected state may of changed\n        // as a result. this is what happens when selected rows are loaded in virtual pagination.\n        // - niall note - since moving to the stub component, this may no longer be true, as replacing\n        // the stub component now replaces the entire row\n        this.onRowSelected();\n\n        // as data has changed, then the style and class needs to be recomputed\n        this.postProcessCss();\n    }\n\n    private postProcessCss(): void {\n        this.setStylesFromGridOptions(true);\n        this.postProcessClassesFromGridOptions();\n        this.postProcessRowClassRules();\n        this.postProcessRowDragging();\n    }\n\n    private onRowNodeHighlightChanged(): void {\n        const highlighted = this.rowNode.highlighted;\n\n        this.allRowGuis.forEach(gui => {\n            const aboveOn = highlighted === RowHighlightPosition.Above;\n            const belowOn = highlighted === RowHighlightPosition.Below;\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-above', aboveOn);\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-below', belowOn);\n        });\n    }\n\n    private postProcessRowDragging(): void {\n        const dragging = this.rowNode.dragging;\n        this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-dragging', dragging));\n    }\n\n    private updateExpandedCss(): void {\n\n        const expandable = this.rowNode.isExpandable();\n        const expanded = this.rowNode.expanded == true;\n\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-group', expandable);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-expanded', expandable && expanded);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-contracted', expandable && !expanded);\n            setAriaExpanded(gui.element, expandable && expanded);\n        });\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        // we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and\n        // then set data, and any old valueGetter's (ie from cols that were removed) would still get called.\n        this.updateColumnLists(true);\n\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n    }\n\n    private onVirtualColumnsChanged(): void {\n        this.updateColumnLists(false, true);\n    }\n\n    public getRowPosition(): RowPosition {\n        return {\n            rowPinned: makeNull(this.rowNode.rowPinned),\n            rowIndex: this.rowNode.rowIndex as number\n        };\n    }\n\n    public onKeyboardNavigate(keyboardEvent: KeyboardEvent) {\n        const currentFullWidthComp = this.allRowGuis.find(c => c.element.contains(keyboardEvent.target as HTMLElement));\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n\n        if (!isFullWidthContainerFocused) { return; }\n\n        const node = this.rowNode;\n        const lastFocusedCell = this.beans.focusService.getFocusedCell();\n        const cellPosition: CellPosition = {\n            rowIndex: node.rowIndex!,\n            rowPinned: node.rowPinned,\n            column: (lastFocusedCell && lastFocusedCell.column) as Column\n        };\n\n        this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);\n        keyboardEvent.preventDefault();\n    }\n\n    public onTabKeyDown(keyboardEvent: KeyboardEvent) {\n        if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) { return; }\n        const currentFullWidthComp = this.allRowGuis.find(c => c.element.contains(keyboardEvent.target as HTMLElement));\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n        let nextEl: HTMLElement | null = null;\n\n        if (!isFullWidthContainerFocused) {\n            nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer!, false, keyboardEvent.shiftKey);\n        }\n\n        if ((this.isFullWidth() && isFullWidthContainerFocused) || !nextEl) {\n            this.beans.navigationService.onTabKeyDown(this, keyboardEvent);\n        }\n    }\n\n    public onFullWidthRowFocused(event?: CellFocusedEvent) {\n        const node = this.rowNode;\n        const isFocused = !event ? false : this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;\n\n        const element = this.fullWidthGui ? this.fullWidthGui.element : this.centerGui?.element;\n        if (!element) { return; } // can happen with react ui, comp not yet ready\n\n        element.classList.toggle('ag-full-width-focus', isFocused);\n        if (isFocused) {\n            // we don't scroll normal rows into view when we focus them, so we don't want\n            // to scroll Full Width rows either.\n            element.focus({ preventScroll: true });\n        }\n    }\n\n    public refreshCell(cellCtrl: CellCtrl) {\n        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);\n        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);\n        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);\n        this.updateColumnLists();\n    }\n\n    private removeCellCtrl(prev: CellCtrlListAndMap, cellCtrlToRemove: CellCtrl): CellCtrlListAndMap {\n        const res: CellCtrlListAndMap = {\n            list: [],\n            map: {}\n        };\n        prev.list.forEach(cellCtrl => {\n            if (cellCtrl === cellCtrlToRemove) { return; }\n            res.list.push(cellCtrl);\n            res.map[cellCtrl.getInstanceId()] = cellCtrl;\n        });\n        return res;\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        switch (eventName) {\n            case 'dblclick': this.onRowDblClick(mouseEvent); break;\n            case 'click': this.onRowClick(mouseEvent); break;\n            case 'touchstart':\n            case 'mousedown':\n                this.onRowMouseDown(mouseEvent);\n                break;\n        }\n    }\n\n    public createRowEvent(type: string, domEvent?: Event): RowEvent {\n        return this.gridOptionsService.addGridCommonParams({\n            type: type,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            rowIndex: this.rowNode.rowIndex!,\n            rowPinned: this.rowNode.rowPinned,\n            event: domEvent\n        });\n    }\n\n    private createRowEventWithSource(type: string, domEvent: Event): RowEvent {\n        const event = this.createRowEvent(type, domEvent);\n        // when first developing this, we included the rowComp in the event.\n        // this seems very weird. so when introducing the event types, i left the 'source'\n        // out of the type, and just include the source in the two places where this event\n        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any\n        // users to be using this, as the rowComp isn't an object we expose, so would be\n        // very surprising if a user was using it.\n        (event as any).source = this;\n        return event;\n    }\n\n    private onRowDblClick(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        const agEvent: RowDoubleClickedEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);\n\n        this.beans.eventService.dispatchEvent(agEvent);\n    }\n\n    private onRowMouseDown(mouseEvent: MouseEvent) {\n        this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target as HTMLElement, 'ag-row-drag', 3);\n\n        if (!this.isFullWidth()) { return; }\n\n        const node = this.rowNode;\n        const columnModel = this.beans.columnModel;\n\n        if (this.beans.rangeService) {\n            this.beans.rangeService.removeAllCellRanges();\n        }\n\n        this.beans.focusService.setFocusedCell({\n            rowIndex: node.rowIndex!,\n            column: columnModel.getAllDisplayedColumns()[0],\n            rowPinned: node.rowPinned,\n            forceBrowserFocus: true\n        });\n\n    }\n\n    public onRowClick(mouseEvent: MouseEvent) {\n        const stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;\n\n        if (stop) { return; }\n\n        const agEvent: RowClickedEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);\n\n        this.beans.eventService.dispatchEvent(agEvent);\n\n        // ctrlKey for windows, metaKey for Apple\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\n        const isShiftKey = mouseEvent.shiftKey;\n\n        // we do not allow selecting the group by clicking, when groupSelectChildren, as the logic to\n        // handle this is broken. to observe, change the logic below and allow groups to be selected.\n        // you will see the group gets selected, then all children get selected, then the grid unselects\n        // the children (as the default behaviour when clicking is to unselect other rows) which results\n        // in the group getting unselected (as all children are unselected). the correct thing would be\n        // to change this, so that children of the selected group are not then subsequently un-selected.\n        const groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n\n        if (\n            // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,\n            // so return if it's a group row\n            (groupSelectsChildren && this.rowNode.group) ||\n            this.isRowSelectionBlocked() ||\n            // if click selection suppressed, do nothing\n            this.gridOptionsService.get('suppressRowClickSelection')\n        ) {\n            return;\n        }\n\n        const multiSelectOnClick = this.gridOptionsService.get('rowMultiSelectWithClick');\n        const rowDeselectionWithCtrl = !this.gridOptionsService.get('suppressRowDeselection');\n        const source = 'rowClicked';\n\n        if (this.rowNode.isSelected()) {\n            if (multiSelectOnClick) {\n                this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });\n            } else if (isMultiKey) {\n                if (rowDeselectionWithCtrl) {\n                    this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });\n                }\n            } else {\n                // selected with no multi key, must make sure anything else is unselected\n                this.rowNode.setSelectedParams({ newValue: true, clearSelection: !isShiftKey, rangeSelect: isShiftKey, event: mouseEvent, source });\n            }\n        } else {\n            const clearSelection = multiSelectOnClick ? false : !isMultiKey;\n            this.rowNode.setSelectedParams({ newValue: true, clearSelection: clearSelection, rangeSelect: isShiftKey, event: mouseEvent, source });\n        }\n    }\n\n    public isRowSelectionBlocked(): boolean {\n        return !this.rowNode.selectable || !!this.rowNode.rowPinned || !this.gridOptionsService.isRowSelection();\n    }\n\n    public setupDetailRowAutoHeight(eDetailGui: HTMLElement): void {\n        if (this.rowType !== RowType.FullWidthDetail) { return; }\n\n        if (!this.gridOptionsService.get('detailRowAutoHeight')) { return; }\n\n        const checkRowSizeFunc = () => {\n            const clientHeight = eDetailGui.clientHeight;\n\n            // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n            // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n            // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n            // empty detail grid would still have some styling around it giving at least a few pixels.\n            if (clientHeight != null && clientHeight > 0) {\n                // we do the update in a timeout, to make sure we are not calling from inside the grid\n                // doing another update\n                const updateRowHeightFunc = () => {\n                    this.rowNode.setRowHeight(clientHeight);\n                    if (this.beans.clientSideRowModel) {\n                        this.beans.clientSideRowModel.onRowHeightChanged();\n                    } else if (this.beans.serverSideRowModel) {\n                        this.beans.serverSideRowModel.onRowHeightChanged();\n                    }\n                };\n                window.setTimeout(updateRowHeightFunc, 0);\n            }\n        };\n\n        const resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);\n\n        this.addDestroyFunc(resizeObserverDestroyFunc);\n\n        checkRowSizeFunc();\n    }\n\n    private createFullWidthCompDetails(eRow: HTMLElement, pinned: ColumnPinnedType): UserCompDetails {\n        const params = this.gridOptionsService.addGridCommonParams({\n            fullWidth: true,\n            data: this.rowNode.data,\n            node: this.rowNode,\n            value: this.rowNode.key,\n            valueFormatted: this.rowNode.key,\n            rowIndex: this.rowNode.rowIndex!,\n            // these need to be taken out, as part of 'afterAttached' now\n            eGridCell: eRow,\n            eParentOfValue: eRow,\n            pinned: pinned,\n            addRenderedRowListener: this.addEventListener.bind(this),\n            registerRowDragger: (rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) => this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange),\n            setTooltip: (value, shouldDisplayTooltip) => this.refreshRowTooltip(value, shouldDisplayTooltip)\n        } as WithoutGridCommon<ICellRendererParams>);\n\n        switch (this.rowType) {\n            case RowType.FullWidthDetail:\n                return this.beans.userComponentFactory.getFullWidthDetailCellRendererDetails(params);\n            case RowType.FullWidthGroup:\n                return this.beans.userComponentFactory.getFullWidthGroupCellRendererDetails(params);\n            case RowType.FullWidthLoading:\n                return this.beans.userComponentFactory.getFullWidthLoadingCellRendererDetails(params);\n            default:\n                return this.beans.userComponentFactory.getFullWidthCellRendererDetails(params);\n        }\n    }\n\n    private refreshRowTooltip(value: string, shouldDisplayTooltip?: () => boolean) {\n        if (!this.fullWidthGui) { return; }\n\n        const tooltipParams: ITooltipFeatureCtrl = {\n            getGui: () => this.fullWidthGui!.element,\n            getTooltipValue: () => value,\n            getLocation: () => 'fullWidthRow',\n            shouldDisplayTooltip\n        }\n\n        if (this.tooltipFeature) {\n            this.destroyBean(this.tooltipFeature, this.beans.context);\n        }\n\n        this.tooltipFeature = this.createBean(new TooltipFeature(tooltipParams, this.beans));\n    }\n\n    private addFullWidthRowDragging(\n        rowDraggerElement?: HTMLElement,\n        dragStartPixels?: number,\n        value: string = '',\n        suppressVisibilityChange?: boolean\n    ): void {\n        if (!this.isFullWidth()) { return; }\n\n        const rowDragComp = new RowDragComp(() => value, this.rowNode, undefined, rowDraggerElement, dragStartPixels, suppressVisibilityChange);\n        this.createBean(rowDragComp, this.beans.context);\n\n        this.addDestroyFunc(() =>{\n            this.destroyBean(rowDragComp, this.beans.context);\n        });\n    }\n\n    private onUiLevelChanged(): void {\n        const newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n        if (this.rowLevel != newLevel) {\n            const classToAdd = 'ag-row-level-' + newLevel;\n            const classToRemove = 'ag-row-level-' + this.rowLevel;\n            this.allRowGuis.forEach(gui => {\n                gui.rowComp.addOrRemoveCssClass(classToAdd, true);\n                gui.rowComp.addOrRemoveCssClass(classToRemove, false);\n            });\n        }\n        this.rowLevel = newLevel;\n    }\n\n    private isFirstRowOnPage(): boolean {\n        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();\n    }\n\n    private isLastRowOnPage(): boolean {\n        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();\n    }\n\n    private refreshFirstAndLastRowStyles(): void {\n        const newFirst = this.isFirstRowOnPage();\n        const newLast = this.isLastRowOnPage();\n\n        if (this.firstRowOnPage !== newFirst) {\n            this.firstRowOnPage = newFirst;\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-first', newFirst));\n        }\n        if (this.lastRowOnPage !== newLast) {\n            this.lastRowOnPage = newLast;\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-last', newLast));\n        }\n    }\n\n    public stopEditing(cancel = false): void {\n        // if we are already stopping row edit, there is\n        // no need to start this process again.\n        if (this.stoppingRowEdit) { return; }\n\n        const cellControls = this.getAllCellCtrls();\n        const isRowEdit = this.editingRow;\n\n        this.stoppingRowEdit = true;\n\n        let fireRowEditEvent = false;\n        for (const ctrl of cellControls) {\n            const valueChanged = ctrl.stopEditing(cancel);\n            if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {\n                fireRowEditEvent = true;\n            }\n        }\n\n        if (fireRowEditEvent) {\n            const event: RowValueChangedEvent = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);\n            this.beans.eventService.dispatchEvent(event);\n        }\n\n        if (isRowEdit) {\n            this.setEditingRow(false);\n        }\n\n        this.stoppingRowEdit = false;\n    }\n\n    public setInlineEditingCss(editing: boolean): void {\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass(\"ag-row-inline-editing\", editing);\n            gui.rowComp.addOrRemoveCssClass(\"ag-row-not-inline-editing\", !editing);\n        });\n    }\n\n    private setEditingRow(value: boolean): void {\n        this.editingRow = value;\n        this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-editing', value));\n\n        const event: RowEvent = value ?\n            this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) as RowEditingStartedEvent\n            : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED) as RowEditingStoppedEvent;\n\n        this.beans.eventService.dispatchEvent(event);\n    }\n\n    public startRowEditing(key: string | null = null, sourceRenderedCell: CellCtrl | null = null, event: KeyboardEvent | null = null): void {\n        // don't do it if already editing\n        if (this.editingRow) { return; }\n\n        const atLeastOneEditing = this.getAllCellCtrls().reduce((prev: boolean, cellCtrl: CellCtrl) => {\n            const cellStartedEdit = cellCtrl === sourceRenderedCell;\n            if (cellStartedEdit) {\n                cellCtrl.startEditing(key, cellStartedEdit, event);\n            } else {\n                cellCtrl.startEditing(null, cellStartedEdit, event);\n            }\n            if (prev) { return true; }\n\n            return cellCtrl.isEditing();\n        }, false);\n\n        if (atLeastOneEditing) {\n            this.setEditingRow(true);\n        }\n    }\n\n    public getAllCellCtrls(): CellCtrl[] {\n        if (this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0) {\n            return this.centerCellCtrls.list;\n        }\n        const res = [...this.centerCellCtrls.list, ...this.leftCellCtrls.list, ...this.rightCellCtrls.list];\n        return res;\n    }\n\n    private postProcessClassesFromGridOptions(): void {\n        const cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);\n        if (!cssClasses || !cssClasses.length) { return; }\n\n        cssClasses.forEach(classStr => {\n            this.allRowGuis.forEach(c => c.rowComp.addOrRemoveCssClass(classStr, true));\n        });\n    }\n\n    private postProcessRowClassRules(): void {\n        this.beans.rowCssClassCalculator.processRowClassRules(\n            this.rowNode, (className: string) => {\n                this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass(className, true));\n            },\n            (className: string) => {\n                this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass(className, false));\n            }\n        );\n    }\n\n    private setStylesFromGridOptions(updateStyles : boolean, gui?: RowGui): void {\n        if (updateStyles) {\n            this.rowStyles = this.processStylesFromGridOptions();\n        }\n        this.forEachGui(gui, gui => gui.rowComp.setUserStyles(this.rowStyles));\n    }\n\n    private getPinnedForContainer(rowContainerType: RowContainerType): ColumnPinnedType {\n        const pinned = rowContainerType === RowContainerType.LEFT\n            ? 'left'\n            : rowContainerType === RowContainerType.RIGHT\n                ? 'right'\n                : null;\n        return pinned;\n    }\n\n    private getInitialRowClasses(rowContainerType: RowContainerType): string[] {\n        const pinned = this.getPinnedForContainer(rowContainerType);\n\n        const params: RowCssClassCalculatorParams = {\n            rowNode: this.rowNode,\n            rowFocused: this.rowFocused,\n            fadeRowIn: this.fadeInAnimation[rowContainerType],\n            rowIsEven: this.rowNode.rowIndex! % 2 === 0,\n            rowLevel: this.rowLevel,\n            fullWidthRow: this.isFullWidth(),\n            firstRowOnPage: this.isFirstRowOnPage(),\n            lastRowOnPage: this.isLastRowOnPage(),\n            printLayout: this.printLayout,\n            expandable: this.rowNode.isExpandable(),\n            pinned: pinned\n        };\n        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);\n    }\n\n    public processStylesFromGridOptions(): RowStyle | undefined {\n        // part 1 - rowStyle\n        const rowStyle = this.gridOptionsService.get('rowStyle');\n\n        if (rowStyle && typeof rowStyle === 'function') {\n            console.warn('AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');\n            return;\n        }\n\n        // part 1 - rowStyleFunc\n        const rowStyleFunc = this.gridOptionsService.getCallback('getRowStyle');\n        let rowStyleFuncResult: any;\n\n        if (rowStyleFunc) {\n            const params: WithoutGridCommon<RowClassParams> = {\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!\n            };\n            rowStyleFuncResult = rowStyleFunc(params);\n        }\n        if (rowStyleFuncResult || rowStyle) {\n            return Object.assign({}, rowStyle, rowStyleFuncResult);\n        }\n        // Return constant reference for React\n        return this.emptyStyle;\n    }\n\n    private onRowSelected(gui?: RowGui): void {\n        const eDocument = this.beans.gridOptionsService.getDocument();\n        // Treat undefined as false, if we pass undefined down it gets treated as toggle class, rather than explicitly\n        // setting the required value\n        const selected = !!this.rowNode.isSelected();\n        this.forEachGui(gui, gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-selected', selected);\n            setAriaSelected(gui.element, selected);\n\n            const hasFocus = gui.element.contains(eDocument.activeElement);\n            if (hasFocus && (gui === this.centerGui || gui === this.fullWidthGui)) {\n                this.announceDescription();\n            }\n        });\n    }\n\n    public announceDescription(): void {\n        if (this.isRowSelectionBlocked()) { return; }\n\n        const selected = this.rowNode.isSelected()!;\n        if (selected && this.beans.gridOptionsService.get('suppressRowDeselection')) { return; }\n\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const label = translate(\n            selected ? 'ariaRowDeselect' : 'ariaRowSelect',\n            `Press SPACE to ${selected ? 'deselect' : 'select'} this row.`\n        );\n\n        this.beans.ariaAnnouncementService.announceValue(label);\n    }\n\n    public isUseAnimationFrameForCreate(): boolean {\n        return this.useAnimationFrameForCreate;\n    }\n\n    public addHoverFunctionality(eRow: HTMLElement): void {\n        // because we use animation frames to do this, it's possible the row no longer exists\n        // by the time we get to add it\n        if (!this.active) { return; }\n\n        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel\n        // like we do for all the other mouse events.\n\n        // because of the pinning, we cannot simply add / remove the class based on the eRow. we\n        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a\n        // mouse hover, it sets such in the rowNode, and then all three reflect the change as\n        // all are listening for event on the row node.\n\n        // step 1 - add listener, to set flag on row node\n        this.addManagedListener(eRow, 'mouseenter', () => this.rowNode.onMouseEnter());\n        this.addManagedListener(eRow, 'mouseleave', () => this.rowNode.onMouseLeave());\n\n        // step 2 - listen for changes on row node (which any eRow can trigger)\n        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, () => {\n            // if hover turned off, we don't add the class. we do this here so that if the application\n            // toggles this property mid way, we remove the hover form the last row, but we stop\n            // adding hovers from that point onwards. Also, do not highlight while dragging elements around.\n            if (\n                !this.beans.dragService.isDragging() &&\n                !this.gridOptionsService.get('suppressRowHoverHighlight')\n            ) {\n                eRow.classList.add('ag-row-hover');\n                this.rowNode.setHovered(true);\n            }\n        });\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, () => {\n            eRow.classList.remove('ag-row-hover');\n            this.rowNode.setHovered(false);\n        });\n    }\n\n    // for animation, we don't want to animate entry or exit to a very far away pixel,\n    // otherwise the row would move so fast, it would appear to disappear. so this method\n    // moves the row closer to the viewport if it is far away, so the row slide in / out\n    // at a speed the user can see.\n    private roundRowTopToBounds(rowTop: number): number {\n        const range = this.beans.ctrlsService.getGridBodyCtrl().getScrollFeature().getApproximateVScollPosition();\n        const minPixel = this.applyPaginationOffset(range.top, true) - 100;\n        const maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;\n\n        return Math.min(Math.max(minPixel, rowTop), maxPixel);\n    }\n\n    protected getFrameworkOverrides(): IFrameworkOverrides {\n        return this.beans.frameworkOverrides;\n    }\n\n    private forEachGui(gui: RowGui | undefined, callback: (gui: RowGui) => void): void {\n        if (gui) {\n            callback(gui);\n        } else {\n            this.allRowGuis.forEach(callback);\n        }\n    }\n\n    private onRowHeightChanged(gui?: RowGui): void {\n        // check for exists first - if the user is resetting the row height, then\n        // it will be null (or undefined) momentarily until the next time the flatten\n        // stage is called where the row will then update again with a new height\n        if (this.rowNode.rowHeight == null) { return; }\n\n        const rowHeight = this.rowNode.rowHeight;\n\n        const defaultRowHeight = this.beans.environment.getDefaultRowHeight();\n        const isHeightFromFunc = this.gridOptionsService.isGetRowHeightFunction();\n        const heightFromFunc = isHeightFromFunc ? this.gridOptionsService.getRowHeightForNode(this.rowNode).height : undefined;\n        const lineHeight = heightFromFunc ? `${Math.min(defaultRowHeight, heightFromFunc) - 2}px` : undefined;\n\n        this.forEachGui(gui, gui => {\n            gui.element.style.height = `${rowHeight}px`;\n\n            // If the row height is coming from a function, this means some rows can\n            // be smaller than the theme had intended. so we set --ag-line-height on\n            // the row, which is picked up by the theme CSS and is used in a calc\n            // for the CSS line-height property, which makes sure the line-height is\n            // not bigger than the row height, otherwise the row text would not fit.\n            // We do not use rowNode.rowHeight here, as this could be the result of autoHeight,\n            // and we found using the autoHeight result causes a loop, where changing the\n            // line-height them impacts the cell height, resulting in a new autoHeight,\n            // resulting in a new line-height and so on loop.\n            // const heightFromFunc = this.gridOptionsService.getRowHeightForNode(this.rowNode).height;\n            if (lineHeight) {\n                gui.element.style.setProperty('--ag-line-height', lineHeight);\n            }\n        });\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener): void {\n        super.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener): void {\n        super.removeEventListener(eventType, listener);\n    }\n\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    public destroyFirstPass(suppressAnimation: boolean = false): void {\n        this.active = false;\n\n        // why do we have this method? shouldn't everything below be added as a destroy func beside\n        // the corresponding create logic?\n\n        if (!suppressAnimation && this.gridOptionsService.isAnimateRows() && !this.isSticky()) {\n            const rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;\n            if (rowStillVisibleJustNotInViewport) {\n                // if the row is not rendered, but in viewport, it means it has moved,\n                // so we animate the row out. if the new location is very far away,\n                // the animation will be so fast the row will look like it's just disappeared,\n                // so instead we animate to a position just outside the viewport.\n                const rowTop = this.roundRowTopToBounds(this.rowNode.rowTop!);\n                this.setRowTop(rowTop);\n            } else {\n                this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', true));\n            }\n        }\n\n        this.rowNode.setHovered(false);\n\n        const event: VirtualRowRemovedEvent = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);\n\n        this.dispatchEvent(event);\n        this.beans.eventService.dispatchEvent(event);\n        super.destroy();\n    }\n\n    public destroySecondPass(): void {\n        this.allRowGuis.length = 0;\n\n        // if we are editing, destroying the row will stop editing\n        this.stopEditing();\n\n        const destroyCellCtrls = (ctrls: CellCtrlListAndMap): CellCtrlListAndMap => {\n            ctrls.list.forEach(c => c.destroy());\n            return { list: [], map: {} };\n        };\n\n        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);\n        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);\n        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);\n    }\n\n    private setFocusedClasses(gui?: RowGui): void {\n        this.forEachGui(gui, gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-focus', this.rowFocused);\n            gui.rowComp.addOrRemoveCssClass('ag-row-no-focus', !this.rowFocused);\n        });\n    }\n\n    private onCellFocusChanged(): void {\n        const rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\n\n        if (rowFocused !== this.rowFocused) {\n            this.rowFocused = rowFocused;\n            this.setFocusedClasses();\n        }\n\n        // if we are editing, then moving the focus out of a row will stop editing\n        if (!rowFocused && this.editingRow) {\n            this.stopEditing(false);\n        }\n    }\n\n    private onPaginationChanged(): void {\n        const currentPage = this.beans.paginationProxy.getCurrentPage();\n        // it is possible this row is in the new page, but the page number has changed, which means\n        // it needs to reposition itself relative to the new page\n        if (this.paginationPage !== currentPage) {\n            this.paginationPage = currentPage;\n            this.onTopChanged();\n        }\n\n        this.refreshFirstAndLastRowStyles();\n    }\n\n    private onTopChanged(): void {\n        this.setRowTop(this.rowNode.rowTop!);\n    }\n\n    private onPaginationPixelOffsetChanged(): void {\n        // the pixel offset is used when calculating rowTop to set on the row DIV\n        this.onTopChanged();\n    }\n\n    // applies pagination offset, eg if on second page, and page height is 500px, then removes\n    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.\n    // reverse will take the offset away rather than add.\n    private applyPaginationOffset(topPx: number, reverse = false): number {\n        if (this.rowNode.isRowPinned() || this.rowNode.sticky) {\n            return topPx;\n        }\n\n        const pixelOffset = this.beans.paginationProxy.getPixelOffset();\n        const multiplier = reverse ? 1 : -1;\n\n        return topPx + (pixelOffset * multiplier);\n    }\n\n    public setRowTop(pixels: number): void {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) { return; }\n\n        // need to make sure rowTop is not null, as this can happen if the node was once\n        // visible (ie parent group was expanded) but is now not visible\n        if (exists(pixels)) {\n            const afterPaginationPixels = this.applyPaginationOffset(pixels);\n            const skipScaling = this.rowNode.isRowPinned() || this.rowNode.sticky;\n            const afterScalingPixels = skipScaling ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n            const topPx = `${afterScalingPixels}px`;\n            this.setRowTopStyle(topPx);\n        }\n    }\n\n    // the top needs to be set into the DOM element when the element is created, not updated afterwards.\n    // otherwise the transition would not work, as it would be transitioning from zero (the unset value).\n    // for example, suppose a row that is outside the viewport, then user does a filter to remove other rows\n    // and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,\n    // but now is in the viewport) then a new RowComp is created, however it should have it's position initialised\n    // to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation\n    // time, the row would animate down (ie from position zero).\n    public getInitialRowTop(rowContainerType: RowContainerType): string | undefined {\n        return this.suppressRowTransform ? this.getInitialRowTopShared(rowContainerType) : undefined;\n    }\n    public getInitialTransform(rowContainerType: RowContainerType): string | undefined {\n        return this.suppressRowTransform ? undefined : `translateY(${this.getInitialRowTopShared(rowContainerType)})`;\n    }\n    private getInitialRowTopShared(rowContainerType: RowContainerType): string {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) { return ''; }\n\n        let rowTop: number;\n        if (this.isSticky()) {\n            rowTop = this.rowNode.stickyRowTop;\n        } else {\n            // if sliding in, we take the old row top. otherwise we just set the current row top.\n            const pixels = this.slideInAnimation[rowContainerType] ? this.roundRowTopToBounds(this.rowNode.oldRowTop!) : this.rowNode.rowTop;\n            const afterPaginationPixels = this.applyPaginationOffset(pixels!);\n            // we don't apply scaling if row is pinned\n            rowTop = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n        }\n\n        return rowTop + 'px';\n    }\n\n    private setRowTopStyle(topPx: string): void {\n        this.allRowGuis.forEach(\n            gui => this.suppressRowTransform ?\n                gui.rowComp.setTop(topPx) :\n                gui.rowComp.setTransform(`translateY(${topPx})`)\n        );\n    }\n\n    public getRowNode(): RowNode {\n        return this.rowNode;\n    }\n\n    public getCellCtrl(column: Column): CellCtrl | null {\n        // first up, check for cell directly linked to this column\n        let res: CellCtrl | null = null;\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.getColumn() == column) {\n                res = cellCtrl;\n            }\n        });\n\n        if (res != null) { return res; }\n\n        // second up, if not found, then check for spanned cols.\n        // we do this second (and not at the same time) as this is\n        // more expensive, as spanning cols is a\n        // infrequently used feature so we don't need to do this most\n        // of the time\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {\n                res = cellCtrl;\n            }\n        });\n\n        return res;\n    }\n\n    private onRowIndexChanged(): void {\n        // we only bother updating if the rowIndex is present. if it is not present, it means this row\n        // is child of a group node, and the group node was closed, it's the only way to have no row index.\n        // when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!\n        if (this.rowNode.rowIndex != null) {\n            this.onCellFocusChanged();\n            this.updateRowIndexes();\n            this.postProcessCss();\n        }\n    }\n\n    public getRowIndex() {\n        return this.rowNode.getRowIndexString();\n    }\n\n    private updateRowIndexes(gui?: RowGui): void {\n        const rowIndexStr = this.rowNode.getRowIndexString();\n        const headerRowCount = this.beans.headerNavigationService.getHeaderRowCount() + this.beans.filterManager.getHeaderRowCount();\n        const rowIsEven = this.rowNode.rowIndex! % 2 === 0;\n        const ariaRowIndex = headerRowCount + this.rowNode.rowIndex! + 1;\n\n        this.forEachGui(gui, c => {\n            c.rowComp.setRowIndex(rowIndexStr);\n            c.rowComp.addOrRemoveCssClass('ag-row-even', rowIsEven);\n            c.rowComp.addOrRemoveCssClass('ag-row-odd', !rowIsEven);\n            setAriaRowIndex(c.element, ariaRowIndex);\n        });\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { getCtrlForEventTarget, isStopPropagationForAgGrid, isEventSupported } from \"../../utils/event\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context\";\nimport { MouseEventService } from \"./../mouseEventService\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { ValueService } from \"../../valueService/valueService\";\nimport { Column } from \"../../entities/column\";\nimport { isIOSUserAgent } from \"../../utils/browser\";\nimport { LongTapEvent, TouchListener } from \"../../widgets/touchListener\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { isEventFromPrintableCharacter, isUserSuppressingKeyboardEvent } from \"../../utils/keyboard\";\nimport { CellKeyDownEvent, Events, FullWidthCellKeyDownEvent } from \"../../events\";\nimport { NavigationService } from \"./../navigationService\";\nimport { FocusService } from \"../../focusService\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { UndoRedoService } from \"../../undoRedo/undoRedoService\";\nimport { missingOrEmpty } from \"../../utils/generic\";\nimport { last } from \"../../utils/array\";\nimport { normaliseQwertyAzerty } from \"../../utils/keyboard\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { PinnedRowModel } from \"../../pinnedRowModel/pinnedRowModel\";\nimport { IRangeService } from \"../../interfaces/IRangeService\";\nimport { IClipboardService } from \"../../interfaces/iClipboardService\";\nimport { CellCtrl } from \"../../rendering/cell/cellCtrl\";\nimport { RowPinnedType } from \"../../interfaces/iRowNode\";\nimport { MenuService, ShowContextMenuParams } from \"../../misc/menuService\";\n\nexport class RowContainerEventsFeature extends BeanStub {\n\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('menuService') private menuService: MenuService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('navigationService') private navigationService: NavigationService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('undoRedoService') private undoRedoService: UndoRedoService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    public postConstruct(): void {\n        this.addKeyboardListeners();\n        this.addMouseListeners();\n        this.mockContextMenuForIPad();\n    }\n\n    private addKeyboardListeners(): void {\n        const eventName = 'keydown';\n        const listener = this.processKeyboardEvent.bind(this, eventName);\n        this.addManagedListener(this.element, eventName, listener);\n    }\n\n    private addMouseListeners(): void {\n        const mouseDownEvent = isEventSupported('touchstart') ? 'touchstart' : 'mousedown';\n        const eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', mouseDownEvent];\n\n        eventNames.forEach(eventName => {\n            const listener = this.processMouseEvent.bind(this, eventName);\n            this.addManagedListener(this.element, eventName, listener);\n        });\n    }\n\n    private processMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (\n            !this.mouseEventService.isEventFromThisGrid(mouseEvent) ||\n            isStopPropagationForAgGrid(mouseEvent)\n        ) {\n            return;\n        }\n\n        const rowComp = this.getRowForEvent(mouseEvent);\n        const cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent)!;\n\n        if (eventName === \"contextmenu\") {\n            this.handleContextMenuMouseEvent(mouseEvent, undefined, rowComp, cellCtrl);\n        } else {\n            if (cellCtrl) {\n                cellCtrl.onMouseEvent(eventName, mouseEvent);\n            }\n            if (rowComp) {\n                rowComp.onMouseEvent(eventName, mouseEvent);\n            }\n        }\n    }\n\n    private mockContextMenuForIPad(): void {\n        // we do NOT want this when not in iPad, otherwise we will be doing\n        if (!isIOSUserAgent()) { return; }\n\n        const touchListener = new TouchListener(this.element);\n        const longTapListener = (event: LongTapEvent) => {\n            const rowComp = this.getRowForEvent(event.touchEvent);\n            const cellComp = this.mouseEventService.getRenderedCellForEvent(event.touchEvent)!;\n\n            this.handleContextMenuMouseEvent(undefined, event.touchEvent, rowComp, cellComp);\n        };\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n\n    private getRowForEvent(event: Event): RowCtrl | null {\n        let sourceElement: HTMLElement | null = event.target as HTMLElement | null;\n\n        while (sourceElement) {\n            const rowCon = this.gridOptionsService.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n            if (rowCon) {\n                return rowCon;\n            }\n\n            sourceElement = sourceElement.parentElement;\n        }\n\n        return null;\n    }\n\n    private handleContextMenuMouseEvent(mouseEvent: MouseEvent | undefined, touchEvent: TouchEvent | undefined, rowComp: RowCtrl | null, cellCtrl: CellCtrl) {\n        const rowNode = rowComp ? rowComp.getRowNode() : null;\n        const column = cellCtrl ? cellCtrl.getColumn() : null;\n        let value = null;\n\n        if (column) {\n            const event = mouseEvent ? mouseEvent : touchEvent;\n            cellCtrl.dispatchCellContextMenuEvent(event ?? null);\n            value = this.valueService.getValue(column, rowNode);\n        }\n\n        // if user clicked on a cell, anchor to that cell, otherwise anchor to the grid panel\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();\n\n        this.menuService.showContextMenu({ mouseEvent, touchEvent, rowNode, column, value, anchorToElement } as ShowContextMenuParams);\n    }\n\n    private getControlsForEventTarget(target: EventTarget | null): { cellCtrl: CellCtrl | null, rowCtrl: RowCtrl | null } {\n        return {\n            cellCtrl: getCtrlForEventTarget<CellCtrl>(this.gridOptionsService, target, CellCtrl.DOM_DATA_KEY_CELL_CTRL),\n            rowCtrl: getCtrlForEventTarget<RowCtrl>(this.gridOptionsService, target, RowCtrl.DOM_DATA_KEY_ROW_CTRL)\n        }\n    }\n\n    private processKeyboardEvent(eventName: string, keyboardEvent: KeyboardEvent): void {\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(keyboardEvent.target);\n\n        if (keyboardEvent.defaultPrevented) { return; }\n        if (cellCtrl) {\n            this.processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent);\n        } else if (rowCtrl && rowCtrl.isFullWidth()) {\n            this.processFullWidthRowKeyboardEvent(rowCtrl, eventName, keyboardEvent);\n        }\n    }\n\n    private processCellKeyboardEvent(cellCtrl: CellCtrl, eventName: string, keyboardEvent: KeyboardEvent): void {\n        const rowNode = cellCtrl.getRowNode();\n        const column = cellCtrl.getColumn();\n        const editing = cellCtrl.isEditing();\n\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, editing);\n\n        if (gridProcessingAllowed) {\n            if (eventName === 'keydown') {\n                // first see if it's a scroll key, page up / down, home / end etc\n                const wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);\n\n                // if not a scroll key, then we pass onto cell\n                if (!wasScrollKey) {\n                    cellCtrl.onKeyDown(keyboardEvent);\n                }\n\n                // perform clipboard and undo / redo operations\n                this.doGridOperations(keyboardEvent, cellCtrl.isEditing());\n\n                if (isEventFromPrintableCharacter(keyboardEvent)) {\n                    cellCtrl.processCharacter(keyboardEvent);\n                }\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: CellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n\n    }\n\n    private processFullWidthRowKeyboardEvent(rowComp: RowCtrl, eventName: string, keyboardEvent: KeyboardEvent) {\n        const rowNode = rowComp.getRowNode();\n        const focusedCell = this.focusService.getFocusedCell();\n        const column = (focusedCell && focusedCell.column) as Column;\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, false);\n\n        if (gridProcessingAllowed) {\n            const key = keyboardEvent.key;\n            if (eventName === 'keydown') {\n                switch (key) {\n                    case KeyCode.PAGE_HOME:\n                    case KeyCode.PAGE_END:\n                    case KeyCode.PAGE_UP:\n                    case KeyCode.PAGE_DOWN:\n                        this.navigationService.handlePageScrollingKey(keyboardEvent, true);\n                        break;\n    \n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        rowComp.onKeyboardNavigate(keyboardEvent);\n                        break;\n                    case KeyCode.TAB:\n                        rowComp.onTabKeyDown(keyboardEvent);\n                        break;\n                    default:\n                }\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: FullWidthCellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n    }\n\n    private doGridOperations(keyboardEvent: KeyboardEvent, editing: boolean): void {\n        // check if ctrl or meta key pressed\n        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) { return; }\n\n        // if the cell the event came from is editing, then we do not\n        // want to do the default shortcut keys, otherwise the editor\n        // (eg a text field) would not be able to do the normal cut/copy/paste\n        if (editing) { return; }\n\n        // for copy / paste, we don't want to execute when the event\n        // was from a child grid (happens in master detail)\n        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) { return; }\n\n        const keyCode = normaliseQwertyAzerty(keyboardEvent);\n\n        if (keyCode === KeyCode.A) { return this.onCtrlAndA(keyboardEvent); }\n        if (keyCode === KeyCode.C) { return this.onCtrlAndC(keyboardEvent); }\n        if (keyCode === KeyCode.D) { return this.onCtrlAndD(keyboardEvent); }\n        if (keyCode === KeyCode.V) { return this.onCtrlAndV(keyboardEvent); }\n        if (keyCode === KeyCode.X) { return this.onCtrlAndX(keyboardEvent); }\n        if (keyCode === KeyCode.Y) { return this.onCtrlAndY(); }\n        if (keyCode === KeyCode.Z) { return this.onCtrlAndZ(keyboardEvent); }\n    }\n\n    private onCtrlAndA(event: KeyboardEvent): void {\n        const { pinnedRowModel, paginationProxy, rangeService } = this;\n\n        if (rangeService && paginationProxy.isRowsToRender()) {\n            const [isEmptyPinnedTop, isEmptyPinnedBottom] = [\n                pinnedRowModel.isEmpty('top'),\n                pinnedRowModel.isEmpty('bottom')\n            ];\n\n            const floatingStart: RowPinnedType = isEmptyPinnedTop ? null : 'top';\n            let floatingEnd: RowPinnedType;\n            let rowEnd: number;\n\n            if (isEmptyPinnedBottom) {\n                floatingEnd = null;\n                rowEnd = this.paginationProxy.getRowCount() - 1;\n            } else {\n                floatingEnd = 'bottom';\n                rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;\n            }\n\n            const allDisplayedColumns = this.columnModel.getAllDisplayedColumns();\n            if (missingOrEmpty(allDisplayedColumns)) { return; }\n\n            rangeService.setCellRange({\n                rowStartIndex: 0,\n                rowStartPinned: floatingStart,\n                rowEndIndex: rowEnd,\n                rowEndPinned: floatingEnd,\n                columnStart: allDisplayedColumns[0],\n                columnEnd: last(allDisplayedColumns)\n            });\n        }\n        event.preventDefault();\n    }\n\n    private onCtrlAndC(event: KeyboardEvent): void {\n        if (!this.clipboardService || this.gridOptionsService.get('enableCellTextSelection')) { return; }\n\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n\n        if (cellCtrl?.isEditing() || rowCtrl?.isEditing()) { return; }\n\n        event.preventDefault();\n        this.clipboardService.copyToClipboard();\n    }\n\n    private onCtrlAndX(event: KeyboardEvent): void {\n        if (\n            !this.clipboardService ||\n            this.gridOptionsService.get('enableCellTextSelection') ||\n            this.gridOptionsService.get('suppressCutToClipboard')\n        ) { return; }\n\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n\n        if (cellCtrl?.isEditing() || rowCtrl?.isEditing()) { return; }\n\n            event.preventDefault();\n            this.clipboardService.cutToClipboard(undefined, 'ui');\n    }\n\n\n    private onCtrlAndV(event: KeyboardEvent): void {\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n\n        if (cellCtrl?.isEditing() || rowCtrl?.isEditing()) { return; }\n        if (this.clipboardService && !this.gridOptionsService.get('suppressClipboardPaste')) {\n            this.clipboardService.pasteFromClipboard();\n        }\n    }\n\n    private onCtrlAndD(event: KeyboardEvent): void {\n        if (this.clipboardService && !this.gridOptionsService.get('suppressClipboardPaste')) {\n            this.clipboardService.copyRangeDown();\n        }\n        event.preventDefault();\n    }\n\n    private onCtrlAndZ(event: KeyboardEvent): void {\n        if (!this.gridOptionsService.get('undoRedoCellEditing')) { return; }\n        event.preventDefault();\n\n        if (event.shiftKey) {\n            this.undoRedoService.redo('ui');\n        } else {\n            this.undoRedoService.undo('ui');\n        }\n    }\n\n    private onCtrlAndY(): void {\n        this.undoRedoService.redo('ui');\n    }\n\n}", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { ScrollVisibleService, SetScrollsVisibleParams } from \"../gridBodyComp/scrollVisibleService\";\nimport { GridBodyCtrl } from \"./gridBodyCtrl\";\nimport { BodyHeightChangedEvent, Events } from \"../events\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"./rowContainer/rowContainerCtrl\";\nimport { getInnerHeight, getInnerWidth } from \"../utils/dom\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { PinnedWidthService } from \"./pinnedWidthService\";\nimport { Column } from \"../entities/column\";\nimport { ProcessUnpinnedColumnsParams } from \"../interfaces/iCallbackParams\";\n\n// listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\nexport class ViewportSizeFeature extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n\n    private centerContainerCtrl: RowContainerCtrl;\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private centerWidth: number;\n    private bodyHeight: number;\n\n    constructor(centerContainerCtrl: RowContainerCtrl) {\n        super();\n        this.centerContainerCtrl = centerContainerCtrl;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.listenForResize();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n        this.addManagedPropertyListeners(['alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll'], () => {\n            this.checkViewportAndScrolls();\n        });\n    }\n\n    private listenForResize(): void {\n        const listener = () => this.onCenterViewportResized();\n\n        // centerContainer gets horizontal resizes\n        this.centerContainerCtrl.registerViewportResizeListener(listener);\n\n        // eBodyViewport gets vertical resizes\n        this.gridBodyCtrl.registerBodyViewportResizeListener(listener);\n    }\n\n    private onScrollbarWidthChanged() {\n        this.checkViewportAndScrolls();\n    }\n\n    private onCenterViewportResized(): void {\n        if (this.centerContainerCtrl.isViewportInTheDOMTree()) {\n            this.keepPinnedColumnsNarrowerThanViewport();\n            this.checkViewportAndScrolls();\n\n            const newWidth = this.centerContainerCtrl.getCenterWidth();\n\n            if (newWidth !== this.centerWidth) {\n                this.centerWidth = newWidth;\n                this.columnModel.refreshFlexedColumns(\n                    { viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true }\n                );\n            }\n        } else {\n            this.bodyHeight = 0;\n        }\n    }\n\n    private keepPinnedColumnsNarrowerThanViewport(): void {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyWidth = getInnerWidth(eBodyViewport);\n\n        if (bodyWidth <= 50) { return; }\n\n        // remove 50px from the bodyWidth to give some margin\n        let columnsToRemove = this.getPinnedColumnsOverflowingViewport(bodyWidth - 50);\n        const processUnpinnedColumns = this.gridOptionsService.getCallback('processUnpinnedColumns');\n\n        if (!columnsToRemove.length) { return; }\n\n        if (processUnpinnedColumns) {\n            const params: WithoutGridCommon<ProcessUnpinnedColumnsParams> = {\n                columns: columnsToRemove,\n                viewportWidth: bodyWidth\n            }\n            columnsToRemove = processUnpinnedColumns(params);\n        }\n\n        this.columnModel.setColumnsPinned(columnsToRemove, null, 'viewportSizeFeature')\n    }\n\n    private getPinnedColumnsOverflowingViewport(viewportWidth: number): Column[] {\n        const pinnedRightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const pinnedLeftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const totalPinnedWidth = pinnedRightWidth + pinnedLeftWidth;\n\n        if (totalPinnedWidth < viewportWidth) { return []; }\n\n        const pinnedLeftColumns: Column[] = [...this.columnModel.getDisplayedLeftColumns()];\n        const pinnedRightColumns: Column[] = [...this.columnModel.getDisplayedRightColumns()];\n\n        let indexRight = 0;\n        let indexLeft = 0;\n        let totalWidthRemoved = 0;\n\n        const columnsToRemove: Column[] = [];\n\n        let spaceNecessary = (totalPinnedWidth - totalWidthRemoved) - viewportWidth;\n\n        while ((indexLeft < pinnedLeftColumns.length || indexRight < pinnedRightColumns.length) && spaceNecessary > 0) {\n            if (indexRight < pinnedRightColumns.length) {\n                const currentColumn = pinnedRightColumns[indexRight++];\n                spaceNecessary -= currentColumn.getActualWidth();\n                columnsToRemove.push(currentColumn);\n            }\n\n            if (indexLeft < pinnedLeftColumns.length && spaceNecessary > 0) {\n                const currentColumn = pinnedLeftColumns[indexLeft++];\n                spaceNecessary -= currentColumn.getActualWidth();\n                columnsToRemove.push(currentColumn);\n            }\n        }\n\n        return columnsToRemove;\n    }\n\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n    private checkViewportAndScrolls(): void {\n        // results in updating anything that depends on scroll showing\n        this.updateScrollVisibleService();\n\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n        this.checkBodyHeight();\n\n        // check for virtual columns for ColumnController\n        this.onHorizontalViewportChanged();\n\n        this.gridBodyCtrl.getScrollFeature().checkScrollLeft();\n    }\n\n    public getBodyHeight(): number {\n        return this.bodyHeight;\n    }\n\n    private checkBodyHeight(): void {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyHeight = getInnerHeight(eBodyViewport);\n\n        if (this.bodyHeight !== bodyHeight) {\n            this.bodyHeight = bodyHeight;\n            const event: WithoutGridCommon<BodyHeightChangedEvent> = {\n                type: Events.EVENT_BODY_HEIGHT_CHANGED\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private updateScrollVisibleService(): void {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateScrollVisibleServiceImpl();\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n    }\n\n    private updateScrollVisibleServiceImpl(): void {\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: this.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()\n        };\n\n        this.scrollVisibleService.setScrollsVisible(params);\n    }\n\n    private isHorizontalScrollShowing(): boolean {\n        return this.centerContainerCtrl.isHorizontalScrollShowing();\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\n    private onHorizontalViewportChanged(): void {\n        const scrollWidth = this.centerContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();\n\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    }\n}", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { Events } from \"../../eventKeys\";\nimport { setDisplayed, setFixedWidth } from \"../../utils/dom\";\nimport { PinnedWidthService } from \"../pinnedWidthService\";\n\nexport class SetPinnedLeftWidthFeature extends BeanStub {\n\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));\n    }\n\n    private onPinnedLeftWidthChanged(): void {\n        const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const displayed = leftWidth > 0;\n        setDisplayed(this.element, displayed);\n        setFixedWidth(this.element, leftWidth);\n    }\n\n    public getWidth(): number {\n        return this.pinnedWidthService.getPinnedLeftWidth();\n    }\n\n}", "import { Autowired, PostConstruct } from \"../../context/context\";\nimport { PinnedWidthService } from \"../pinnedWidthService\";\nimport { Events } from \"../../eventKeys\";\nimport { setDisplayed, setFixedWidth } from \"../../utils/dom\";\nimport { BeanStub } from \"../../context/beanStub\";\n\nexport class SetPinnedRightWidthFeature extends BeanStub {\n\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));\n    }\n\n    private onPinnedRightWidthChanged(): void {\n        const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const displayed = rightWidth > 0;\n        setDisplayed(this.element, displayed);\n        setFixedWidth(this.element, rightWidth);\n    }\n\n    public getWidth(): number {\n        return this.pinnedWidthService.getPinnedRightWidth();\n    }\n}", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { RowContainerHeightService } from \"../../rendering/rowContainerHeightService\";\nimport { Events } from \"../../eventKeys\";\n\nexport class SetHeightFeature extends BeanStub {\n\n    @Autowired(\"rowContainerHeightService\") private maxDivHeightScaler: RowContainerHeightService;\n\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement | undefined;\n\n    constructor(eContainer: HTMLElement, eViewport?: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));\n    }\n\n    private onHeightChanged(): void {\n        const height = this.maxDivHeightScaler.getUiContainerHeight();\n        const heightString = height != null ? `${height}px` : ``;\n\n        this.eContainer.style.height = heightString;\n        if (this.eViewport) {\n            this.eViewport.style.height = heightString;\n        }\n    }\n}", "import { BeanStub } from \"../../context/beanStub\";\nimport { missing } from \"../../utils/generic\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context\";\nimport { IRangeService } from \"../../interfaces/IRangeService\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\n\nexport class DragListenerFeature extends BeanStub {\n\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('dragService') private dragService: DragService;\n\n    private eContainer: HTMLElement;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    private params: DragListenerParams;\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (missing(this.rangeService)) {\n            return;\n        }\n\n        this.params = {\n            eElement: this.eContainer,\n            onDragStart: this.rangeService.onDragStart.bind(this.rangeService),\n            onDragStop: this.rangeService.onDragStop.bind(this.rangeService),\n            onDragging: this.rangeService.onDragging.bind(this.rangeService)\n        };\n\n        this.addManagedPropertyListener('enableRangeSelection', (props) => {\n            const isEnabled = props.currentValue;\n            if (isEnabled) {\n                this.enableFeature();\n                return;\n            }\n            this.disableFeature();\n        });\n\n        this.addDestroyFunc(() => this.disableFeature());\n\n        const isRangeSelection = this.gridOptionsService.get('enableRangeSelection');\n        if (isRangeSelection) {\n            this.enableFeature();\n        }\n    }\n\n    private enableFeature() {\n        this.dragService.addDragSource(this.params);\n    }\n\n    private disableFeature() {\n        this.dragService.removeDragSource(this.params);\n    }\n}", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { Events } from \"../eventKeys\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\n\nexport class CenterWidthFeature extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n\n    constructor(\n        private readonly callback: (width: number) => void,\n        private readonly addSpacer: boolean = false\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const listener = this.setWidth.bind(this);\n        this.addManagedPropertyListener('domLayout', listener);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_CONTAINER_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);\n\n        if (this.addSpacer) {\n            this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);\n        }\n\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const {columnModel} = this;\n\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n\n        const centerWidth = columnModel.getBodyContainerWidth();\n        const leftWidth = columnModel.getDisplayedColumnsLeftWidth();\n        const rightWidth = columnModel.getDisplayedColumnsRightWidth();\n\n        let totalWidth: number;\n\n        if (printLayout) {\n            totalWidth = centerWidth + leftWidth + rightWidth;\n        } else {\n            totalWidth = centerWidth;\n\n            if (this.addSpacer) {\n                const relevantWidth = this.gridOptionsService.get('enableRtl') ? leftWidth : rightWidth;\n                if (relevantWidth === 0 && this.scrollVisibleService.isVerticalScrollShowing()) {\n                    totalWidth += this.gridOptionsService.getScrollbarWidth();\n                }\n            }\n        }\n\n        this.callback(totalWidth);\n    }\n}", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { Events } from \"../../eventKeys\";\nimport { RowContainerEventsFeature } from \"./rowContainerEventsFeature\";\nimport { DragService } from \"../../dragAndDrop/dragService\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { getInnerWidth, getScrollLeft, isHorizontalScrollShowing, isInDOM, setScrollLeft } from \"../../utils/dom\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { ResizeObserverService } from \"../../misc/resizeObserverService\";\nimport { ViewportSizeFeature } from \"../viewportSizeFeature\";\nimport { convertToMap } from \"../../utils/map\";\nimport { SetPinnedLeftWidthFeature } from \"./setPinnedLeftWidthFeature\";\nimport { SetPinnedRightWidthFeature } from \"./setPinnedRightWidthFeature\";\nimport { SetHeightFeature } from \"./setHeightFeature\";\nimport { DragListenerFeature } from \"./dragListenerFeature\";\nimport { CenterWidthFeature } from \"../centerWidthFeature\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { RowRenderer } from \"../../rendering/rowRenderer\";\nimport { ColumnPinnedType } from \"../../entities/column\";\nimport { DisplayedRowsChangedEvent } from \"../../events\";\n\nexport enum RowContainerName {\n    LEFT = 'left',\n    RIGHT = 'right',\n    CENTER = 'center',\n    FULL_WIDTH = 'fullWidth',\n\n    TOP_LEFT = 'topLeft',\n    TOP_RIGHT = 'topRight',\n    TOP_CENTER = 'topCenter',\n    TOP_FULL_WIDTH = 'topFullWidth',\n\n    STICKY_TOP_LEFT = 'stickyTopLeft',\n    STICKY_TOP_RIGHT = 'stickyTopRight',\n    STICKY_TOP_CENTER = 'stickyTopCenter',\n    STICKY_TOP_FULL_WIDTH = 'stickyTopFullWidth',\n\n    BOTTOM_LEFT = 'bottomLeft',\n    BOTTOM_RIGHT = 'bottomRight',\n    BOTTOM_CENTER = 'bottomCenter',\n    BOTTOM_FULL_WIDTH = 'bottomFullWidth'\n}\n\nexport enum RowContainerType {\n    LEFT = 'left',\n    RIGHT = 'right',\n    CENTER = 'center',\n    FULL_WIDTH = 'fullWidth'\n}\n\nexport function getRowContainerTypeForName(name: RowContainerName): RowContainerType {\n    switch (name) {\n        case RowContainerName.CENTER:\n        case RowContainerName.TOP_CENTER:\n        case RowContainerName.STICKY_TOP_CENTER:\n        case RowContainerName.BOTTOM_CENTER:\n            return RowContainerType.CENTER;\n        case RowContainerName.LEFT:\n        case RowContainerName.TOP_LEFT:\n        case RowContainerName.STICKY_TOP_LEFT:\n        case RowContainerName.BOTTOM_LEFT:\n            return RowContainerType.LEFT;\n        case RowContainerName.RIGHT:\n        case RowContainerName.TOP_RIGHT:\n        case RowContainerName.STICKY_TOP_RIGHT:\n        case RowContainerName.BOTTOM_RIGHT:\n            return RowContainerType.RIGHT;\n        case RowContainerName.FULL_WIDTH:\n        case RowContainerName.TOP_FULL_WIDTH:\n        case RowContainerName.STICKY_TOP_FULL_WIDTH:\n        case RowContainerName.BOTTOM_FULL_WIDTH:\n            return RowContainerType.FULL_WIDTH;\n        default :\n            throw Error('Invalid Row Container Type');\n    }\n}\n\nconst ContainerCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-container'],\n    [RowContainerName.LEFT, 'ag-pinned-left-cols-container'],\n    [RowContainerName.RIGHT, 'ag-pinned-right-cols-container'],\n    [RowContainerName.FULL_WIDTH, 'ag-full-width-container'],\n\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-container'],\n    [RowContainerName.TOP_LEFT, 'ag-pinned-left-floating-top'],\n    [RowContainerName.TOP_RIGHT, 'ag-pinned-right-floating-top'],\n    [RowContainerName.TOP_FULL_WIDTH, 'ag-floating-top-full-width-container'],\n\n    [RowContainerName.STICKY_TOP_CENTER, 'ag-sticky-top-container'],\n    [RowContainerName.STICKY_TOP_LEFT, 'ag-pinned-left-sticky-top'],\n    [RowContainerName.STICKY_TOP_RIGHT, 'ag-pinned-right-sticky-top'],\n    [RowContainerName.STICKY_TOP_FULL_WIDTH, 'ag-sticky-top-full-width-container'],\n\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-container'],\n    [RowContainerName.BOTTOM_LEFT, 'ag-pinned-left-floating-bottom'],\n    [RowContainerName.BOTTOM_RIGHT, 'ag-pinned-right-floating-bottom'],\n    [RowContainerName.BOTTOM_FULL_WIDTH, 'ag-floating-bottom-full-width-container'],\n]);\n\nconst ViewportCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-viewport'],\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-viewport'],\n    [RowContainerName.STICKY_TOP_CENTER, 'ag-sticky-top-viewport'],\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-viewport'],\n]);\n\nexport interface IRowContainerComp {\n    setViewportHeight(height: string): void;\n    setRowCtrls(params: { rowCtrls: RowCtrl[], useFlushSync?: boolean }): void;\n    setDomOrder(domOrder: boolean): void;\n    setContainerWidth(width: string): void;\n}\n\nexport class RowContainerCtrl extends BeanStub {\n\n    public static getRowContainerCssClasses(name: RowContainerName): { container?: string, viewport?: string } {\n        const containerClass = ContainerCssClasses.get(name);\n        const viewportClass = ViewportCssClasses.get(name);\n        return { container: containerClass, viewport: viewportClass };\n    }\n\n    public static getPinned(name: RowContainerName): ColumnPinnedType {\n        switch (name) {\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.STICKY_TOP_LEFT:\n            case RowContainerName.LEFT:\n                return 'left';\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.STICKY_TOP_RIGHT:\n            case RowContainerName.RIGHT:\n                return 'right';\n            default:\n                return null;\n        }\n    }\n\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n\n    private readonly name: RowContainerName;\n    private readonly isFullWithContainer: boolean;\n\n    private comp: IRowContainerComp;\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement;\n    private enableRtl: boolean;\n\n    private viewportSizeFeature: ViewportSizeFeature | undefined; // only center has this\n    private pinnedWidthFeature: SetPinnedLeftWidthFeature | SetPinnedRightWidthFeature | undefined;\n    private visible: boolean = true;\n    // Maintaining a constant reference enables optimization in React.\n    private EMPTY_CTRLS = [];\n\n    constructor(name: RowContainerName) {\n        super();\n        this.name = name;\n        this.isFullWithContainer =\n            this.name === RowContainerName.TOP_FULL_WIDTH\n            || this.name === RowContainerName.STICKY_TOP_FULL_WIDTH\n            || this.name === RowContainerName.BOTTOM_FULL_WIDTH\n            || this.name === RowContainerName.FULL_WIDTH;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsService.get('enableRtl');\n\n        this.forContainers([RowContainerName.CENTER],\n            () => this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this)));\n    }\n\n    private registerWithCtrlsService(): void {\n        switch (this.name) {\n            case RowContainerName.CENTER: this.ctrlsService.registerCenterRowContainerCtrl(this); break;\n            case RowContainerName.LEFT: this.ctrlsService.registerLeftRowContainerCtrl(this); break;\n            case RowContainerName.RIGHT: this.ctrlsService.registerRightRowContainerCtrl(this); break;\n            case RowContainerName.TOP_CENTER: this.ctrlsService.registerTopCenterRowContainerCtrl(this); break;\n            case RowContainerName.TOP_LEFT: this.ctrlsService.registerTopLeftRowContainerCon(this); break;\n            case RowContainerName.TOP_RIGHT: this.ctrlsService.registerTopRightRowContainerCtrl(this); break;\n            case RowContainerName.STICKY_TOP_CENTER: this.ctrlsService.registerStickyTopCenterRowContainerCtrl(this); break;\n            case RowContainerName.STICKY_TOP_LEFT: this.ctrlsService.registerStickyTopLeftRowContainerCon(this); break;\n            case RowContainerName.STICKY_TOP_RIGHT: this.ctrlsService.registerStickyTopRightRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_CENTER: this.ctrlsService.registerBottomCenterRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_LEFT: this.ctrlsService.registerBottomLeftRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_RIGHT: this.ctrlsService.registerBottomRightRowContainerCtrl(this); break;\n        }\n    }\n\n    private forContainers(names: RowContainerName[], callback: (() => void)): void {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n\n    public getContainerElement(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public getViewportSizeFeature(): ViewportSizeFeature | undefined {\n        return this.viewportSizeFeature;\n    }\n\n    public setComp(view: IRowContainerComp, eContainer: HTMLElement, eViewport: HTMLElement): void {\n        this.comp = view;\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\n        this.addPreventScrollWhileDragging();\n        this.listenOnDomOrder();\n        this.stopHScrollOnPinnedRows();\n\n        const allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];\n        const allStickyTopNoFW = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT];\n        const allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];\n        const allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];\n        const allNoFW = [...allTopNoFW, ...allBottomNoFW, ...allMiddleNoFW, ...allStickyTopNoFW];\n\n        const allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];\n\n        const allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER];\n        const allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT, RowContainerName.STICKY_TOP_LEFT];\n        const allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT, RowContainerName.STICKY_TOP_RIGHT];\n\n        this.forContainers(allLeft, () => {\n            this.pinnedWidthFeature = this.createManagedBean(new SetPinnedLeftWidthFeature(this.eContainer));\n            this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, () => this.onPinnedWidthChanged());\n        });\n        this.forContainers(allRight, () => {\n            this.pinnedWidthFeature = this.createManagedBean(new SetPinnedRightWidthFeature(this.eContainer));\n            this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, () => this.onPinnedWidthChanged());\n        });\n        this.forContainers(allMiddle, () => this.createManagedBean(new SetHeightFeature(this.eContainer, this.name === RowContainerName.CENTER ? eViewport : undefined)));\n        this.forContainers(allNoFW, () => this.createManagedBean(new DragListenerFeature(this.eContainer)));\n\n        this.forContainers(allCenter, () => this.createManagedBean(\n            new CenterWidthFeature(width => this.comp.setContainerWidth(`${width}px`))\n        ));\n\n        this.addListeners();\n        this.registerWithCtrlsService();\n    }\n\n    private addListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, () => this.onDisplayedColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, () => this.onDisplayedColumnsWidthChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, (params: DisplayedRowsChangedEvent) => this.onDisplayedRowsChanged(params.afterScroll));\n\n        this.onDisplayedColumnsChanged();\n        this.onDisplayedColumnsWidthChanged();\n        this.onDisplayedRowsChanged();\n    }\n\n    private listenOnDomOrder(): void {\n        // sticky section must show rows in set order\n        const allStickyContainers = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT, RowContainerName.STICKY_TOP_FULL_WIDTH];\n        const isStickContainer = allStickyContainers.indexOf(this.name) >= 0;\n        if (isStickContainer) {\n            this.comp.setDomOrder(true);\n            return;\n        }\n\n        const listener = () => {\n            const isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n            const isPrintLayout = this.gridOptionsService.isDomLayout('print');\n            this.comp.setDomOrder(isEnsureDomOrder || isPrintLayout);\n        };\n\n        this.addManagedPropertyListener('domLayout', listener);\n        listener();\n    }\n\n    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can\n    // scroll the column into view. we do not want this, the pinned sections should never scroll.\n    // so we listen to scrolls on these containers and reset the scroll if we find one.\n    private stopHScrollOnPinnedRows(): void {\n        this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER], () => {\n            const resetScrollLeft = () => this.eViewport.scrollLeft = 0;\n            this.addManagedListener(this.eViewport, 'scroll', resetScrollLeft);\n        });\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n    // this methods prevents the grid views from being scrolled while the dragService is being used\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\n    private addPreventScrollWhileDragging(): void {\n        const preventScroll = (e: TouchEvent) => {\n            if (this.dragService.isDragging()) {\n                if (e.cancelable) { e.preventDefault(); }\n            }\n        };\n\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\n    public onHorizontalViewportChanged(afterScroll: boolean = false): void {\n        const scrollWidth = this.getCenterWidth();\n        const scrollPosition = this.getCenterViewportScrollLeft();\n\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition, afterScroll);\n    }\n\n    public getCenterWidth(): number {\n        return getInnerWidth(this.eViewport);\n    }\n\n    public getCenterViewportScrollLeft(): number {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public registerViewportResizeListener(listener: (() => void)) {\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public isViewportInTheDOMTree(): boolean {\n        return isInDOM(this.eViewport);\n    }\n\n    public getViewportScrollLeft(): number {\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsService.get('alwaysShowHorizontalScroll');\n        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportElement(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public setContainerTranslateX(amount: number): void {\n        this.eContainer.style.transform = `translateX(${amount}px)`;\n    }\n\n    public getHScrollPosition(): { left: number, right: number; } {\n        const res = {\n            left: this.eViewport.scrollLeft,\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth\n        };\n        return res;\n    }\n\n    public setCenterViewportScrollLeft(value: number): void {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        setScrollLeft(this.eViewport, value, this.enableRtl);\n    }\n\n    private isContainerVisible(): boolean {\n        const pinned = RowContainerCtrl.getPinned(this.name);\n        return !pinned || (!!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0);\n    }\n\n    private onPinnedWidthChanged(): void {\n        const visible = this.isContainerVisible();\n        if (this.visible != visible) {\n            this.visible = visible;\n            this.onDisplayedRowsChanged();\n        }\n    }\n\n    private onDisplayedRowsChanged(afterScroll: boolean = false): void {\n        if (!this.visible) {\n            this.comp.setRowCtrls({ rowCtrls: this.EMPTY_CTRLS });\n            return;\n        }\n\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n        const embedFullWidthRows = this.gridOptionsService.get('embedFullWidthRows');\n        const embedFW = embedFullWidthRows || printLayout;\n        \n        // this list contains either all pinned top, center or pinned bottom rows\n        // this filters out rows not for this container, eg if it's a full with row, but we are not full with container\n        const rowsThisContainer = this.getRowCtrls().filter(rowCtrl => {\n            // this just justifies if the ctrl is in the correct place, this will be fed with zombie rows by the\n            // row renderer, so should not block them as they still need to animate -  the row renderer\n            // will clean these up when they finish animating\n            const fullWidthRow = rowCtrl.isFullWidth();\n\n            const match = this.isFullWithContainer ?\n                !embedFW && fullWidthRow\n                : embedFW || !fullWidthRow;\n\n            return match;\n        });\n\n        this.comp.setRowCtrls({ rowCtrls: rowsThisContainer, useFlushSync: afterScroll });\n    }\n\n    private getRowCtrls(): RowCtrl[] {\n        switch (this.name) {\n            case RowContainerName.TOP_CENTER:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.TOP_FULL_WIDTH:\n                return this.rowRenderer.getTopRowCtrls();\n\n            case RowContainerName.STICKY_TOP_CENTER:\n            case RowContainerName.STICKY_TOP_LEFT:\n            case RowContainerName.STICKY_TOP_RIGHT:\n            case RowContainerName.STICKY_TOP_FULL_WIDTH:\n                return this.rowRenderer.getStickyTopRowCtrls();\n\n            case RowContainerName.BOTTOM_CENTER:\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.BOTTOM_FULL_WIDTH:\n                return this.rowRenderer.getBottomRowCtrls();\n\n            default:\n                return this.rowRenderer.getCentreRowCtrls();\n        }\n    }\n}", "import { Autowired, Optional, PostConstruct } from '../context/context';\nimport { GridHeaderComp } from '../headerRendering/gridHeaderComp';\nimport { IRangeService } from '../interfaces/IRangeService';\nimport { ResizeObserverService } from '../misc/resizeObserverService';\nimport { LayoutCssClasses } from \"../styling/layoutFeature\";\nimport { setAriaColCount, setAriaMultiSelectable, setAriaRowCount } from '../utils/aria';\nimport { Component } from '../widgets/component';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport {\n    CSS_CLASS_FORCE_VERTICAL_SCROLL,\n    GridBodyCtrl,\n    IGridBodyComp,\n    RowAnimationCssClasses\n} from \"./gridBodyCtrl\";\nimport { RowContainerName } from \"./rowContainer/rowContainerCtrl\";\n\nconst GRID_BODY_TEMPLATE = /* html */\n    `<div class=\"ag-root ag-unselectable\" role=\"treegrid\">\n        <ag-header-root ref=\"gridHeader\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"${RowContainerName.TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"${RowContainerName.TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"${RowContainerName.TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"${RowContainerName.TOP_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-body\" ref=\"eBody\" role=\"presentation\">\n            <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n                <ag-row-container ref=\"leftContainer\" name=\"${RowContainerName.LEFT}\"></ag-row-container>\n                <ag-row-container ref=\"centerContainer\" name=\"${RowContainerName.CENTER}\"></ag-row-container>\n                <ag-row-container ref=\"rightContainer\" name=\"${RowContainerName.RIGHT}\"></ag-row-container>\n                <ag-row-container ref=\"fullWidthContainer\" name=\"${RowContainerName.FULL_WIDTH}\"></ag-row-container>\n            </div>\n            <ag-fake-vertical-scroll></ag-fake-vertical-scroll>\n        </div>\n        <div class=\"ag-sticky-top\" ref=\"eStickyTop\" role=\"presentation\">\n            <ag-row-container ref=\"stickyTopLeftContainer\" name=\"${RowContainerName.STICKY_TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"stickyTopCenterContainer\" name=\"${RowContainerName.STICKY_TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"stickyTopRightContainer\" name=\"${RowContainerName.STICKY_TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"stickyTopFullWidthContainer\" name=\"${RowContainerName.STICKY_TOP_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"${RowContainerName.BOTTOM_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"${RowContainerName.BOTTOM_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"${RowContainerName.BOTTOM_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"${RowContainerName.BOTTOM_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>`;\n\nexport class GridBodyComp extends Component {\n\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n\n    @Optional('rangeService') private rangeService: IRangeService;\n\n    @RefSelector('eBodyViewport') private eBodyViewport: HTMLElement;\n    @RefSelector('eStickyTop') private eStickyTop: HTMLElement;\n    @RefSelector('eTop') private eTop: HTMLElement;\n    @RefSelector('eBottom') private eBottom: HTMLElement;\n    @RefSelector('gridHeader') headerRootComp: GridHeaderComp;\n    @RefSelector('eBody') private eBody: HTMLElement;\n\n    private ctrl: GridBodyCtrl;\n\n    constructor() {\n        super(GRID_BODY_TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n\n        const setHeight = (height: number, element: HTMLElement) => {\n            const heightString = `${height}px`;\n            element.style.minHeight = heightString;\n            element.style.height = heightString;\n        };\n\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) => this.setRowAnimationCssOnBodyViewport(cssClass, animate),\n            setColumnCount: count => setAriaColCount(this.getGui(), count),\n            setRowCount: count => setAriaRowCount(this.getGui(), count),\n            setTopHeight: height => setHeight(height, this.eTop),\n            setBottomHeight: height => setHeight(height, this.eBottom),\n            setTopDisplay: display => this.eTop.style.display = display,\n            setBottomDisplay: display => this.eBottom.style.display = display,\n            setStickyTopHeight: height => this.eStickyTop.style.height = height,\n            setStickyTopTop: top => this.eStickyTop.style.top = top,\n            setStickyTopWidth: width => this.eStickyTop.style.width = width,\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(cssClass, flag),\n            updateLayoutClasses: (cssClass, params) => {\n                const classLists = [\n                    this.eBodyViewport.classList,\n                    this.eBody.classList\n                ];\n\n                classLists.forEach(classList => {\n                    classList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                    classList.toggle(LayoutCssClasses.NORMAL, params.normal);\n                    classList.toggle(LayoutCssClasses.PRINT, params.print);\n                });\n\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n            },\n            setAlwaysVerticalScrollClass: (cssClass, on) =>\n                this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eBodyViewport, listener);\n                this.addDestroyFunc(() => unsubscribeFromResize());\n            },\n            setPinnedTopBottomOverflowY: overflow => this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow,\n            setCellSelectableCss: (cssClass: string, selectable: boolean) => {\n                [this.eTop, this.eBodyViewport, this.eBottom]\n                    .forEach(ct => ct.classList.toggle(cssClass, selectable));\n            },\n            setBodyViewportWidth: width => this.eBodyViewport.style.width = width\n        };\n\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\n        this.ctrl.setComp(\n            compProxy,\n            this.getGui(),\n            this.eBodyViewport,\n            this.eTop,\n            this.eBottom,\n            this.eStickyTop\n        );\n\n        if (this.rangeService && this.gridOptionsService.get('enableRangeSelection') || this.gridOptionsService.get('rowSelection') === 'multiple') {\n            setAriaMultiSelectable(this.getGui(), true);\n        }\n    }\n\n    private setRowAnimationCssOnBodyViewport(cssClass: string, animateRows: boolean): void {\n        const bodyViewportClassList = this.eBodyViewport.classList;\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);\n    }\n\n    public getFloatingTopBottom(): HTMLElement[] {\n        return [this.eTop, this.eBottom];\n    }\n}\n", "import { Bean, Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events, ScrollVisibilityChangedEvent } from \"../events\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { debounce } from \"../utils/function\";\nimport { ColumnAnimationService } from \"../rendering/columnAnimationService\";\n\nexport interface SetScrollsVisibleParams {\n    horizontalScrollShowing: boolean;\n    verticalScrollShowing: boolean;\n}\n\n@Bean('scrollVisibleService')\nexport class ScrollVisibleService extends BeanStub {\n\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('columnAnimationService') public columnAnimationService: ColumnAnimationService;\n\n    private horizontalScrollShowing: boolean;\n    private verticalScrollShowing: boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.update();\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.update();\n    }\n\n    private update(): void {\n        // Because of column animation, if user removes cols anywhere except at the RHS, \n        // then the cols on the RHS will animate to the left to fill the gap. This animation \n        // means just after the cols are removed, the remaining cols are still in the original\n        // location at the start of the animation, so pre animation the H scrollbar is still\n        // needed, but post animation it is not. So if animation is active, we only update\n        // after the animation has ended.\n        if (this.columnAnimationService.isActive()) {\n            this.columnAnimationService.executeLaterVMTurn(() => {\n                this.columnAnimationService.executeLaterVMTurn(() => this.updateImpl());\n            });\n        } else {\n            this.updateImpl();\n        }\n    }\n\n    private updateImpl(): void {\n        const centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();\n\n        if (!centerRowCtrl || this.columnAnimationService.isActive()) { return; }\n\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.isVerticalScrollShowing()\n        };\n\n        this.setScrollsVisible(params);\n    }\n\n    public setScrollsVisible(params: SetScrollsVisibleParams): void {\n        const atLeastOneDifferent =\n            this.horizontalScrollShowing !== params.horizontalScrollShowing ||\n            this.verticalScrollShowing !== params.verticalScrollShowing;\n\n        if (atLeastOneDifferent) {\n            this.horizontalScrollShowing = params.horizontalScrollShowing;\n            this.verticalScrollShowing = params.verticalScrollShowing;\n\n            const event: WithoutGridCommon<ScrollVisibilityChangedEvent> = {\n                type: Events.EVENT_SCROLL_VISIBILITY_CHANGED\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // used by pagination service - to know page height\n    public isHorizontalScrollShowing(): boolean {\n        return this.horizontalScrollShowing;\n    }\n\n    // used by header container\n    public isVerticalScrollShowing(): boolean {\n        return this.verticalScrollShowing;\n    }\n}\n", "import { Bean } from \"../context/context\";\nimport { Autowired } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPositionUtils\";\nimport { NumberSequence } from '../utils';\nimport { DraggingEvent } from \"../dragAndDrop/dragAndDropService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getCtrlForEventTarget } from \"../utils/event\";\nimport { exists } from \"../utils/generic\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\n\n@Bean('mouseEventService')\nexport class MouseEventService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private static gridInstanceSequence = new NumberSequence();\n    private static GRID_DOM_KEY = '__ag_grid_instance';\n\n    private gridInstanceId = MouseEventService.gridInstanceSequence.next();\n\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    public stampTopLevelGridCompWithGridInstance(eGridDiv: HTMLElement): void {\n        (eGridDiv as any)[MouseEventService.GRID_DOM_KEY] = this.gridInstanceId;\n    }\n\n    public getRenderedCellForEvent(event: Event): CellCtrl | null {\n        return getCtrlForEventTarget<CellCtrl>(this.gridOptionsService, event.target, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    }\n\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    public isEventFromThisGrid(event: UIEvent): boolean {\n        const res = this.isElementInThisGrid(event.target as HTMLElement);\n        return res;\n    }\n\n    public isElementInThisGrid(element: HTMLElement): boolean {\n        let pointer: HTMLElement | null = element;\n        while (pointer) {\n            const instanceId = (pointer as any)[MouseEventService.GRID_DOM_KEY];\n            if (exists(instanceId)) {\n                const eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n            pointer = pointer.parentElement;\n        }\n        return false;\n    }\n\n    public getCellPositionForEvent(event: MouseEvent | KeyboardEvent): CellPosition | null {\n        const cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    }\n\n    public getNormalisedPosition(event: MouseEvent | DraggingEvent): { x: number, y: number; } {\n        const gridPanelHasScrolls = this.gridOptionsService.isDomLayout('normal');\n        const e = event as MouseEvent;\n        let x: number;\n        let y: number;\n\n        if (e.clientX != null || e.clientY != null) {\n            x = e.clientX;\n            y = e.clientY;\n        } else {\n            x = e.x;\n            y = e.y;\n        }\n\n        if (gridPanelHasScrolls) {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            const vRange = gridBodyCon.getScrollFeature().getVScrollPosition();\n            const hRange = gridBodyCon.getScrollFeature().getHScrollPosition();\n            x += hRange.left;\n            y += vRange.top;\n        }\n\n        return { x, y };\n    }\n\n}\n", "import { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPositionUtils\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { Column } from \"../entities/column\";\nimport { FocusService } from \"../focusService\";\nimport { IRangeService } from \"../interfaces/IRangeService\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists, missing } from \"../utils/generic\";\nimport { last } from \"../utils/array\";\nimport { KeyCode } from '../constants/keyCode';\nimport { CtrlsService } from \"../ctrlsService\";\nimport { GridBodyCtrl } from \"./gridBodyCtrl\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\nimport { RowCtrl } from \"../rendering/row/rowCtrl\";\nimport { warnOnce, throttle } from \"../utils/function\";\nimport { RowPosition, RowPositionUtils } from \"../entities/rowPositionUtils\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { CellNavigationService } from \"../cellNavigationService\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { NavigateToNextCellParams, TabToNextCellParams } from \"../interfaces/iCallbackParams\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { Events } from \"../eventKeys\";\nimport { FullWidthRowFocusedEvent } from \"../events\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\n\ninterface NavigateParams {\n    /** The rowIndex to vertically scroll to. */\n    scrollIndex: number;\n    /** The position to put scroll index. */\n    scrollType: 'top' | 'bottom' | null;\n    /**  The column to horizontally scroll to. */\n    scrollColumn: Column | null;\n    /** For page up/down, we want to scroll to one row/column but focus another (ie. scrollRow could be stub). */\n    focusIndex: number;\n    focusColumn: Column;\n    isAsync?: boolean;\n}\n\n@Bean('navigationService')\nexport class NavigationService extends BeanStub {\n\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('focusService') private focusService: FocusService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('rowRenderer') public rowRenderer: RowRenderer;\n    @Autowired('headerNavigationService') public headerNavigationService: HeaderNavigationService;\n    @Autowired(\"rowPositionUtils\") private rowPositionUtils: RowPositionUtils;\n    @Autowired(\"cellNavigationService\") private cellNavigationService: CellNavigationService;\n    @Autowired(\"pinnedRowModel\") private pinnedRowModel: PinnedRowModel;\n\n    private gridBodyCon: GridBodyCtrl;\n\n    constructor() {\n        super();\n        this.onPageDown = throttle(this.onPageDown, 100);\n        this.onPageUp = throttle(this.onPageUp, 100);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n\n    public handlePageScrollingKey(event: KeyboardEvent, fromFullWidth = false): boolean {\n        const key = event.key;\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey || event.metaKey;\n        const rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;\n\n        // home and end can be processed without knowing the currently selected cell, this can occur for full width rows.\n        const currentCell: CellPosition | null = this.mouseEventService.getCellPositionForEvent(event);\n\n        let processed = false;\n\n        switch (key) {\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // handle home and end when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onHomeOrEndKey(key);\n                    processed = true;\n                }\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!currentCell) { return false; }\n                // handle when ctrl is pressed only, if shift is pressed\n                // it will be handled by the rangeService\n                if (ctrl && !alt && !rangeServiceShouldHandleShift) {\n                    this.onCtrlUpDownLeftRight(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    processed = this.handlePageUpDown(key, currentCell, fromFullWidth);\n                }\n                break;\n        }\n\n        if (processed) {\n            event.preventDefault();\n        }\n\n        return processed;\n    }\n\n    private handlePageUpDown(\n        key: string,\n        currentCell: CellPosition | null,\n        fromFullWidth: boolean\n    ): boolean {\n        if (fromFullWidth) {\n            currentCell = this.focusService.getFocusedCell();\n        }\n\n        if (!currentCell) { return false; }\n\n        if (key === KeyCode.PAGE_UP) {\n            this.onPageUp(currentCell);\n        } else {\n            this.onPageDown(currentCell);\n        }\n\n        return true;\n    }\n\n    private navigateTo(navigateParams: NavigateParams): void {\n        const { scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn } = navigateParams;\n\n        if (exists(scrollColumn) && !scrollColumn.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);\n        }\n\n        if (exists(scrollIndex)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);\n        }\n\n        // setFocusedCell relies on the browser default focus behavior to scroll the focused cell into view,\n        // however, this behavior will cause the cell border to be cut off, or if we have sticky rows, the\n        // cell will be completely hidden, so we call ensureIndexVisible without a position to guarantee\n        // minimal scroll to get the row into view.\n        if (!navigateParams.isAsync) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(focusIndex);\n        }\n\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n        // highlighted.\n        this.focusService.setFocusedCell({ rowIndex: focusIndex, column: focusColumn, rowPinned: null, forceBrowserFocus: true });\n\n        if (this.rangeService) {\n            const cellPosition: CellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n\n    // this method is throttled, see the `constructor`\n    private onPageDown(gridCell: CellPosition): void {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const pixelsInOnePage = this.getViewportHeight();\n\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n\n        const currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n        const currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);\n        } else {\n            this.navigateToNextPage(gridCell, currentPageBottomRow);\n        }\n    }\n\n    // this method is throttled, see the `constructor`\n    private onPageUp(gridCell: CellPosition): void {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n\n        const currentPageTopPixel = scrollPosition.top;\n        const currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);\n        } else {\n            this.navigateToNextPage(gridCell, currentPageTopRow, true);\n        }\n    }\n\n    private navigateToNextPage(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\n        const pixelsInOnePage = this.getViewportHeight();\n        const firstRow = this.paginationProxy.getPageFirstRow();\n        const lastRow = this.paginationProxy.getPageLastRow();\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        const currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);\n\n        const rowPixelDiff = up\n            ? (currentRowNode?.rowHeight! - pixelsInOnePage - pagingPixelOffset)\n            : (pixelsInOnePage - pagingPixelOffset);\n\n        const nextCellPixel = currentRowNode?.rowTop! + rowPixelDiff;\n\n        let focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n\n        if (focusIndex === gridCell.rowIndex) {\n            const diff = up ? -1 : 1;\n            scrollIndex = focusIndex = gridCell.rowIndex + diff;\n        }\n\n        let scrollType: 'top' | 'bottom';\n\n        if (up) {\n            scrollType = 'bottom';\n            if (focusIndex < firstRow) { focusIndex = firstRow; }\n            if (scrollIndex < firstRow) { scrollIndex = firstRow; }\n        } else {\n            scrollType = 'top';\n            if (focusIndex > lastRow) { focusIndex = lastRow; }\n            if (scrollIndex > lastRow) { scrollIndex = lastRow; }\n        }\n\n        if (this.isRowTallerThanView(focusIndex)) {\n            scrollIndex = focusIndex;\n            scrollType = 'top';\n        }\n\n        this.navigateTo({\n            scrollIndex,\n            scrollType,\n            scrollColumn: null,\n            focusIndex,\n            focusColumn: gridCell.column\n        });\n    }\n\n    private navigateToNextPageWithAutoHeight(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\n        // because autoHeight will calculate the height of rows after scroll\n        // first we scroll towards the required point, then we add a small\n        // delay to allow the height to be recalculated, check which index\n        // should be focused and then finally navigate to that index.\n        // TODO: we should probably have an event fired once to scrollbar has\n        // settled and all rowHeights have been calculated instead of relying\n        // on a setTimeout of 50ms.\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: up ? 'bottom' : 'top',\n            scrollColumn: null,\n            focusIndex: scrollIndex,\n            focusColumn: gridCell.column\n        });\n        setTimeout(() => {\n            const focusIndex = this.getNextFocusIndexForAutoHeight(gridCell, up);\n\n            this.navigateTo({\n                scrollIndex: scrollIndex,\n                scrollType: up ? 'bottom' : 'top',\n                scrollColumn: null,\n                focusIndex: focusIndex,\n                focusColumn: gridCell.column,\n                isAsync: true\n            });\n        }, 50);\n    }\n\n    private getNextFocusIndexForAutoHeight(gridCell: CellPosition, up: boolean = false): number {\n        const step = up ? -1 : 1;\n        const pixelsInOnePage = this.getViewportHeight();\n        const lastRowIndex = this.paginationProxy.getPageLastRow();\n\n        let pixelSum = 0;\n        let currentIndex = gridCell.rowIndex;\n\n        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {\n            const currentCell = this.paginationProxy.getRow(currentIndex);\n\n            if (currentCell) {\n                const currentCellHeight = currentCell.rowHeight ?? 0;\n\n                if (pixelSum + currentCellHeight > pixelsInOnePage) { break; }\n                pixelSum += currentCellHeight;\n            }\n\n            currentIndex += step;\n        }\n\n        return Math.max(0, Math.min(currentIndex, lastRowIndex));\n    }\n\n    private getViewportHeight(): number {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n        if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {\n            pixelsInOnePage -= scrollbarWidth;\n        }\n\n        return pixelsInOnePage;\n    }\n\n    private isRowTallerThanView(rowIndex: number): boolean {\n        const rowNode = this.paginationProxy.getRow(rowIndex);\n        if (!rowNode) { return false; }\n\n        const rowHeight = rowNode.rowHeight;\n\n        if (typeof rowHeight !== 'number') { return false; }\n\n        return rowHeight > this.getViewportHeight();\n    }\n\n    private onCtrlUpDownLeftRight(key: string, gridCell: CellPosition): void {\n        const cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true)!;\n        const { rowIndex, column } = cellToFocus;\n\n        this.navigateTo({\n            scrollIndex: rowIndex,\n            scrollType: null,\n            scrollColumn: column,\n            focusIndex: rowIndex,\n            focusColumn: column\n        });\n    }\n\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n    // same cell into view (which means either scroll all the way up, or all the way down).\n    private onHomeOrEndKey(key: string): void {\n        const homeKey = key === KeyCode.PAGE_HOME;\n        const allColumns: Column[] = this.columnModel.getAllDisplayedColumns();\n        const columnToSelect = homeKey ? allColumns[0] : last(allColumns);\n        const scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();\n\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: null,\n            scrollColumn: columnToSelect,\n            focusIndex: scrollIndex,\n            focusColumn: columnToSelect\n        });\n    }\n\n    // result of keyboard event\n    public onTabKeyDown(previous: CellCtrl | RowCtrl, keyboardEvent: KeyboardEvent): void {\n        const backwards = keyboardEvent.shiftKey;\n        const movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);\n\n        if (movedToNextCell) {\n            // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n            // to the normal tabbing so user can exit the grid.\n            keyboardEvent.preventDefault();\n            return;\n        }\n\n        // if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going\n        // backwards)\n        if (backwards) {\n            const { rowIndex, rowPinned } = previous.getRowPosition();\n            const firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();\n            if (firstRow) {\n                if (this.gridOptionsService.get('headerHeight') === 0 || this.gridOptionsService.get('suppressHeaderFocus')) {\n                    this.focusService.focusNextGridCoreContainer(true, true);\n                } else {\n                    keyboardEvent.preventDefault();\n                    this.focusService.focusPreviousFromFirstCell(keyboardEvent);\n                }\n                \n            }\n        } else {\n            // if the case it's a popup editor, the focus is on the editor and not the previous cell.\n            // in order for the tab navigation to work, we need to focus the browser back onto the\n            // previous cell.\n            if (previous instanceof CellCtrl) {\n                previous.focusCell(true);\n            }\n\n            if (this.focusService.focusNextGridCoreContainer(backwards)) {\n                keyboardEvent.preventDefault();\n            }\n        }\n    }\n\n    // comes from API\n    public tabToNextCell(backwards: boolean, event?: KeyboardEvent): boolean {\n        const focusedCell = this.focusService.getFocusedCell();\n        // if no focus, then cannot navigate\n        if (!focusedCell) { return false; }\n\n        let cellOrRow: CellCtrl | RowCtrl | null = this.getCellByPosition(focusedCell);\n\n        // if cell is not rendered, means user has scrolled away from the cell\n        // or that the focusedCell is a Full Width Row\n        if (!cellOrRow) {\n            cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);\n            if (!cellOrRow || !cellOrRow.isFullWidth()) {\n                return false;\n            }\n        }\n\n        return this.tabToNextCellCommon(cellOrRow, backwards, event);\n    }\n\n    private tabToNextCellCommon(previous: CellCtrl | RowCtrl, backwards: boolean, event?: KeyboardEvent): boolean {\n        let editing = previous.isEditing();\n\n        // if cell is not editing, there is still chance row is editing if it's Full Row Editing\n        if (!editing && previous instanceof CellCtrl) {\n            const cell = previous as CellCtrl;\n            const row = cell.getRowCtrl();\n            if (row) {\n                editing = row.isEditing();\n            }\n        }\n\n        let res: boolean;\n\n        if (editing) {\n            // if we are editing, we know it's not a Full Width Row (RowComp)\n            if (this.gridOptionsService.get('editType') === 'fullRow') {\n                res = this.moveToNextEditingRow(previous as CellCtrl, backwards, event);\n            } else {\n                res = this.moveToNextEditingCell(previous as CellCtrl, backwards, event);\n            }\n        } else {\n            res = this.moveToNextCellNotEditing(previous, backwards);\n        }\n\n        // if a cell wasn't found, it's possible that focus was moved to the header\n        return res || !!this.focusService.getFocusedHeader();\n    }\n\n    private moveToNextEditingCell(previousCell: CellCtrl, backwards: boolean, event: KeyboardEvent | null = null): boolean {\n        const previousPos = previousCell.getCellPosition();\n\n        // before we stop editing, we need to focus the cell element\n        // so the grid doesn't detect that focus has left the grid\n        previousCell.getGui().focus();\n\n        // need to do this before getting next cell to edit, in case the next cell\n        // has editable function (eg colDef.editable=func() ) and it depends on the\n        // result of this cell, so need to save updates from the first edit, in case\n        // the value is referenced in the function.\n        previousCell.stopEditing();\n\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl;\n\n        if (nextCell == null) { return false; }\n\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        nextCell.startEditing(null, true, event);\n        nextCell.focusCell(false);\n        return true;\n    }\n\n    private moveToNextEditingRow(previousCell: CellCtrl, backwards: boolean, event: KeyboardEvent | null = null): boolean {\n        const previousPos = previousCell.getCellPosition();\n\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl;\n        if (nextCell == null) { return false; }\n\n        const nextPos = nextCell.getCellPosition();\n\n        const previousEditable = this.isCellEditable(previousPos);\n        const nextEditable = this.isCellEditable(nextPos);\n\n        const rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;\n\n        if (previousEditable) {\n            previousCell.setFocusOutOnEditor();\n        }\n\n        if (!rowsMatch) {\n            const pRow = previousCell.getRowCtrl();\n            pRow!.stopEditing();\n\n            const nRow = nextCell.getRowCtrl();\n            nRow!.startRowEditing(undefined, undefined, event);\n        }\n\n        if (nextEditable) {\n            nextCell.setFocusInOnEditor();\n            nextCell.focusCell();\n        } else {\n            nextCell.focusCell(true);\n        }\n\n        return true;\n    }\n\n    private moveToNextCellNotEditing(previousCell: CellCtrl | RowCtrl, backwards: boolean): boolean {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        let cellPos: CellPosition;\n\n        if (previousCell instanceof RowCtrl) {\n            cellPos = {\n                ...previousCell.getRowPosition(),\n                column: backwards ? displayedColumns[0] : last(displayedColumns)\n            };\n        } else {\n            cellPos = previousCell.getCellPosition();\n        }\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);\n\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        if (nextCell instanceof CellCtrl) {\n            nextCell.focusCell(true);\n        } else if (nextCell) {\n            return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);\n        }\n\n        return exists(nextCell);\n    }\n\n    // called by the cell, when tab is pressed while editing.\n    // @return: RenderedCell when navigation successful, otherwise null\n    private findNextCellToFocusOn(previousPosition: CellPosition, backwards: boolean, startEditing: boolean): CellCtrl | RowCtrl | null {\n        let nextPosition: CellPosition | null = previousPosition;\n\n        while (true) {\n            if (previousPosition !== nextPosition) { previousPosition = nextPosition; }\n\n            if (!backwards) {\n                nextPosition = this.getLastCellOfColSpan(nextPosition);\n            }\n            nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);\n\n            // allow user to override what cell to go to next\n            const userFunc = this.gridOptionsService.getCallback('tabToNextCell');\n\n            if (exists(userFunc)) {\n                const params: WithoutGridCommon<TabToNextCellParams> = {\n                    backwards: backwards,\n                    editing: startEditing,\n                    previousCellPosition: previousPosition,\n                    nextCellPosition: nextPosition ? nextPosition : null\n                };\n                const userCell = userFunc(params);\n                if (exists(userCell)) {\n                    if ((userCell as any).floating) {\n                        warnOnce(`tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?`);\n                        userCell.rowPinned = (userCell as any).floating;\n                    }\n                    nextPosition = {\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column,\n                        rowPinned: userCell.rowPinned\n                    } as CellPosition;\n                } else {\n                    nextPosition = null;\n                }\n            }\n\n            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,\n            // so bottom right cell going forwards, or top left going backwards\n            if (!nextPosition) { return null; }\n\n            if (nextPosition.rowIndex < 0) {\n                const headerLen = this.headerNavigationService.getHeaderRowCount();\n\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerLen + (nextPosition.rowIndex),\n                        column: nextPosition.column\n                    },\n                    fromCell: true\n                });\n\n                return null;\n            }\n\n            // if editing, but cell not editable, skip cell. we do this before we do all of\n            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping\n            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless\n            // (except for the last one) which causes grid to stall for a while.\n            // note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.\n            const fullRowEdit = this.gridOptionsService.get('editType') === 'fullRow';\n            if (startEditing && !fullRowEdit) {\n                const cellIsEditable = this.isCellEditable(nextPosition);\n                if (!cellIsEditable) { continue; }\n            }\n\n            this.ensureCellVisible(nextPosition);\n\n            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column\n            // or row that is not currently in view, hence the renderedCell would not exist\n            const nextCell = this.getCellByPosition(nextPosition);\n\n            // if next cell is fullWidth row, then no rendered cell,\n            // as fullWidth rows have no cells, so we skip it\n            if (!nextCell) {\n                const row = this.rowRenderer.getRowByPosition(nextPosition);\n                if (!row || !row.isFullWidth() || startEditing) {\n                    continue;\n                }\n                return row;\n            }\n\n            if (nextCell.isSuppressNavigable()) { continue; }\n\n            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation\n            // consistent, we set into range here also.\n            if (this.rangeService) {\n                this.rangeService.setRangeToCell(nextPosition);\n            }\n\n            // we successfully tabbed onto a grid cell, so return true\n            return nextCell;\n        }\n    }\n\n    private isCellEditable(cell: CellPosition): boolean {\n        const rowNode = this.lookupRowNodeForCell(cell);\n\n        if (rowNode) {\n            return cell.column.isCellEditable(rowNode);\n        }\n\n        return false;\n    }\n\n    public getCellByPosition(cellPosition: CellPosition): CellCtrl | null {\n        const rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);\n        if (!rowCtrl) { return null; }\n\n        return rowCtrl.getCellCtrl(cellPosition.column);\n    }\n\n    private lookupRowNodeForCell(cell: CellPosition) {\n        if (cell.rowPinned === 'top') {\n            return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);\n        }\n\n        if (cell.rowPinned === 'bottom') {\n            return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);\n        }\n\n        return this.paginationProxy.getRow(cell.rowIndex);\n    }\n\n    // we use index for rows, but column object for columns, as the next column (by index) might not\n    // be visible (header grouping) so it's not reliable, so using the column object instead.\n    public navigateToNextCell(event: KeyboardEvent | null, key: string, currentCell: CellPosition, allowUserOverride: boolean) {\n        // we keep searching for a next cell until we find one. this is how the group rows get skipped\n        let nextCell: CellPosition | null = currentCell;\n        let hitEdgeOfGrid = false;\n\n        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {\n            // if the current cell is spanning across multiple columns, we need to move\n            // our current position to be the last cell on the right before finding the\n            // the next target.\n            if (this.gridOptionsService.get('enableRtl')) {\n                if (key === KeyCode.LEFT) {\n                    nextCell = this.getLastCellOfColSpan(nextCell);\n                }\n            } else if (key === KeyCode.RIGHT) {\n                nextCell = this.getLastCellOfColSpan(nextCell);\n            }\n\n            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);\n\n            // eg if going down, and nextCell=undefined, means we are gone past the last row\n            hitEdgeOfGrid = missing(nextCell);\n        }\n\n        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {\n            nextCell = {\n                rowIndex: -1,\n                rowPinned: null,\n                column: currentCell.column\n            };\n        }\n\n        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)\n        // we allow this, however if processing 'enter after edit' we don't allow override\n        if (allowUserOverride) {\n            const userFunc = this.gridOptionsService.getCallback('navigateToNextCell');\n            if (exists(userFunc)) {\n                const params: WithoutGridCommon<NavigateToNextCellParams> = {\n                    key: key,\n                    previousCellPosition: currentCell,\n                    nextCellPosition: nextCell ? nextCell : null,\n                    event: event\n                };\n                const userCell = userFunc(params);\n                if (exists(userCell)) {\n                    if ((userCell as any).floating) {\n                        warnOnce(`tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?`);\n                        userCell.rowPinned = (userCell as any).floating;\n                    }\n                    nextCell = {\n                        rowPinned: userCell.rowPinned,\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column\n                    } as CellPosition;\n                } else {\n                    nextCell = null;\n                }\n            }\n        }\n\n        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid\n        if (!nextCell) { return; }\n\n        if (nextCell.rowIndex < 0) {\n            const headerLen = this.headerNavigationService.getHeaderRowCount();\n\n            this.focusService.focusHeaderPosition({\n                headerPosition: { headerRowIndex: headerLen + (nextCell.rowIndex), column: currentCell.column },\n                event: event || undefined,\n                fromCell: true\n            });\n\n            return;\n        }\n\n        // in case we have col spanning we get the cellComp and use it to get the\n        // position. This was we always focus the first cell inside the spanning.\n        const normalisedPosition = this.getNormalisedPosition(nextCell);\n        if (normalisedPosition) {\n            this.focusPosition(normalisedPosition);\n        } else {\n            this.tryToFocusFullWidthRow(nextCell);\n        }\n    }\n\n    private getNormalisedPosition(cellPosition: CellPosition): CellPosition | null {\n        // ensureCellVisible first, to make sure cell at position is rendered.\n        this.ensureCellVisible(cellPosition);\n\n        const cellCtrl = this.getCellByPosition(cellPosition);\n\n        // not guaranteed to have a cellComp when using the SSRM as blocks are loading.\n        if (!cellCtrl) { return null; }\n\n        cellPosition = cellCtrl.getCellPosition();\n        // we call this again, as nextCell can be different to it's previous value due to Column Spanning\n        // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the\n        // last column in the group, however now it's the first column in the group). if we didn't do\n        // ensureCellVisible again, then we could only be showing the last portion (last column) of the\n        // merged cells.\n        this.ensureCellVisible(cellPosition);\n\n        return cellPosition;\n    }\n\n    private tryToFocusFullWidthRow(position: CellPosition | RowPosition, backwards: boolean = false): boolean {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        const rowComp = this.rowRenderer.getRowByPosition(position);\n        if (!rowComp || !rowComp.isFullWidth()) { return false; }\n\n        const currentCellFocused = this.focusService.getFocusedCell();\n\n        const cellPosition: CellPosition = {\n            rowIndex: position.rowIndex,\n            rowPinned: position.rowPinned,\n            column: (position as CellPosition).column || (backwards ? last(displayedColumns) : displayedColumns[0])\n        };\n\n        this.focusPosition(cellPosition);\n\n        const fromBelow = currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;\n\n        const focusEvent: WithoutGridCommon<FullWidthRowFocusedEvent> = {\n            type: Events.EVENT_FULL_WIDTH_ROW_FOCUSED,\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned,\n            column: cellPosition.column,\n            isFullWidthCell: true,\n            floating: cellPosition.rowPinned,\n            fromBelow\n        };\n\n        this.eventService.dispatchEvent(focusEvent);\n\n        return true;\n    }\n\n    private focusPosition(cellPosition: CellPosition) {\n        this.focusService.setFocusedCell({\n            rowIndex: cellPosition.rowIndex,\n            column: cellPosition.column,\n            rowPinned: cellPosition.rowPinned,\n            forceBrowserFocus: true\n        });\n\n        if (this.rangeService) {\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n\n    private isValidNavigateCell(cell: CellPosition): boolean {\n        const rowNode = this.rowPositionUtils.getRowNode(cell);\n\n        // we do not allow focusing on detail rows and full width rows\n        return !!rowNode;\n    }\n\n    private getLastCellOfColSpan(cell: CellPosition): CellPosition {\n        const cellCtrl = this.getCellByPosition(cell);\n\n        if (!cellCtrl) { return cell; }\n\n        const colSpanningList = cellCtrl.getColSpanningList();\n\n        if (colSpanningList.length === 1) { return cell; }\n\n        return {\n            rowIndex: cell.rowIndex,\n            column: last(colSpanningList),\n            rowPinned: cell.rowPinned\n        };\n    }\n\n    public ensureCellVisible(gridCell: CellPosition): void {\n        const isGroupStickyEnabled = this.gridOptionsService.isGroupRowsSticky();\n\n        const rowNode = this.rowModel.getRow(gridCell.rowIndex);\n        // sticky rows are always visible, so the grid shouldn't scroll to focus them.\n        const skipScrollToRow = isGroupStickyEnabled && rowNode?.sticky;\n\n        // this scrolls the row into view\n        if (!skipScrollToRow && missing(gridCell.rowPinned)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);\n        }\n\n        if (!gridCell.column.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);\n        }\n    }\n}\n", "import { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { isUserSuppressingKeyboardEvent } from \"../../utils/keyboard\";\nimport { PostConstruct } from \"../../context/context\";\n\nexport class PopupEditorWrapper extends PopupComponent {\n\n    public static DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';\n\n    constructor(private readonly params: ICellEditorParams) {\n        super(/* html */`<div class=\"ag-popup-editor\" tabindex=\"-1\"/>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.gridOptionsService.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);\n        this.addKeyDownListener();\n    }\n\n    private addKeyDownListener(): void {\n        const eGui = this.getGui();\n        const params = this.params;\n        const listener = (event: KeyboardEvent) => {\n            if (!isUserSuppressingKeyboardEvent(this.gridOptionsService, event, params.node, params.column, true)) {\n                params.onKeyDown(event);\n            }\n        };\n\n        this.addManagedListener(eGui, 'keydown', listener);\n    }\n}\n", "import { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { Beans } from \"./../beans\";\nimport { Component } from \"../../widgets/component\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { ICellRendererComp } from \"./../cellRenderers/iCellRenderer\";\nimport { CheckboxSelectionComponent } from \"./../checkboxSelectionComponent\";\nimport { RowCtrl } from \"./../row/rowCtrl\";\nimport { RowDragComp } from \"./../row/rowDragComp\";\nimport { PopupEditorWrapper } from \"./../cellEditors/popupEditorWrapper\";\nimport { DndSourceComp } from \"./../dndSourceComp\";\nimport { TooltipParentComp } from \"../../widgets/tooltipStateManager\";\nimport { setAriaRole } from \"../../utils/aria\";\nimport { escapeString } from \"../../utils/string\";\nimport { missing } from \"../../utils/generic\";\nimport { addStylesToElement, clearElement, removeFromParent } from \"../../utils/dom\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { browserSupportsPreventScroll } from \"../../utils/browser\";\nimport { CellStyle } from \"../../entities/colDef\";\n\nexport class CellComp extends Component implements TooltipParentComp {\n\n    private eCellWrapper: HTMLElement | undefined;\n    private eCellValue: HTMLElement | undefined;\n\n    private beans: Beans;\n    private column: Column;\n    private rowNode: RowNode;\n    private eRow: HTMLElement;\n\n    private includeSelection: boolean;\n    private includeRowDrag: boolean;\n    private includeDndSource: boolean;\n\n    private forceWrapper: boolean;\n\n    private checkboxSelectionComp: CheckboxSelectionComponent | undefined;\n    private dndSourceComp: DndSourceComp | undefined;\n    private rowDraggingComp: RowDragComp | undefined;\n\n    private hideEditorPopup: Function | null | undefined;\n    private cellEditorPopupWrapper: PopupEditorWrapper | undefined;\n    private cellEditor: ICellEditorComp | null | undefined;\n    private cellEditorGui: HTMLElement | null;\n\n    private cellRenderer: ICellRendererComp | null | undefined;\n    private cellRendererGui: HTMLElement | null;\n    private cellRendererClass: any;\n\n    private rowCtrl: RowCtrl | null;\n\n    private cellCtrl: CellCtrl;\n\n    private firstRender: boolean;\n\n    // every time we go into edit mode, or back again, this gets incremented.\n    // it's the components way of dealing with the async nature of framework components,\n    // so if a framework component takes a while to be created, we know if the object\n    // is still relevant when creating is finished. eg we could click edit / un-edit 20\n    // times before the first React edit component comes back - we should discard\n    // the first 19.\n    private rendererVersion = 0;\n    private editorVersion = 0;\n\n    constructor(beans: Beans, cellCtrl: CellCtrl,\n        printLayout: boolean, eRow: HTMLElement, editingRow: boolean) {\n        super();\n        this.beans = beans;\n        this.column = cellCtrl.getColumn();\n        this.rowNode = cellCtrl.getRowNode();\n        this.rowCtrl = cellCtrl.getRowCtrl();\n        this.eRow = eRow;\n        this.cellCtrl = cellCtrl;\n\n        const cellDiv = document.createElement('div');\n        cellDiv.setAttribute('comp-id', `${this.getCompId()}`);\n        this.setTemplateFromElement(cellDiv);\n\n        const eGui = this.getGui();\n\n        this.forceWrapper = cellCtrl.isForceWrapper();\n\n        this.refreshWrapper(false);\n\n        const setAttribute = (name: string, value: string | null | undefined) => {\n            if (value != null && value != '') {\n                eGui.setAttribute(name, value);\n            } else {\n                eGui.removeAttribute(name);\n            }\n        };\n\n        setAriaRole(eGui, cellCtrl.getCellAriaRole());\n        setAttribute('col-id', cellCtrl.getColumnIdSanitised());\n        const tabIndex = cellCtrl.getTabIndex();\n        if (tabIndex !== undefined) {\n            setAttribute('tabindex', tabIndex.toString());\n        }\n\n        const compProxy: ICellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setUserStyles: (styles: CellStyle) => addStylesToElement(eGui, styles),\n            getFocusableElement: () => this.getFocusableElement(),\n            \n            setIncludeSelection: include => this.includeSelection = include,\n            setIncludeRowDrag: include => this.includeRowDrag = include,\n            setIncludeDndSource: include => this.includeDndSource = include,\n\n            setRenderDetails: (compDetails, valueToDisplay, force) =>\n                this.setRenderDetails(compDetails, valueToDisplay, force),\n            setEditDetails: (compDetails, popup, position) =>\n                this.setEditDetails(compDetails, popup, position),\n\n            getCellEditor: () => this.cellEditor || null,\n            getCellRenderer: () => this.cellRenderer || null,\n            getParentOfValue: () => this.getParentOfValue()\n        };\n\n        cellCtrl.setComp(compProxy, this.getGui(), this.eCellWrapper, printLayout, editingRow);\n    }\n\n    private getParentOfValue(): HTMLElement {\n        if (this.eCellValue) {\n            // if not editing, and using wrapper, then value goes in eCellValue\n            return this.eCellValue;\n        }\n        if (this.eCellWrapper) {\n            // if editing, and using wrapper, value (cell editor) goes in eCellWrapper\n            return this.eCellWrapper;\n        }\n\n        // if editing or rendering, and not using wrapper, value (or comp) is directly inside cell\n        return this.getGui();\n    }\n\n    private setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any, forceNewCellRendererInstance: boolean): void {\n        // this can happen if the users asks for the cell to refresh, but we are not showing the vale as we are editing\n        const isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;\n        if (isInlineEditing) { return; }\n\n        // this means firstRender will be true for one pass only, as it's initialised to undefined\n        this.firstRender = this.firstRender == null;\n\n        // if display template has changed, means any previous Cell Renderer is in the wrong location\n        const controlWrapperChanged = this.refreshWrapper(false);\n        this.refreshEditStyles(false);\n\n        // all of these have dependencies on the eGui, so only do them after eGui is set\n        if (compDetails) {\n            const neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;\n            const cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);\n            if (!cellRendererRefreshSuccessful) {\n                this.destroyRenderer();\n                this.createCellRendererInstance(compDetails);\n            }\n        } else {\n            this.destroyRenderer();\n            this.insertValueWithoutCellRenderer(valueToDisplay);\n        }\n    }\n\n    private setEditDetails(compDetails: UserCompDetails | undefined, popup?: boolean, position?: 'over' | 'under'): void {\n        if (compDetails) {\n            this.createCellEditorInstance(compDetails, popup, position);\n        } else {\n            this.destroyEditor();\n        }\n    }\n\n    private removeControls(): void {\n        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);\n        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);\n        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);\n    }\n\n    // returns true if wrapper was changed\n    private refreshWrapper(editing: boolean): boolean {\n        const providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;\n        const usingWrapper = providingControls || this.forceWrapper;\n\n        const putWrapperIn = usingWrapper && this.eCellWrapper == null;\n        if (putWrapperIn) {\n            const wrapperDiv = document.createElement('div');\n            wrapperDiv.setAttribute('role', 'presentation');\n            wrapperDiv.setAttribute('class', 'ag-cell-wrapper');\n            this.eCellWrapper = wrapperDiv;\n            this.getGui().appendChild(this.eCellWrapper);\n        }\n        const takeWrapperOut = !usingWrapper && this.eCellWrapper != null;\n        if (takeWrapperOut) {\n            removeFromParent(this.eCellWrapper!);\n            this.eCellWrapper = undefined;\n        }\n\n        this.addOrRemoveCssClass('ag-cell-value', !usingWrapper);\n\n        const usingCellValue = !editing && usingWrapper;\n        const putCellValueIn = usingCellValue && this.eCellValue == null;\n        if (putCellValueIn) {\n            const cellSpan = document.createElement('span');\n            cellSpan.setAttribute('role', 'presentation');\n            cellSpan.setAttribute('class', 'ag-cell-value');\n            this.eCellValue = cellSpan;\n            this.eCellWrapper!.appendChild(this.eCellValue);\n        }\n        const takeCellValueOut = !usingCellValue && this.eCellValue != null;\n        if (takeCellValueOut) {\n            removeFromParent(this.eCellValue!);\n            this.eCellValue = undefined;\n        }\n\n        const templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;\n\n        if (templateChanged) {\n            this.removeControls();\n        }\n\n        if (!editing) {\n            if (providingControls) {\n                this.addControls();\n            }\n        }\n\n        return templateChanged;\n    }\n\n    private addControls(): void {\n        if (this.includeRowDrag) {\n            if (this.rowDraggingComp == null) {\n                this.rowDraggingComp = this.cellCtrl.createRowDragComp();\n                if (this.rowDraggingComp) {\n                    // put the checkbox in before the value\n                    this.eCellWrapper!.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue!);\n                }\n            }\n        }\n\n        if (this.includeDndSource) {\n            if (this.dndSourceComp == null) {\n                this.dndSourceComp = this.cellCtrl.createDndSource();\n                // put the checkbox in before the value\n                this.eCellWrapper!.insertBefore(this.dndSourceComp.getGui(), this.eCellValue!);\n            }\n        }\n\n        if (this.includeSelection) {\n            if (this.checkboxSelectionComp == null) {\n                this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();\n                this.eCellWrapper!.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue!);\n            }\n        }\n    }\n\n    private createCellEditorInstance(compDetails: UserCompDetails, popup?: boolean, position?: 'over' | 'under'): void {\n        const versionCopy = this.editorVersion;\n\n        const cellEditorPromise = compDetails.newAgStackInstance();\n        if (!cellEditorPromise) { return; } // if empty, userComponentFactory already did a console message\n\n        const { params } = compDetails;\n        cellEditorPromise.then(c => this.afterCellEditorCreated(versionCopy, c!, params, popup, position));\n\n        // if we don't do this, and editor component is async, then there will be a period\n        // when the component isn't present and keyboard navigation won't work - so example\n        // of user hitting tab quickly (more quickly than renderers getting created) won't work\n        const cellEditorAsync = missing(this.cellEditor);\n        if (cellEditorAsync && params.cellStartedEdit) {\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    private insertValueWithoutCellRenderer(valueToDisplay: any): void {\n        const eParent = this.getParentOfValue();\n        clearElement(eParent);\n\n        const escapedValue = valueToDisplay != null ? escapeString(valueToDisplay, true) : null;\n        if (escapedValue != null) {\n            eParent.textContent = escapedValue;\n        }\n    }\n\n    private destroyEditorAndRenderer(): void {\n        this.destroyRenderer();\n        this.destroyEditor();\n    }\n\n    private destroyRenderer(): void {\n        const {context} = this.beans;\n        this.cellRenderer = context.destroyBean(this.cellRenderer);\n        removeFromParent(this.cellRendererGui);\n        this.cellRendererGui = null;\n        this.rendererVersion++;\n    }\n\n    private destroyEditor(): void {\n        const {context} = this.beans;\n\n        if (this.hideEditorPopup) { this.hideEditorPopup(); }\n        this.hideEditorPopup = undefined;\n\n        this.cellEditor = context.destroyBean(this.cellEditor);\n        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);\n\n        removeFromParent(this.cellEditorGui);\n        this.cellEditorGui = null;\n\n        this.editorVersion++;\n    }\n\n    private refreshCellRenderer(compClassAndParams: UserCompDetails): boolean {\n        if (this.cellRenderer == null || this.cellRenderer.refresh == null) { return false; }\n\n        // if different Cell Renderer configured this time (eg user is using selector, and\n        // returns different component) then don't refresh, force recreate of Cell Renderer\n        if (this.cellRendererClass !== compClassAndParams.componentClass) { return false; }\n\n        // take any custom params off of the user\n        const result = this.cellRenderer.refresh(compClassAndParams.params);\n\n        // NOTE on undefined: previous version of the cellRenderer.refresh() interface\n        // returned nothing, if the method existed, we assumed it refreshed. so for\n        // backwards compatibility, we assume if method exists and returns nothing,\n        // that it was successful.\n        return result === true || result === undefined;\n    }\n\n    private createCellRendererInstance(compDetails: UserCompDetails): void {\n        // never use task service if animation frame service is turned off.\n        // and lastly we never use it if doing auto-height, as the auto-height service checks the\n        // row height directly after the cell is created, it doesn't wait around for the tasks to complete        \n        const suppressAnimationFrame = this.beans.gridOptionsService.get('suppressAnimationFrame');\n        const useTaskService = !suppressAnimationFrame;\n\n        const displayComponentVersionCopy = this.rendererVersion;\n\n        const {componentClass} = compDetails;\n\n        const createCellRendererFunc = () => {\n            const staleTask = this.rendererVersion !== displayComponentVersionCopy || !this.isAlive();\n            if (staleTask) { return; }\n\n            // this can return null in the event that the user has switched from a renderer component to nothing, for example\n            // when using a cellRendererSelect to return a component or null depending on row data etc\n            const componentPromise = compDetails.newAgStackInstance();\n            const callback = this.afterCellRendererCreated.bind(this, displayComponentVersionCopy, componentClass);\n            if (componentPromise) {\n                componentPromise.then(callback);\n            }\n        };\n\n        // we only use task service when rendering for first time, which means it is not used when doing edits.\n        // if we changed this (always use task service) would make sense, however it would break tests, possibly\n        // test of users.\n        if (useTaskService && this.firstRender) {\n            this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex!, 'createTasksP2');\n        } else {\n            createCellRendererFunc();\n        }\n    }\n\n    public getCtrl(): CellCtrl {\n        return this.cellCtrl;\n    }\n\n    public getRowCtrl(): RowCtrl | null {\n        return this.rowCtrl;\n    }\n\n    public getCellRenderer(): ICellRendererComp | null | undefined {\n        return this.cellRenderer;\n    }\n\n    public getCellEditor(): ICellEditorComp | null | undefined {\n        return this.cellEditor;\n    }\n\n    private afterCellRendererCreated(cellRendererVersion: number, cellRendererClass: any, cellRenderer: ICellRendererComp): void {\n        const staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;\n\n        if (staleTask) {\n            this.beans.context.destroyBean(cellRenderer);\n            return;\n        }\n\n        this.cellRenderer = cellRenderer;\n        this.cellRendererClass = cellRendererClass;\n        this.cellRendererGui = this.cellRenderer.getGui();\n\n        if (this.cellRendererGui != null) {\n            const eParent = this.getParentOfValue();\n            clearElement(eParent);\n            eParent.appendChild(this.cellRendererGui);\n        }\n    }\n\n    private afterCellEditorCreated(requestVersion: number, cellEditor: ICellEditorComp, params: ICellEditorParams, popup?: boolean, position?: 'over' | 'under'): void {\n\n        // if editingCell=false, means user cancelled the editor before component was ready.\n        // if versionMismatch, then user cancelled the edit, then started the edit again, and this\n        //   is the first editor which is now stale.\n        const staleComp = requestVersion !== this.editorVersion;\n\n        if (staleComp) {\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n\n        const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n        if (editingCancelledByUserComp) {\n            this.beans.context.destroyBean(cellEditor);\n            this.cellCtrl.stopEditing(true);\n            return;\n        }\n\n        if (!cellEditor.getGui) {\n            console.warn(`AG Grid: cellEditor for column ${this.column.getId()} is missing getGui() method`);\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n\n        this.cellEditor = cellEditor;\n        this.cellEditorGui = cellEditor.getGui();\n\n        const cellEditorInPopup = popup || (cellEditor.isPopup !== undefined && cellEditor.isPopup());\n        if (cellEditorInPopup) {\n            this.addPopupCellEditor(params, position);\n        } else {\n            this.addInCellEditor();\n        }\n\n        this.refreshEditStyles(true, cellEditorInPopup);\n\n        if (cellEditor.afterGuiAttached) {\n            cellEditor.afterGuiAttached();\n        }\n    }\n\n    private refreshEditStyles(editing: boolean, isPopup?: boolean): void {\n        this.addOrRemoveCssClass('ag-cell-inline-editing', editing && !isPopup);\n        this.addOrRemoveCssClass('ag-cell-popup-editing', editing && !!isPopup);\n        this.addOrRemoveCssClass('ag-cell-not-inline-editing', !editing || !!isPopup);\n\n        this.rowCtrl?.setInlineEditingCss(editing);\n    }\n\n    private addInCellEditor(): void {\n        const eGui = this.getGui();\n\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        const eDocument = this.beans.gridOptionsService.getDocument();\n        if (eGui.contains(eDocument.activeElement)) {\n            eGui.focus();\n        }\n\n        this.destroyRenderer();\n        this.refreshWrapper(true);\n        this.clearParentOfValue();\n        if (this.cellEditorGui) {\n            const eParent = this.getParentOfValue();\n            eParent.appendChild(this.cellEditorGui);\n        }\n    }\n\n    private addPopupCellEditor(params: ICellEditorParams, position?: 'over' | 'under'): void {\n        if (this.beans.gridOptionsService.get('editType') === 'fullRow') {\n            console.warn('AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' +\n                '- either turn off fullRowEdit, or stop using popup editors.');\n        }\n\n        const cellEditor = this.cellEditor!;\n\n        // if a popup, then we wrap in a popup editor and return the popup\n        this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));\n        const ePopupGui = this.cellEditorPopupWrapper.getGui();\n        if (this.cellEditorGui) {\n            ePopupGui.appendChild(this.cellEditorGui);\n        }\n\n        const popupService = this.beans.popupService;\n\n        const useModelPopup = this.beans.gridOptionsService.get('stopEditingWhenCellsLoseFocus');\n\n        // see if position provided by colDef, if not then check old way of method on cellComp\n        const positionToUse: 'over' | 'under' | undefined = position != null \n            ? position \n            : cellEditor.getPopupPosition \n                ? cellEditor.getPopupPosition() \n                : 'over';\n        const isRtl = this.beans.gridOptionsService.get('enableRtl');\n\n        const positionParams = {\n            ePopup: ePopupGui,\n            column: this.column,\n            rowNode: this.rowNode,\n            type: 'popupCellEditor',\n            eventSource: this.getGui(),\n            position: positionToUse,\n            alignSide: isRtl ? 'right' : 'left',\n            keepWithinBounds: true\n        };\n\n        const positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams)\n\n        const translate = this.beans.localeService.getLocaleTextFunc();\n\n        const addPopupRes = popupService.addPopup({\n            modal: useModelPopup,\n            eChild: ePopupGui,\n            closeOnEsc: true,\n            closedCallback: () => { this.cellCtrl.onPopupEditorClosed(); },\n            anchorToElement: this.getGui(),\n            positionCallback,\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor')\n        });\n        if (addPopupRes) {\n            this.hideEditorPopup = addPopupRes.hideFunc;\n        }\n    }\n\n    public detach(): void {\n        this.eRow.removeChild(this.getGui());\n    }\n\n    // if the row is also getting destroyed, then we don't need to remove from dom,\n    // as the row will also get removed, so no need to take out the cells from the row\n    // if the row is going (removing is an expensive operation, so only need to remove\n    // the top part)\n    //\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    public destroy(): void {\n        this.cellCtrl.stopEditing();\n\n        this.destroyEditorAndRenderer();\n        this.removeControls();\n\n        super.destroy();\n    }\n\n    private clearParentOfValue(): void {\n        const eGui = this.getGui();\n\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        const eDocument = this.beans.gridOptionsService.getDocument();\n        if (eGui.contains(eDocument.activeElement) && browserSupportsPreventScroll()) {\n            eGui.focus({ preventScroll: true });\n        }\n\n        clearElement(this.getParentOfValue());\n    }\n}\n", "import { Component } from \"../../widgets/component\";\nimport { ICellRendererComp, ICellRendererParams } from \"../cellRenderers/iCellRenderer\";\nimport { Beans } from \"../beans\";\nimport { addStylesToElement, setDomChildOrder } from \"../../utils/dom\";\nimport { IRowComp, RowCtrl } from \"./rowCtrl\";\nimport { CellComp } from \"../cell/cellComp\";\nimport { getAllValuesInObject } from \"../../utils/object\";\nimport { setAriaRole } from \"../../utils/aria\";\nimport { CellCtrl } from \"../cell/cellCtrl\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { RowContainerType } from \"../../gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { RowStyle } from \"../../entities/gridOptions\";\n\nexport class RowComp extends Component {\n\n    private fullWidthCellRenderer: ICellRendererComp | null | undefined;\n\n    private beans: Beans;\n\n    private rowCtrl: RowCtrl;\n\n    private domOrder: boolean;\n    private cellComps: { [key: string]: CellComp | null; } = {};\n\n    constructor(ctrl: RowCtrl, beans: Beans, containerType: RowContainerType) {\n        super();\n\n        this.beans = beans;\n        this.rowCtrl = ctrl;\n\n        const rowDiv = document.createElement('div');\n        rowDiv.setAttribute('comp-id', `${this.getCompId()}`);\n        rowDiv.setAttribute('style', this.getInitialStyle(containerType));\n        this.setTemplateFromElement(rowDiv);\n\n        const eGui = this.getGui();\n        const style = eGui.style;\n        this.domOrder = this.rowCtrl.getDomOrder();\n        setAriaRole(eGui, 'row');\n        const tabIndex = this.rowCtrl.getTabIndex();\n        if (tabIndex != null) {\n            eGui.setAttribute('tabindex', tabIndex.toString());\n        }\n\n        const compProxy: IRowComp = {\n            setDomOrder: domOrder => this.domOrder = domOrder,\n            setCellCtrls: cellCtrls => this.setCellCtrls(cellCtrls),\n            showFullWidth: compDetails => this.showFullWidth(compDetails),\n            getFullWidthCellRenderer: () => this.getFullWidthCellRenderer(),\n            addOrRemoveCssClass: (name, on) => this.addOrRemoveCssClass(name, on),\n            setUserStyles: (styles: RowStyle | undefined) => addStylesToElement(eGui, styles),\n            setTop: top => style.top = top,\n            setTransform: transform => style.transform = transform,\n            setRowIndex: rowIndex => eGui.setAttribute('row-index', rowIndex),\n            setRowId: (rowId: string) => eGui.setAttribute('row-id', rowId),\n            setRowBusinessKey: businessKey => eGui.setAttribute('row-business-key', businessKey),\n            refreshFullWidth: getUpdatedParams => this.refreshFullWidth(getUpdatedParams)\n        };\n\n        ctrl.setComp(compProxy, this.getGui(), containerType);\n        this.addDestroyFunc(() => {\n            ctrl.unsetComp(containerType);\n        });\n    }\n\n    private getInitialStyle(containerType: RowContainerType): string {\n        const transform = this.rowCtrl.getInitialTransform(containerType);\n        return transform ? `transform: ${transform}` : `top: ${this.rowCtrl.getInitialRowTop(containerType)}`;\n    }\n\n    private showFullWidth(compDetails: UserCompDetails): void {\n        const callback = (cellRenderer: ICellRendererComp) => {\n            if (this.isAlive()) {\n                const eGui = cellRenderer.getGui();\n                this.getGui().appendChild(eGui);\n                this.rowCtrl.setupDetailRowAutoHeight(eGui);\n                this.setFullWidthRowComp(cellRenderer);\n            } else {\n                this.beans.context.destroyBean(cellRenderer);\n            }\n        };\n\n        // if not in cache, create new one\n        const res = compDetails.newAgStackInstance();\n\n        if (!res) { return; }\n\n        res.then(callback);\n    }\n\n    private setCellCtrls(cellCtrls: CellCtrl[]): void {\n        const cellsToRemove = Object.assign({}, this.cellComps);\n\n        cellCtrls.forEach(cellCtrl => {\n            const key = cellCtrl.getInstanceId();\n            const existingCellComp = this.cellComps[key];\n\n            if (existingCellComp == null) {\n                this.newCellComp(cellCtrl);\n            } else {\n                cellsToRemove[key] = null;\n            }\n        });\n\n        const cellCompsToRemove = getAllValuesInObject(cellsToRemove)\n            .filter(cellComp => cellComp != null);\n\n        this.destroyCells(cellCompsToRemove as CellComp[]);\n        this.ensureDomOrder(cellCtrls);\n    }\n\n    private ensureDomOrder(cellCtrls: CellCtrl[]): void {\n        if (!this.domOrder) { return; }\n\n        const elementsInOrder: HTMLElement[] = [];\n        cellCtrls.forEach(cellCtrl => {\n            const cellComp = this.cellComps[cellCtrl.getInstanceId()];\n            if (cellComp) {\n                elementsInOrder.push(cellComp.getGui());\n            }\n        });\n\n        setDomChildOrder(this.getGui(), elementsInOrder);\n    }\n\n    private newCellComp(cellCtrl: CellCtrl): void {\n        const cellComp = new CellComp(this.beans, cellCtrl,\n            this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());\n        this.cellComps[cellCtrl.getInstanceId()] = cellComp;\n        this.getGui().appendChild(cellComp.getGui());\n    }\n\n    public destroy(): void {\n        super.destroy();\n        this.destroyAllCells();\n    }\n\n    private destroyAllCells(): void {\n        const cellsToDestroy = getAllValuesInObject(this.cellComps).filter(cp => cp != null);\n        this.destroyCells(cellsToDestroy as CellComp[]);\n    }\n\n    private setFullWidthRowComp(fullWidthRowComponent: ICellRendererComp): void {\n        if (this.fullWidthCellRenderer) {\n            console.error('AG Grid - should not be setting fullWidthRowComponent twice');\n        }\n\n        this.fullWidthCellRenderer = fullWidthRowComponent;\n        this.addDestroyFunc(() => {\n            this.fullWidthCellRenderer = this.beans.context.destroyBean(this.fullWidthCellRenderer);\n        });\n    }\n\n    private getFullWidthCellRenderer(): ICellRendererComp | null | undefined {\n        return this.fullWidthCellRenderer;\n    }\n\n    private destroyCells(cellComps: CellComp[]): void {\n        cellComps.forEach(cellComp => {\n\n            // could be old reference, ie removed cell\n            if (!cellComp) { return; }\n\n            // check cellComp belongs in this container\n            const instanceId = cellComp.getCtrl().getInstanceId();\n            if (this.cellComps[instanceId] !== cellComp) {return; }\n\n            cellComp.detach();\n            cellComp.destroy();\n            this.cellComps[instanceId] = null;\n        });\n    }\n\n    private refreshFullWidth(getUpdatedParams: () => ICellRendererParams): boolean {\n        const { fullWidthCellRenderer } = this;\n        if (!fullWidthCellRenderer || !fullWidthCellRenderer.refresh) {\n            return false;\n        }\n\n        const params = getUpdatedParams();\n\n        return fullWidthCellRenderer.refresh(params);\n    }\n}\n", "import { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { getRowContainerTypeForName, IRowContainerComp, RowContainerCtrl, RowContainerName, RowContainerType } from \"./rowContainerCtrl\";\nimport { ensureDomOrder, insertWithDomOrder } from \"../../utils/dom\";\nimport { RowComp } from \"../../rendering/row/rowComp\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { Beans } from \"../../rendering/beans\";\nimport { getAllValuesInObject } from \"../../utils/object\";\nimport { setAriaRole } from \"../../utils/aria\";\n\nfunction templateFactory(): string {\n    const name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n\n    const cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);\n\n    let res: string;\n\n    const centerTemplate =\n        name === RowContainerName.CENTER ||\n        name === RowContainerName.TOP_CENTER ||\n        name === RowContainerName.STICKY_TOP_CENTER ||\n        name === RowContainerName.BOTTOM_CENTER;\n\n    if (centerTemplate) {\n        res = /* html */\n            `<div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                <div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>\n            </div>`;\n    } else {\n        res = /* html */\n            `<div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>`;\n    }\n\n    return res;\n}\n\nexport class RowContainerComp extends Component {\n\n    @Autowired('beans') private beans: Beans;\n\n    @RefSelector('eViewport') private eViewport: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n\n    private readonly name: RowContainerName;\n    private readonly type: RowContainerType;\n\n    private rowComps: {[id: string]: RowComp} = {};\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement | null;\n\n    constructor() {\n        super(templateFactory());\n        this.name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n        this.type = getRowContainerTypeForName(this.name);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: height => this.eViewport.style.height = height,\n            setRowCtrls: ({ rowCtrls }) => this.setRowCtrls(rowCtrls),\n            setDomOrder: domOrder => {\n                this.domOrder = domOrder;\n            },\n            setContainerWidth: width => this.eContainer.style.width = width\n        };\n\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport);\n    }\n\n    @PreDestroy\n    private preDestroy(): void {\n        // destroys all row comps\n        this.setRowCtrls([]);\n    }\n\n    private setRowCtrls(rowCtrls: RowCtrl[]): void {\n        const oldRows = {...this.rowComps};\n        this.rowComps = {};\n\n        this.lastPlacedElement = null;\n\n        const processRow = (rowCon: RowCtrl) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n\n            if (existingRowComp) {\n                this.rowComps[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            } else {\n                // don't create new row comps for rows which are not displayed. still want the existing components\n                // as they may be animating out.\n                if (!rowCon.getRowNode().displayed) {\n                    return;\n                }\n                const rowComp = new RowComp(rowCon, this.beans, this.type);\n                this.rowComps[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n\n        rowCtrls.forEach(processRow);\n        getAllValuesInObject(oldRows).forEach(oldRowComp => {\n            this.eContainer.removeChild(oldRowComp.getGui());\n            oldRowComp.destroy();\n        });\n\n        setAriaRole(this.eContainer, \"rowgroup\");\n    }\n\n    public appendRow(element: HTMLElement) {\n        if (this.domOrder) {\n            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        } else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n\n    private ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n\n}", "import { DraggingEvent, DragAndDropService } from \"../../dragAndDrop/dragAndDropService\";\nimport { Column, ColumnPinnedType } from \"../../entities/column\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Autowired } from \"../../context/context\";\nimport { GridOptionsService } from \"../../gridOptionsService\";\nimport { DropListener } from \"./bodyDropTarget\";\n\nexport class BodyDropPivotTarget implements DropListener {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridOptionsService') private gridOptionsService: GridOptionsService;\n\n    private columnsToAggregate: Column[] = [];\n    private columnsToGroup: Column[] = [];\n    private columnsToPivot: Column[] = [];\n\n    private pinned: ColumnPinnedType;\n\n    constructor(pinned: ColumnPinnedType) {\n        this.pinned = pinned;\n    }\n\n    /** Callback for when drag enters */\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        this.clearColumnsList();\n\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gridOptionsService.get('functionsReadOnly')) { return; }\n\n        const dragColumns: Column[] | undefined = draggingEvent.dragItem.columns;\n\n        if (!dragColumns) { return; }\n\n        dragColumns.forEach(column => {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) { return; }\n\n            if (column.isAnyFunctionActive()) { return; }\n\n            if (column.isAllowValue()) {\n                this.columnsToAggregate.push(column);\n            } else if (column.isAllowRowGroup()) {\n                this.columnsToGroup.push(column);\n            } else if (column.isAllowPivot()) {\n                this.columnsToPivot.push(column);\n            }\n\n        });\n    }\n\n    public getIconName(): string | null {\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n        }\n\n        return null;\n    }\n\n    /** Callback for when drag leaves */\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    }\n\n    private clearColumnsList(): void {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    }\n\n    /** Callback for when dragging */\n    public onDragging(draggingEvent: DraggingEvent): void {\n    }\n\n    /** Callback for when drag stops */\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        if (this.columnsToAggregate.length > 0) {\n            this.columnModel.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.columnModel.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.columnModel.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n        }\n    }\n\n}", "import { ColumnModel } from \"../columns/columnModel\";\nimport { HorizontalDirection } from \"../constants/direction\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Column, ColumnPinnedType } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { ColumnEventType } from \"../events\";\nimport { GridOptionsService } from \"../gridOptionsService\";\nimport { areEqual, includes, last, sortNumerically } from \"../utils/array\";\n\nexport class ColumnMoveHelper {\n\n    public static attemptMoveColumns(params: {\n        allMovingColumns: Column[];\n        isFromHeader: boolean;\n        hDirection?: HorizontalDirection;\n        xPosition: number;\n        fromEnter: boolean;\n        fakeEvent: boolean,\n        pinned: ColumnPinnedType,\n        gridOptionsService: GridOptionsService,\n        columnModel: ColumnModel\n    }): { columns: Column[], toIndex: number } | null | undefined {\n        const { isFromHeader, hDirection, xPosition, fromEnter, fakeEvent, pinned, gridOptionsService, columnModel } = params; \n\n        const draggingLeft = hDirection === HorizontalDirection.Left;\n        const draggingRight = hDirection === HorizontalDirection.Right;\n\n        let { allMovingColumns } = params;\n        if (isFromHeader) {\n            // If the columns we're dragging are the only visible columns of their group, move the hidden ones too\n            let newCols: Column[] = [];\n            allMovingColumns.forEach((col) => {\n                let movingGroup: ColumnGroup | null = null;\n\n                let parent = col.getParent();\n                while (parent != null && parent.getDisplayedLeafColumns().length === 1) {\n                    movingGroup = parent;\n                    parent = parent.getParent();\n                }\n                if (movingGroup != null) {\n                    const isMarryChildren = !!movingGroup.getColGroupDef()?.marryChildren;\n                    const columnsToMove =  isMarryChildren\n                        // when marry children is true, we also have to move hidden\n                        // columns within the group, so grab them from the `providedColumnGroup`\n                        ? movingGroup.getProvidedColumnGroup().getLeafColumns()\n                        : movingGroup.getLeafColumns();\n\n                    columnsToMove.forEach((newCol) => {\n                        if (!newCols.includes(newCol)) {\n                            newCols.push(newCol);\n                        }\n                    });\n                } else if (!newCols.includes(col)) {\n                    newCols.push(col);\n                }\n            });\n            allMovingColumns = newCols;\n        }\n\n        // it is important to sort the moving columns as they are in grid columns, as the list of moving columns\n        // could themselves be part of 'married children' groups, which means we need to maintain the order within\n        // the moving list.\n        const allMovingColumnsOrdered = allMovingColumns.slice();\n        columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);\n\n        const validMoves = this.calculateValidMoves({\n            movingCols: allMovingColumnsOrdered,\n            draggingRight,\n            xPosition,\n            pinned,\n            gridOptionsService,\n            columnModel\n        });\n\n        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move\n        // (ie left or right) to the mouse direction. however\n        const oldIndex = this.calculateOldIndex(allMovingColumnsOrdered, columnModel);\n\n        if (validMoves.length === 0) { return; }\n\n        const firstValidMove = validMoves[0];\n\n        // the two check below stop an error when the user grabs a group my a middle column, then\n        // it is possible the mouse pointer is to the right of a column while been dragged left.\n        // so we need to make sure that the mouse pointer is actually left of the left most column\n        // if moving left, and right of the right most column if moving right\n\n        // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from\n        // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should\n        // place the column to the RHS even if the mouse is moving left and the column is already on\n        // the LHS. otherwise we stick to the rule described above.\n\n        let constrainDirection = oldIndex !== null && !fromEnter;\n\n        // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag\n        if (isFromHeader) {\n            constrainDirection = oldIndex !== null;\n        }\n\n        // if the event was faked by a change in column pin state, then the original location of the column\n        // is not reliable for dictating where the column may now be placed.\n        if (constrainDirection && !fakeEvent) {\n            // only allow left drag if this column is moving left\n            if (draggingLeft && firstValidMove >= (oldIndex as number)) { return; }\n\n            // only allow right drag if this column is moving right\n            if (draggingRight && firstValidMove <= (oldIndex as number)) { return; }\n        }\n\n        // From when we find a move that passes all the rules\n        // Remember what that move would look like in terms of displayed cols\n        // keep going with further moves until we find a different result in displayed output\n        // In this way potentialMoves contains all potential moves over 'hidden' columns\n        const displayedCols = columnModel.getAllDisplayedColumns();\n\n        let potentialMoves: { move: number, fragCount: number }[] = [];\n        let targetOrder: Column[] | null = null;\n\n        for (let i = 0; i < validMoves.length; i++) {\n            const move: number = validMoves[i];\n\n            const order = columnModel.getProposedColumnOrder(allMovingColumnsOrdered, move);\n\n            if (!columnModel.doesOrderPassRules(order)) {\n                continue;\n            }\n            const displayedOrder = order.filter((col) => displayedCols.includes(col));\n            if (targetOrder === null) {\n                targetOrder = displayedOrder;\n            } else if (!areEqual(displayedOrder, targetOrder)) {\n                break; // Stop looking for potential moves if the displayed result changes from the target\n            }\n            const fragCount = this.groupFragCount(order);\n            potentialMoves.push({ move, fragCount });\n        }\n\n        if (potentialMoves.length === 0) {\n            return;\n        }\n\n        // The best move is the move with least group fragmentation\n        potentialMoves.sort((a, b) => a.fragCount - b.fragCount);\n\n        return this.moveColumns(allMovingColumns, potentialMoves[0].move, 'uiColumnMoved', false, columnModel);\n    }\n\n    public static moveColumns(columns: Column[], toIndex: number, source: ColumnEventType, finished: boolean, columnModel: ColumnModel): { columns: Column[], toIndex: number } | null {\n        columnModel.moveColumns(columns, toIndex, source, finished);\n\n        return finished ? null : { columns, toIndex };\n    }\n\n    // returns the index of the first column in the list ONLY if the cols are all beside\n    // each other. if the cols are not beside each other, then returns null\n    private static calculateOldIndex(movingCols: Column[], columnModel: ColumnModel): number | null {\n        const gridCols: Column[] = columnModel.getAllGridColumns();\n        const indexes = sortNumerically(movingCols.map(col => gridCols.indexOf(col)));\n        const firstIndex = indexes[0];\n        const lastIndex = last(indexes);\n        const spread = lastIndex - firstIndex;\n        const gapsExist = spread !== indexes.length - 1;\n\n        return gapsExist ? null : firstIndex;\n    }\n\n    // A measure of how fragmented in terms of groups an order of columns is\n    private static groupFragCount(columns: Column[]): number {\n        function parents(col: Column): ProvidedColumnGroup[] {\n            let result: ProvidedColumnGroup[] = [];\n            let parent = col.getOriginalParent();\n            while (parent != null) {\n                result.push(parent);\n                parent = parent.getOriginalParent();\n            }\n            return result;\n        }\n        let count = 0;\n        for (let i = 0; i < columns.length -1; i++) {\n            let a = parents(columns[i]);\n            let b = parents(columns[i + 1]);\n            // iterate over the longest one\n            [a, b] = a.length > b.length ? [a, b] : [b, a];\n            a.forEach((parent) => {\n                if (b.indexOf(parent) === -1) {\n                    count++; // More fragmented if other column doesn't share the parent\n                }\n            });\n        }\n        return count;\n    }\n\n    private static calculateValidMoves(params: {\n        movingCols: Column[],\n        draggingRight: boolean,\n        xPosition: number,\n        pinned: ColumnPinnedType,\n        gridOptionsService: GridOptionsService,\n        columnModel: ColumnModel\n    }): number[] {\n        const { movingCols, draggingRight, xPosition, pinned, gridOptionsService, columnModel } = params;\n        const isMoveBlocked = gridOptionsService.get('suppressMovableColumns') || movingCols.some(col => col.getColDef().suppressMovable);\n\n        if (isMoveBlocked) { return []; }\n        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position\n        const allDisplayedCols = columnModel.getDisplayedColumns(pinned);\n        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,\n        // so the result we return has to be and index location for this list\n        const allGridCols = columnModel.getAllGridColumns();\n\n        const movingDisplayedCols = allDisplayedCols.filter(col => includes(movingCols, col));\n        const otherDisplayedCols = allDisplayedCols.filter(col => !includes(movingCols, col));\n        const otherGridCols = allGridCols.filter(col => !includes(movingCols, col));\n\n        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.\n        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving\n        // col between b and c (so that it is under the mouse position).\n        let displayIndex = 0;\n        let availableWidth = xPosition;\n\n        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to\n        // include the width of the moving columns\n        if (draggingRight) {\n            let widthOfMovingDisplayedCols = 0;\n            movingDisplayedCols.forEach(col => widthOfMovingDisplayedCols += col.getActualWidth());\n            availableWidth -= widthOfMovingDisplayedCols;\n        }\n\n        if (availableWidth > 0) {\n            // now count how many of the displayed columns will fit to the left\n            for (let i = 0; i < otherDisplayedCols.length; i++) {\n                const col = otherDisplayedCols[i];\n                availableWidth -= col.getActualWidth();\n                if (availableWidth < 0) { break; }\n                displayIndex++;\n            }\n            // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works\n            if (draggingRight) {\n                displayIndex++;\n            }\n        }\n\n        // the display index is with respect to all the showing columns, however when we move, it's with\n        // respect to all grid columns, so we need to translate from display index to grid index\n\n        let firstValidMove: number;\n        if (displayIndex > 0) {\n            const leftColumn = otherDisplayedCols[displayIndex - 1];\n            firstValidMove = otherGridCols.indexOf(leftColumn) + 1;\n        } else {\n            firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);\n            if (firstValidMove === -1) {\n                firstValidMove = 0;\n            }\n        }\n\n        const validMoves = [firstValidMove];\n        const numberComparator = (a: number, b:number) => a - b;\n\n        // add in other valid moves due to hidden columns and married children. for example, a particular\n        // move might break a group that has married children (so move isn't valid), however there could\n        // be hidden columns (not displayed) that we could jump over to make the move valid. because\n        // they are hidden, user doesn't see any different, however it allows moves that would otherwise\n        // not work. for example imagine a group with 9 columns and all columns are hidden except the\n        // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will\n        // be relative to the not-shown column, however we need to consider the move jumping over all the\n        // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the\n        // grid, there would be no way to put a column after it (as the grid would only consider beside the\n        // visible column, which would fail valid move rules).\n        if (draggingRight) {\n            // if dragging right, then we add all the additional moves to the right. so in other words\n            // if the next move is not valid, find the next move to the right that is valid.\n            let pointer = firstValidMove + 1;\n            const lastIndex = allGridCols.length - 1;\n            while (pointer <= lastIndex) {\n                validMoves.push(pointer);\n                pointer++;\n            }\n\n            // adding columns here means the order is now messed up\n            validMoves.sort(numberComparator);\n        } else {\n            // if dragging left we do the reverse of dragging right, we add in all the valid moves to the\n            // left. however we also have to consider moves to the right for all hidden columns first.\n            // (this logic is hard to reason with, it was worked out with trial and error,\n            // more observation rather than science).\n\n            // add moves to the right\n            let pointer = firstValidMove;\n            const lastIndex = allGridCols.length - 1;\n            let displacedCol = allGridCols[pointer];\n\n            // takes into account visible=false and group=closed, ie it is not displayed\n            while (pointer <= lastIndex && allDisplayedCols.indexOf(displacedCol) < 0) {\n                pointer++;\n                validMoves.push(pointer);\n                displacedCol = allGridCols[pointer];\n            }\n\n            // add moves to the left\n            pointer = firstValidMove - 1;\n            const firstDisplayIndex = 0;\n            while (pointer >= firstDisplayIndex) {\n                validMoves.push(pointer);\n                pointer--;\n            }\n\n            // adding columns here means the order is now messed up\n            validMoves.sort(numberComparator).reverse();\n        }\n\n        return validMoves;\n    }\n\n    public static normaliseX(x: number, pinned: ColumnPinnedType, fromKeyboard: boolean, gridOptionsService: GridOptionsService, ctrlsService: CtrlsService): number {\n        const eViewport = ctrlsService.getHeaderRowContainerCtrl(pinned).getViewport();\n\n        if (fromKeyboard) {\n            x -= eViewport.getBoundingClientRect().left;\n        }\n\n        // flip the coordinate if doing RTL\n        if (gridOptionsService.get('enableRtl')) {\n            const clientWidth = eViewport.clientWidth;\n            x = clientWidth - x;\n        }\n\n        // adjust for scroll only if centre container (the pinned containers don't scroll)\n        if (pinned == null) {\n            x += ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();\n        }\n\n        return x;\n    }\n}", "import { Autowired, PostConstruct } from \"../../context/context\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Column, ColumnPinnedType } from \"../../entities/column\";\nimport { DragAndDropService, DraggingEvent, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { DropListener } from \"./bodyDropTarget\";\nimport { GridOptionsService } from \"../../gridOptionsService\";\nimport { ColumnEventType } from \"../../events\";\nimport { missing, exists } from \"../../utils/generic\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { GridBodyCtrl } from \"../../gridBodyComp/gridBodyCtrl\";\nimport { ColumnMoveHelper } from \"../columnMoveHelper\";\nimport { HorizontalDirection } from \"../../constants/direction\";\n\nexport class MoveColumnFeature implements DropListener {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('gridOptionsService') private gridOptionsService: GridOptionsService;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private gridBodyCon: GridBodyCtrl;\n\n    private needToMoveLeft = false;\n    private needToMoveRight = false;\n    private movingIntervalId: number | null;\n    private intervalCount: number;\n\n    private pinned: ColumnPinnedType;\n    private centerContainer: boolean;\n\n    private lastDraggingEvent: DraggingEvent;\n    private lastMovedInfo: { columns: Column[]; toIndex: number; } | null = null;\n\n    // this counts how long the user has been trying to scroll by dragging and failing,\n    // if they fail x amount of times, then the column will get pinned. this is what gives\n    // the 'hold and pin' functionality\n    private failedMoveAttempts: number;\n\n    private eContainer: HTMLElement;\n\n    constructor(pinned: ColumnPinnedType, eContainer: HTMLElement) {\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n        this.centerContainer = !exists(pinned);\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n\n    public getIconName(): string {\n        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we do dummy drag, so make sure column appears in the right location when first placed\n\n        const columns = draggingEvent.dragItem.columns;\n        const dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n\n        if (dragCameFromToolPanel) {\n            // the if statement doesn't work if drag leaves grid, then enters again\n            this.setColumnsVisible(columns, true, \"uiColumnDragged\");\n        } else {\n            // restore previous state of visible columns upon re-entering. this means if the user drags\n            // a group out, and then drags the group back in, only columns that were originally visible\n            // will be visible again. otherwise a group with three columns (but only two visible) could\n            // be dragged out, then when it's dragged in again, all three are visible. this stops that.\n            const visibleState = draggingEvent.dragItem.visibleState;\n            const visibleColumns: Column[] = (columns || []).filter(column => visibleState![column.getId()]);\n            this.setColumnsVisible(visibleColumns, true, \"uiColumnDragged\");\n        }\n\n        this.setColumnsPinned(columns, this.pinned, \"uiColumnDragged\");\n        this.onDragging(draggingEvent, true, true);\n    }\n\n    public onDragLeave(): void {\n        this.ensureIntervalCleared();\n        this.lastMovedInfo = null;\n    }\n\n    public setColumnsVisible(columns: Column[] | null | undefined, visible: boolean, source: ColumnEventType) {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockVisible);\n            this.columnModel.setColumnsVisible(allowedCols, visible, source);\n        }\n    }\n\n    public setColumnsPinned(columns: Column[] | null | undefined, pinned: ColumnPinnedType, source: ColumnEventType) {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockPinned);\n            this.columnModel.setColumnsPinned(allowedCols, pinned, source);\n        }\n    }\n\n    public onDragStop(): void {\n        this.onDragging(this.lastDraggingEvent, false, true, true);\n        this.ensureIntervalCleared();\n        this.lastMovedInfo = null;\n    }\n\n    private checkCenterForScrolling(xAdjustedForScroll: number): void {\n        if (this.centerContainer) {\n            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)\n            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen\n            const firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();\n            const lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();\n\n            if (this.gridOptionsService.get('enableRtl')) {\n                this.needToMoveRight = xAdjustedForScroll < (firstVisiblePixel + 50);\n                this.needToMoveLeft = xAdjustedForScroll > (lastVisiblePixel - 50);\n            } else {\n                this.needToMoveLeft = xAdjustedForScroll < (firstVisiblePixel + 50);\n                this.needToMoveRight = xAdjustedForScroll > (lastVisiblePixel - 50);\n            }\n\n            if (this.needToMoveLeft || this.needToMoveRight) {\n                this.ensureIntervalStarted();\n            } else {\n                this.ensureIntervalCleared();\n            }\n        }\n    }\n\n    public onDragging(draggingEvent: DraggingEvent = this.lastDraggingEvent, fromEnter = false, fakeEvent = false, finished = false): void {\n        if (finished) {\n            if (this.lastMovedInfo) {\n                const { columns, toIndex } = this.lastMovedInfo;\n                ColumnMoveHelper.moveColumns(columns, toIndex, 'uiColumnMoved', true, this.columnModel);\n            }\n            return;\n        }\n        this.lastDraggingEvent = draggingEvent;\n\n        // if moving up or down (ie not left or right) then do nothing\n        if (missing(draggingEvent.hDirection)) {\n            return;\n        }\n\n        const mouseX = ColumnMoveHelper.normaliseX(\n            draggingEvent.x,\n            this.pinned,\n            false,\n            this.gridOptionsService,\n            this.ctrlsService\n        );\n\n        // if the user is dragging into the panel, ie coming from the side panel into the main grid,\n        // we don't want to scroll the grid this time, it would appear like the table is jumping\n        // each time a column is dragged in.\n        if (!fromEnter) {\n            this.checkCenterForScrolling(mouseX);\n        }\n\n        const hDirection = this.normaliseDirection(draggingEvent.hDirection);\n\n        const dragSourceType: DragSourceType = draggingEvent.dragSource.type;\n\n        const allMovingColumns = draggingEvent.dragSource.getDragItem().columns?.filter(col => {\n            if (col.getColDef().lockPinned) {\n                // if locked return true only if both col and container are same pin type.\n                // double equals (==) here on purpose so that null==undefined is true (for not pinned options)\n                return col.getPinned() == this.pinned;\n            }\n            // if not pin locked, then always allowed to be in this container\n            return true;\n        }) || [];\n\n        const lastMovedInfo = ColumnMoveHelper.attemptMoveColumns({\n            allMovingColumns,\n            isFromHeader: dragSourceType === DragSourceType.HeaderCell,\n            hDirection,\n            xPosition: mouseX,\n            pinned: this.pinned,\n            fromEnter,\n            fakeEvent,\n            gridOptionsService: this.gridOptionsService,\n            columnModel: this.columnModel\n        });\n\n        if (lastMovedInfo) {\n            this.lastMovedInfo = lastMovedInfo;\n        }\n    }\n\n    private normaliseDirection(hDirection: HorizontalDirection): HorizontalDirection | undefined {\n        if (this.gridOptionsService.get('enableRtl')) {\n            switch (hDirection) {\n                case HorizontalDirection.Left: return HorizontalDirection.Right;\n                case HorizontalDirection.Right: return HorizontalDirection.Left;\n                default: console.error(`AG Grid: Unknown direction ${hDirection}`);\n            }\n        } else {\n            return hDirection;\n        }\n    }\n\n    private ensureIntervalStarted(): void {\n        if (!this.movingIntervalId) {\n            this.intervalCount = 0;\n            this.failedMoveAttempts = 0;\n            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n            if (this.needToMoveLeft) {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);\n            } else {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);\n            }\n        }\n    }\n\n    private ensureIntervalCleared(): void {\n        if (this.movingIntervalId) {\n            window.clearInterval(this.movingIntervalId);\n            this.movingIntervalId = null;\n            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);\n        }\n    }\n\n    private moveInterval(): void {\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n        let pixelsToMove: number;\n        this.intervalCount++;\n        pixelsToMove = 10 + (this.intervalCount * 5);\n        if (pixelsToMove > 100) {\n            pixelsToMove = 100;\n        }\n\n        let pixelsMoved: number | null = null;\n        const scrollFeature = this.gridBodyCon.getScrollFeature();\n        if (this.needToMoveLeft) {\n            pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);\n        } else if (this.needToMoveRight) {\n            pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);\n        }\n\n        if (pixelsMoved !== 0) {\n            this.onDragging(this.lastDraggingEvent);\n            this.failedMoveAttempts = 0;\n        } else {\n            // we count the failed move attempts. if we fail to move 7 times, then we pin the column.\n            // this is how we achieve pining by dragging the column to the edge of the grid.\n            this.failedMoveAttempts++;\n\n            const columns = this.lastDraggingEvent.dragItem.columns;\n            const columnsThatCanPin = columns!.filter(c => !c.getColDef().lockPinned);\n\n            if (columnsThatCanPin.length > 0) {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);\n                if (this.failedMoveAttempts > 7) {\n                    const pinType = this.needToMoveLeft ? 'left' : 'right';\n                    this.setColumnsPinned(columnsThatCanPin, pinType, \"uiColumnDragged\");\n                    this.dragAndDropService.nudge();\n                }\n            }\n        }\n    }\n}", "import { DragAndDropService, DraggingEvent, DragSourceType, DropTarget } from \"../../dragAndDrop/dragAndDropService\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { MoveColumnFeature } from \"./moveColumnFeature\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { ColumnPinnedType } from \"../../entities/column\";\n\nexport interface DropListener {\n    getIconName(): string | null;\n    onDragEnter(params: DraggingEvent): void;\n    onDragLeave(params: DraggingEvent): void;\n    onDragging(params: DraggingEvent): void;\n    onDragStop(params: DraggingEvent): void;\n}\n\nexport class BodyDropTarget extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private pinned: ColumnPinnedType;\n    // public because it's part of the DropTarget interface\n    private eContainer: HTMLElement;\n    // public because it's part of the DropTarget interface\n    private eSecondaryContainers: HTMLElement[][];\n    private currentDropListener: DropListener;\n\n    private moveColumnFeature: MoveColumnFeature;\n    private bodyDropPivotTarget: BodyDropPivotTarget;\n\n    constructor(pinned: ColumnPinnedType, eContainer: HTMLElement) {\n        super();\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            switch (this.pinned) {\n                case 'left':\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],\n                        [p.bottomLeftRowContainerCtrl.getContainerElement()],\n                        [p.topLeftRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                case 'right':\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],\n                        [p.bottomRightRowContainerCtrl.getContainerElement()],\n                        [p.topRightRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                default:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],\n                        [p.bottomCenterRowContainerCtrl.getViewportElement()],\n                        [p.topCenterRowContainerCtrl.getViewportElement()]\n                    ];\n                    break;\n            }\n        });\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gridOptionsService.get('allowDragFromColumnsToolPanel'));\n    }\n\n    public getSecondaryContainers(): HTMLElement[][] {\n        return this.eSecondaryContainers;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));\n        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));\n\n        this.dragAndDropService.addDropTarget(this);\n    }\n\n    public getIconName(): string | null {\n        return this.currentDropListener.getIconName();\n    }\n\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    private isDropColumnInPivotMode(draggingEvent: DraggingEvent): boolean {\n        // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n        // a standard column move, however if it came from the toolpanel, then we are introducing\n        // dimensions or values to the grid\n        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;\n        this.currentDropListener.onDragEnter(draggingEvent);\n    }\n\n    public onDragLeave(params: DraggingEvent): void {\n        this.currentDropListener.onDragLeave(params);\n    }\n\n    public onDragging(params: DraggingEvent): void {\n        this.currentDropListener.onDragging(params);\n    }\n\n    public onDragStop(params: DraggingEvent): void {\n        this.currentDropListener.onDragStop(params);\n    }\n\n}\n", "import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { PostConstruct, PreDestroy } from \"../../../context/context\";\nimport { Column, ColumnPinnedType } from \"../../../entities/column\";\nimport { removeAriaSort, setAriaSort } from \"../../../utils/aria\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp\";\nimport { HeaderCellCtrl, IHeaderCellComp } from \"./headerCellCtrl\";\nimport { IHeaderComp } from \"./headerComp\";\n\nexport class HeaderCellComp extends AbstractHeaderCellComp<HeaderCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-cell\" role=\"columnheader\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            <div ref=\"eHeaderCompWrapper\" class=\"ag-header-cell-comp-wrapper\" role=\"presentation\"></div>\n        </div>`;\n\n    @RefSelector('eResize') private eResize: HTMLElement;\n    @RefSelector('eHeaderCompWrapper') private eHeaderCompWrapper: HTMLElement;\n\n    protected readonly column: Column;\n    protected readonly pinned: ColumnPinnedType;\n\n    private headerComp: IHeaderComp | undefined;\n    private headerCompGui: HTMLElement | undefined;\n    private headerCompVersion = 0;\n\n    constructor(ctrl: HeaderCellCtrl) {\n        super(HeaderCellComp.TEMPLATE, ctrl);\n        this.column = ctrl.getColumnGroupChild() as Column;\n        this.pinned = ctrl.getPinned();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n\n        const setAttribute = (name: string, value: string | null | undefined) => {\n            if (value != null && value != '') {\n                eGui.setAttribute(name, value);\n            } else {\n                eGui.removeAttribute(name);\n            }\n        };\n\n        setAttribute('col-id', this.column.getColId());\n\n        const compProxy: IHeaderCellComp = {\n            setWidth: width => eGui.style.width = width,\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setAriaSort: sort => sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui),\n            setUserCompDetails: compDetails => this.setUserCompDetails(compDetails),\n            getUserCompInstance: () => this.headerComp\n        };\n\n        this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper);\n\n        const selectAllGui = this.ctrl.getSelectAllGui();\n        this.eResize.insertAdjacentElement('afterend', selectAllGui);\n    }\n\n    @PreDestroy\n    private destroyHeaderComp(): void {\n        if (this.headerComp) {\n            this.eHeaderCompWrapper.removeChild(this.headerCompGui!);\n            this.headerComp = this.destroyBean(this.headerComp);\n            this.headerCompGui = undefined;\n        }\n    }\n\n    private setUserCompDetails(compDetails: UserCompDetails): void {\n        this.headerCompVersion++;\n\n        const versionCopy = this.headerCompVersion;\n\n        compDetails.newAgStackInstance()!.then(comp => this.afterCompCreated(versionCopy, comp));\n    }\n\n    private afterCompCreated(version: number, headerComp: IHeaderComp): void {\n\n        if (version != this.headerCompVersion || !this.isAlive()) {\n            this.destroyBean(headerComp);\n            return;\n        }\n\n        this.destroyHeaderComp();\n\n        this.headerComp = headerComp;\n        this.headerCompGui = headerComp.getGui();\n        this.eHeaderCompWrapper.appendChild(this.headerCompGui);\n        this.ctrl.setDragSource(this.getGui()!);\n    }\n}\n", "import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { PostConstruct } from \"../../../context/context\";\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp\";\nimport { HeaderGroupCellCtrl, IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\nimport { IHeaderGroupComp } from \"./headerGroupComp\";\n\nexport class HeaderGroupCellComp extends AbstractHeaderCellComp<HeaderGroupCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell\" role=\"columnheader\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`;\n\n    @RefSelector('eResize') private eResize: HTMLElement;\n\n    private headerGroupComp: IHeaderGroupComp | undefined;\n\n    constructor(ctrl: HeaderGroupCellCtrl) {\n        super(HeaderGroupCellComp.TEMPLATE, ctrl);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n\n        const setAttribute = (key: string, value: string | undefined) =>\n                value != undefined ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);\n\n        eGui.setAttribute(\"col-id\", this.ctrl.getColId());\n\n        const compProxy: IHeaderGroupCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setResizableDisplayed: (displayed) => setDisplayed(this.eResize, displayed),\n            setWidth: width => eGui.style.width = width,\n            setAriaExpanded: expanded => setAttribute('aria-expanded', expanded),\n            setUserCompDetails: details => this.setUserCompDetails(details),\n            getUserCompInstance: () => this.headerGroupComp,\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eResize);\n    }\n\n    private setUserCompDetails(details: UserCompDetails): void {\n        details.newAgStackInstance()!.then(comp => this.afterHeaderCompCreated(comp));\n    }\n\n    private afterHeaderCompCreated(headerGroupComp: IHeaderGroupComp): void {\n        const destroyFunc = () => this.destroyBean(headerGroupComp);\n\n        if (!this.isAlive()) {\n            destroyFunc();\n            return;\n        }\n\n        const eGui = this.getGui();\n        const eHeaderGroupGui = headerGroupComp.getGui();\n\n        eGui.appendChild(eHeaderGroupGui);\n        this.addDestroyFunc(destroyFunc);\n\n        this.headerGroupComp = headerGroupComp;\n        this.ctrl.setDragSource(eGui);\n    }\n\n}\n", "import { PostConstruct, PreDestroy } from '../../context/context';\nimport { setAriaRowIndex } from '../../utils/aria';\nimport { setDomChildOrder } from '../../utils/dom';\nimport { getAllValuesInObject, iterateObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport { AbstractHeaderCellComp } from '../cells/abstractCell/abstractHeaderCellComp';\nimport { AbstractHeaderCellCtrl } from '../cells/abstractCell/abstractHeaderCellCtrl';\nimport { HeaderCellComp } from '../cells/column/headerCellComp';\nimport { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\nimport { HeaderGroupCellComp } from '../cells/columnGroup/headerGroupCellComp';\nimport { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\nimport { HeaderFilterCellComp } from '../cells/floatingFilter/headerFilterCellComp';\nimport { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\nimport { HeaderRowCtrl, IHeaderRowComp } from './headerRowCtrl';\n\nexport enum HeaderRowType {\n    COLUMN_GROUP = 'group',\n    COLUMN = 'column',\n    FLOATING_FILTER = 'filter'\n}\n\nexport class HeaderRowComp extends Component {\n\n    private ctrl: HeaderRowCtrl;\n\n    private headerComps: { [key: string]: AbstractHeaderCellComp<AbstractHeaderCellCtrl>; } = {};\n\n    constructor(ctrl: HeaderRowCtrl) {\n        super();\n\n        this.ctrl = ctrl;\n        this.setTemplate(/* html */`<div class=\"${this.ctrl.getHeaderRowClass()}\" role=\"row\"></div>`);\n    }\n\n    //noinspection JSUnusedLocalSymbols\n    @PostConstruct\n    private init(): void {\n        setAriaRowIndex(this.getGui(), this.ctrl.getAriaRowIndex());\n\n        const compProxy: IHeaderRowComp = {\n            setHeight: height => this.getGui().style.height = height,\n            setTop: top => this.getGui().style.top = top,\n            setHeaderCtrls: (ctrls, forceOrder) => this.setHeaderCtrls(ctrls, forceOrder),\n            setWidth: width => this.getGui().style.width = width,\n        };\n\n        this.ctrl.setComp(compProxy);\n    }\n\n    @PreDestroy\n    private destroyHeaderCtrls(): void {\n        this.setHeaderCtrls([], false);\n    }\n\n    private setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean): void {\n        if (!this.isAlive()) { return; }\n\n        const oldComps = this.headerComps;\n        this.headerComps = {};\n\n        ctrls.forEach(ctrl => {\n            const id = ctrl.getInstanceId();\n            let comp = oldComps[id];\n            delete oldComps[id];\n\n            if (comp == null) {\n                comp = this.createHeaderComp(ctrl);\n                this.getGui().appendChild(comp.getGui());\n            }\n\n            this.headerComps[id] = comp;\n        });\n\n        iterateObject(oldComps, (id: string, comp: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n            this.getGui().removeChild(comp.getGui());\n            this.destroyBean(comp);\n        });\n\n        if (forceOrder) {\n            const comps = getAllValuesInObject(this.headerComps);\n            // ordering the columns by left position orders them in the order they appear on the screen\n            comps.sort((a: AbstractHeaderCellComp<AbstractHeaderCellCtrl>, b: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n                const leftA = a.getCtrl().getColumnGroupChild().getLeft()!;\n                const leftB = b.getCtrl().getColumnGroupChild().getLeft()!;\n                return leftA - leftB;\n            });\n            const elementsInOrder = comps.map(c => c.getGui());\n            setDomChildOrder(this.getGui(), elementsInOrder);\n        }\n    }\n\n    private createHeaderComp(headerCtrl: AbstractHeaderCellCtrl): AbstractHeaderCellComp<AbstractHeaderCellCtrl> {\n\n        let result: AbstractHeaderCellComp<AbstractHeaderCellCtrl>;\n\n        switch (this.ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP:\n                result = new HeaderGroupCellComp(headerCtrl as HeaderGroupCellCtrl);\n                break;\n            case HeaderRowType.FLOATING_FILTER:\n                result = new HeaderFilterCellComp(headerCtrl as HeaderFilterCellCtrl);\n                break;\n            default:\n                result = new HeaderCellComp(headerCtrl as HeaderCellCtrl);\n                break;\n        }\n\n        this.createBean(result);\n        result.setParentComponent(this);\n\n        return result;\n    }\n}\n", "import { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { IHeaderColumn } from \"../../../interfaces/iHeaderColumn\";\nimport { FocusService } from \"../../../focusService\";\nimport { isUserSuppressingHeaderKeyboardEvent } from \"../../../utils/keyboard\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { KeyCode } from \"../.././../constants/keyCode\";\nimport { Beans } from \"../../../rendering/beans\";\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { Column, ColumnPinnedType } from \"../../../entities/column\";\nimport { CtrlsService } from \"../../../ctrlsService\";\nimport { HorizontalDirection } from \"../../../constants/direction\";\nimport { DragAndDropService, DragSource } from \"../../../dragAndDrop/dragAndDropService\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { setAriaColIndex } from \"../../../utils/aria\";\nimport { Events } from \"../../../eventKeys\";\nimport { ColumnHeaderClickedEvent, ColumnHeaderContextMenuEvent } from \"../../../events\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { WithoutGridCommon } from \"../../../interfaces/iCommon\";\nimport { MenuService } from \"../../../misc/menuService\";\nimport { PinnedWidthService } from \"../../../gridBodyComp/pinnedWidthService\";\nimport { getInnerWidth } from \"../../../utils/dom\";\n\nlet instanceIdSequence = 0;\n\nexport interface IAbstractHeaderCellComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n}\n\nexport interface IHeaderResizeFeature {\n    toggleColumnResizing(resizing: boolean): void;\n}\n\nexport abstract class AbstractHeaderCellCtrl<TComp extends IAbstractHeaderCellComp = any, TColumn extends IHeaderColumn = any, TFeature extends IHeaderResizeFeature = any> extends BeanStub {\n\n    public static DOM_DATA_KEY_HEADER_CTRL = 'headerCtrl';\n\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n    @Autowired('focusService') protected readonly focusService: FocusService;\n    @Autowired('userComponentFactory') protected readonly userComponentFactory: UserComponentFactory;\n    @Autowired('ctrlsService') protected readonly ctrlsService: CtrlsService;\n    @Autowired('dragAndDropService') protected readonly dragAndDropService: DragAndDropService;\n    @Autowired('menuService') protected readonly menuService: MenuService;\n\n    protected readonly beans: Beans;\n    private instanceId: string;\n    private columnGroupChild: IHeaderColumn;\n    private parentRowCtrl: HeaderRowCtrl;\n\n    private isResizing: boolean;\n    private resizeToggleTimeout = 0;\n    protected resizeMultiplier = 1;\n\n    protected eGui: HTMLElement;\n    protected resizeFeature: TFeature | null = null;\n    protected comp: TComp;\n    protected column: TColumn\n\n    public lastFocusEvent: KeyboardEvent | null = null;\n\n    protected dragSource: DragSource | null = null;\n\n    protected abstract resizeHeader(delta: number, shiftKey: boolean): void;\n    protected abstract moveHeader(direction: HorizontalDirection): void;\n\n    constructor(columnGroupChild: IHeaderColumn, beans: Beans, parentRowCtrl: HeaderRowCtrl) {\n        super();\n\n        this.columnGroupChild = columnGroupChild;\n        this.parentRowCtrl = parentRowCtrl;\n        this.beans = beans;\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = columnGroupChild.getUniqueId() + '-' + instanceIdSequence++;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedPropertyListeners(['suppressHeaderFocus'], () => this.refreshTabIndex());\n    }\n\n    protected shouldStopEventPropagation(e: KeyboardEvent): boolean {\n        const { headerRowIndex, column } = this.focusService.getFocusedHeader()!;\n\n        return isUserSuppressingHeaderKeyboardEvent(\n            this.gridOptionsService,\n            e,\n            headerRowIndex,\n            column\n        );\n    }\n\n    protected getWrapperHasFocus(): boolean {\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n\n        return activeEl === this.eGui;\n    }\n\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n        this.addDomData();\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.onDisplayedColumnsChanged();\n        this.refreshTabIndex();\n    }\n\n    protected onDisplayedColumnsChanged(): void {\n        if (!this.comp || !this.column) { return; }\n        this.refreshFirstAndLastStyles();\n        this.refreshAriaColIndex();\n    }\n\n    private refreshFirstAndLastStyles(): void {\n        const { comp, column, beans } = this;\n        CssClassApplier.refreshFirstAndLastStyles(comp, (column as unknown as Column | ColumnGroup), beans.columnModel);\n    }\n\n    private refreshAriaColIndex(): void {\n        const { beans, column } = this;\n\n        const colIdx = beans.columnModel.getAriaColumnIndex(column as unknown as Column | ColumnGroup);\n        setAriaColIndex(this.eGui, colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n\n    protected addResizeAndMoveKeyboardListeners(): void {\n        if (!this.resizeFeature) { return; }\n\n        this.addManagedListener(this.eGui, 'keydown', this.onGuiKeyDown.bind(this));\n        this.addManagedListener(this.eGui, 'keyup', this.onGuiKeyUp.bind(this));\n    }\n\n    private refreshTabIndex(): void {\n        const suppressHeaderFocus = this.gridOptionsService.get('suppressHeaderFocus');\n        if (suppressHeaderFocus) {\n            this.eGui.removeAttribute('tabindex');\n        } else {\n            this.eGui.setAttribute('tabindex', '-1');\n        }\n    }\n\n    private onGuiKeyDown(e: KeyboardEvent): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n\n        const isLeftOrRight = e.key === KeyCode.LEFT || e.key === KeyCode.RIGHT;\n\n        if (this.isResizing) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n\n        if (\n            // if elements within the header are focused, we don't process the event\n            activeEl !== this.eGui ||\n            // if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event\n            (!e.shiftKey && !e.altKey)\n        ) { return; }\n\n        if (this.isResizing || isLeftOrRight) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n\n        if (!isLeftOrRight) { return; }\n        \n        const isLeft = (e.key === KeyCode.LEFT) !== this.gridOptionsService.get('enableRtl');\n        const direction = HorizontalDirection[isLeft ? 'Left' : 'Right' ];\n\n        if (e.altKey) {\n            this.isResizing = true;\n            this.resizeMultiplier += 1;\n            const diff = this.getViewportAdjustedResizeDiff(e);\n            this.resizeHeader(diff, e.shiftKey);\n            this.resizeFeature?.toggleColumnResizing(true);\n        } else {\n            this.moveHeader(direction);\n        }\n    }\n\n    private getViewportAdjustedResizeDiff(e: KeyboardEvent): number {\n        let diff = this.getResizeDiff(e);\n\n        const pinned = this.column.getPinned();\n        if (pinned) {\n            const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n            const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n            const bodyWidth = getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;\n\n            if (leftWidth + rightWidth + diff > bodyWidth) {\n                if (bodyWidth > leftWidth + rightWidth) {\n                    // allow body width to ignore resize multiplier and fill space for last tick\n                    diff = bodyWidth - leftWidth - rightWidth;\n                } else {\n                    return 0;\n                }\n            }\n        }\n        \n        return diff;\n    }\n\n    private getResizeDiff(e: KeyboardEvent): number {\n        let isLeft = (e.key === KeyCode.LEFT) !== this.gridOptionsService.get('enableRtl');\n\n        const pinned = this.column.getPinned();\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        if (pinned) {\n            if (isRtl !== (pinned === 'right')) {\n                isLeft = !isLeft;\n            }\n        }\n\n        return (isLeft ? -1 : 1) * this.resizeMultiplier;\n    }\n\n    private onGuiKeyUp(): void {\n        if (!this.isResizing) { return; }\n        if (this.resizeToggleTimeout) {\n            window.clearTimeout(this.resizeToggleTimeout);\n            this.resizeToggleTimeout = 0;\n        }\n\n        this.isResizing = false;\n        this.resizeMultiplier = 1;\n\n        this.resizeToggleTimeout = setTimeout(() => {\n            this.resizeFeature?.toggleColumnResizing(false);\n        }, 150);\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const wrapperHasFocus = this.getWrapperHasFocus();\n\n        switch (e.key) {\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                if (wrapperHasFocus) {\n                    e.preventDefault();\n                }\n        }\n    }\n\n    private addDomData(): void {\n        const key = AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL;\n        this.gridOptionsService.setDomData(this.eGui, key, this);\n        this.addDestroyFunc(() => this.gridOptionsService.setDomData(this.eGui, key, null));\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public focus(event?: KeyboardEvent): boolean {\n        if (!this.eGui) { return false; }\n\n        this.lastFocusEvent = event || null;\n        this.eGui.focus();\n        return true;\n    }\n\n    public getRowIndex(): number {\n        return this.parentRowCtrl.getRowIndex();\n    }\n\n    public getParentRowCtrl(): HeaderRowCtrl {\n        return this.parentRowCtrl;\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.parentRowCtrl.getPinned();\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n\n    public getColumnGroupChild(): IHeaderColumn {\n        return this.columnGroupChild;\n    }\n\n    protected removeDragSource(): void {\n        if (this.dragSource) {\n            this.dragAndDropService.removeDragSource(this.dragSource);\n            this.dragSource = null;\n        }\n    }\n\n    protected handleContextMenuMouseEvent(mouseEvent: MouseEvent | undefined, touchEvent: TouchEvent | undefined, column: Column | ProvidedColumnGroup): void {\n        const event = mouseEvent ?? touchEvent!;\n        if (this.gridOptionsService.get('preventDefaultOnContextMenu')) {\n            event.preventDefault();\n        }\n        const columnToUse = column instanceof Column ? column : undefined;\n        if (this.menuService.isHeaderContextMenuEnabled(columnToUse)) {\n            this.menuService.showHeaderContextMenu(columnToUse, mouseEvent, touchEvent);\n        }\n\n        this.dispatchColumnMouseEvent(Events.EVENT_COLUMN_HEADER_CONTEXT_MENU, column);\n    }\n\n    protected dispatchColumnMouseEvent(eventType: \"columnHeaderContextMenu\" | \"columnHeaderClicked\", column: Column | ProvidedColumnGroup): void {\n        const event: WithoutGridCommon<ColumnHeaderClickedEvent | ColumnHeaderContextMenuEvent> = {\n            type: eventType,\n            column,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        this.removeDragSource();\n        (this.comp as any) = null;\n        (this.column as any) = null;\n        (this.resizeFeature as any) = null;\n        (this.lastFocusEvent as any) = null;\n        (this.columnGroupChild as any) = null;\n        (this.parentRowCtrl as any) = null;\n        (this.eGui as any) = null;\n    }\n}\n", "import { IHeaderColumn } from \"../../interfaces/iHeaderColumn\";\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { PostConstruct } from \"../../context/context\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { setAriaColSpan } from \"../../utils/aria\";\nimport { last } from \"../../utils/array\";\nimport { exists } from \"../../utils/generic\";\nimport { Events } from \"../../eventKeys\";\n\nexport class SetLeftFeature extends BeanStub {\n\n    private readonly columnOrGroup: IHeaderColumn;\n    private eCell: HTMLElement;\n    private ariaEl: HTMLElement;\n\n    private actualLeft: number;\n\n    // if we are spanning columns, this tells what columns,\n    // otherwise this is empty\n    private colsSpanning: Column[] | undefined;\n\n    private beans: Beans;\n\n    constructor(columnOrGroup: IHeaderColumn, eCell: HTMLElement, beans: Beans, colsSpanning?: Column[]) {\n        super();\n        this.columnOrGroup = columnOrGroup;\n        this.eCell = eCell;\n        this.ariaEl = this.eCell.querySelector('[role=columnheader]') || this.eCell;\n        this.colsSpanning = colsSpanning;\n        this.beans = beans;\n    }\n\n    public setColsSpanning(colsSpanning: Column[]): void {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    }\n\n    public getColumnOrGroup(): IHeaderColumn {\n        if (this.beans.gridOptionsService.get('enableRtl') && this.colsSpanning) {\n            return last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\n        // so additionally update left if any column width changes.\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));\n\n        // setting left has a dependency on print layout\n        this.addManagedPropertyListener('domLayout', this.onLeftChanged.bind(this));\n    }\n\n    private setLeftFirstTime(): void {\n        const suppressMoveAnimation = this.beans.gridOptionsService.get('suppressColumnMoveAnimation');\n        const oldLeftExists = exists(this.columnOrGroup.getOldLeft());\n        const animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        } else {\n            this.onLeftChanged();\n        }\n    }\n\n    private animateInLeft(): void {\n        const colOrGroup = this.getColumnOrGroup();\n\n        const left = colOrGroup.getLeft();\n        const oldLeft = colOrGroup.getOldLeft();\n\n        const oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft!);\n        const actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n\n        this.setLeft(oldActualLeft!);\n\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = actualLeft;\n\n        this.beans.columnAnimationService.executeNextVMTurn(() => {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (this.actualLeft === actualLeft) {\n                this.setLeft(actualLeft);\n            }\n        });\n    }\n\n    private onLeftChanged(): void {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n        this.setLeft(this.actualLeft);\n    }\n\n    private modifyLeftForPrintLayout(colOrGroup: IHeaderColumn, leftPosition: number): number {\n        const printLayout = this.beans.gridOptionsService.isDomLayout('print');\n\n        if (!printLayout) { return leftPosition; }\n\n        if (colOrGroup.getPinned() === 'left') {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n        if (colOrGroup.getPinned() === 'right') {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n\n        // is in body\n        return leftWidth + leftPosition;\n    }\n\n    private setLeft(value: number): void {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (exists(value)) {\n            this.eCell.style.left = `${value}px`;\n        }\n\n        let indexColumn: Column;\n\n        if (this.columnOrGroup instanceof Column) {\n            indexColumn = this.columnOrGroup;\n        } else {\n            const columnGroup = this.columnOrGroup as ColumnGroup;\n            const children = columnGroup.getLeafColumns();\n\n            if (!children.length) { return; }\n\n            if (children.length > 1) {\n                setAriaColSpan(this.ariaEl, children.length);\n            }\n\n            indexColumn = children[0];\n        }\n    }\n}\n", "import { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { ColumnHoverService } from \"../../rendering/columnHoverService\";\n\nexport class HoverFeature extends BeanStub {\n\n    @Autowired('columnHoverService') private columnHoverService: ColumnHoverService;\n\n    private readonly columns: Column[];\n\n    private element: HTMLElement;\n\n    constructor(columns: Column[], element: HTMLElement) {\n        super();\n        this.columns = columns;\n        this.element = element;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsService.get('columnHoverHighlight')) {\n            this.addMouseHoverListeners();\n        }\n    }\n\n    private addMouseHoverListeners(): void {\n        this.addManagedListener(this.element, 'mouseout', this.onMouseOut.bind(this));\n        this.addManagedListener(this.element, 'mouseover', this.onMouseOver.bind(this));\n    }\n\n    private onMouseOut(): void {\n        this.columnHoverService.clearMouseOver();\n    }\n\n    private onMouseOver(): void {\n        this.columnHoverService.setMouseOver(this.columns);\n    }\n\n}\n", "import { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired } from '../../../context/context';\nimport { Column } from '../../../entities/column';\nimport { Events, FilterChangedEvent } from '../../../events';\nimport { FilterManager } from '../../../filter/filterManager';\nimport { IFloatingFilter } from '../../../filter/floating/floatingFilter';\nimport { ColumnHoverService } from '../../../rendering/columnHoverService';\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\nimport { AgPromise } from '../../../utils';\nimport { isElementChildOfClass } from '../../../utils/dom';\nimport { createIconNoSpan } from '../../../utils/icon';\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\nimport { HoverFeature } from '../hoverFeature';\nimport { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { setAriaLabel } from \"../../../utils/aria\";\nimport { warnOnce } from \"../../../utils/function\";\nimport { Beans } from \"../../../rendering/beans\";\n\nexport interface IHeaderFilterCellComp extends IAbstractHeaderCellComp {\n    addOrRemoveBodyCssClass(cssClassName: string, on: boolean): void;\n    setButtonWrapperDisplayed(displayed: boolean): void;\n    setCompDetails(compDetails?: UserCompDetails | null): void;\n    getFloatingFilterComp(): AgPromise<IFloatingFilter> | null;\n    setWidth(width: string): void;\n    setMenuIcon(icon: HTMLElement): void;\n}\n\nexport class HeaderFilterCellCtrl extends AbstractHeaderCellCtrl<IHeaderFilterCellComp, Column> {\n\n    private eButtonShowMainFilter: HTMLElement;\n    private eFloatingFilterBody: HTMLElement;\n\n    private suppressFilterButton: boolean;\n    private highlightFilterButtonWhenActive: boolean;\n    private active: boolean;\n    private iconCreated: boolean = false;\n\n    private userCompDetails?: UserCompDetails | null;\n    private destroySyncListener: (() => null) | undefined;\n    private destroyFilterChangedListener: (() => null) | undefined;\n\n    constructor(column: Column, beans: Beans, parentRowCtrl: HeaderRowCtrl) {\n        super(column, beans, parentRowCtrl);\n        this.column = column;\n    }\n\n    public setComp(comp: IHeaderFilterCellComp, eGui: HTMLElement, eButtonShowMainFilter: HTMLElement, eFloatingFilterBody: HTMLElement): void {\n        this.comp = comp;\n        this.eButtonShowMainFilter = eButtonShowMainFilter;\n        this.eFloatingFilterBody = eFloatingFilterBody;\n\n        this.setGui(eGui);\n        this.setupActive();\n\n        this.setupWidth();\n        this.setupLeft();\n        this.setupHover();\n        this.setupFocus();\n        this.setupAria();\n        this.setupFilterButton();\n        this.setupUserComp();\n        this.setupSyncWithFilter();\n        this.setupUi();\n\n        this.addManagedListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));\n        this.setupFilterChangedListener();\n        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));\n    }\n\n    // empty abstract method\n    protected resizeHeader(): void {}\n    // empty abstract method\n    protected moveHeader(): void {}\n\n    private setupActive(): void {\n        const colDef = this.column.getColDef();\n        const filterExists = !!colDef.filter;\n        const floatingFilterExists = !!colDef.floatingFilter;\n        this.active = filterExists && floatingFilterExists;\n    }\n\n    private setupUi(): void {\n        this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active);\n        \n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-full-body', this.suppressFilterButton);\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-body', !this.suppressFilterButton);\n        \n        if (!this.active || this.iconCreated) { return; }\n\n        const eMenuIcon = createIconNoSpan('filter', this.gridOptionsService, this.column);\n\n        if (eMenuIcon) {\n            this.iconCreated = true;\n            this.eButtonShowMainFilter.appendChild(eMenuIcon);\n        }\n    }\n\n    private setupFocus(): void {\n        this.createManagedBean(new ManagedFocusFeature(\n            this.eGui,\n            {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this)\n            }\n        ));\n    }\n\n    private setupAria(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        setAriaLabel(this.eButtonShowMainFilter, localeTextFunc('ariaFilterMenuOpen', 'Open Filter Menu'));\n    }\n\n    private onTabKeyDown(e: KeyboardEvent) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement as HTMLElement;\n        const wrapperHasFocus = activeEl === this.eGui;\n\n        if (wrapperHasFocus) { return; }\n\n        const nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);\n\n        if (nextFocusableEl) {\n            this.beans.headerNavigationService.scrollToColumn(this.column);\n            e.preventDefault();\n            nextFocusableEl.focus();\n            return;\n        }\n\n        const nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);\n\n        if (!nextFocusableColumn) { return; }\n\n        if (this.focusService.focusHeaderPosition({\n            headerPosition: {\n                headerRowIndex: this.getParentRowCtrl().getRowIndex(),\n                column: nextFocusableColumn\n            },\n            event: e\n        })) {\n            e.preventDefault();\n        }\n    }\n\n    private findNextColumnWithFloatingFilter(backwards: boolean): Column | null {\n        const columnModel = this.beans.columnModel;\n        let nextCol: Column | null = this.column;\n\n        do {\n            nextCol = backwards\n                ? columnModel.getDisplayedColBefore(nextCol)\n                : columnModel.getDisplayedColAfter(nextCol);\n\n            if (!nextCol) { break; }\n\n        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);\n\n        return nextCol;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        const wrapperHasFocus = this.getWrapperHasFocus();\n\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!wrapperHasFocus) {\n                    e.preventDefault();\n                }\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n                if (wrapperHasFocus) { return; }\n                e.stopPropagation();\n            case KeyCode.ENTER:\n                if (wrapperHasFocus) {\n                    if (this.focusService.focusInto(this.eGui)) {\n                        e.preventDefault();\n                    }\n                }\n                break;\n            case KeyCode.ESCAPE:\n                if (!wrapperHasFocus) {\n                    this.eGui.focus();\n                }\n        }\n    }\n\n    private onFocusIn(e: FocusEvent): void {\n        const isRelatedWithin = this.eGui.contains(e.relatedTarget as HTMLElement);\n\n        // when the focus is already within the component,\n        // we default to the browser's behavior\n        if (isRelatedWithin) { return; }\n\n        const notFromHeaderWrapper = !!e.relatedTarget && !(e.relatedTarget as HTMLElement).classList.contains('ag-floating-filter');\n        const fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget as HTMLElement, 'ag-floating-filter');\n\n        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {\n            const lastFocusEvent = this.lastFocusEvent;\n            const fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);\n\n            if (lastFocusEvent && fromTab) {\n                const shouldFocusLast = lastFocusEvent.shiftKey;\n\n                this.focusService.focusInto(this.eGui, shouldFocusLast);\n            }\n        }\n\n        const rowIndex = this.getRowIndex();\n        this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n    }\n\n    private setupHover(): void {\n        this.createManagedBean(new HoverFeature([this.column], this.eGui));\n\n        const listener = () => {\n            if (!this.gridOptionsService.get('columnHoverHighlight')) { return; }\n            const hovered = this.beans.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', hovered);\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);\n        listener();\n    }\n\n    private setupLeft(): void {\n        const setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);\n        this.createManagedBean(setLeftFeature);\n    }\n\n    private setupFilterButton(): void {\n        this.suppressFilterButton = !this.menuService.isFloatingFilterButtonEnabled(this.column);\n        this.highlightFilterButtonWhenActive = !this.menuService.isLegacyMenuEnabled();\n    }\n\n    private setupUserComp(): void {\n        if (!this.active) { return; }\n\n        const compDetails = this.beans.filterManager.getFloatingFilterCompDetails(\n            this.column,\n            () => this.showParentFilter()\n        );\n\n        if (compDetails) {\n            this.setCompDetails(compDetails);\n        }\n    }\n\n    private setCompDetails(compDetails?: UserCompDetails | null): void {\n        this.userCompDetails = compDetails;\n        this.comp.setCompDetails(compDetails);\n    }\n\n    private showParentFilter() {\n        const eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;\n        this.menuService.showFilterMenu({\n            column: this.column,\n            buttonElement: eventSource,\n            containerType: 'floatingFilter',\n            positionBy: 'button'\n        });\n    }\n\n    private setupSyncWithFilter(): void {\n        if (!this.active) { return; }\n        const { filterManager } = this.beans;\n\n        const syncWithFilter = (filterChangedEvent: FilterChangedEvent | null) => {\n            const compPromise = this.comp.getFloatingFilterComp();\n\n            if (!compPromise) { return; }\n\n            compPromise.then(comp => {\n                if (comp) {\n                    const parentModel = filterManager.getCurrentFloatingFilterParentModel(this.column);\n                    comp.onParentModelChanged(parentModel, filterChangedEvent);\n                }\n            });\n        };\n\n        this.destroySyncListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);\n\n        if (filterManager.isFilterActive(this.column)) {\n            syncWithFilter(null);\n        }\n    }\n\n    private setupWidth(): void {\n        const listener = () => {\n            const width = `${this.column.getActualWidth()}px`;\n            this.comp.setWidth(width);\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);\n        listener();\n    }\n\n    private setupFilterChangedListener(): void {\n        if (this.active) {\n            this.destroyFilterChangedListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, this.updateFilterButton.bind(this));\n            this.updateFilterButton();\n        }\n    }\n\n    private updateFilterButton(): void {\n        if (!this.suppressFilterButton && this.comp) {\n            const isFilterAllowed = this.beans.filterManager.isFilterAllowed(this.column);\n            this.comp.setButtonWrapperDisplayed(isFilterAllowed);\n            if (this.highlightFilterButtonWhenActive && isFilterAllowed) {\n                this.eButtonShowMainFilter.classList.toggle('ag-filter-active', this.column.isFilterActive());\n            }\n        }\n    }\n\n    private onColDefChanged(): void {\n        const wasActive = this.active;\n        this.setupActive();\n        const becomeActive = !wasActive && this.active;\n        if (wasActive && !this.active) {\n            this.destroySyncListener?.();\n            this.destroyFilterChangedListener?.();\n        }\n\n        const newCompDetails = this.active\n            ? this.beans.filterManager.getFloatingFilterCompDetails(\n                this.column,\n                () => this.showParentFilter()\n            )\n            : null;\n\n        const compPromise = this.comp.getFloatingFilterComp();\n        if (!compPromise || !newCompDetails) {\n            this.updateCompDetails(newCompDetails, becomeActive);\n        } else {\n            compPromise.then(compInstance => {\n                if (!compInstance || this.beans.filterManager.areFilterCompsDifferent(this.userCompDetails ?? null, newCompDetails)) {\n                    this.updateCompDetails(newCompDetails, becomeActive);\n                } else {\n                    this.updateFloatingFilterParams(newCompDetails);\n                }\n            });\n        }\n    }\n\n    private updateCompDetails(compDetails: UserCompDetails | null | undefined, becomeActive: boolean): void {\n        if (!this.isAlive()) { return; }\n        this.setCompDetails(compDetails);\n        // filter button and UI can change based on params, so always want to update\n        this.setupFilterButton();\n        this.setupUi();\n        if (becomeActive) {\n            this.setupSyncWithFilter();\n            this.setupFilterChangedListener();\n        }\n    }\n\n    private updateFloatingFilterParams(userCompDetails?: UserCompDetails | null): void {\n        if (!userCompDetails) { return; }\n\n        const params = userCompDetails.params;\n\n        this.comp.getFloatingFilterComp()?.then(floatingFilter => {\n            let hasRefreshed = false;\n            if (floatingFilter?.refresh && typeof floatingFilter.refresh === 'function') {\n                const result = floatingFilter.refresh(params);\n                // framework wrapper always implements optional methods, but returns null if no underlying method\n                if (result !== null) {\n                    hasRefreshed = true;\n                }\n            }\n            if (!hasRefreshed && floatingFilter?.onParamsUpdated && typeof floatingFilter.onParamsUpdated === 'function') {\n                const result = floatingFilter.onParamsUpdated(params);\n                if (result !== null) {\n                    warnOnce(`Custom floating filter method 'onParamsUpdated' is deprecated. Use 'refresh' instead.`);\n                }\n            }\n        })\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        (this.eButtonShowMainFilter as any) = null;\n        (this.eFloatingFilterBody as any) = null;\n        (this.userCompDetails as any) = null;\n        (this.destroySyncListener as any) = null;\n        (this.destroyFilterChangedListener as any) = null;\n    }\n}\n", "import { ColumnModel } from \"../../../columns/columnModel\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { CtrlsService } from \"../../../ctrlsService\";\nimport { Column, ColumnPinnedType } from \"../../../entities/column\";\nimport { PinnedWidthService } from \"../../../gridBodyComp/pinnedWidthService\";\nimport { getInnerWidth, setDisplayed } from \"../../../utils/dom\";\nimport { TouchListener } from \"../../../widgets/touchListener\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { IHeaderResizeFeature } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { HeaderCellCtrl, IHeaderCellComp } from \"./headerCellCtrl\";\n\n\nexport class ResizeFeature extends BeanStub implements IHeaderResizeFeature {\n\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private pinned: ColumnPinnedType;\n    private column: Column;\n    private eResize: HTMLElement;\n    private comp: IHeaderCellComp;\n\n    private lastResizeAmount: number;\n    private resizeStartWidth: number;\n    private resizeWithShiftKey: boolean;\n\n    private ctrl: HeaderCellCtrl;\n\n    constructor(\n        pinned: ColumnPinnedType,\n        column: Column,\n        eResize: HTMLElement,\n        comp: IHeaderCellComp,\n        ctrl: HeaderCellCtrl\n    ) {\n        super();\n        this.pinned = pinned;\n        this.column = column;\n        this.eResize = eResize;\n        this.comp = comp;\n        this.ctrl = ctrl;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const destroyResizeFuncs: (() => void)[] = [];\n\n        let canResize: boolean;\n        let canAutosize: boolean;\n\n        const addResize = () => {\n            setDisplayed(this.eResize, canResize);\n\n            if (!canResize) { return; }\n\n            const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n                eResizeBar: this.eResize,\n                onResizeStart: this.onResizeStart.bind(this),\n                onResizing: this.onResizing.bind(this, false),\n                onResizeEnd: this.onResizing.bind(this, true)\n            });\n            destroyResizeFuncs.push(finishedWithResizeFunc);\n\n            if (canAutosize) {\n                const skipHeaderOnAutoSize = this.gridOptionsService.get('skipHeaderOnAutoSize');\n\n                const autoSizeColListener = () => {\n                    this.columnModel.autoSizeColumn(this.column, \"uiColumnResized\", skipHeaderOnAutoSize);\n                };\n\n                this.eResize.addEventListener('dblclick', autoSizeColListener);\n                const touchListener: TouchListener = new TouchListener(this.eResize);\n                touchListener.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n\n                destroyResizeFuncs.push(() => {\n                    this.eResize.removeEventListener('dblclick', autoSizeColListener);\n                    touchListener.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n                    touchListener.destroy();\n                });\n            }\n        };\n\n        const removeResize = () => {\n            destroyResizeFuncs.forEach(f => f());\n            destroyResizeFuncs.length = 0;\n        };\n\n        const refresh = () => {\n            const resize = this.column.isResizable();\n            const autoSize = !this.gridOptionsService.get('suppressAutoSize') && !this.column.getColDef().suppressAutoSize;\n            const propertyChange = resize !== canResize || autoSize !== canAutosize;\n            if (propertyChange) {\n                canResize = resize;\n                canAutosize = autoSize;\n                removeResize();\n                addResize();\n            }\n        };\n\n        refresh();\n        this.addDestroyFunc(removeResize);\n        this.ctrl.addRefreshFunction(refresh);\n    }\n\n    private onResizing(finished: boolean, resizeAmount: number): void {\n        const { column: key, lastResizeAmount, resizeStartWidth } = this;\n\n        const resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);\n        const newWidth = resizeStartWidth + resizeAmountNormalised;\n\n        const columnWidths = [{ key, newWidth }];\n\n        if (this.column.getPinned()) {\n            const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n            const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n            const bodyWidth = getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;\n\n            if (leftWidth + rightWidth + (resizeAmountNormalised - lastResizeAmount) > bodyWidth) {\n                return;\n            }\n        }\n\n        this.lastResizeAmount = resizeAmountNormalised;\n\n        this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, \"uiColumnResized\");\n\n        if (finished) {\n            this.toggleColumnResizing(false);\n        }\n    }\n\n    private onResizeStart(shiftKey: boolean): void {\n        this.resizeStartWidth = this.column.getActualWidth();\n        this.lastResizeAmount = 0;\n        this.resizeWithShiftKey = shiftKey;\n\n        this.toggleColumnResizing(true);\n    }\n\n    public toggleColumnResizing(resizing: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?\n    private normaliseResizeAmount(dragChange: number): number {\n        let result = dragChange;\n\n        const notPinningLeft = this.pinned !== 'left';\n        const pinningRight = this.pinned === 'right';\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (notPinningLeft) {\n                result *= -1;\n            }\n        } else {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            if (pinningRight) {\n                result *= -1;\n            }\n        }\n\n        return result;\n    }\n\n}", "import { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired } from \"../../../context/context\";\nimport { HeaderCheckboxSelectionCallbackParams } from \"../../../entities/colDef\";\nimport { Column } from \"../../../entities/column\";\nimport { Events, SelectionEventSourceType } from \"../../../events\";\nimport { IRowModel } from \"../../../interfaces/iRowModel\";\nimport { ISelectionService } from \"../../../interfaces/iSelectionService\";\nimport { setAriaHidden, setAriaRole } from \"../../../utils/aria\";\nimport { AgCheckbox } from \"../../../widgets/agCheckbox\";\nimport { HeaderCellCtrl } from \"./headerCellCtrl\";\n\nexport class SelectAllFeature extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n\n    private cbSelectAllVisible = false;\n    private processingEventFromCheckbox = false;\n    private column: Column;\n    private headerCellCtrl: HeaderCellCtrl;\n\n    private cbSelectAll: AgCheckbox;\n\n    constructor(column: Column) {\n        super();\n        this.column = column;\n    }\n\n    public onSpaceKeyDown(e: KeyboardEvent): void {\n        const checkbox = this.cbSelectAll;\n        const eDocument = this.gridOptionsService.getDocument();\n\n        if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {\n            e.preventDefault();\n            checkbox.setValue(!checkbox.getValue());\n        }\n    }\n\n    public getCheckboxGui(): HTMLElement {\n        return this.cbSelectAll.getGui();\n    }\n\n    public setComp(ctrl: HeaderCellCtrl): void {\n        this.headerCellCtrl = ctrl;\n        this.cbSelectAll = this.createManagedBean(new AgCheckbox());\n        this.cbSelectAll.addCssClass('ag-header-select-all');\n        setAriaRole(this.cbSelectAll.getGui(), 'presentation');\n        this.showOrHideSelectAll();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));\n        this.addManagedListener(this.cbSelectAll, Events.EVENT_FIELD_VALUE_CHANGED, this.onCbSelectAll.bind(this));\n        setAriaHidden(this.cbSelectAll.getGui(), true);\n        this.cbSelectAll.getInputElement().setAttribute('tabindex', '-1');\n        this.refreshSelectAllLabel();\n    }\n\n    private onNewColumnsLoaded(): void {\n        this.showOrHideSelectAll();\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        if (!this.isAlive()) { return; }\n        this.showOrHideSelectAll();\n    }\n\n    private showOrHideSelectAll(): void {\n        this.cbSelectAllVisible = this.isCheckboxSelection();\n        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible, { skipAriaHidden: true });\n        if (this.cbSelectAllVisible) {\n            // in case user is trying this feature with the wrong model type\n            this.checkRightRowModelType('selectAllCheckbox');\n            // in case user is trying this feature with the wrong model type\n            this.checkSelectionType('selectAllCheckbox');\n            // make sure checkbox is showing the right state\n            this.updateStateOfCheckbox();\n        }\n        this.refreshSelectAllLabel();\n    }\n\n    private onModelChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private onSelectionChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private updateStateOfCheckbox(): void {\n        if (this.processingEventFromCheckbox) { return; }\n\n        this.processingEventFromCheckbox = true;\n\n        const allSelected = this.selectionService.getSelectAllState(\n            this.isFilteredOnly(),\n            this.isCurrentPageOnly()\n        );\n\n        this.cbSelectAll.setValue(allSelected!);\n        const hasNodesToSelect = this.selectionService.hasNodesToSelect(this.isFilteredOnly(), this.isCurrentPageOnly());\n        this.cbSelectAll.setDisabled(!hasNodesToSelect);\n        this.refreshSelectAllLabel();\n\n        this.processingEventFromCheckbox = false;\n    }\n\n    private refreshSelectAllLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const checked = this.cbSelectAll.getValue();\n        const ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');\n        const ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');\n\n\n        if (!this.cbSelectAllVisible) {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', null);\n        } else {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', `${ariaLabel} (${ariaStatus})`);\n        }\n\n        this.cbSelectAll.setInputAriaLabel(`${ariaLabel} (${ariaStatus})`);\n        this.headerCellCtrl.announceAriaDescription();\n    }\n\n    private checkSelectionType(feature: string): boolean {\n        const isMultiSelect = this.gridOptionsService.get('rowSelection') === 'multiple';\n\n        if (!isMultiSelect) {\n            console.warn(`AG Grid: ${feature} is only available if using 'multiple' rowSelection.`);\n            return false;\n        }\n        return true;\n    }\n\n    private checkRightRowModelType(feature: string): boolean {\n        const rowModelType = this.rowModel.getType();\n        const rowModelMatches = rowModelType === 'clientSide' || rowModelType === 'serverSide';\n\n        if (!rowModelMatches) {\n            console.warn(`AG Grid: ${feature} is only available if using 'clientSide' or 'serverSide' rowModelType, you are using ${rowModelType}.`);\n            return false;\n        }\n        return true;\n    }\n\n    private onCbSelectAll(): void {\n        if (this.processingEventFromCheckbox) { return; }\n        if (!this.cbSelectAllVisible) { return; }\n\n        const value = this.cbSelectAll.getValue();\n        const justFiltered = this.isFilteredOnly();\n        const justCurrentPage = this.isCurrentPageOnly();\n\n        let source: SelectionEventSourceType = 'uiSelectAll';\n        if (justCurrentPage) {\n            source = 'uiSelectAllCurrentPage';\n        } else if (justFiltered) {\n            source = 'uiSelectAllFiltered';\n        }\n\n        const params = {\n            source,\n            justFiltered,\n            justCurrentPage,\n        };\n        if (value) {\n            this.selectionService.selectAllRowNodes(params);\n        } else {\n            this.selectionService.deselectAllRowNodes(params);\n        }\n    }\n\n    private isCheckboxSelection(): boolean {\n        let result = this.column.getColDef().headerCheckboxSelection;\n\n        if (typeof result === 'function') {\n            const func = result as (params: HeaderCheckboxSelectionCallbackParams) => boolean;\n            const params: HeaderCheckboxSelectionCallbackParams = this.gridOptionsService.addGridCommonParams({\n                column: this.column,\n                colDef: this.column.getColDef()\n            });\n            result = func(params);\n        }\n\n        if (result) {\n            return this.checkRightRowModelType('headerCheckboxSelection') && this.checkSelectionType('headerCheckboxSelection');\n        }\n\n        return false;\n    }\n\n    private isFilteredOnly(): boolean {\n        return !!this.column.getColDef().headerCheckboxSelectionFilteredOnly;\n    }\n\n    private isCurrentPageOnly(): boolean {\n        return !!this.column.getColDef().headerCheckboxSelectionCurrentPageOnly;\n    }\n}\n", "import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { KeyCode } from '../../../constants/keyCode';\nimport { DragAndDropService, DragItem, DragSourceType } from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport { Events } from \"../../../eventKeys\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { ColumnSortState, getAriaSortState } from \"../../../utils/aria\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { ITooltipFeatureCtrl, TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { HeaderComp, IHeader, IHeaderParams } from \"./headerComp\";\nimport { ResizeFeature } from \"./resizeFeature\";\nimport { SelectAllFeature } from \"./selectAllFeature\";\nimport { getElementSize } from \"../../../utils/dom\";\nimport { SortDirection } from \"../../../entities/colDef\";\nimport { ColumnMoveHelper } from \"../../columnMoveHelper\";\nimport { HorizontalDirection } from \"../../../constants/direction\";\nimport { WithoutGridCommon } from \"../../../interfaces/iCommon\";\nimport { ColumnHeaderMouseOverEvent, ColumnHeaderMouseLeaveEvent } from \"../../../events\";\nimport { Beans } from \"../../../rendering/beans\";\n\nexport interface IHeaderCellComp extends IAbstractHeaderCellComp {\n    setWidth(width: string): void;\n    setAriaSort(sort?: ColumnSortState): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n    getUserCompInstance(): IHeader | undefined;\n}\n\ntype HeaderAriaDescriptionKey = 'filter' | 'menu' | 'sort' | 'selectAll' | 'filterButton';\n\nexport class HeaderCellCtrl extends AbstractHeaderCellCtrl<IHeaderCellComp, Column, ResizeFeature> {\n\n    private refreshFunctions: (() => void)[] = [];\n    private selectAllFeature: SelectAllFeature;\n\n    private sortable: boolean | null | undefined;\n    private displayName: string | null;\n    private draggable: boolean;\n    private menuEnabled: boolean;\n    private openFilterEnabled: boolean;\n    private dragSourceElement: HTMLElement | undefined;\n\n    private userCompDetails: UserCompDetails;\n\n    private userHeaderClasses: Set<string> = new Set();\n    private ariaDescriptionProperties = new Map<HeaderAriaDescriptionKey, string>();\n    private tooltipFeature: TooltipFeature | undefined;\n\n    constructor(column: Column, beans: Beans, parentRowCtrl: HeaderRowCtrl) {\n        super(column, beans, parentRowCtrl);\n        this.column = column;\n    }\n\n    public setComp(comp: IHeaderCellComp, eGui: HTMLElement, eResize: HTMLElement, eHeaderCompWrapper: HTMLElement): void {\n        this.comp = comp;\n\n        this.setGui(eGui);\n        this.updateState();\n        this.setupWidth();\n        this.setupMovingCss();\n        this.setupMenuClass();\n        this.setupSortableClass();\n        this.setupWrapTextClass();\n        this.refreshSpanHeaderHeight();\n        this.setupAutoHeight(eHeaderCompWrapper);\n        this.addColumnHoverListener();\n        this.setupFilterClass();\n        this.setupClassesFromColDef();\n        this.setupTooltip();\n        this.addActiveHeaderMouseListeners();\n        this.setupSelectAll();\n        this.setupUserComp();\n        this.refreshAria();\n\n        this.resizeFeature = this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));\n        this.createManagedBean(new HoverFeature([this.column], eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(new ManagedFocusFeature(\n            eGui,\n            {\n                shouldStopEventPropagation: e => this.shouldStopEventPropagation(e),\n                onTabKeyDown: () => null,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this),\n                onFocusOut: this.onFocusOut.bind(this)\n            }\n        ));\n\n        this.addResizeAndMoveKeyboardListeners();\n\n        this.addManagedPropertyListeners(['suppressMovableColumns', 'suppressMenuHide', 'suppressAggFuncInHeader'], this.refresh.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));\n    }\n\n    protected resizeHeader(delta: number, shiftKey: boolean): void {\n        if (!this.column.isResizable()) { return; }\n\n        const actualWidth = this.column.getActualWidth();\n        const minWidth = this.column.getMinWidth() ?? 0;\n        const maxWidth = this.column.getMaxWidth() ?? Number.MAX_SAFE_INTEGER;\n    \n        const newWidth = Math.min(Math.max(actualWidth + delta, minWidth), maxWidth);\n\n        this.beans.columnModel.setColumnWidths([{ key: this.column, newWidth }], shiftKey, true, 'uiColumnResized');\n    }\n\n    protected moveHeader(hDirection: HorizontalDirection): void {\n        const { eGui, column, gridOptionsService, ctrlsService } = this;\n        const pinned = this.getPinned();\n        const left = eGui.getBoundingClientRect().left;\n        const width = column.getActualWidth();\n        const isRtl = gridOptionsService.get('enableRtl');\n        const isLeft = hDirection === HorizontalDirection.Left !== isRtl;\n\n        const xPosition = ColumnMoveHelper.normaliseX(\n            isLeft ? (left - 20) : (left + width + 20),\n            pinned,\n            true,\n            gridOptionsService,\n            ctrlsService\n        );\n\n        ColumnMoveHelper.attemptMoveColumns({\n            allMovingColumns: [column],\n            isFromHeader: true,\n            hDirection,\n            xPosition,\n            pinned,\n            fromEnter: false,\n            fakeEvent: false,\n            gridOptionsService,\n            columnModel: this.beans.columnModel\n        });\n\n        ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(column, 'auto');\n    }\n\n    private setupUserComp(): void {\n        const compDetails = this.lookupUserCompDetails();\n        this.setCompDetails(compDetails);\n    }\n\n    private setCompDetails(compDetails: UserCompDetails): void {\n        this.userCompDetails = compDetails;\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private lookupUserCompDetails(): UserCompDetails {\n        const params = this.createParams();\n        const colDef = this.column.getColDef();\n        return this.userComponentFactory.getHeaderCompDetails(colDef, params)!;\n    }\n\n    private createParams(): IHeaderParams {\n\n        const params: IHeaderParams = this.gridOptionsService.addGridCommonParams({\n            column: this.column,\n            displayName: this.displayName!,\n            enableSorting: this.column.isSortable(),\n            enableMenu: this.menuEnabled,\n            enableFilterButton: this.openFilterEnabled && this.menuService.isHeaderFilterButtonEnabled(this.column),\n            enableFilterIcon: !this.openFilterEnabled || this.menuService.isLegacyMenuEnabled(),\n            showColumnMenu: (buttonElement: HTMLElement) => {\n                this.menuService.showColumnMenu({\n                    column: this.column,\n                    buttonElement,\n                    positionBy: 'button'\n                });\n            },\n            showColumnMenuAfterMouseClick: (mouseEvent: MouseEvent | Touch) => {\n                this.menuService.showColumnMenu({\n                    column: this.column,\n                    mouseEvent,\n                    positionBy: 'mouse'\n                });\n            },\n            showFilter: (buttonElement: HTMLElement) => {\n                this.menuService.showFilterMenu({\n                    column: this.column,\n                    buttonElement: buttonElement,\n                    containerType: 'columnFilter',\n                    positionBy: 'button'\n                })\n            },\n            progressSort: (multiSort?: boolean) => {\n                this.beans.sortController.progressSort(this.column, !!multiSort, \"uiColumnSorted\");\n            },\n            setSort: (sort: SortDirection, multiSort?: boolean) => {\n                this.beans.sortController.setSortForColumn(this.column, sort, !!multiSort, \"uiColumnSorted\");\n            },\n            eGridHeader: this.getGui(),\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setupTooltip(value, shouldDisplayTooltip);\n            }\n        });\n\n        return params;\n    }\n\n    private setupSelectAll(): void {\n        this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));\n        this.selectAllFeature.setComp(this);\n    }\n\n    public getSelectAllGui(): HTMLElement {\n        return this.selectAllFeature.getCheckboxGui();\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        if (e.key === KeyCode.SPACE) {\n            this.selectAllFeature.onSpaceKeyDown(e);\n        }\n        if (e.key === KeyCode.ENTER) {\n            this.onEnterKeyDown(e);\n        }\n        if (e.key === KeyCode.DOWN && e.altKey) {\n            this.showMenuOnKeyPress(e, false);\n        }\n    }\n\n    private onEnterKeyDown(e: KeyboardEvent): void {\n        if (e.ctrlKey || e.metaKey) {\n            this.showMenuOnKeyPress(e, true);\n        } else if (this.sortable) {\n            const multiSort = e.shiftKey;\n            this.beans.sortController.progressSort(this.column, multiSort, \"uiColumnSorted\");\n        }\n    }\n\n    private showMenuOnKeyPress(e: KeyboardEvent, isFilterShortcut: boolean): void {\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp || !(headerComp instanceof HeaderComp)) { return; }\n\n        // the header comp knows what features are enabled, so let it handle the shortcut\n        if (headerComp.onMenuKeyboardShortcut(isFilterShortcut)) {\n            e.preventDefault();\n        }\n    }\n\n    private onFocusIn(e: FocusEvent) {\n        if (!this.getGui().contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.focusService.setFocusedHeader(rowIndex, this.column);\n            this.announceAriaDescription();\n        }\n\n        if (this.focusService.isKeyboardMode()) {\n            this.setActiveHeader(true);\n        }\n    }\n\n    private onFocusOut(e: FocusEvent) {\n        if (\n            this.getGui().contains(e.relatedTarget as HTMLElement)\n        ) { return; }\n\n        this.setActiveHeader(false);\n    }\n\n    private setupTooltip(value?: string, shouldDisplayTooltip?: () => boolean): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n        const eGui = this.eGui;\n        const colDef = this.column.getColDef();\n\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !colDef.headerComponent) {\n            shouldDisplayTooltip = () => {\n                const textEl = eGui.querySelector('.ag-header-cell-text');\n                if (!textEl) { return true; }\n\n                return textEl.scrollWidth > textEl.clientWidth;\n            }\n        }\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getGui: () => eGui,\n            getLocation: () => 'header',\n            getTooltipValue: () => {\n                if (value != null) {\n                    return value;\n                }\n\n                const res = this.column.getColDef().headerTooltip;\n                return res;\n            },\n            shouldDisplayTooltip\n        };\n\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl));\n        this.refreshFunctions.push(() => tooltipFeature.refreshToolTip());\n    }\n\n    private setupClassesFromColDef(): void {\n        const refreshHeaderClasses = () => {\n            const colDef = this.column.getColDef();\n            const classes = CssClassApplier.getHeaderClassesFromColDef(colDef, this.gridOptionsService, this.column, null);\n\n            const oldClasses = this.userHeaderClasses;\n            this.userHeaderClasses = new Set(classes);\n\n            classes.forEach(c => {\n                if (oldClasses.has(c)) {\n                    // class already added, no need to apply it, but remove from old set\n                    oldClasses.delete(c);\n                } else {\n                    // class new since last time, so apply it\n                    this.comp.addOrRemoveCssClass(c, true);\n                }\n            });\n\n            // now old set only has classes that were applied last time, but not this time, so remove them\n            oldClasses.forEach(c => this.comp.addOrRemoveCssClass(c, false));\n        };\n\n        this.refreshFunctions.push(refreshHeaderClasses);\n        refreshHeaderClasses();\n    }\n\n    public setDragSource(eSource: HTMLElement | undefined): void {\n        this.dragSourceElement = eSource;\n        this.removeDragSource();\n\n        if (!eSource || !this.draggable) { return; }\n\n        const { column, beans, displayName, dragAndDropService, gridOptionsService } = this;\n        const { columnModel } = beans;\n\n        let hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource = this.dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eSource,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(column),\n            dragItemName: displayName,\n            onDragStarted: () => {\n                hideColumnOnExit = !gridOptionsService.get('suppressDragLeaveHidesColumns');\n                column.setMoving(true, \"uiColumnMoved\");\n            },\n            onDragStopped: () => column.setMoving(false, \"uiColumnMoved\"),\n            onGridEnter: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter(col => !col.getColDef().lockVisible) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, true, \"uiColumnMoved\");\n                }\n            },\n            onGridExit: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter(col => !col.getColDef().lockVisible) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, false, \"uiColumnMoved\");\n                }\n            },\n        };\n\n        dragAndDropService.addDragSource(dragSource, true);\n    }\n\n    private createDragItem(column: Column): DragItem {\n        const visibleState: { [key: string]: boolean; } = {};\n        visibleState[column.getId()] = column.isVisible();\n\n        return {\n            columns: [column],\n            visibleState: visibleState\n        };\n    }\n\n    private updateState(): void {\n        this.menuEnabled = this.menuService.isColumnMenuInHeaderEnabled(this.column);\n        this.openFilterEnabled = this.menuService.isFilterMenuInHeaderEnabled(this.column);\n        this.sortable = this.column.isSortable();\n        this.displayName = this.calculateDisplayName();\n        this.draggable = this.workOutDraggable();\n    }\n\n    public addRefreshFunction(func: () => void): void {\n        this.refreshFunctions.push(func);\n    }\n\n    private refresh(): void {\n        this.updateState();\n        this.refreshHeaderComp();\n        this.refreshAria();\n        this.refreshFunctions.forEach(f => f());\n    }\n\n    private refreshHeaderComp(): void {\n        const newCompDetails = this.lookupUserCompDetails();\n\n        const compInstance = this.comp.getUserCompInstance();\n\n        // only try refresh if old comp exists adn it is the correct type\n        const attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;\n\n        const headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;\n\n        if (headerCompRefreshed) {\n            // we do this as a refresh happens after colDefs change, and it's possible the column has had it's\n            // draggable property toggled. no need to call this if not refreshing, as setDragSource is done\n            // as part of appendHeaderComp\n            this.setDragSource(this.dragSourceElement);\n        } else {\n            this.setCompDetails(newCompDetails);\n        }\n    }\n\n    public attemptHeaderCompRefresh(params: IHeaderParams): boolean {\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp) { return false; }\n\n        // if no refresh method, then we want to replace the headerComp\n        if (!headerComp.refresh) { return false; }\n\n        const res = headerComp.refresh(params);\n\n        return res;\n    }\n\n    private calculateDisplayName(): string | null {\n        return this.beans.columnModel.getDisplayNameForColumn(this.column, 'header', true);\n    }\n\n    private checkDisplayName(): void {\n        // display name can change if aggFunc different, eg sum(Gold) is now max(Gold)\n        if (this.displayName !== this.calculateDisplayName()) {\n            this.refresh();\n        }\n    }\n\n    private workOutDraggable(): boolean {\n        const colDef = this.column.getColDef();\n        const isSuppressMovableColumns = this.gridOptionsService.get('suppressMovableColumns');\n\n        const colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;\n\n        // we should still be allowed drag the column, even if it can't be moved, if the column\n        // can be dragged to a rowGroup or pivot drop zone\n        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;\n    }\n\n    private onColumnRowGroupChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private onColumnPivotChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private onColumnValueChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private setupWidth(): void {\n        const listener = () => {\n            const columnWidth = this.column.getActualWidth();\n            this.comp.setWidth(`${columnWidth}px`);\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);\n        listener();\n    }\n\n    private setupMovingCss(): void {\n        const listener = () => {\n            // this is what makes the header go dark when it is been moved (gives impression to\n            // user that the column was picked up).\n            this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);\n        listener();\n    }\n\n    private setupMenuClass(): void {\n        const listener = () => {\n            this.comp.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);\n        listener();\n    }\n\n    private setupSortableClass(): void {\n        const updateSortableCssClass = () => {\n            this.comp.addOrRemoveCssClass('ag-header-cell-sortable', !!this.sortable);\n        };\n\n        updateSortableCssClass();\n\n        this.addRefreshFunction(updateSortableCssClass);\n        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, this.refreshAriaSort.bind(this));\n    }\n\n    private setupFilterClass(): void {\n        const listener = () => {\n            const isFilterActive = this.column.isFilterActive();\n            this.comp.addOrRemoveCssClass('ag-header-cell-filtered', isFilterActive);\n            this.refreshAria();\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);\n        listener();\n    }\n\n    private setupWrapTextClass() {\n        const listener = () => {\n            const wrapText = !!this.column.getColDef().wrapHeaderText;\n            this.comp.addOrRemoveCssClass('ag-header-cell-wrap-text', wrapText);\n        };\n        listener();\n        this.addRefreshFunction(listener);\n    }\n\n    protected onDisplayedColumnsChanged(): void {\n        super.onDisplayedColumnsChanged();\n        if (!this.isAlive()) { return; }\n        this.onHeaderHeightChanged();\n    }\n\n    private onHeaderHeightChanged() {\n        this.refreshSpanHeaderHeight();\n    }\n\n    private refreshSpanHeaderHeight() {\n        const { eGui, column, comp, beans } = this;\n        if (!column.isSpanHeaderHeight()) {\n            eGui.style.removeProperty('top');\n            eGui.style.removeProperty('height');\n            comp.addOrRemoveCssClass('ag-header-span-height', false);\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\n            return;\n        }\n\n        const { numberOfParents, isSpanningTotal } = this.column.getColumnGroupPaddingInfo();\n\n        comp.addOrRemoveCssClass('ag-header-span-height', numberOfParents > 0);\n\n        const { columnModel } = beans;\n\n        const headerHeight = columnModel.getColumnHeaderRowHeight();\n        if (numberOfParents === 0) {\n            // if spanning has stopped then need to reset these values.\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\n            eGui.style.setProperty('top', `0px`);\n            eGui.style.setProperty('height', `${headerHeight}px`);\n            return;\n        }\n\n        comp.addOrRemoveCssClass('ag-header-span-total', isSpanningTotal);\n\n        const pivotMode = columnModel.isPivotMode();\n        const groupHeaderHeight = pivotMode\n            ? columnModel.getPivotGroupHeaderHeight()\n            : columnModel.getGroupHeaderHeight();\n\n        const extraHeight = numberOfParents * groupHeaderHeight;\n\n        eGui.style.setProperty('top', `${-extraHeight}px`);\n        eGui.style.setProperty('height', `${headerHeight + extraHeight}px`);\n    }\n\n    private setupAutoHeight(wrapperElement: HTMLElement) {\n        const { columnModel, resizeObserverService } = this.beans;\n        const measureHeight = (timesCalled: number) => {\n            if (!this.isAlive()) { return; }\n\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = getElementSize(this.getGui());\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\n\n            const wrapperHeight = wrapperElement.offsetHeight;\n            const autoHeight = wrapperHeight + extraHeight;\n\n            if (timesCalled < 5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gridOptionsService.getDocument();\n                const notYetInDom = !doc || !doc.contains(wrapperElement);\n\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight == 0;\n\n                if (notYetInDom || possiblyNoContentYet) {\n                    window.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n            columnModel.setColumnHeaderHeight(this.column, autoHeight);\n        };\n\n        let isMeasuring = false;\n        let stopResizeObserver: (() => void) | undefined;\n\n        const checkMeasuring = () => {\n            const newValue = this.column.isAutoHeaderHeight();\n\n            if (newValue && !isMeasuring) {\n                startMeasuring();\n            }\n            if (!newValue && isMeasuring) {\n                stopMeasuring();\n            }\n        };\n\n        const startMeasuring = () => {\n            isMeasuring = true;\n            measureHeight(0);\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', true);\n            stopResizeObserver = resizeObserverService.observeResize(wrapperElement, () => measureHeight(0));\n        };\n\n        const stopMeasuring = () => {\n            isMeasuring = false;\n            if (stopResizeObserver) {\n                stopResizeObserver();\n            }\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', false);\n            stopResizeObserver = undefined;\n        };\n\n        checkMeasuring();\n\n        this.addDestroyFunc(() => stopMeasuring());\n\n        // In theory we could rely on the resize observer for everything - but since it's debounced\n        // it can be a little janky for smooth movement. in this case its better to react to our own events\n        // And unfortunately we cant _just_ rely on our own events, since custom components can change whenever\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, () => isMeasuring && measureHeight(0));\n        // Displaying the sort icon changes the available area for text, so sort changes can affect height\n        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, () => {\n            // Rendering changes for sort, happen after the event... not ideal\n            if (isMeasuring) {\n                window.setTimeout(() => measureHeight(0));\n            }\n        });\n        this.addRefreshFunction(checkMeasuring);\n    }\n\n    private refreshAriaSort(): void {\n        if (this.sortable) {\n            const translate = this.localeService.getLocaleTextFunc();\n            const sort = this.beans.sortController.getDisplaySortForColumn(this.column) || null;\n            this.comp.setAriaSort(getAriaSortState(sort));\n            this.setAriaDescriptionProperty('sort', translate('ariaSortableColumn', 'Press ENTER to sort'));\n        } else {\n            this.comp.setAriaSort();\n            this.setAriaDescriptionProperty('sort', null);\n        }\n    }\n\n    private refreshAriaMenu(): void {\n        if (this.menuEnabled) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.setAriaDescriptionProperty('menu', translate('ariaMenuColumn', 'Press ALT DOWN to open column menu'));\n        } else {\n            this.setAriaDescriptionProperty('menu', null);\n        }\n    }\n\n    private refreshAriaFilterButton(): void {\n        if (this.openFilterEnabled && !this.menuService.isLegacyMenuEnabled()) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.setAriaDescriptionProperty('filterButton', translate('ariaFilterColumn', 'Press CTRL ENTER to open filter'));\n        } else {\n            this.setAriaDescriptionProperty('filterButton', null);\n        }\n    }\n\n    private refreshAriaFiltered(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const isFilterActive = this.column.isFilterActive();\n        if (isFilterActive) {\n            this.setAriaDescriptionProperty('filter', translate('ariaColumnFiltered', 'Column Filtered'));\n        } else {\n            this.setAriaDescriptionProperty('filter', null);\n        }\n    }\n\n    public setAriaDescriptionProperty(property: HeaderAriaDescriptionKey, value: string | null): void {\n        if (value != null) {\n            this.ariaDescriptionProperties.set(property, value);\n        } else {\n            this.ariaDescriptionProperties.delete(property);\n        }\n    }\n\n    public announceAriaDescription(): void {\n        const eDocument = this.beans.gridOptionsService.getDocument();\n        if (!this.eGui.contains(eDocument.activeElement)) { return; }\n        const ariaDescription = \n            Array.from(this.ariaDescriptionProperties.keys())\n                // always announce the filter description first\n                .sort((a: string, b: string) => a === 'filter' ? - 1 : (b.charCodeAt(0) - a.charCodeAt(0)))\n                .map((key: HeaderAriaDescriptionKey) => this.ariaDescriptionProperties.get(key))\n                .join('. ');\n\n        this.beans.ariaAnnouncementService.announceValue(ariaDescription);\n    }\n\n    private refreshAria(): void {\n        this.refreshAriaSort();\n        this.refreshAriaMenu();\n        this.refreshAriaFilterButton();\n        this.refreshAriaFiltered();\n    }\n\n    private addColumnHoverListener(): void {\n        const listener = () => {\n            if (!this.gridOptionsService.get('columnHoverHighlight')) { return; }\n            const isHovered = this.beans.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', isHovered);\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);\n        listener();\n    }\n\n    public getColId(): string {\n        return this.column.getColId();\n    }\n\n    private addActiveHeaderMouseListeners(): void {\n        const listener = (e: MouseEvent) => this.handleMouseOverChange(e.type === 'mouseenter');\n        const clickListener = () => this.dispatchColumnMouseEvent(Events.EVENT_COLUMN_HEADER_CLICKED, this.column);\n        const contextMenuListener = (event: MouseEvent) => this.handleContextMenuMouseEvent(event, undefined, this.column);\n\n        this.addManagedListener(this.getGui(), 'mouseenter', listener);\n        this.addManagedListener(this.getGui(), 'mouseleave', listener);\n        this.addManagedListener(this.getGui(), 'click', clickListener);\n        this.addManagedListener(this.getGui(), 'contextmenu', contextMenuListener);\n    }\n\n    private handleMouseOverChange(isMouseOver: boolean): void {\n        this.setActiveHeader(isMouseOver);\n        const eventType = isMouseOver ?\n            Events.EVENT_COLUMN_HEADER_MOUSE_OVER :\n            Events.EVENT_COLUMN_HEADER_MOUSE_LEAVE;\n\n        const event: WithoutGridCommon<ColumnHeaderMouseOverEvent> | WithoutGridCommon<ColumnHeaderMouseLeaveEvent> = {\n            type: eventType,\n            column: this.column,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setActiveHeader(active: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-header-active', active);\n    }\n\n    public getAnchorElementForMenu(isFilter?: boolean): HTMLElement {\n        const headerComp = this.comp.getUserCompInstance();\n        if (headerComp instanceof HeaderComp) {\n            return headerComp.getAnchorElementForMenu(isFilter);\n        }\n        return this.getGui();\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        (this.refreshFunctions as any) = null;\n        (this.selectAllFeature as any) = null;\n        (this.dragSourceElement as any) = null;\n        (this.userCompDetails as any) = null;\n        (this.userHeaderClasses as any) = null;\n        (this.ariaDescriptionProperties as any) = null;\n    }\n}\n", "import { ColumnEventType } from \"../../../events\";\nimport { ColumnModel, ColumnResizeSet } from \"../../../columns/columnModel\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { Column, ColumnPinnedType } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { AutoWidthCalculator } from \"../../../rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\nimport { IHeaderResizeFeature } from \"../abstractCell/abstractHeaderCellCtrl\";\n\ninterface ColumnSizeAndRatios {\n    columnsToResize: Column[];\n    resizeStartWidth: number;\n    resizeRatios: number[];\n    groupAfterColumns?: Column[];\n    groupAfterStartWidth?: number;\n    groupAfterRatios?: number[];\n}\nexport class GroupResizeFeature extends BeanStub implements IHeaderResizeFeature {\n\n    private eResize: HTMLElement;\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n    private pinned: ColumnPinnedType;\n\n    private resizeCols?: Column[];\n    private resizeStartWidth: number;\n    private resizeRatios?: number[];\n\n    private resizeTakeFromCols?: Column[];\n    private resizeTakeFromStartWidth?: number;\n    private resizeTakeFromRatios?: number[];\n\n    @Autowired('horizontalResizeService') private readonly horizontalResizeService: HorizontalResizeService;\n    @Autowired('autoWidthCalculator') private readonly autoWidthCalculator: AutoWidthCalculator;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    constructor(comp: IHeaderGroupCellComp, eResize: HTMLElement,  pinned: ColumnPinnedType, columnGroup: ColumnGroup) {\n        super();\n\n        this.eResize = eResize;\n        this.comp = comp;\n        this.pinned = pinned;\n        this.columnGroup = columnGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        if (!this.columnGroup.isResizable()) {\n            this.comp.setResizableDisplayed(false);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gridOptionsService.get('suppressAutoSize')) {\n            const skipHeaderOnAutoSize = this.gridOptionsService.get('skipHeaderOnAutoSize');\n\n            this.eResize.addEventListener('dblclick', () => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                const leafCols = this.columnGroup.getDisplayedLeafColumns();\n\n                leafCols.forEach((column: Column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnModel.autoSizeColumns({\n                        columns: keys,\n                        skipHeader: skipHeaderOnAutoSize,\n                        stopAtGroup: this.columnGroup,\n                        source: 'uiColumnResized'\n                    });\n                }\n\n                this.resizeLeafColumnsToFit('uiColumnResized');\n            });\n        }\n    }\n\n    private onResizeStart(shiftKey: boolean): void {\n        const initialValues = this.getInitialValues(shiftKey);\n        this.storeLocalValues(initialValues);\n        this.toggleColumnResizing(true);\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any, source: ColumnEventType = 'uiColumnResized'): void {\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n        const width = this.resizeStartWidth + resizeAmountNormalised;\n\n        this.resizeColumnsFromLocalValues(width, source, finished);\n    }\n\n    public getInitialValues(shiftKey?: boolean): ColumnSizeAndRatios {\n        const columnsToResize = this.getColumnsToResize();\n        const resizeStartWidth = this.getInitialSizeOfColumns(columnsToResize);\n        const resizeRatios = this.getSizeRatiosOfColumns(columnsToResize, resizeStartWidth);\n\n        const columnSizeAndRatios: ColumnSizeAndRatios = {\n            columnsToResize,\n            resizeStartWidth,\n            resizeRatios\n        };\n\n        let groupAfter: ColumnGroup | null = null;\n\n        if (shiftKey) {\n            groupAfter = this.columnModel.getDisplayedGroupAfter(this.columnGroup);\n        }\n\n        if (groupAfter) {\n            const takeFromLeafCols = groupAfter.getDisplayedLeafColumns();\n            const groupAfterColumns = columnSizeAndRatios.groupAfterColumns = takeFromLeafCols.filter(col => col.isResizable());\n            const groupAfterStartWidth = columnSizeAndRatios.groupAfterStartWidth = this.getInitialSizeOfColumns(groupAfterColumns);\n            columnSizeAndRatios.groupAfterRatios = this.getSizeRatiosOfColumns(groupAfterColumns, groupAfterStartWidth);\n        } else {\n            columnSizeAndRatios.groupAfterColumns = undefined;\n            columnSizeAndRatios.groupAfterStartWidth = undefined;\n            columnSizeAndRatios.groupAfterRatios = undefined;\n        }\n\n        return columnSizeAndRatios;\n    }\n\n    private storeLocalValues(initialValues: ColumnSizeAndRatios): void {\n        const {\n            columnsToResize, resizeStartWidth, resizeRatios,\n            groupAfterColumns, groupAfterStartWidth, groupAfterRatios\n        } = initialValues;\n\n        this.resizeCols = columnsToResize;\n        this.resizeStartWidth = resizeStartWidth;\n        this.resizeRatios = resizeRatios;\n\n        this.resizeTakeFromCols = groupAfterColumns;\n        this.resizeTakeFromStartWidth = groupAfterStartWidth;\n        this.resizeTakeFromRatios = groupAfterRatios;\n    }\n\n    private clearLocalValues(): void {\n        this.resizeCols = undefined;\n        this.resizeRatios = undefined;\n\n        this.resizeTakeFromCols = undefined;\n        this.resizeTakeFromRatios = undefined;\n    }\n\n    public resizeLeafColumnsToFit(source: ColumnEventType): void {\n        const preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);\n        const initialValues = this.getInitialValues();\n\n        if (preferredSize > initialValues.resizeStartWidth) {\n            this.resizeColumns(initialValues, preferredSize, source, true);\n        }\n    }\n\n    private resizeColumnsFromLocalValues(totalWidth: number, source: ColumnEventType, finished: boolean = true): void {\n        if (!this.resizeCols || !this.resizeRatios) { return; }\n\n        const initialValues: ColumnSizeAndRatios = {\n            columnsToResize: this.resizeCols,\n            resizeStartWidth: this.resizeStartWidth,\n            resizeRatios: this.resizeRatios,\n            groupAfterColumns: this.resizeTakeFromCols ?? undefined,\n            groupAfterStartWidth: this.resizeTakeFromStartWidth ?? undefined,\n            groupAfterRatios: this.resizeTakeFromRatios ?? undefined\n        }\n\n        this.resizeColumns(initialValues, totalWidth, source, finished);\n    }\n\n    public resizeColumns(initialValues: ColumnSizeAndRatios, totalWidth: number, source: ColumnEventType, finished: boolean = true): void {\n        const {\n            columnsToResize, resizeStartWidth, resizeRatios,\n            groupAfterColumns, groupAfterStartWidth, groupAfterRatios\n        } = initialValues;\n\n        const resizeSets: ColumnResizeSet[] = [];\n\n        resizeSets.push({\n            columns: columnsToResize,\n            ratios: resizeRatios,\n            width: totalWidth\n        });\n\n        if (groupAfterColumns) {\n            const diff = totalWidth - resizeStartWidth;\n            resizeSets.push({\n                columns: groupAfterColumns,\n                ratios: groupAfterRatios!,\n                width: groupAfterStartWidth! - diff\n            });\n        }\n\n        this.columnModel.resizeColumnSets({\n            resizeSets,\n            finished,\n            source: source\n        });\n\n        if (finished) {\n            this.toggleColumnResizing(false);\n        }\n    }\n\n    public toggleColumnResizing(resizing: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\n    }\n\n    private getColumnsToResize(): Column[] {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        return leafCols.filter(col => col.isResizable());\n    }\n\n    private getInitialSizeOfColumns(columns: Column[]): number {\n        return columns.reduce(\n            (totalWidth: number, column: Column) => totalWidth + column.getActualWidth(), 0\n        );\n    }\n\n    private getSizeRatiosOfColumns(columns: Column[], initialSizeOfColumns: number): number[] {\n        return columns.map(column => column.getActualWidth() / initialSizeOfColumns);\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== 'left') {\n                result *= -1;\n            }\n        } else if (this.pinned === 'right') {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        this.clearLocalValues();\n    }\n}", "import { BeanStub } from \"../../../context/beanStub\";\nimport { PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\n\nexport class GroupWidthFeature extends BeanStub {\n\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n\n    // the children can change, we keep destroy functions related to listening to the children here\n    private removeChildListenersFuncs: (() => void)[] = [];\n\n    constructor(comp: IHeaderGroupCellComp, columnGroup: ColumnGroup) {\n        super();\n        this.columnGroup = columnGroup;\n        this.comp = comp;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n\n        this.onWidthChanged();\n\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    }\n\n    private addListenersToChildrenColumns(): void {\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach(column => {\n            column.addEventListener('widthChanged', widthChangedListener);\n            column.addEventListener('visibleChanged', widthChangedListener);\n            this.removeChildListenersFuncs.push(() => {\n                column.removeEventListener('widthChanged', widthChangedListener);\n                column.removeEventListener('visibleChanged', widthChangedListener);\n            });\n        });\n    }\n\n    private removeListenersOnChildrenColumns(): void {\n        this.removeChildListenersFuncs.forEach(func => func());\n        this.removeChildListenersFuncs = [];\n    }\n\n    private onDisplayedChildrenChanged(): void {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n\n    private onWidthChanged(): void {\n        const columnWidth = this.columnGroup.getActualWidth();\n        this.comp.setWidth(`${columnWidth}px`);\n        this.comp.addOrRemoveCssClass('ag-hidden', columnWidth === 0);\n    }\n\n}\n", "import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { KeyCode } from '../../../constants/keyCode';\nimport {\n    DragAndDropService,\n    DragItem,\n    DragSourceType\n} from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport {\n    ColumnEventType,\n    ColumnHeaderMouseLeaveEvent,\n    ColumnHeaderMouseOverEvent,\n    Events\n} from \"../../../events\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { last, removeFromArray } from \"../../../utils/array\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { ITooltipFeatureCtrl, TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { GroupResizeFeature } from \"./groupResizeFeature\";\nimport { GroupWidthFeature } from \"./groupWidthFeature\";\nimport { IHeaderGroupComp, IHeaderGroupParams } from \"./headerGroupComp\";\nimport { HorizontalDirection } from \"../../../constants/direction\";\nimport { ColumnMoveHelper } from \"../../columnMoveHelper\";\nimport { HeaderPosition } from \"../../common/headerPosition\";\nimport { WithoutGridCommon } from \"../../../interfaces/iCommon\";\nimport { Beans } from \"../../../rendering/beans\";\n\nexport interface IHeaderGroupCellComp extends IAbstractHeaderCellComp {\n    setResizableDisplayed(displayed: boolean): void;\n    setWidth(width: string): void;\n    setAriaExpanded(expanded: 'true' | 'false' | undefined): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n    getUserCompInstance(): IHeaderGroupComp | undefined;\n}\n\nexport class HeaderGroupCellCtrl extends AbstractHeaderCellCtrl<IHeaderGroupCellComp, ColumnGroup, GroupResizeFeature> {\n\n    private expandable: boolean;\n    private displayName: string | null;\n    private tooltipFeature: TooltipFeature | undefined;\n\n    constructor(columnGroup: ColumnGroup, beans: Beans, parentRowCtrl: HeaderRowCtrl) {\n        super(columnGroup, beans, parentRowCtrl);\n        this.column = columnGroup;\n    }\n\n    public setComp(comp: IHeaderGroupCellComp, eGui: HTMLElement, eResize: HTMLElement): void {\n        this.comp = comp;\n        this.setGui(eGui);\n\n        this.displayName = this.beans.columnModel.getDisplayNameForColumnGroup(this.column, 'header');\n\n        this.addClasses();\n        this.setupMovingCss();\n        this.setupExpandable();\n        this.setupTooltip();\n        this.addDestroyFunc(() => {\n            if (this.tooltipFeature) {\n                this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n            }\n        })\n        this.setupUserComp();\n        this.addHeaderMouseListeners();\n\n        const pinned = this.getParentRowCtrl().getPinned();\n        const leafCols = this.column.getProvidedColumnGroup().getLeafColumns();\n\n        this.createManagedBean(new HoverFeature(leafCols, eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(new GroupWidthFeature(comp, this.column));\n        this.resizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.column));\n\n        this.createManagedBean(new ManagedFocusFeature(\n            eGui,\n            {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: () => undefined,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this)\n            }\n        ));\n\n        this.addManagedPropertyListener(Events.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED, this.onSuppressColMoveChange);\n        this.addResizeAndMoveKeyboardListeners();\n    }\n\n    protected resizeHeader(delta: number, shiftKey: boolean): void {\n        // check to avoid throwing when a component has not been setup yet (React 18)\n        if (!this.resizeFeature) { return; }\n\n        const initialValues = this.resizeFeature.getInitialValues(shiftKey);\n\n        this.resizeFeature.resizeColumns(initialValues, initialValues.resizeStartWidth + delta, 'uiColumnResized', true);\n    }\n\n    protected moveHeader(hDirection: HorizontalDirection): void {\n        const { beans, eGui, column, gridOptionsService, ctrlsService } = this;\n        const isRtl = gridOptionsService.get('enableRtl');\n        const isLeft = hDirection === HorizontalDirection.Left;\n\n        const pinned = this.getPinned();\n        const rect = eGui.getBoundingClientRect();\n        const left = rect.left;\n        const width = rect.width;\n\n        const xPosition = ColumnMoveHelper.normaliseX(\n            isLeft !== isRtl ? (left - 20) : (left + width + 20),\n            pinned,\n            true,\n            gridOptionsService,\n            ctrlsService\n        );\n\n        const id = column.getGroupId();\n        const headerPosition = this.focusService.getFocusedHeader();\n\n        ColumnMoveHelper.attemptMoveColumns({\n            allMovingColumns: this.column.getLeafColumns(),\n            isFromHeader: true,\n            hDirection,\n            xPosition,\n            pinned,\n            fromEnter: false,\n            fakeEvent: false,\n            gridOptionsService: gridOptionsService,\n            columnModel: beans.columnModel\n        });\n\n        const displayedLeafColumns = column.getDisplayedLeafColumns();\n        const targetColumn = isLeft ? displayedLeafColumns[0] : last(displayedLeafColumns);\n\n        this.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(targetColumn, 'auto');\n\n        if (!this.isAlive() && headerPosition) {\n            this.restoreFocus(id, column, headerPosition);\n        }\n    }\n\n    private restoreFocus(groupId: any, previousColumnGroup: ColumnGroup ,previousPosition: HeaderPosition): void {\n        const leafCols = previousColumnGroup.getLeafColumns();\n        if (!leafCols.length) { return; }\n        const parent: ColumnGroup = leafCols[0].getParent();\n        if (!parent) { return; }\n\n        const newColumnGroup = this.findGroupWidthId(parent, groupId)\n        if (newColumnGroup) {\n            this.focusService.focusHeaderPosition({\n                headerPosition: {\n                    ...previousPosition,\n                column: newColumnGroup\n                }\n            });\n        }\n    }\n\n    private findGroupWidthId(columnGroup: ColumnGroup, id: any): ColumnGroup | null {\n        while (columnGroup) {\n            if (columnGroup.getGroupId() === id) { return columnGroup; }\n            columnGroup = columnGroup.getParent();\n        }\n\n        return null;\n    }\n\n    public resizeLeafColumnsToFit(source: ColumnEventType): void {\n        // check to avoid throwing when a component has not been setup yet (React 18)\n        if (!this.resizeFeature) { return; }\n\n        this.resizeFeature.resizeLeafColumnsToFit(source);\n    }\n\n    private setupUserComp(): void {\n        const params: IHeaderGroupParams = this.gridOptionsService.addGridCommonParams({\n            displayName: this.displayName!,\n            columnGroup: this.column,\n            setExpanded: (expanded: boolean) => {\n                this.beans.columnModel.setColumnGroupOpened(this.column.getProvidedColumnGroup(), expanded, \"gridInitializing\");\n            },\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setupTooltip(value, shouldDisplayTooltip);\n            }\n        });\n\n        const compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params)!;\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private addHeaderMouseListeners(): void {\n        const listener = (e: MouseEvent) => this.handleMouseOverChange(e.type === 'mouseenter');\n        const clickListener = () => this.dispatchColumnMouseEvent(Events.EVENT_COLUMN_HEADER_CLICKED, this.column.getProvidedColumnGroup());\n        const contextMenuListener = (event: MouseEvent) => this.handleContextMenuMouseEvent(event, undefined, this.column.getProvidedColumnGroup());\n\n        this.addManagedListener(this.getGui(), 'mouseenter', listener);\n        this.addManagedListener(this.getGui(), 'mouseleave', listener);\n        this.addManagedListener(this.getGui(), 'click', clickListener);\n        this.addManagedListener(this.getGui(), 'contextmenu', contextMenuListener);\n    }\n\n    private handleMouseOverChange(isMouseOver: boolean): void {\n        const eventType = isMouseOver ?\n            Events.EVENT_COLUMN_HEADER_MOUSE_OVER :\n            Events.EVENT_COLUMN_HEADER_MOUSE_LEAVE;\n\n        const event: WithoutGridCommon<ColumnHeaderMouseOverEvent> | WithoutGridCommon<ColumnHeaderMouseLeaveEvent> = {\n            type: eventType,\n            column: this.column.getProvidedColumnGroup(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setupTooltip(value?: string, shouldDisplayTooltip?: () => boolean): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        const colGroupDef = this.column.getColGroupDef();\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n        const eGui = this.eGui;\n\n        if (!shouldDisplayTooltip && isTooltipWhenTruncated && !colGroupDef?.headerGroupComponent) {\n            shouldDisplayTooltip = () => {\n                const textEl = eGui.querySelector('.ag-header-group-text');\n                if (!textEl) { return true; }\n\n                return textEl.scrollWidth > textEl.clientWidth;\n            }\n        }\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getGui: () => eGui,\n            getLocation: () => 'headerGroup',\n            getTooltipValue: () => value ?? (colGroupDef && colGroupDef.headerTooltip),\n            shouldDisplayTooltip\n        };\n\n        if (colGroupDef) {\n            tooltipCtrl.getColDef = () => colGroupDef;\n        }\n\n        this.createBean(new TooltipFeature(tooltipCtrl));\n    }\n\n    private setupExpandable(): void {\n        const providedColGroup = this.column.getProvidedColumnGroup();\n\n        this.refreshExpanded();\n\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n    }\n\n    private refreshExpanded(): void {\n        const column = this.column as ColumnGroup;\n        this.expandable = column.isExpandable();\n        const expanded = column.isExpanded();\n\n        if (this.expandable) {\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n        } else {\n            this.comp.setAriaExpanded(undefined);\n        }\n    }\n\n    public getColId(): string {\n        return this.column.getUniqueId();\n    }\n\n    private addClasses(): void {\n        const colGroupDef = this.column.getColGroupDef();\n        const classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsService, null, this.column);\n\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        if (this.column.isPadding()) {\n            classes.push('ag-header-group-cell-no-group');\n            const leafCols = this.column.getLeafColumns();\n            if (leafCols.every(col => col.isSpanHeaderHeight())) {\n                classes.push('ag-header-span-height');\n            }\n        } else {\n            classes.push('ag-header-group-cell-with-group');\n        }\n\n        classes.forEach(c => this.comp.addOrRemoveCssClass(c, true));\n    }\n\n    private setupMovingCss(): void {\n        const providedColumnGroup = this.column.getProvidedColumnGroup();\n        const leafColumns = providedColumnGroup.getLeafColumns();\n\n        // function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        const listener = () => this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n\n        leafColumns.forEach(col => {\n            this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);\n        });\n\n        listener();\n    }\n\n    private onSuppressColMoveChange = () => {\n        if (!this.isAlive() || this.isSuppressMoving()) {\n            this.removeDragSource();\n        } else {\n            if (!this.dragSource) {\n                const eGui = this.getGui();\n                this.setDragSource(eGui);\n            }\n        }\n    }\n\n    private onFocusIn(e: FocusEvent) {\n        if (!this.eGui.contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        const wrapperHasFocus = this.getWrapperHasFocus();\n\n        if (!this.expandable || !wrapperHasFocus) { return; }\n\n        if (e.key === KeyCode.ENTER) {\n            const column = this.column;\n            const newExpandedValue = !column.isExpanded();\n\n            this.beans.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        }\n    }\n\n    // unlike columns, this will only get called once, as we don't react on props on column groups\n    // (we will always destroy and recreate this comp if something changes)\n    public setDragSource(eHeaderGroup: HTMLElement): void {\n        if (!this.isAlive() || this.isSuppressMoving()) {\n            return;\n        }\n\n        this.removeDragSource();\n\n        if (!eHeaderGroup) {\n            return;\n        }\n\n        const { beans, column, displayName, gridOptionsService, dragAndDropService } = this;\n        const { columnModel } = beans;\n\n        const allLeafColumns = column.getProvidedColumnGroup().getLeafColumns();\n        let hideColumnOnExit = !gridOptionsService.get('suppressDragLeaveHidesColumns');\n\n        const dragSource = this.dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            dragItemName: displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: () => this.getDragItemForGroup(column),\n            onDragStarted: () => {\n                hideColumnOnExit = !gridOptionsService.get('suppressDragLeaveHidesColumns');\n                allLeafColumns.forEach(col => col.setMoving(true, \"uiColumnDragged\"));\n            },\n            onDragStopped: () => allLeafColumns.forEach(col => col.setMoving(false, \"uiColumnDragged\")),\n            onGridEnter: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter(col => !col.getColDef().lockVisible) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, true, \"uiColumnMoved\");\n                }\n            },\n            onGridExit: (dragItem) => {\n                if (hideColumnOnExit) {\n                    const unlockedColumns = dragItem?.columns?.filter(col => !col.getColDef().lockVisible) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, false, \"uiColumnMoved\");\n                }\n            },\n        };\n\n        dragAndDropService.addDragSource(dragSource, true);\n    }\n\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    public getDragItemForGroup(columnGroup: ColumnGroup): DragItem {\n        const allColumnsOriginalOrder = columnGroup.getProvidedColumnGroup().getLeafColumns();\n\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState: { [key: string]: boolean; } = {};\n        allColumnsOriginalOrder.forEach(column => visibleState[column.getId()] = column.isVisible());\n\n        const allColumnsCurrentOrder: Column[] = [];\n        this.beans.columnModel.getAllDisplayedColumns().forEach(column => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(column => allColumnsCurrentOrder.push(column));\n\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    }\n\n    private isSuppressMoving(): boolean {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.column.getLeafColumns().forEach((column: Column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n\n        const result = childSuppressesMoving || this.gridOptionsService.get('suppressMovableColumns');\n\n        return result;\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { Column, ColumnPinnedType } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { IHeaderColumn } from \"../../interfaces/iHeaderColumn\";\nimport { Events } from \"../../eventKeys\";\nimport { VirtualColumnsChangedEvent } from \"../../events\";\nimport { AbstractHeaderCellCtrl } from \"../cells/abstractCell/abstractHeaderCellCtrl\";\nimport { HeaderFilterCellCtrl } from \"../cells/floatingFilter/headerFilterCellCtrl\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl\";\nimport { HeaderRowType } from \"./headerRowComp\";\nimport { values } from \"../../utils/generic\";\nimport { Beans } from \"../../rendering/beans\";\n\nexport interface IHeaderRowComp {\n    setTop(top: string): void;\n    setHeight(height: string): void;\n    setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[], forceOrder: boolean, afterScroll: boolean): void;\n    setWidth(width: string): void;\n}\n\nlet instanceIdSequence = 0;\n\nexport class HeaderRowCtrl extends BeanStub {\n\n    @Autowired('beans') private beans: Beans;\n\n    private comp: IHeaderRowComp;\n    private rowIndex: number;\n    private pinned: ColumnPinnedType;\n    private type: HeaderRowType;\n    private headerRowClass: string;\n\n    private instanceId = instanceIdSequence++;\n\n    private headerCellCtrls: Map<string, AbstractHeaderCellCtrl> | undefined;\n\n    private isPrintLayout: boolean;\n    private isEnsureDomOrder: boolean;\n\n    constructor(rowIndex: number, pinned: ColumnPinnedType, type: HeaderRowType) {\n        super();\n        this.rowIndex = rowIndex;\n        this.pinned = pinned;\n        this.type = type;\n\n        const typeClass = type == HeaderRowType.COLUMN_GROUP ? `ag-header-row-column-group` :\n            type == HeaderRowType.FLOATING_FILTER ? `ag-header-row-column-filter` : `ag-header-row-column`;\n        this.headerRowClass = `ag-header-row ${typeClass}`;\n\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.isPrintLayout = this.gridOptionsService.isDomLayout('print');\n        this.isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n    }\n\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    /**\n     * \n     * @param comp Proxy to the actual component\n     * @param initCompState Should the component be initialised with the current state of the controller. Default: true\n     */\n    public setComp(comp: IHeaderRowComp, initCompState: boolean = true): void {\n        this.comp = comp;\n\n        if (initCompState) {\n            this.onRowHeightChanged();\n            this.onVirtualColumnsChanged();\n        }\n        // width is managed directly regardless of framework and so is not included in initCompState\n        this.setWidth(); \n\n        this.addEventListeners();\n    }\n\n    public getHeaderRowClass(): string {\n        return this.headerRowClass;\n    }\n    public getAriaRowIndex(): number {\n        return this.rowIndex + 1;\n    }\n\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, (params: VirtualColumnsChangedEvent) => this.onVirtualColumnsChanged(params.afterScroll));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onRowHeightChanged.bind(this));\n\n        // when print layout changes, it changes what columns are in what section\n        this.addManagedPropertyListener('domLayout', this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedPropertyListener('ensureDomOrder', (e) => this.isEnsureDomOrder = e.currentValue);\n\n        this.addManagedPropertyListener('headerHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('pivotHeaderHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('groupHeaderHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('pivotGroupHeaderHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('floatingFiltersHeight', this.onRowHeightChanged.bind(this));\n    }\n\n    public getHeaderCellCtrl(column: ColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCellCtrl(column: Column): HeaderCellCtrl | undefined;\n    public getHeaderCellCtrl(column: any): any {\n        if (!this.headerCellCtrls) { return; }\n        return values(this.headerCellCtrls).find(cellCtrl => cellCtrl.getColumnGroupChild() === column);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        this.isPrintLayout = this.gridOptionsService.isDomLayout('print');\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n        this.onRowHeightChanged();\n    }\n\n    public getType(): HeaderRowType {\n        return this.type;\n    }\n\n    private onColumnResized(): void {\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const width = this.getWidthForRow();\n        this.comp.setWidth(`${width}px`);\n    }\n\n    private getWidthForRow(): number {\n        const { columnModel } = this.beans;\n        if (this.isPrintLayout) {\n            const pinned = this.pinned != null;\n            if (pinned) { return 0; }\n\n            return columnModel.getContainerWidth('right')\n                + columnModel.getContainerWidth('left')\n                + columnModel.getContainerWidth(null);\n        }\n\n        // if not printing, just return the width as normal\n        return columnModel.getContainerWidth(this.pinned);\n    }\n\n    private onRowHeightChanged(): void {\n        var { topOffset, rowHeight } = this.getTopAndHeight();\n\n        this.comp.setTop(topOffset + 'px');\n        this.comp.setHeight(rowHeight + 'px');\n    }\n\n    public getTopAndHeight() {\n        const { columnModel, filterManager } = this.beans;\n        let headerRowCount = columnModel.getHeaderRowCount();\n        const sizes: number[] = [];\n\n        let numberOfFloating = 0;\n\n        if (filterManager.hasFloatingFilters()) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n\n        const groupHeight = columnModel.getColumnGroupHeaderRowHeight();\n        const headerHeight = columnModel.getColumnHeaderRowHeight();\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        for (let i = 0; i < numberOfGroups; i++) { sizes.push(groupHeight as number); }\n\n        sizes.push(headerHeight);\n\n        for (let i = 0; i < numberOfFloating; i++) { sizes.push(columnModel.getFloatingFiltersHeight() as number); }\n\n        let topOffset = 0;\n\n        for (let i = 0; i < this.rowIndex; i++) { topOffset += sizes[i]; }\n\n        const rowHeight = sizes[this.rowIndex];\n        return { topOffset, rowHeight };\n    }\n\n    public getPinned(): ColumnPinnedType {\n        return this.pinned;\n    }\n\n    public getRowIndex(): number {\n        return this.rowIndex;\n    }\n\n    private onVirtualColumnsChanged(afterScroll: boolean = false): void {\n        const ctrlsToDisplay = this.getHeaderCtrls();\n        const forceOrder = this.isEnsureDomOrder || this.isPrintLayout;\n        this.comp.setHeaderCtrls(ctrlsToDisplay, forceOrder, afterScroll);\n    }\n\n    public getHeaderCtrls() {\n        const oldCtrls = this.headerCellCtrls;\n        this.headerCellCtrls = new Map();\n        const columns = this.getColumnsInViewport();\n\n        for (const child of columns) {\n            this.recycleAndCreateHeaderCtrls(child, oldCtrls)\n        }\n\n        // we want to keep columns that are focused, otherwise keyboard navigation breaks\n        const isFocusedAndDisplayed = (ctrl: HeaderCellCtrl) => {\n            const { focusService, columnModel } = this.beans;\n\n            const isFocused = focusService.isHeaderWrapperFocused(ctrl);\n            if (!isFocused) { return false; }\n            const isDisplayed = columnModel.isDisplayed(ctrl.getColumnGroupChild());\n            return isDisplayed;\n        };\n\n        if (oldCtrls) {\n            for (const [id, oldCtrl] of oldCtrls) {\n                const keepCtrl = isFocusedAndDisplayed(oldCtrl as HeaderCellCtrl);\n                if (keepCtrl) {\n                    this.headerCellCtrls.set(id, oldCtrl);\n                } else {\n                    this.destroyBean(oldCtrl);\n                }\n            }\n        }\n\n\n        const ctrlsToDisplay = Array.from(this.headerCellCtrls.values());\n        return ctrlsToDisplay;\n    }\n\n    private recycleAndCreateHeaderCtrls(headerColumn: IHeaderColumn, oldCtrls?: Map<string, AbstractHeaderCellCtrl>): void {\n        if (!this.headerCellCtrls) { return; }\n        // skip groups that have no displayed children. this can happen when the group is broken,\n        // and this section happens to have nothing to display for the open / closed state.\n        // (a broken group is one that is split, ie columns in the group have a non-group column\n        // in between them)\n        if (headerColumn.isEmptyGroup()) { return; }\n\n        const idOfChild = headerColumn.getUniqueId();\n\n        // if we already have this cell rendered, do nothing\n        let headerCtrl: AbstractHeaderCellCtrl | undefined;\n        if (oldCtrls) {\n            headerCtrl = oldCtrls.get(idOfChild);\n            oldCtrls.delete(idOfChild);\n        }\n\n        // it's possible there is a new Column with the same ID, but it's for a different Column.\n        // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,\n        // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are\n        // about to replace it in the this.headerComps map.\n        const forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != headerColumn;\n        if (forOldColumn) {\n            this.destroyBean(headerCtrl);\n            headerCtrl = undefined;\n        }\n\n        if (headerCtrl == null) {\n            switch (this.type) {\n                case HeaderRowType.FLOATING_FILTER:\n                    headerCtrl = this.createBean(new HeaderFilterCellCtrl(headerColumn as Column, this.beans, this));\n                    break;\n                case HeaderRowType.COLUMN_GROUP:\n                    headerCtrl = this.createBean(new HeaderGroupCellCtrl(headerColumn as ColumnGroup, this.beans, this));\n                    break;\n                default:\n                    headerCtrl = this.createBean(new HeaderCellCtrl(headerColumn as Column, this.beans, this));\n                    break;\n            }\n        }\n\n        this.headerCellCtrls.set(idOfChild, headerCtrl);\n    }\n\n    private getColumnsInViewport(): IHeaderColumn[] {\n        return this.isPrintLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();\n    }\n\n    private getColumnsInViewportPrintLayout(): IHeaderColumn[] {\n        // for print layout, we add all columns into the center\n        if (this.pinned != null) { return []; }\n\n        let viewportColumns: IHeaderColumn[] = [];\n        const actualDepth = this.getActualDepth();\n        const { columnModel } = this.beans;\n\n        (['left', null, 'right'] as ColumnPinnedType[]).forEach(pinned => {\n            const items = columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);\n            viewportColumns = viewportColumns.concat(items);\n        });\n\n        return viewportColumns;\n    }\n\n    private getActualDepth(): number {\n        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;\n    }\n\n    private getColumnsInViewportNormalLayout(): IHeaderColumn[] {\n        // when in normal layout, we add the columns for that container only\n        return this.beans.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());\n    }\n\n    public focusHeader(column: IHeaderColumn, event?: KeyboardEvent): boolean {\n        if (!this.headerCellCtrls) { return false; }\n\n        const allCtrls = Array.from(this.headerCellCtrls.values());\n        const ctrl: AbstractHeaderCellCtrl | undefined = allCtrls.find(ctrl => ctrl.getColumnGroupChild() == column);\n\n        if (!ctrl) { return false; }\n\n        return ctrl.focus(event);\n    }\n\n    protected destroy(): void {\n        if (this.headerCellCtrls) {\n            this.headerCellCtrls.forEach((ctrl) => {\n                this.destroyBean(ctrl);\n            });\n        }\n        this.headerCellCtrls = undefined;\n        super.destroy();\n    }\n}", "import { ColumnModel } from \"../../columns/columnModel\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { Column, ColumnPinnedType } from \"../../entities/column\";\nimport { IHeaderColumn } from \"../../interfaces/iHeaderColumn\";\nimport { Events } from \"../../eventKeys\";\nimport { CenterWidthFeature } from \"../../gridBodyComp/centerWidthFeature\";\nimport { PinnedWidthService } from \"../../gridBodyComp/pinnedWidthService\";\nimport { ScrollVisibleService } from \"../../gridBodyComp/scrollVisibleService\";\nimport { NumberSequence } from \"../../utils\";\nimport { BodyDropTarget } from \"../columnDrag/bodyDropTarget\";\nimport { HeaderRowType } from \"../row/headerRowComp\";\nimport { HeaderRowCtrl } from \"../row/headerRowCtrl\";\nimport { FocusService } from \"../../focusService\";\nimport { HeaderPosition } from \"../common/headerPosition\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl\";\nimport { FilterManager } from \"../../filter/filterManager\";\n\nexport interface IHeaderRowContainerComp {\n    setCenterWidth(width: string): void;\n    setViewportScrollLeft(left: number): void;\n    setPinnedContainerWidth(width: string): void;\n    setDisplayed(displayed: boolean): void;\n    setCtrls(ctrls: HeaderRowCtrl[]): void;\n}\n\nexport class HeaderRowContainerCtrl extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') public focusService: FocusService;\n    @Autowired('filterManager') public filterManager: FilterManager;\n\n    private pinned: ColumnPinnedType;\n    private comp: IHeaderRowContainerComp;\n    private hidden: boolean = false;\n    private includeFloatingFilter: boolean = false;\n\n    private filtersRowCtrl: HeaderRowCtrl | undefined;\n    private columnsRowCtrl: HeaderRowCtrl | undefined;\n    private groupsRowCtrls: HeaderRowCtrl[] = [];\n    private eViewport: HTMLElement;\n\n    constructor(pinned: ColumnPinnedType) {\n        super();\n        this.pinned = pinned;\n    }\n\n    public setComp(comp: IHeaderRowContainerComp, eGui: HTMLElement): void {\n        this.comp = comp;\n        this.eViewport = eGui;\n\n        this.setupCenterWidth();\n        this.setupPinnedWidth();\n\n        this.setupDragAndDrop(this.eViewport);\n\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n\n        this.ctrlsService.registerHeaderContainer(this, this.pinned);\n\n        if (this.columnModel.isReady()) {\n            this.refresh();\n        }\n    }\n\n    private setupDragAndDrop(dropContainer: HTMLElement): void {\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.createManagedBean(bodyDropTarget);\n    }\n\n    public refresh(keepColumns = false): void {\n        const sequence = new NumberSequence();\n        const focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();\n\n        const refreshColumnGroups = () => {\n            const groupRowCount = this.columnModel.getHeaderRowCount() - 1;\n\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n\n            for (let i = 0; i < groupRowCount; i++) {\n                const ctrl = this.createBean(new HeaderRowCtrl(sequence.next(), this.pinned, HeaderRowType.COLUMN_GROUP));\n                this.groupsRowCtrls.push(ctrl);\n            }\n        };\n\n        const refreshColumns = () => {\n            const rowIndex = sequence.next();\n\n            const needNewInstance = !this.hidden && (this.columnsRowCtrl == null || !keepColumns || this.columnsRowCtrl.getRowIndex() !== rowIndex);\n            const shouldDestroyInstance = needNewInstance || this.hidden;\n\n            if (shouldDestroyInstance) {\n                this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\n            }\n\n            if (needNewInstance) {\n                this.columnsRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.COLUMN));\n            }\n\n        };\n\n        const refreshFilters = () => {\n            this.includeFloatingFilter = this.filterManager.hasFloatingFilters() && !this.hidden;\n\n            const destroyPreviousComp = () => {\n                this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n            };\n\n            if (!this.includeFloatingFilter) {\n                destroyPreviousComp();\n                return;\n            }\n\n            const rowIndex = sequence.next();\n\n            if (this.filtersRowCtrl) {\n                const rowIndexMismatch = this.filtersRowCtrl.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    destroyPreviousComp();\n                }\n            }\n\n            if (!this.filtersRowCtrl) {\n                this.filtersRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.FLOATING_FILTER));\n            }\n        };\n\n        refreshColumnGroups();\n        refreshColumns();\n        refreshFilters();\n\n        const allCtrls = this.getAllCtrls();\n        this.comp.setCtrls(allCtrls);\n\n        this.restoreFocusOnHeader(focusedHeaderPosition);\n    }\n\n    private restoreFocusOnHeader(position: HeaderPosition | null): void {\n        if (position == null || position.column.getPinned() != this.pinned) { return; }\n\n        this.focusService.focusHeaderPosition({ headerPosition: position });\n    }\n\n    private getAllCtrls(): HeaderRowCtrl[] {\n        const res: HeaderRowCtrl[] = [...this.groupsRowCtrls];\n\n        if (this.columnsRowCtrl) {\n            res.push(this.columnsRowCtrl);\n        }\n\n        if (this.filtersRowCtrl) {\n            res.push(this.filtersRowCtrl);\n        }\n\n        return res;\n    }\n\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    private onGridColumnsChanged() {\n        this.refresh(true);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const includeFloatingFilter = this.filterManager.hasFloatingFilters() && !this.hidden;\n        if (this.includeFloatingFilter !== includeFloatingFilter) {\n            this.refresh(true);\n        }\n    }\n\n    private setupCenterWidth(): void {\n        if (this.pinned != null) { return; }\n\n        this.createManagedBean(new CenterWidthFeature(width => this.comp.setCenterWidth(`${width}px`), true));\n    }\n\n    public setHorizontalScroll(offset: number): void {\n        this.comp.setViewportScrollLeft(offset);\n    }\n\n    private setupPinnedWidth(): void {\n        if (this.pinned == null) { return; }\n\n        const pinningLeft = this.pinned === 'left';\n        const pinningRight = this.pinned === 'right';\n\n        this.hidden = true;\n\n        const listener = () => {\n            const width = pinningLeft ? this.pinnedWidthService.getPinnedLeftWidth() : this.pinnedWidthService.getPinnedRightWidth();\n            if (width == null) { return; } // can happen at initialisation, width not yet set\n\n            const hidden = (width == 0);\n            const hiddenChanged = this.hidden !== hidden;\n            const isRtl = this.gridOptionsService.get('enableRtl');\n            const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n            const widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;\n\n            this.comp.setPinnedContainerWidth(`${widthWithPadding}px`);\n            this.comp.setDisplayed(!hidden);\n\n            if (hiddenChanged) {\n                this.hidden = hidden;\n                this.refresh();\n            }\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);\n    }\n\n    public getHeaderCtrlForColumn(column: Column): HeaderCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: ColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: any): any {\n        if (column instanceof Column) {\n            if (!this.columnsRowCtrl) { return; }\n            return this.columnsRowCtrl.getHeaderCellCtrl(column);\n        }\n\n        if (this.groupsRowCtrls.length === 0) { return; }\n\n        for (let i = 0; i < this.groupsRowCtrls.length; i++) {\n            const ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);\n\n            if (ctrl) { return ctrl; }\n        }\n    }\n\n    /* tslint:disable */\n    public getHtmlElementForColumnHeader(column: ColumnGroup): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: Column): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: any): any {\n    /* tslint:enable */\n        const cellCtrl = this.getHeaderCtrlForColumn(column);\n\n        if (!cellCtrl) { return null; }\n\n        return cellCtrl.getGui();\n    }\n\n    public getRowType(rowIndex: number): HeaderRowType | undefined {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        return ctrl ? ctrl.getType() : undefined;\n    }\n\n    public focusHeader(rowIndex: number, column: IHeaderColumn, event?: KeyboardEvent): boolean {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        if (!ctrl) { return false; }\n\n        return ctrl.focusHeader(column, event);\n    }\n\n    public getViewport(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public getRowCount(): number {\n        return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);\n    }\n\n    protected destroy(): void {\n        if (this.filtersRowCtrl) {\n            this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n        }\n\n        if (this.columnsRowCtrl) {\n            this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\n        }\n\n        if (this.groupsRowCtrls && this.groupsRowCtrls.length) {\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n        }\n\n        super.destroy();\n    }\n}", "import { ColumnPinnedType } from '../../entities/column';\nimport { PostConstruct, PreDestroy } from '../../context/context';\nimport { ensureDomOrder } from '../../utils/dom';\nimport { getAllValuesInObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { HeaderRowComp } from '../row/headerRowComp';\nimport { HeaderRowCtrl } from '../row/headerRowCtrl';\nimport { HeaderRowContainerCtrl, IHeaderRowContainerComp } from './headerRowContainerCtrl';\n\nexport class HeaderRowContainerComp extends Component {\n\n    private static PINNED_LEFT_TEMPLATE =  /* html */ `<div class=\"ag-pinned-left-header\" role=\"rowgroup\"></div>`;\n\n    private static PINNED_RIGHT_TEMPLATE =  /* html */ `<div class=\"ag-pinned-right-header\" role=\"rowgroup\"></div>`;\n\n    private static CENTER_TEMPLATE =  /* html */\n        `<div class=\"ag-header-viewport\" role=\"presentation\">\n            <div class=\"ag-header-container\" ref=\"eCenterContainer\" role=\"rowgroup\"></div>\n        </div>`;\n\n    @RefSelector('eCenterContainer') private eCenterContainer: HTMLElement;\n\n    private eRowContainer: HTMLElement;\n\n    private pinned: ColumnPinnedType;\n\n    private headerRowComps: {[ctrlId: string]: HeaderRowComp} = {};\n    private rowCompsList: HeaderRowComp[] = [];\n\n    constructor(pinned: ColumnPinnedType) {\n        super();\n        this.pinned = pinned;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.selectAndSetTemplate();\n\n        const compProxy: IHeaderRowContainerComp = {\n            setDisplayed: displayed => this.setDisplayed(displayed),\n            setCtrls: ctrls => this.setCtrls(ctrls),\n\n            // only gets called for center section\n            setCenterWidth: width => this.eCenterContainer.style.width = width,\n            setViewportScrollLeft: left => this.getGui().scrollLeft = left,\n\n            // only gets called for pinned sections\n            setPinnedContainerWidth: width => {\n                const eGui = this.getGui();\n                eGui.style.width = width;\n                eGui.style.maxWidth = width;\n                eGui.style.minWidth = width;\n            }\n        };\n\n        const ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));\n        ctrl.setComp(compProxy, this.getGui());\n    }\n\n    private selectAndSetTemplate(): void {\n        const pinnedLeft = this.pinned == 'left';\n        const pinnedRight = this.pinned == 'right';\n\n        const template = pinnedLeft ? HeaderRowContainerComp.PINNED_LEFT_TEMPLATE :\n                         pinnedRight ? HeaderRowContainerComp.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp.CENTER_TEMPLATE;\n\n        this.setTemplate(template);\n\n        // for left and right, we add rows directly to the root element,\n        // but for center container we add elements to the child container.\n        this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();\n    }\n\n    @PreDestroy\n    private destroyRowComps(): void {\n        this.setCtrls([]);\n    }\n\n    private destroyRowComp(rowComp: HeaderRowComp): void {\n        this.destroyBean(rowComp);\n        this.eRowContainer.removeChild(rowComp.getGui());\n    }\n\n    private setCtrls(ctrls: HeaderRowCtrl[]): void {\n\n        const oldRowComps = this.headerRowComps;\n        this.headerRowComps = {};\n        this.rowCompsList = [];\n\n        let prevGui: HTMLElement;\n\n        const appendEnsuringDomOrder = (rowComp: HeaderRowComp) => {\n            const eGui = rowComp.getGui();\n\n            const notAlreadyIn = eGui.parentElement != this.eRowContainer;\n            if (notAlreadyIn) {\n                this.eRowContainer.appendChild(eGui);\n            }\n            if (prevGui) {\n                ensureDomOrder(this.eRowContainer, eGui, prevGui);\n            }\n\n            prevGui = eGui;\n        };\n\n        ctrls.forEach(ctrl => {\n            const ctrlId = ctrl.getInstanceId();\n            const existingComp =  oldRowComps[ctrlId];\n            delete oldRowComps[ctrlId];\n\n            const rowComp = existingComp ? existingComp : this.createBean(new HeaderRowComp(ctrl));\n            this.headerRowComps[ctrlId] = rowComp;\n            this.rowCompsList.push(rowComp);\n\n            appendEnsuringDomOrder(rowComp);\n        });\n\n        getAllValuesInObject(oldRowComps).forEach(c => this.destroyRowComp(c));\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { FocusService } from \"../../focusService\";\nimport { GridBodyCtrl } from \"../../gridBodyComp/gridBodyCtrl\";\nimport { last } from \"../../utils/array\";\nimport { HeaderPosition, HeaderPositionUtils } from \"./headerPosition\";\n\nexport enum HeaderNavigationDirection {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT\n}\n\n@Bean('headerNavigationService')\nexport class HeaderNavigationService extends BeanStub {\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('headerPositionUtils') private headerPositionUtils: HeaderPositionUtils;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private gridBodyCon: GridBodyCtrl;\n    private currentHeaderRowWithoutSpan: number = -1;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n\n        const eDocument = this.gridOptionsService.getDocument();\n        this.addManagedListener(eDocument, 'mousedown', () => this.setCurrentHeaderRowWithoutSpan(-1));\n    }\n\n    public getHeaderRowCount(): number {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;\n    }\n\n    /*\n     * This method navigates grid header vertically\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateVertically(direction: HeaderNavigationDirection, fromHeader: HeaderPosition | null, event: KeyboardEvent): boolean {\n        if (!fromHeader) {\n            fromHeader = this.focusService.getFocusedHeader();\n        }\n\n        if (!fromHeader) { return false; }\n\n        const { headerRowIndex, column } = fromHeader;\n        const rowLen = this.getHeaderRowCount();\n        const isUp = direction === HeaderNavigationDirection.UP;\n\n        let { headerRowIndex: nextRow, column: nextFocusColumn, headerRowIndexWithoutSpan } = isUp\n            ? this.headerPositionUtils.getColumnVisibleParent(column, headerRowIndex)\n            : this.headerPositionUtils.getColumnVisibleChild(column, headerRowIndex);\n\n        let skipColumn = false;\n\n        if (nextRow < 0) {\n            nextRow = 0;\n            nextFocusColumn = column;\n            skipColumn = true;\n        }\n\n        if (nextRow >= rowLen) {\n            nextRow = -1; // -1 indicates the focus should move to grid rows.\n            this.setCurrentHeaderRowWithoutSpan(-1);\n        } else if (headerRowIndexWithoutSpan !== undefined) {\n            this.currentHeaderRowWithoutSpan = headerRowIndexWithoutSpan;\n        }\n\n\n        if (!skipColumn && !nextFocusColumn) {\n            return false;\n        }\n\n        return this.focusService.focusHeaderPosition({\n            headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn! },\n            allowUserOverride:  true,\n            event\n        });\n    }\n\n    public setCurrentHeaderRowWithoutSpan(row: number): void {\n        this.currentHeaderRowWithoutSpan = row;\n    }\n\n    /*\n     * This method navigates grid header horizontally\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateHorizontally(direction: HeaderNavigationDirection, fromTab: boolean = false, event: KeyboardEvent): boolean {\n        const focusedHeader = this.focusService.getFocusedHeader()!;\n        const isLeft = direction === HeaderNavigationDirection.LEFT;\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        let nextHeader: HeaderPosition;\n        let normalisedDirection: 'Before' |  'After';\n\n        // either navigating to the left or isRtl (cannot be both)\n        if (this.currentHeaderRowWithoutSpan !== -1) {\n            focusedHeader.headerRowIndex = this.currentHeaderRowWithoutSpan;\n        } else {\n            this.currentHeaderRowWithoutSpan = focusedHeader.headerRowIndex;\n        }\n\n        if (isLeft !== isRtl) {\n            normalisedDirection = 'Before';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection)!;\n        } else {\n            normalisedDirection = 'After';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection)!;\n        }\n\n        if (nextHeader || !fromTab) {\n            return this.focusService.focusHeaderPosition({\n                headerPosition: nextHeader,\n                direction: normalisedDirection,\n                fromTab,\n                allowUserOverride: true,\n                event\n            });\n        }\n\n        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);\n    }\n\n    private focusNextHeaderRow(focusedHeader: HeaderPosition, direction: 'Before' | 'After', event: KeyboardEvent): boolean {\n        const currentIndex = focusedHeader.headerRowIndex;\n        let nextPosition: HeaderPosition | null = null;\n        let nextRowIndex: number;\n\n        if (direction === 'Before') {\n            if (currentIndex > 0) {\n                nextRowIndex = currentIndex - 1;\n                this.currentHeaderRowWithoutSpan -= 1;\n                nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'end')!;\n            }\n        } else {\n            nextRowIndex = currentIndex + 1;\n            if (this.currentHeaderRowWithoutSpan < this.getHeaderRowCount()) {\n                this.currentHeaderRowWithoutSpan += 1;\n            } else {\n                this.setCurrentHeaderRowWithoutSpan(-1);\n            }\n            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'start')!;\n        }\n\n        if (!nextPosition) { return false; }\n\n        const { column, headerRowIndex } = this.headerPositionUtils.getHeaderIndexToFocus(nextPosition.column, nextPosition?.headerRowIndex)\n\n        return this.focusService.focusHeaderPosition({\n            headerPosition: { column, headerRowIndex },\n            direction,\n            fromTab: true,\n            allowUserOverride: true,\n            event\n        });\n    }\n\n    public scrollToColumn(column: Column | ColumnGroup, direction: 'Before' | 'After' | null = 'After'): void {\n        if (column.getPinned()) { return; }\n\n        let columnToScrollTo: Column;\n\n        if (column instanceof ColumnGroup) {\n            const columns = column.getDisplayedLeafColumns();\n            columnToScrollTo = direction === 'Before' ? last(columns) : columns[0];\n        } else {\n            columnToScrollTo = column;\n        }\n\n        this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);\n    }\n}\n", "import { ColumnModel } from \"../columns/columnModel\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Events } from \"../eventKeys\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { FocusService } from \"../focusService\";\nimport { MenuService } from \"../misc/menuService\";\nimport { isIOSUserAgent } from \"../utils/browser\";\nimport { exists } from \"../utils/generic\";\nimport { ManagedFocusFeature } from \"../widgets/managedFocusFeature\";\nimport { LongTapEvent, TouchListener } from \"../widgets/touchListener\";\nimport { HeaderNavigationDirection, HeaderNavigationService } from \"./common/headerNavigationService\";\n\nexport interface IGridHeaderComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setHeightAndMinHeight(height: string): void;\n}\n\nexport class GridHeaderCtrl extends BeanStub {\n\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('menuService') private menuService: MenuService;\n\n    private comp: IGridHeaderComp;\n    private eGui: HTMLElement;\n    private headerHeight: number;\n\n    public setComp(comp: IGridHeaderComp, eGui: HTMLElement, eFocusableElement: HTMLElement): void {\n        this.comp = comp;\n        this.eGui = eGui;\n\n        this.createManagedBean(new ManagedFocusFeature(\n            eFocusableElement,\n            {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusOut: this.onFocusOut.bind(this)\n            }\n        ));\n\n        // for setting ag-pivot-on / ag-pivot-off CSS classes\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n\n        this.onPivotModeChanged();\n        this.setupHeaderHeight();\n\n        const listener = this.onHeaderContextMenu.bind(this)\n        this.addManagedListener(this.eGui, 'contextmenu', listener);\n        this.mockContextMenuForIPad(listener);\n\n        this.ctrlsService.registerGridHeaderCtrl(this);\n    }\n\n    private setupHeaderHeight(): void {\n        const listener = this.setHeaderHeight.bind(this);\n        listener();\n\n        this.addManagedPropertyListener('headerHeight', listener);\n        this.addManagedPropertyListener('pivotHeaderHeight', listener);\n        this.addManagedPropertyListener('groupHeaderHeight', listener);\n        this.addManagedPropertyListener('pivotGroupHeaderHeight', listener);\n        this.addManagedPropertyListener('floatingFiltersHeight', listener);\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, listener);\n    }\n\n    public getHeaderHeight(): number {\n        return this.headerHeight;\n    }\n\n    private setHeaderHeight(): void {\n        const { columnModel } = this;\n\n        let numberOfFloating = 0;\n        let headerRowCount = columnModel.getHeaderRowCount();\n        let totalHeaderHeight: number;\n\n        const hasFloatingFilters = this.filterManager.hasFloatingFilters();\n\n        if (hasFloatingFilters) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n\n        const groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();\n        const headerHeight = this.columnModel.getColumnHeaderRowHeight();\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        totalHeaderHeight = numberOfFloating * columnModel.getFloatingFiltersHeight()!;\n        totalHeaderHeight += numberOfGroups * groupHeight!;\n        totalHeaderHeight += headerHeight!;\n\n        if (this.headerHeight === totalHeaderHeight) { return; }\n\n        this.headerHeight = totalHeaderHeight;\n\n        // one extra pixel is needed here to account for the\n        // height of the border\n        const px = `${totalHeaderHeight + 1}px`;\n        this.comp.setHeightAndMinHeight(px);\n\n        this.eventService.dispatchEvent({\n            type: Events.EVENT_HEADER_HEIGHT_CHANGED\n        });\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.comp.addOrRemoveCssClass('ag-pivot-on', pivotMode);\n        this.comp.addOrRemoveCssClass('ag-pivot-off', !pivotMode);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const columns = this.columnModel.getAllDisplayedColumns();\n        const shouldAllowOverflow = columns.some(col => col.isSpanHeaderHeight());\n\n        this.comp.addOrRemoveCssClass('ag-header-allow-overflow', shouldAllowOverflow);\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const direction = e.shiftKey !== isRtl\n            ? HeaderNavigationDirection.LEFT\n            : HeaderNavigationDirection.RIGHT;\n\n        if (this.headerNavigationService.navigateHorizontally(direction, true, e) ||\n            this.focusService.focusNextGridCoreContainer(e.shiftKey)\n        ) {\n            e.preventDefault();\n        }\n     }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        let direction: HeaderNavigationDirection | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n                direction = HeaderNavigationDirection.LEFT;\n            case KeyCode.RIGHT:\n                if (!exists(direction)) {\n                    direction = HeaderNavigationDirection.RIGHT;\n                }\n                this.headerNavigationService.navigateHorizontally(direction, false, e);\n                break;\n            case KeyCode.UP:\n                direction = HeaderNavigationDirection.UP;\n            case KeyCode.DOWN:\n                if (!exists(direction)) {\n                    direction = HeaderNavigationDirection.DOWN;\n                }\n                if (this.headerNavigationService.navigateVertically(direction, null, e)) {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    protected onFocusOut(e: FocusEvent): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const { relatedTarget } = e;\n\n        if (!relatedTarget && this.eGui.contains(eDocument.activeElement)) { return; }\n\n        if (!this.eGui.contains(relatedTarget as HTMLElement)) {\n            this.focusService.clearFocusedHeader();\n        }\n    }\n\n    private onHeaderContextMenu(mouseEvent?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent): void {\n        if ((!mouseEvent && !touchEvent) || !this.menuService.isHeaderContextMenuEnabled()) { return; }\n\n        const { target } = (mouseEvent ?? touch)!;\n\n        if (target === this.eGui || target === this.ctrlsService.getHeaderRowContainerCtrl().getViewport()) {\n            this.menuService.showHeaderContextMenu(undefined, mouseEvent, touchEvent);\n        }\n    }\n\n    private mockContextMenuForIPad(listener: (mouseListener?: MouseEvent, touch?: Touch, touchEvent?: TouchEvent) => void): void {\n        // we do NOT want this when not in iPad\n        if (!isIOSUserAgent()) { return; }\n\n        const touchListener = new TouchListener(this.eGui);\n        const longTapListener = (event: LongTapEvent) => {\n            listener(undefined, event.touchStart, event.touchEvent);\n        };\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n}\n", "import { PostConstruct } from '../context/context';\nimport { Component } from '../widgets/component';\nimport { GridHeaderCtrl, IGridHeaderComp } from './gridHeaderCtrl';\nimport { HeaderRowContainerComp } from './rowContainer/headerRowContainerComp';\n\nexport class GridHeaderComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header\" role=\"presentation\"/>`;\n\n    constructor() {\n        super(GridHeaderComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setHeightAndMinHeight: height => {\n                this.getGui().style.height = height;\n                this.getGui().style.minHeight = height;\n            }\n        };\n\n        const ctrl = this.createManagedBean(new GridHeaderCtrl());\n        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());\n\n        const addContainer = (container: HeaderRowContainerComp) => {\n            this.createManagedBean(container);\n            this.appendChild(container);\n        };\n\n        addContainer(new HeaderRowContainerComp('left'));\n        addContainer(new HeaderRowContainerComp(null));\n        addContainer(new HeaderRowContainerComp('right'));\n    }\n}\n", "import { Autowired, Bean } from \"../../context/context\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CtrlsService } from \"../../ctrlsService\";\n\nexport interface HorizontalResizeParams {\n    eResizeBar: HTMLElement;\n    dragStartPixels?: number;\n    onResizeStart: (shiftKey: boolean) => void;\n    onResizing: (delta: number) => void;\n    onResizeEnd: (delta: number) => void;\n}\n\n@Bean('horizontalResizeService')\nexport class HorizontalResizeService extends BeanStub {\n\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private dragStartX: number;\n    private resizeAmount: number;\n\n    public addResizeBar(params: HorizontalResizeParams): () => void {\n        const dragSource: DragListenerParams = {\n            dragStartPixels: params.dragStartPixels || 0,\n            eElement: params.eResizeBar,\n            onDragStart: this.onDragStart.bind(this, params),\n            onDragStop: this.onDragStop.bind(this, params),\n            onDragging: this.onDragging.bind(this, params),\n            includeTouch: true,\n            stopPropagationForTouch: true\n        };\n\n        this.dragService.addDragSource(dragSource);\n\n        // we pass remove func back to the caller, so call can tell us when they\n        // are finished, and then we remove the listener from the drag source\n        const finishedWithResizeFunc = () => this.dragService.removeDragSource(dragSource);\n\n        return finishedWithResizeFunc;\n    }\n\n    private onDragStart(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.dragStartX = mouseEvent.clientX;\n\n        this.setResizeIcons();\n\n        const shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;\n        params.onResizeStart(shiftKey);\n    }\n\n    private setResizeIcons(): void {\n\n        const ctrl = this.ctrlsService.getGridCtrl();\n        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'\n        ctrl.setResizeCursor(true);\n        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)\n        ctrl.disableUserSelect(true);\n    }\n\n    private onDragStop(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        params.onResizeEnd(this.resizeAmount);\n        this.resetIcons();\n    }\n\n    private resetIcons(): void {\n        const ctrl = this.ctrlsService.getGridCtrl();\n        ctrl.setResizeCursor(false);\n        ctrl.disableUserSelect(false);\n    }\n\n    private onDragging(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.resizeAmount = mouseEvent.clientX - this.dragStartX;\n        params.onResizing(this.resizeAmount);\n    }\n\n}\n", "import { Autowired, Bean } from '../../../context/context';\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { IMenuFactory } from '../../../interfaces/iMenuFactory';\nimport { FilterManager } from '../../../filter/filterManager';\nimport { Column } from '../../../entities/column';\nimport { PopupService } from '../../../widgets/popupService';\nimport { FocusService } from '../../../focusService';\nimport { isVisible } from '../../../utils/dom';\nimport { KeyCode } from '../../../constants/keyCode';\nimport { ContainerType } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { CtrlsService } from '../../../ctrlsService';\nimport { setAriaRole } from '../../../utils/aria';\nimport { MenuService } from '../../../misc/menuService';\nimport { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { ColumnMenuVisibleChangedEvent } from '../../../events';\nimport { Events } from '../../../eventKeys';\n\n@Bean('filterMenuFactory')\nexport class StandardMenuFactory extends BeanStub implements IMenuFactory {\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('menuService') private menuService: MenuService;\n\n    private hidePopup: () => void;\n    private tabListener: () => null;\n\n    public hideActiveMenu(): void {\n        if (this.hidePopup) {\n            this.hidePopup();\n        }\n    }\n\n    public showMenuAfterMouseEvent(column: Column | undefined, mouseEvent: MouseEvent | Touch, containerType: ContainerType): void {\n        this.showPopup(column, eMenu => {\n            this.popupService.positionPopupUnderMouseEvent({\n                column,\n                type: containerType,\n                mouseEvent,\n                ePopup: eMenu\n            });\n        }, containerType, mouseEvent.target as HTMLElement, this.menuService.isLegacyMenuEnabled());\n    }\n\n    public showMenuAfterButtonClick(column: Column | undefined, eventSource: HTMLElement, containerType: ContainerType): void {\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        if (!isLegacyMenuEnabled && this.gridOptionsService.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n        let nudgeX = isLegacyMenuEnabled ? undefined : (4 * multiplier);\n        let nudgeY = isLegacyMenuEnabled ? undefined : 4;\n\n        this.showPopup(column, eMenu => {\n            this.popupService.positionPopupByComponent({\n                type: containerType,\n                eventSource,\n                ePopup: eMenu,\n                nudgeX,\n                nudgeY,\n                alignSide,\n                keepWithinBounds: true,\n                position: 'under',\n                column,\n            });\n        }, containerType, eventSource, isLegacyMenuEnabled);\n    }\n\n    private showPopup(\n        column: Column | undefined,\n        positionCallback: (eMenu: HTMLElement) => void,\n        containerType: ContainerType,\n        eventSource: HTMLElement,\n        isLegacyMenuEnabled: boolean\n    ): void {\n        const filterWrapper =  column ? this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU') : undefined;\n        if (!filterWrapper || !column) {\n            throw new Error('AG Grid - unable to show popup filter, filter instantiation failed');\n        }\n\n        const eMenu = document.createElement('div');\n\n        setAriaRole(eMenu, 'presentation');\n        eMenu.classList.add('ag-menu');\n        if (!isLegacyMenuEnabled) {\n            eMenu.classList.add('ag-filter-menu');\n        }\n\n        this.tabListener = this.addManagedListener(eMenu, 'keydown', (e) => this.trapFocusWithin(e, eMenu))!;\n\n        filterWrapper.guiPromise.then(gui => eMenu.appendChild(gui!));\n\n        let hidePopup: (() => void);\n\n        const afterGuiDetached = () => filterWrapper.filterPromise?.then(filter => filter?.afterGuiDetached?.());\n\n        const anchorToElement = this.menuService.isColumnMenuAnchoringEnabled() ? (eventSource ?? this.ctrlsService.getGridBodyCtrl().getGui()) : undefined;\n        const closedCallback = (e: MouseEvent | TouchEvent | KeyboardEvent) => {\n            column.setMenuVisible(false, 'contextMenu');\n            const isKeyboardEvent = e instanceof KeyboardEvent;\n\n            if (this.tabListener) {\n                this.tabListener = this.tabListener()!;\n            }\n\n            if (isKeyboardEvent && eventSource && isVisible(eventSource)) {\n                const focusableEl = this.focusService.findTabbableParent(eventSource);\n\n                if (focusableEl) { focusableEl.focus(); }\n            }\n            afterGuiDetached();\n            this.dispatchVisibleChangedEvent(false, containerType, column);\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const ariaLabel = isLegacyMenuEnabled && containerType !== 'columnFilter'\n            ? translate('ariaLabelColumnMenu', 'Column Menu')\n            : translate('ariaLabelColumnFilter', 'Column Filter');\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenu,\n            closeOnEsc: true,\n            closedCallback,\n            positionCallback: () => positionCallback(eMenu),\n            anchorToElement,\n            ariaLabel\n        });\n\n        if (addPopupRes) {\n            this.hidePopup = hidePopup = addPopupRes.hideFunc;\n        }\n\n        filterWrapper.filterPromise!.then(filter => {\n            // need to make sure the filter is present before positioning, as only\n            // after filter it is visible can we find out what the width of it is\n            positionCallback(eMenu);\n\n            if (filter!.afterGuiAttached) {\n                filter!.afterGuiAttached({ container: containerType, hidePopup });\n            }\n        });\n\n        column.setMenuVisible(true, 'contextMenu');\n\n        this.dispatchVisibleChangedEvent(true, containerType, column);\n    }\n\n    private trapFocusWithin(e: KeyboardEvent, menu: HTMLElement) {\n        if (e.key !== KeyCode.TAB ||\n            e.defaultPrevented ||\n            this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {\n            return;\n        }\n\n        e.preventDefault();\n\n        this.focusService.focusInto(menu, e.shiftKey);\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, containerType: ContainerType, column?: Column): void {\n        const displayedEvent: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: Events.EVENT_COLUMN_MENU_VISIBLE_CHANGED,\n            visible,\n            switchingTab: false,\n            key: containerType as 'columnMenu' | 'columnFilter' | 'floatingFilter',\n            column: column ?? null\n        }\n        this.eventService.dispatchEvent(displayedEvent)\n    }\n\n    public isMenuEnabled(column: Column): boolean {\n        // for standard, we show menu if filter is enabled, and the menu is not suppressed by passing an empty array\n        return column.isFilterAllowed() && (column.getColDef().menuTabs ?? ['filterMenuTab']).includes('filterMenuTab');\n    }\n\n    public showMenuAfterContextMenuEvent(): void {\n        // not supported in standard menu\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { FocusService } from \"../focusService\";\nimport { ManagedFocusFeature } from \"./managedFocusFeature\";\n\nexport enum TabGuardClassNames {\n    TAB_GUARD = 'ag-tab-guard',\n    TAB_GUARD_TOP = 'ag-tab-guard-top',\n    TAB_GUARD_BOTTOM = 'ag-tab-guard-bottom'\n};\n\nexport interface ITabGuard {\n    setTabIndex(tabIndex?: string): void;\n}\n\nexport class TabGuardCtrl extends BeanStub {\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private readonly comp: ITabGuard;\n    private readonly eTopGuard: HTMLElement;\n    private readonly eBottomGuard: HTMLElement;\n\n    private readonly eFocusableElement: HTMLElement;\n    private readonly focusTrapActive: boolean;\n    private readonly forceFocusOutWhenTabGuardsAreEmpty: boolean;\n\n    private readonly providedFocusInnerElement?: (fromBottom: boolean) => void;\n    private readonly providedFocusIn?: (event: FocusEvent) => void;\n    private readonly providedFocusOut?: (event: FocusEvent) => void;\n\n    private readonly providedShouldStopEventPropagation?: () => boolean;\n    private readonly providedOnTabKeyDown?: (e: KeyboardEvent) => void;\n    private readonly providedHandleKeyDown?: (e: KeyboardEvent) => void;\n\n    private skipTabGuardFocus: boolean = false;\n    private forcingFocusOut: boolean = false;\n\n    constructor(params: {\n        comp: ITabGuard,\n        eTopGuard: HTMLElement,\n        eBottomGuard: HTMLElement,\n        eFocusableElement: HTMLElement,\n        focusTrapActive?: boolean,\n        forceFocusOutWhenTabGuardsAreEmpty?: boolean;\n        focusInnerElement?: (fromBottom: boolean) => void,\n        onFocusIn?: (event: FocusEvent) => void,\n        onFocusOut?: (event: FocusEvent) => void,\n        shouldStopEventPropagation?: () => boolean,\n        onTabKeyDown?: (e: KeyboardEvent) => void,\n        handleKeyDown?: (e: KeyboardEvent) => void\n    }) {\n        super();\n\n        const {\n            comp,\n            eTopGuard,\n            eBottomGuard,\n            focusTrapActive,\n            forceFocusOutWhenTabGuardsAreEmpty,\n            focusInnerElement,\n            onFocusIn,\n            onFocusOut,\n            shouldStopEventPropagation,\n            onTabKeyDown,\n            handleKeyDown,\n            eFocusableElement\n        } = params;\n\n        this.comp = comp;\n\n        this.eTopGuard = eTopGuard;\n        this.eBottomGuard = eBottomGuard;\n        this.providedFocusInnerElement = focusInnerElement;\n        this.eFocusableElement = eFocusableElement;\n        this.focusTrapActive = !!focusTrapActive;\n        this.forceFocusOutWhenTabGuardsAreEmpty = !!forceFocusOutWhenTabGuardsAreEmpty\n\n        this.providedFocusIn = onFocusIn;\n        this.providedFocusOut = onFocusOut;\n        this.providedShouldStopEventPropagation = shouldStopEventPropagation;\n        this.providedOnTabKeyDown = onTabKeyDown;\n        this.providedHandleKeyDown = handleKeyDown;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.createManagedBean(new ManagedFocusFeature(\n            this.eFocusableElement,\n            {\n                shouldStopEventPropagation: () => this.shouldStopEventPropagation(),\n                onTabKeyDown: e => this.onTabKeyDown(e),\n                handleKeyDown: e => this.handleKeyDown(e),\n                onFocusIn: e => this.onFocusIn(e),\n                onFocusOut: e => this.onFocusOut(e)\n            }\n        ));\n\n        this.activateTabGuards();\n\n        [this.eTopGuard, this.eBottomGuard].forEach(\n            guard => this.addManagedListener(guard, 'focus', this.onFocus.bind(this))\n        );\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (this.providedHandleKeyDown) {\n            this.providedHandleKeyDown(e);\n        }\n    }\n\n    private tabGuardsAreActive(): boolean {\n        return !!this.eTopGuard && this.eTopGuard.hasAttribute('tabIndex');\n    }\n\n    private shouldStopEventPropagation(): boolean {\n        if (this.providedShouldStopEventPropagation) {\n            return this.providedShouldStopEventPropagation();\n        }\n        return false;\n    }\n\n    private activateTabGuards(): void {\n        // Do not activate tabs while focus is being forced out\n        if (this.forcingFocusOut) { return; }\n        const tabIndex = this.gridOptionsService.get('tabIndex');\n        this.comp.setTabIndex(tabIndex.toString());\n    }\n\n    private deactivateTabGuards(): void {\n        this.comp.setTabIndex();\n    }\n\n    private onFocus(e: FocusEvent): void {\n        if (this.skipTabGuardFocus) {\n            this.skipTabGuardFocus = false;\n            return;\n        }\n\n        // when there are no focusable items within the TabGuard, focus gets stuck\n        // in the TabGuard itself and has nowhere to go, so we need to manually find\n        // the closest element to focus by calling `forceFocusOutWhenTabGuardAreEmpty`.\n        if (this.forceFocusOutWhenTabGuardsAreEmpty) {\n            const isEmpty = this.focusService.findFocusableElements(this.eFocusableElement, '.ag-tab-guard').length === 0;\n            if (isEmpty) {\n                this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);\n                return;\n            }\n        }\n\n        const fromBottom = e.target === this.eBottomGuard;\n\n        if (this.providedFocusInnerElement) {\n            this.providedFocusInnerElement(fromBottom);\n        } else {\n            this.focusInnerElement(fromBottom);\n        }\n    }\n\n    private findNextElementOutsideAndFocus(up: boolean) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const focusableEls = this.focusService.findFocusableElements(eDocument.body, null, true);\n        const index = focusableEls.indexOf(up ? this.eTopGuard : this.eBottomGuard);\n\n        if (index === -1) { return; }\n\n        let start: number;\n        let end: number;\n        if (up) {\n            start = 0;\n            end = index;\n        } else {\n            start = index + 1;\n            end = focusableEls.length;\n        }\n        const focusableRange = focusableEls.slice(start, end);\n        const targetTabIndex = this.gridOptionsService.get('tabIndex');\n        focusableRange.sort((a: HTMLElement, b: HTMLElement) => {\n            const indexA = parseInt(a.getAttribute('tabindex') || '0');\n            const indexB = parseInt(b.getAttribute('tabindex') || '0');\n\n            if (indexB === targetTabIndex) { return 1; }\n            if (indexA === targetTabIndex) { return -1; }\n        \n            if (indexA === 0) { return 1; }\n            if (indexB === 0) { return -1; }\n        \n            return indexA - indexB;\n        });\n\n        focusableRange[up ? (focusableRange.length - 1) : 0].focus();\n    }\n\n    private onFocusIn(e: FocusEvent): void {\n        if (this.focusTrapActive) { return; }\n\n        if (this.providedFocusIn) {\n            this.providedFocusIn(e);\n        }\n\n        this.deactivateTabGuards();\n    }\n\n    private onFocusOut(e: FocusEvent): void {\n        if (this.focusTrapActive) { return; }\n\n        if (this.providedFocusOut) {\n            this.providedFocusOut(e);\n        }\n\n        if (!this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\n            this.activateTabGuards();\n        }\n    }\n\n    public onTabKeyDown(e: KeyboardEvent): void {\n        if (this.providedOnTabKeyDown) {\n            this.providedOnTabKeyDown(e);\n            return;\n        }\n\n        if (this.focusTrapActive) { return; }\n        if (e.defaultPrevented) { return; }\n\n        const tabGuardsAreActive = this.tabGuardsAreActive();\n\n        if (tabGuardsAreActive) {\n            this.deactivateTabGuards();\n        }\n\n        const nextRoot = this.getNextFocusableElement(e.shiftKey);\n\n        if (tabGuardsAreActive) {\n            // ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser\n            // tabbing to the tab guard from inside the component\n            setTimeout(() => this.activateTabGuards(), 0);\n        }\n\n        if (!nextRoot) { return; }\n\n        nextRoot.focus();\n        e.preventDefault();\n    }\n\n    public focusInnerElement(fromBottom = false): void {\n        const focusable = this.focusService.findFocusableElements(this.eFocusableElement);\n\n        if (this.tabGuardsAreActive()) {\n            // remove tab guards from this component from list of focusable elements\n            focusable.splice(0, 1);\n            focusable.splice(focusable.length - 1, 1);\n        }\n\n        if (!focusable.length) { return; }\n\n        focusable[fromBottom ? focusable.length - 1 : 0].focus({ preventScroll: true });\n    }\n\n    public getNextFocusableElement(backwards?: boolean): HTMLElement | null {\n        return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        // avoid multiple calls to `forceFocusOutOfContainer`\n        if (this.forcingFocusOut) { return; }\n\n        const tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;\n\n        this.activateTabGuards();\n        this.skipTabGuardFocus = true;\n        this.forcingFocusOut = true;\n\n        // this focus will set `this.skipTabGuardFocus` to false;\n        tabGuardToFocus.focus();\n\n        window.setTimeout(() => {\n            this.forcingFocusOut = false;\n            this.activateTabGuards();\n        });\n    }\n\n    public isTabGuard(element: HTMLElement): boolean {\n        return element === this.eTopGuard || element === this.eBottomGuard;\n    }\n}\n", "import { Component } from \"./component\";\nimport { isNodeOrElement, clearElement } from \"../utils/dom\";\nimport { TabGuardCtrl, ITabGuard, TabGuardClassNames } from \"./tabGuardCtrl\";\nimport { setAriaRole } from \"../utils/aria\";\n\nexport class TabGuardComp extends Component {\n\n    private eTopGuard: HTMLElement;\n    private eBottomGuard: HTMLElement;\n    private eFocusableElement: HTMLElement;\n\n    protected tabGuardCtrl: TabGuardCtrl;\n\n    protected initialiseTabGuard(params: {\n        focusInnerElement?: (fromBottom: boolean) => void;\n        shouldStopEventPropagation?: () => boolean;\n        /**\n         * @return `true` to prevent the default onFocusIn behavior\n         */\n        onFocusIn?: (e: FocusEvent) => void;\n        /**\n         * @return `true` to prevent the default onFocusOut behavior\n         */\n        onFocusOut?: (e: FocusEvent) => void;\n        onTabKeyDown?: (e: KeyboardEvent) => void;\n        handleKeyDown?: (e: KeyboardEvent) => void;\n        /**\n         * Set to true to create a circular focus pattern when keyboard tabbing.\n         */\n        focusTrapActive?: boolean;\n        /**\n         * Set to true to find a focusable element outside of the TabGuards to focus\n         */\n        forceFocusOutWhenTabGuardsAreEmpty?: boolean;\n    }) {\n        this.eTopGuard = this.createTabGuard('top');\n        this.eBottomGuard = this.createTabGuard('bottom');\n        this.eFocusableElement = this.getFocusableElement();\n\n        const tabGuards = [this.eTopGuard, this.eBottomGuard];\n\n        const compProxy: ITabGuard = {\n            setTabIndex: tabIndex => {\n                tabGuards.forEach(tabGuard => tabIndex != null ? tabGuard.setAttribute('tabindex', tabIndex) : tabGuard.removeAttribute('tabindex'));\n            }\n        };\n\n        this.addTabGuards(this.eTopGuard, this.eBottomGuard);\n\n        this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({\n            comp: compProxy,\n            focusTrapActive: !!params.focusTrapActive,\n            eTopGuard: this.eTopGuard,\n            eBottomGuard: this.eBottomGuard,\n            eFocusableElement: this.eFocusableElement,\n            onFocusIn: params.onFocusIn,\n            onFocusOut: params.onFocusOut,\n            focusInnerElement: params.focusInnerElement,\n            handleKeyDown: params.handleKeyDown,\n            onTabKeyDown: params.onTabKeyDown,\n            shouldStopEventPropagation: params.shouldStopEventPropagation,\n            forceFocusOutWhenTabGuardsAreEmpty: params.forceFocusOutWhenTabGuardsAreEmpty\n        }));\n    }\n\n    private createTabGuard(side: 'top' | 'bottom'): HTMLElement {\n        const tabGuard = document.createElement('div');\n        const cls = side === 'top' ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;\n\n        tabGuard.classList.add(TabGuardClassNames.TAB_GUARD, cls);\n        setAriaRole(tabGuard, 'presentation');\n\n        return tabGuard;\n    }\n\n    private addTabGuards(topTabGuard: HTMLElement, bottomTabGuard: HTMLElement): void {\n        this.eFocusableElement.insertAdjacentElement('afterbegin', topTabGuard);\n        this.eFocusableElement.insertAdjacentElement('beforeend', bottomTabGuard);\n    }\n\n    protected removeAllChildrenExceptTabGuards(): void {\n        const tabGuards: [HTMLElement, HTMLElement] = [this.eTopGuard, this.eBottomGuard];\n        clearElement(this.getFocusableElement());\n        this.addTabGuards(...tabGuards);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        this.tabGuardCtrl.forceFocusOutOfContainer(up);\n    }\n\n    public appendChild(\n        newChild: Component | HTMLElement,\n        container?: HTMLElement | undefined\n    ): void {\n        if (!isNodeOrElement(newChild)) {\n            newChild = (newChild as Component).getGui();\n        }\n\n        const { eBottomGuard: bottomTabGuard } = this;\n\n        if (bottomTabGuard) {\n            bottomTabGuard.insertAdjacentElement('beforebegin', newChild as HTMLElement);\n        } else {\n            super.appendChild(newChild, container);\n        }\n    }\n}", "import { AgPromise } from '../utils';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { IAfterGuiAttachedParams } from '../interfaces/iAfterGuiAttachedParams';\nimport { clearElement } from '../utils/dom';\nimport { setAriaLabel, setAriaRole } from '../utils/aria';\nimport { KeyCode } from '../constants/keyCode';\nimport { PostConstruct, Autowired } from '../context/context';\nimport { FocusService } from '../focusService';\nimport { TabGuardComp } from '../widgets/tabGuardComp';\nimport { createIconNoSpan } from '../utils/icon';\n\nexport class TabbedLayout extends TabGuardComp {\n\n    @Autowired('focusService') private focusService: FocusService;\n\n    @RefSelector('eHeader') private readonly eHeader: HTMLElement;\n    @RefSelector('eBody') private readonly eBody: HTMLElement;\n\n    private eTabHeader: HTMLElement;\n    private eCloseButton?: HTMLElement;\n\n    private params: TabbedLayoutParams;\n    private afterAttachedParams: IAfterGuiAttachedParams;\n    private items: TabbedItemWrapper[] = [];\n    private activeItem: TabbedItemWrapper;\n    private lastScrollListener: (() => null) | null | undefined;\n    private readonly tabbedItemScrollMap = new Map<string, number>();\n\n    constructor(params: TabbedLayoutParams) {\n        super(TabbedLayout.getTemplate(params.cssClass));\n        this.params = params;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.setupHeader();\n\n        if (this.params.items) {\n            this.params.items.forEach(item => this.addItem(item));\n        }\n\n        this.initialiseTabGuard({\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this),\n            focusInnerElement: this.focusInnerElement.bind(this),\n            focusTrapActive: true\n        });\n\n        this.addDestroyFunc(() => this.activeItem?.tabbedItem?.afterDetachedCallback?.());\n    }\n\n    private static getTemplate(cssClass?: string) {\n        return /* html */ `<div class=\"ag-tabs ${cssClass}\">\n            <div ref=\"eHeader\"></div>\n            <div ref=\"eBody\" role=\"presentation\" class=\"ag-tabs-body ${cssClass ? `${cssClass}-body` : ''}\"></div>\n        </div>`;\n    }\n\n    private setupHeader(): void {\n        const { enableCloseButton, cssClass } = this.params;\n        const addCssClasses = (el: HTMLElement, suffix: string) => {\n            el.classList.add(`ag-tabs-${suffix}`);\n            if (cssClass) {\n                el.classList.add(`${cssClass}-${suffix}`);\n            }\n        }\n        if (enableCloseButton) {\n            this.setupCloseButton(addCssClasses);\n            this.eTabHeader = this.gridOptionsService.getDocument().createElement('div');\n            addCssClasses(this.eHeader, 'header-wrapper');\n            setAriaRole(this.eHeader, 'presentation');\n            this.eHeader.appendChild(this.eTabHeader);\n        } else {\n            this.eTabHeader = this.eHeader;\n        }\n        setAriaRole(this.eTabHeader, 'tablist');\n        addCssClasses(this.eTabHeader, 'header');\n    }\n\n    private setupCloseButton(addCssClasses: (el: HTMLElement, suffix: string) => void): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const eCloseButton = eDocument.createElement('button');\n        addCssClasses(eCloseButton, 'close-button');\n        const eIcon = createIconNoSpan(\n            'close',\n            this.gridOptionsService,\n            undefined,\n            true\n        )!;\n        setAriaLabel(eCloseButton, this.params.closeButtonAriaLabel);\n        eCloseButton.appendChild(eIcon);\n        this.addManagedListener(eCloseButton, 'click', () => this.params.onCloseClicked?.());\n        const eCloseButtonWrapper = eDocument.createElement('div');\n        addCssClasses(eCloseButtonWrapper, 'close-button-wrapper');\n        setAriaRole(eCloseButtonWrapper, 'presentation');\n        eCloseButtonWrapper.appendChild(eCloseButton);\n        this.eHeader.appendChild(eCloseButtonWrapper);\n        this.eCloseButton = eCloseButton;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        switch (e.key) {\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                if (!this.eTabHeader.contains(eDocument.activeElement)) { return; }\n                const isRightKey = e.key === KeyCode.RIGHT;\n                const isRtl = this.gridOptionsService.get('enableRtl');\n                const currentPosition = this.items.indexOf(this.activeItem);\n                const nextPosition = isRightKey !== isRtl ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);\n\n                if (currentPosition === nextPosition) { return; }\n\n                e.preventDefault();\n\n                const nextItem = this.items[nextPosition];\n\n                this.showItemWrapper(nextItem);\n                nextItem.eHeaderButton.focus();\n                break;\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                e.stopPropagation();\n                break;\n        }\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) { return; }\n\n        const { focusService, eHeader, eBody, activeItem, params } = this;\n        const { suppressTrapFocus, enableCloseButton } = params;\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement as HTMLElement;\n        const target = e.target as HTMLElement;\n        const backwards = e.shiftKey;\n\n        if (eHeader.contains(activeElement)) {\n            e.preventDefault();\n            if (enableCloseButton && backwards && !this.eCloseButton?.contains(activeElement)) {\n                this.eCloseButton?.focus();\n            } else if (suppressTrapFocus && backwards) {\n                this.focusService.findFocusableElementBeforeTabGuard(this.gridOptionsService.getDocument().body, target)?.focus();\n            } else {\n                // focus is in header, move into body of popup\n                this.focusBody(e.shiftKey);\n            }\n            return;\n        }\n\n        let nextEl: HTMLElement | null = null;\n\n        if (focusService.isTargetUnderManagedComponent(eBody, target)) {\n            if (backwards) {\n                nextEl = this.focusService.findFocusableElementBeforeTabGuard(eBody, target);\n            }\n\n            if (!nextEl && !suppressTrapFocus) {\n                nextEl = activeItem.eHeaderButton;\n            }\n        }\n\n        if (!nextEl && eBody.contains(activeElement)) {\n            nextEl = focusService.findNextFocusableElement(eBody, false, backwards);\n\n            if (!nextEl) {\n                e.preventDefault();\n                if (suppressTrapFocus && !backwards) {\n                    this.forceFocusOutOfContainer(backwards);\n                } else if (enableCloseButton && !backwards) {\n                    this.eCloseButton?.focus();\n                } else {\n                    this.focusHeader();\n                }\n                return;\n            }\n        }\n\n        if (nextEl) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n\n    private focusInnerElement(fromBottom?: boolean): void {\n        if (fromBottom) {\n            this.focusHeader();\n        } else {\n            this.focusBody(true);\n        }\n    }\n\n    public focusHeader(preventScroll?: boolean): void {\n        this.activeItem.eHeaderButton.focus({ preventScroll });\n    }\n\n    private focusBody(fromBottom?: boolean): void {\n        this.focusService.focusInto(this.eBody, fromBottom);\n    }\n\n    public setAfterAttachedParams(params: IAfterGuiAttachedParams): void {\n        this.afterAttachedParams = params;\n    }\n\n    public showFirstItem(): void {\n        if (this.items.length > 0) {\n            this.showItemWrapper(this.items[0]);\n        }\n    }\n\n    private addItem(item: TabbedItem): void {\n        const eHeaderButton = document.createElement('span');\n\n        setAriaRole(eHeaderButton, 'tab');\n        eHeaderButton.setAttribute('tabindex', '-1');\n        eHeaderButton.appendChild(item.title);\n        eHeaderButton.classList.add('ag-tab');\n\n        this.eTabHeader.appendChild(eHeaderButton);\n        setAriaLabel(eHeaderButton, item.titleLabel);\n\n        const wrapper: TabbedItemWrapper = {\n            tabbedItem: item,\n            eHeaderButton: eHeaderButton\n        };\n        this.items.push(wrapper);\n\n        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));\n    }\n\n    public showItem(tabbedItem: TabbedItem): void {\n        const itemWrapper = this.items.find(wrapper => wrapper.tabbedItem === tabbedItem);\n\n        if (itemWrapper) {\n            this.showItemWrapper(itemWrapper);\n        }\n    }\n\n    private showItemWrapper(wrapper: TabbedItemWrapper): void {\n        const { tabbedItem, eHeaderButton } = wrapper;\n\n        this.params.onItemClicked?.({ item: tabbedItem });\n\n        if (this.activeItem === wrapper) {\n            this.params.onActiveItemClicked?.()\n            return;\n        }\n\n        if (this.lastScrollListener) {\n            this.lastScrollListener = this.lastScrollListener();\n        }\n\n        clearElement(this.eBody);\n\n        tabbedItem.bodyPromise.then((body: HTMLElement) => {\n            this.eBody.appendChild(body);\n            const onlyUnmanaged = !this.focusService.isKeyboardMode();\n\n            if (!this.params.suppressFocusBodyOnOpen) {\n                this.focusService.focusInto(this.eBody, false, onlyUnmanaged);\n            }\n\n            if (tabbedItem.afterAttachedCallback) {\n                tabbedItem.afterAttachedCallback(this.afterAttachedParams);\n            }\n\n            if (this.params.keepScrollPosition) {\n                const scrollableContainer = (tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer()) || body;\n                this.lastScrollListener = this.addManagedListener(scrollableContainer, 'scroll', () => {\n                    this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer.scrollTop);\n                });\n                const scrollPosition = this.tabbedItemScrollMap.get(tabbedItem.name);\n                if (scrollPosition !== undefined) {\n                    // Safari needs a small timeout or it will fire a scroll event to position 0\n                    setTimeout(() => {\n                        scrollableContainer.scrollTop = scrollPosition;\n                    }, 0);\n                }\n            }\n        });\n\n        if (this.activeItem) {\n            this.activeItem.eHeaderButton.classList.remove('ag-tab-selected');\n            this.activeItem.tabbedItem.afterDetachedCallback?.();\n        }\n\n        eHeaderButton.classList.add('ag-tab-selected');\n\n        this.activeItem = wrapper;\n    }\n}\n\nexport interface TabbedLayoutParams {\n    items: TabbedItem[];\n    cssClass?: string;\n    keepScrollPosition?: boolean;\n    onItemClicked?: (event: { item: TabbedItem }) => void;\n    onActiveItemClicked?: () => void;\n    suppressFocusBodyOnOpen?: boolean;\n    suppressTrapFocus?: boolean;\n    enableCloseButton?: boolean;\n    closeButtonAriaLabel?: string;\n    onCloseClicked?: () => void;\n}\n\nexport interface TabbedItem {\n    title: Element;\n    titleLabel: string;\n    bodyPromise: AgPromise<HTMLElement>;\n    name: string;\n    getScrollableContainer?: () => HTMLElement;\n    afterAttachedCallback?: (params: IAfterGuiAttachedParams) => void;\n    afterDetachedCallback?: () => void;\n}\n\ninterface TabbedItemWrapper {\n    tabbedItem: TabbedItem;\n    eHeaderButton: HTMLElement;\n}\n", "import { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\n\nconst DEBOUNCE_DELAY = 50;\n@Bean('resizeObserverService')\nexport class ResizeObserverService extends BeanStub {\n\n    private polyfillFunctions: (() => void)[] = [];\n    private polyfillScheduled: boolean;\n\n    public observeResize(element: HTMLElement, callback: () => void): () => void {\n        const win = this.gridOptionsService.getWindow();\n        const useBrowserResizeObserver = () => {\n            const resizeObserver = new win.ResizeObserver(callback);\n            resizeObserver.observe(element);\n            return () => resizeObserver.disconnect();\n        };\n\n        const usePolyfill = () => {\n            // initialise to the current width and height, so first call will have no changes\n            let widthLastTime = element?.clientWidth ?? 0;\n            let heightLastTime = element?.clientHeight ?? 0;\n\n            // when finished, this gets turned to false.\n            let running = true;\n\n            const periodicallyCheckWidthAndHeight = () => {\n                if (running) {\n\n                    const newWidth = element?.clientWidth ?? 0;\n                    const newHeight = element?.clientHeight ?? 0;\n\n                    const changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n                    if (changed) {\n                        widthLastTime = newWidth;\n                        heightLastTime = newHeight;\n                        callback();\n                    }\n\n                    this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);\n                }\n            };\n\n            periodicallyCheckWidthAndHeight();\n\n            // the callback function we return sets running to false\n            return () => running = false;\n        };\n\n        const suppressResize = this.gridOptionsService.get('suppressBrowserResizeObserver');\n        const resizeObserverExists = !!win.ResizeObserver;\n\n        if (resizeObserverExists && !suppressResize) {\n            return useBrowserResizeObserver();\n        }\n\n        return this.getFrameworkOverrides().wrapIncoming(() => usePolyfill(), 'resize-observer');\n    }\n\n\n    private doNextPolyfillTurn(func: () => void): void {\n        this.polyfillFunctions.push(func);\n        this.schedulePolyfill();\n    }\n\n    private schedulePolyfill(): void {\n        if (this.polyfillScheduled) { return; }\n\n        const executeAllFuncs = () => {\n            const funcs = this.polyfillFunctions;\n\n            // make sure set scheduled to false and clear clear array\n            // before executing the funcs, as the funcs could add more funcs\n            this.polyfillScheduled = false;\n            this.polyfillFunctions = [];\n\n            funcs.forEach(f => f());\n        };\n\n        this.polyfillScheduled = true;\n        window.setTimeout(executeAllFuncs, DEBOUNCE_DELAY);\n    }\n\n}\n", "import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\n\ninterface TaskItem {\n    task: () => void;\n    index: number;\n    createOrder: number;\n}\n\ninterface TaskList {\n    list: TaskItem[];\n    sorted: boolean;\n}\n\n@Bean('animationFrameService')\nexport class AnimationFrameService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    // p1 and p2 are create tasks are to do with row and cell creation.\n    // for them we want to execute according to row order, so we use\n    // TaskItem so we know what index the item is for.\n    private createTasksP1: TaskList = {list: [], sorted: false}; // eg drawing back-ground of rows\n    private createTasksP2: TaskList = {list: [], sorted: false}; // eg cell renderers, adding hover functionality\n\n    // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new\n    // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as\n    // important.\n    private destroyTasks: (() => void)[] = [];\n    private ticking = false;\n    private useAnimationFrame: boolean;\n\n    // we need to know direction of scroll, to build up rows in the direction of\n    // the scroll. eg if user scrolls down, we extend the rows by building down.\n    private scrollGoingDown = true;\n    private lastPage = 0;\n    private lastScrollTop = 0;\n\n    private taskCount = 0;\n    private cancelledTasks = new Set();\n\n    public setScrollTop(scrollTop: number): void {\n        const isPaginationActive = this.gridOptionsService.get('pagination');\n        this.scrollGoingDown = scrollTop >= this.lastScrollTop;\n\n        if (isPaginationActive && scrollTop === 0) {\n            const currentPage = this.paginationProxy.getCurrentPage();\n            if (currentPage !== this.lastPage) {\n                this.lastPage = currentPage;\n                this.scrollGoingDown = true;\n            }\n        }\n\n        this.lastScrollTop = scrollTop;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.useAnimationFrame = !this.gridOptionsService.get('suppressAnimationFrame');\n    }\n\n    public isOn(): boolean {\n        return this.useAnimationFrame;\n    }\n\n    // this method is for our AG Grid sanity only - if animation frames are turned off,\n    // then no place in the code should be looking to add any work to be done in animation\n    // frames. this stops bugs - where some code is asking for a frame to be executed\n    // when it should not.\n    private verifyAnimationFrameOn(methodName: string): void {\n        if (this.useAnimationFrame === false) {\n            console.warn(`AG Grid: AnimationFrameService.${methodName} called but animation frames are off`);\n        }\n    }\n\n    public createTask(task: () => void, index: number, list: 'createTasksP1' | 'createTasksP2') {\n        this.verifyAnimationFrameOn(list);\n        const taskItem: TaskItem = {task, index, createOrder: ++this.taskCount};\n        this.addTaskToList(this[list], taskItem);\n        this.schedule();\n    }\n\n    public cancelTask(task: () => void) {\n        this.cancelledTasks.add(task);\n    }\n\n    private addTaskToList(taskList: TaskList, task: TaskItem): void {\n        taskList.list.push(task);\n        taskList.sorted = false;\n    }\n\n    private sortTaskList(taskList: TaskList) {\n        if (taskList.sorted) {\n            return;\n        }\n\n        const sortDirection = this.scrollGoingDown ? 1 : -1;\n\n        // sort first by row index (taking into account scroll direction), then by\n        // order of task creation (always ascending, so cells will render left-to-right)\n        taskList.list.sort((a, b) => a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder);\n        taskList.sorted = true;\n    }\n\n    public addDestroyTask(task: () => void): void {\n        this.verifyAnimationFrameOn('createTasksP3');\n        this.destroyTasks.push(task);\n        this.schedule();\n    }\n\n    private executeFrame(millis: number): void {\n        this.verifyAnimationFrameOn('executeFrame');\n\n        const p1TaskList = this.createTasksP1;\n        const p1Tasks = p1TaskList.list;\n\n        const p2TaskList = this.createTasksP2;\n        const p2Tasks = p2TaskList.list;\n\n        const destroyTasks = this.destroyTasks;\n\n        const frameStart = new Date().getTime();\n        let duration = (new Date().getTime()) - frameStart;\n\n        // 16ms is 60 fps\n        const noMaxMillis = millis <= 0;\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n\n        while (noMaxMillis || duration < millis) {\n            const gridBodyDidSomething = gridBodyCon.getScrollFeature().scrollGridIfNeeded();\n\n            if (!gridBodyDidSomething) {\n                let task: () => void;\n                if (p1Tasks.length) {\n                    this.sortTaskList(p1TaskList);\n                    task = p1Tasks.pop()!.task;\n                } else if (p2Tasks.length) {\n                    this.sortTaskList(p2TaskList);\n                    task = p2Tasks.pop()!.task;\n                } else if (destroyTasks.length) {\n                    task = destroyTasks.pop()!;\n                } else {\n                    this.cancelledTasks.clear();\n                    break;\n                }\n\n                if (!this.cancelledTasks.has(task)) {\n                    task();\n                }\n            }\n\n            duration = (new Date().getTime()) - frameStart;\n        }\n\n        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {\n            this.requestFrame();\n        } else {\n            this.stopTicking();\n        }\n    }\n\n    private stopTicking(): void {\n        this.ticking = false;\n    }\n\n    public flushAllFrames(): void {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        this.executeFrame(-1);\n    }\n\n    public schedule(): void {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        if (!this.ticking) {\n            this.ticking = true;\n            this.requestFrame();\n        }\n    }\n\n    private requestFrame(): void {\n        // check for the existence of requestAnimationFrame, and if\n        // it's missing, then we polyfill it with setTimeout()\n        const callback = this.executeFrame.bind(this, 60);\n        this.requestAnimationFrame(callback);\n    }\n\n    public requestAnimationFrame(callback: any) {\n        const win = this.gridOptionsService.getWindow();\n\n        if (win.requestAnimationFrame) {\n            win.requestAnimationFrame(callback);\n        } else if ((win as any).webkitRequestAnimationFrame) {\n            (win as any).webkitRequestAnimationFrame(callback);\n        } else {\n            win.setTimeout(callback, 0);\n        }\n    }\n\n    public isQueueEmpty(): boolean {\n        return !this.ticking;\n    }\n\n    // a debounce utility used for parts of the app involved with rendering.\n    // the advantage over normal debounce is the client can call flushAllFrames()\n    // to make sure all rendering is complete. we don't wait any milliseconds,\n    // as this is intended to batch calls in one VM turn.\n    public debounce(func: () => void) {\n        let pending = false;\n        return () => {\n            if (!this.isOn()) {\n                window.setTimeout(func, 0);\n                return;\n            }\n            if (pending) {\n                return;\n            }\n            pending = true;\n            this.addDestroyTask(() => {\n                pending = false;\n                func();\n            });\n        };\n    }\n}\n", "import { IRowModel } from './iRowModel';\nimport { RowNodeTransaction } from './rowNodeTransaction';\nimport { RowDataTransaction } from './rowDataTransaction';\nimport { RowNode } from '../entities/rowNode';\nimport { RowHighlightPosition } from '../interfaces/iRowNode';\nimport { ChangedPath } from '../utils/changedPath';\n\nexport type ClientSideRowModelStep = `${ClientSideRowModelSteps}`;\nexport enum ClientSideRowModelSteps {\n    EVERYTHING = 'group',\n    FILTER = 'filter',\n    SORT = 'sort',\n    MAP = 'map',\n    AGGREGATE = 'aggregate',\n    FILTER_AGGREGATES = 'filter_aggregates',\n    PIVOT = 'pivot',\n    NOTHING = 'nothing'\n}\n\nexport interface IClientSideRowModel<TData = any> extends IRowModel {\n    onRowGroupOpened(): void;\n    updateRowData(rowDataTran: RowDataTransaction<TData>, rowNodeOrder?: { [id: string]: number; } | null): RowNodeTransaction<TData> | null;\n    setRowData(rowData: any[]): void;\n    refreshModel(paramsOrStep: RefreshModelParams | ClientSideRowModelStep | undefined): void \n    expandOrCollapseAll(expand: boolean): void;\n    forEachLeafNode(callback: (node: RowNode, index: number) => void): void;\n    forEachNodeAfterFilter(callback: (node: RowNode, index: number) => void, includeFooterNodes?: boolean): void;\n    forEachNodeAfterFilterAndSort(callback: (node: RowNode, index: number) => void, includeFooterNodes?: boolean): void;\n    forEachPivotNode(callback: (node: RowNode, index: number) => void, includeFooterNodes?: boolean): void;\n    resetRowHeights(): void;\n    onRowHeightChanged(): void;\n    onRowHeightChangedDebounced(): void;\n    batchUpdateRowData(rowDataTransaction: RowDataTransaction<TData>, callback?: (res: RowNodeTransaction<TData>) => void): void;\n    flushAsyncTransactions(): void;\n    getRootNode(): RowNode;\n    doAggregate(changedPath?: ChangedPath): void;\n    getTopLevelNodes(): RowNode[] | null;\n    ensureRowsAtPixel(rowNode: RowNode[], pixel: number, increment: number): boolean;\n    highlightRowAtPixel(rowNode: RowNode | null, pixel?: number): void;\n    getHighlightPosition(pixel: number, rowNode?: RowNode): RowHighlightPosition;\n    getLastHighlightedRowNode(): RowNode | null;\n    isRowDataLoaded(): boolean;\n}\n\nexport interface RefreshModelParams<TData = any> {\n    // how much of the pipeline to execute\n    step: ClientSideRowModelSteps;\n    // if NOT new data, then this flag tells grid to check if rows already\n    // exist for the nodes (matching by node id) and reuses the row if it does.\n    keepRenderedRows?: boolean;\n    // if true, rows that are kept are animated to the new position\n    animate?: boolean;\n    // if true, then rows we are editing will be kept\n    keepEditingRows?: boolean;\n    // if doing delta updates, this has the changes that were done\n    rowNodeTransactions?: RowNodeTransaction<TData>[];\n    // if doing delta updates, this has the order of the nodes\n    rowNodeOrder?: { [id: string]: number };\n    // true user called setRowData() (or a new page in pagination). the grid scrolls\n    // back to the top when this is true.\n    newData?: boolean;\n    // true if this update is due to columns changing, ie no rows were changed\n    afterColumnsChanged?: boolean;\n    // true if all we did is changed row height, data still the same, no need to clear the undo/redo stacks\n    keepUndoRedoStack?: boolean;\n}\n", "import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { IExpansionService } from \"../interfaces/iExpansionService\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { ClientSideRowModelSteps, IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IRowNode } from \"../interfaces/iRowNode\";\n\n@Bean('expansionService')\nexport class ExpansionService extends BeanStub implements IExpansionService {\n    @Autowired('rowModel') private readonly rowModel: IRowModel;\n\n    private isClientSideRowModel: boolean;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.isClientSideRowModel = this.rowModel.getType() === 'clientSide';\n    }\n\n    public expandRows(rowIds: string[]): void {\n        if (!this.isClientSideRowModel) { return; }\n\n        const rowIdSet = new Set(rowIds);\n        this.rowModel.forEachNode(node => {\n            if (node.id && rowIdSet.has(node.id)) {\n                node.expanded = true;\n            }\n        });\n        this.onGroupExpandedOrCollapsed();\n    }\n\n    public getExpandedRows(): string[] {\n        const expandedRows: string[] = [];\n        this.rowModel.forEachNode(({ expanded, id }) => {\n            if (expanded && id) {\n                expandedRows.push(id);\n            }\n        });\n        return expandedRows;\n    }\n\n    public expandAll(value: boolean): void {\n        if (!this.isClientSideRowModel) { return; }\n        (this.rowModel as IClientSideRowModel).expandOrCollapseAll(value);\n    }\n\n    public setRowNodeExpanded(rowNode: IRowNode, expanded: boolean, expandParents?: boolean): void {\n        if (rowNode) {\n            // expand all parents recursively, except root node.\n            if (expandParents && rowNode.parent && rowNode.parent.level !== -1) {\n                this.setRowNodeExpanded(rowNode.parent, expanded, expandParents);\n            }\n\n            rowNode.setExpanded(expanded);\n        }\n    }\n\n    public onGroupExpandedOrCollapsed(): void {\n        if (!this.isClientSideRowModel) { return; }\n         // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        (this.rowModel as IClientSideRowModel).refreshModel({ step: ClientSideRowModelSteps.MAP });\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { IMenuFactory } from \"../interfaces/iMenuFactory\";\nimport { IContextMenuFactory } from \"../interfaces/iContextMenuFactory\";\nimport { Column } from \"../entities/column\";\nimport { ContainerType } from \"../interfaces/iAfterGuiAttachedParams\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { AnimationFrameService } from \"./animationFrameService\";\nimport { IColumnChooserFactory, ShowColumnChooserParams } from \"../interfaces/iColumnChooserFactory\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { isIOSUserAgent } from \"../utils/browser\";\nimport { warnOnce } from \"../utils/function\";\n\ninterface BaseShowColumnMenuParams {\n    column?: Column,\n}\n\ninterface BaseShowFilterMenuParams {\n    column: Column,\n    containerType: ContainerType;\n}\n\ninterface MouseShowMenuParams {\n    mouseEvent: MouseEvent | Touch;\n    positionBy: 'mouse';\n}\n\ninterface ButtonShowMenuParams {\n    buttonElement: HTMLElement;\n    positionBy: 'button';\n}\n\ninterface AutoShowMenuParams {\n    positionBy: 'auto';\n}\n\nexport type ShowColumnMenuParams = (MouseShowMenuParams | ButtonShowMenuParams | AutoShowMenuParams) & BaseShowColumnMenuParams;\n\nexport type ShowFilterMenuParams = (MouseShowMenuParams | ButtonShowMenuParams | AutoShowMenuParams) & BaseShowFilterMenuParams;\n\ninterface BaseShowContextMenuParams { \n    rowNode?: RowNode | null,\n    column?: Column | null,\n    value: any,\n    anchorToElement: HTMLElement\n}\n\ninterface MouseShowContextMenuParams {\n    mouseEvent: MouseEvent;\n}\n\ninterface TouchShowContextMenuParam {\n    touchEvent: TouchEvent;\n}\n\nexport type ShowContextMenuParams = (MouseShowContextMenuParams | TouchShowContextMenuParam) & BaseShowContextMenuParams;\n\n@Bean('menuService')\nexport class MenuService extends BeanStub {\n    @Optional('enterpriseMenuFactory') private readonly enterpriseMenuFactory? : IMenuFactory;\n    @Autowired('filterMenuFactory') private readonly filterMenuFactory: IMenuFactory;\n    @Optional('contextMenuFactory') private readonly contextMenuFactory?: IContextMenuFactory;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Optional('columnChooserFactory') private columnChooserFactory: IColumnChooserFactory;\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    private activeMenuFactory: IMenuFactory;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.activeMenuFactory = this.enterpriseMenuFactory ?? this.filterMenuFactory;\n    }\n\n    public showColumnMenu(params: ShowColumnMenuParams): void {\n        this.showColumnMenuCommon(this.activeMenuFactory, params, 'columnMenu');\n    }\n\n    public showFilterMenu(params: ShowFilterMenuParams): void {\n        const menuFactory: IMenuFactory = this.enterpriseMenuFactory && this.isLegacyMenuEnabled()\n            ? this.enterpriseMenuFactory\n            : this.filterMenuFactory;\n        this.showColumnMenuCommon(menuFactory, params, params.containerType, true);\n    }\n\n    public showHeaderContextMenu(column: Column | undefined, mouseEvent?: MouseEvent, touchEvent?: TouchEvent): void {\n        this.activeMenuFactory.showMenuAfterContextMenuEvent(column, mouseEvent, touchEvent);\n    }\n\n    public showContextMenu(\n        params: ShowContextMenuParams\n    ): void {\n        const { column, anchorToElement, rowNode, value } = params;\n        this.contextMenuFactory?.onContextMenu(\n            (params as MouseShowContextMenuParams).mouseEvent ?? null,\n            (params as TouchShowContextMenuParam).touchEvent ?? null,\n            rowNode ?? null,\n            column ?? null,\n            value,\n            anchorToElement\n        );\n    }\n\n    public showColumnChooser(params: ShowColumnChooserParams): void {\n        this.columnChooserFactory?.showColumnChooser(params);\n    }\n\n    public hidePopupMenu(): void {\n        // hide the context menu if in enterprise\n        this.contextMenuFactory?.hideActiveMenu();\n        // and hide the column menu always\n        this.activeMenuFactory.hideActiveMenu();\n    }\n\n    public hideColumnChooser(): void {\n        this.columnChooserFactory?.hideActiveColumnChooser();\n    }\n\n    public isColumnMenuInHeaderEnabled(column: Column): boolean {\n        const { suppressMenu, suppressHeaderMenuButton } = column.getColDef();\n        const isSuppressMenuButton = suppressHeaderMenuButton ?? suppressMenu;\n        return !isSuppressMenuButton && this.activeMenuFactory.isMenuEnabled(column) && (this.isLegacyMenuEnabled() || !!this.enterpriseMenuFactory);\n    }\n\n    public isFilterMenuInHeaderEnabled(column: Column): boolean {\n        return !column.getColDef().suppressHeaderFilterButton && this.filterManager.isFilterAllowed(column);\n    }\n\n    public isHeaderContextMenuEnabled(column?: Column): boolean {\n        return !column?.getColDef().suppressHeaderContextMenu && this.getColumnMenuType() === 'new';\n    }\n\n    public isHeaderMenuButtonAlwaysShowEnabled(): boolean {\n        return this.isSuppressMenuHide();\n    }\n\n    public isHeaderMenuButtonEnabled(): boolean {\n        // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/\n        // However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok\n        // to show it on iPad in this case (as hover isn't needed). If suppressMenuHide\n        // is false (default) user will need to use longpress to display the menu.\n        const menuHides = !this.isSuppressMenuHide();\n\n        const onIpadAndMenuHides = isIOSUserAgent() && menuHides;\n\n        return !onIpadAndMenuHides;\n    }\n\n    public isHeaderFilterButtonEnabled(column: Column): boolean {\n        return this.isFilterMenuInHeaderEnabled(column) && !this.isLegacyMenuEnabled() && !this.isFloatingFilterButtonDisplayed(column);\n    }\n\n    public isFilterMenuItemEnabled(column: Column): boolean {\n        return this.filterManager.isFilterAllowed(column) && !this.isLegacyMenuEnabled() &&\n            !this.isFilterMenuInHeaderEnabled(column) && !this.isFloatingFilterButtonDisplayed(column);\n    }\n\n    public isColumnMenuAnchoringEnabled(): boolean {\n        return !this.isLegacyMenuEnabled();\n    }\n\n    public areAdditionalColumnMenuItemsEnabled(): boolean {\n        return this.getColumnMenuType() === 'new';\n    }\n\n    public isLegacyMenuEnabled(): boolean {\n        return this.getColumnMenuType() === 'legacy';\n    }\n\n    public isFloatingFilterButtonEnabled(column: Column): boolean {\n        const colDef = column.getColDef();\n        const legacySuppressFilterButton = colDef.floatingFilterComponentParams?.suppressFilterButton;\n        if (legacySuppressFilterButton != null) {\n            warnOnce(`As of v31.1, 'colDef.floatingFilterComponentParams.suppressFilterButton' is deprecated. Use 'colDef.suppressFloatingFilterButton' instead.`);\n        }\n        return colDef.suppressFloatingFilterButton == null ? !legacySuppressFilterButton : !colDef.suppressFloatingFilterButton;\n    }\n\n    private getColumnMenuType(): 'legacy' | 'new' {\n        return this.gridOptionsService.get('columnMenu') ?? 'legacy';\n    }\n\n    private isFloatingFilterButtonDisplayed(column: Column): boolean {\n        return !!column.getColDef().floatingFilter && this.isFloatingFilterButtonEnabled(column);\n    }\n\n    private isSuppressMenuHide(): boolean {\n        const suppressMenuHide = this.gridOptionsService.get('suppressMenuHide');\n        if (this.isLegacyMenuEnabled()) {\n            return suppressMenuHide;\n        } else {\n            // default to true for new\n            return this.gridOptionsService.exists('suppressMenuHide') ? suppressMenuHide : true;\n        }\n    }\n\n    private showColumnMenuCommon(menuFactory: IMenuFactory, params: ShowColumnMenuParams, containerType: ContainerType, filtersOnly?: boolean): void {\n        const { column, positionBy } = params;\n        if (positionBy === 'button') {\n            const { buttonElement } = params;\n            menuFactory.showMenuAfterButtonClick(column, buttonElement, containerType, filtersOnly);\n        } else if (positionBy === 'mouse') {\n            const { mouseEvent } = params;\n            menuFactory.showMenuAfterMouseEvent(column, mouseEvent, containerType, filtersOnly);\n        } else if (column) {\n            // auto\n            this.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(column, 'auto');\n            // make sure we've finished scrolling into view before displaying the menu\n            this.animationFrameService.requestAnimationFrame(() => {\n                const headerCellCtrl = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned()).getHeaderCtrlForColumn(column)!;\n                menuFactory.showMenuAfterButtonClick(column, headerCellCtrl.getAnchorElementForMenu(filtersOnly), containerType, true);\n            });\n        }\n    }\n}\n", "import { RowRenderer } from \"./rowRenderer\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"../gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { RowCssClassCalculator } from \"./row/rowCssClassCalculator\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\n\n@Bean('autoWidthCalculator')\nexport class AutoWidthCalculator extends BeanStub {\n\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('rowCssClassCalculator') public rowCssClassCalculator: RowCssClassCalculator;\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCtrl = p.centerRowContainerCtrl;\n        });\n    }\n\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    public getPreferredWidthForColumn(column: Column, skipHeader?: boolean): number {\n        const eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) { return -1; }\n\n        const elements = this.rowRenderer.getAllCellsForColumn(column);\n\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            elements.push(eHeaderCell);\n        }\n\n        return this.addElementsToContainerAndGetWidth(elements);\n    }\n\n    public getPreferredWidthForColumnGroup(columnGroup: ColumnGroup): number {\n        const eHeaderCell = this.getHeaderCellForColumn(columnGroup);\n\n        if (!eHeaderCell) { return -1; }\n\n        return this.addElementsToContainerAndGetWidth([eHeaderCell]);\n    }\n\n    private addElementsToContainerAndGetWidth(elements: HTMLElement[]): number {\n        // this element has to be a form, otherwise form elements within a cell\n        // will be validated while being cloned. This can cause issues such as \n        // radio buttons being reset and losing their values.\n        const eDummyContainer = document.createElement('form');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.centerRowContainerCtrl.getContainerElement();\n\n        elements.forEach(el => this.cloneItemIntoDummy(el, eDummyContainer));\n\n        // only append the dummyContainer to the DOM after it contains all the necessary items\n        eBodyContainer.appendChild(eDummyContainer);\n\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        const dummyContainerWidth = eDummyContainer.offsetWidth;\n\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        const autoSizePadding = this.getAutoSizePadding();\n\n        return dummyContainerWidth + autoSizePadding;\n    }\n\n    private getAutoSizePadding(): number {\n        return this.gridOptionsService.get('autoSizePadding');\n    }\n\n    /* tslint:disable */\n    private getHeaderCellForColumn(column: ColumnGroup): HTMLElement | null;\n    private getHeaderCellForColumn(column: Column): HTMLElement | null;\n    private getHeaderCellForColumn(column: any): any {\n    /* tslint:enable */\n        let element: HTMLElement | null = null;\n\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach(container => {\n                const res = container.getHtmlElementForColumnHeader(column);\n                if (res != null) { element = res; }\n            }\n        );\n\n        return element;\n    }\n\n    private cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void {\n        // make a deep clone of the cell\n        const eCellClone: HTMLElement = eCell.cloneNode(true) as HTMLElement;\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        const eCloneParent = document.createElement('div');\n        const eCloneParentClassList = eCloneParent.classList;\n        const isHeader = ['ag-header-cell', 'ag-header-group-cell'].some(\n            cls => eCellClone.classList.contains(cls)\n        );\n\n        if (isHeader) {\n            eCloneParentClassList.add('ag-header', 'ag-header-row');\n            eCloneParent.style.position = 'static';\n        } else {\n            eCloneParentClassList.add('ag-row');\n        }\n\n        // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\n        // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\n        // onto group items.\n        let pointer = eCell.parentElement;\n        while (pointer) {\n            const isRow = ['ag-header-row', 'ag-row'].some(\n                cls => pointer!.classList.contains(cls)\n            );\n            if (isRow) {\n                for (let i = 0; i < pointer.classList.length; i++) {\n                    const item = pointer.classList[i];\n\n                    // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\n                    // element from fitting into it's parent, and we need the element to stretch the parent\n                    // as we are measuring the parents width\n                    if (item != 'ag-row-position-absolute') {\n                        eCloneParentClassList.add(item);\n                    }\n                }\n                break;\n            }\n            pointer = pointer.parentElement;\n        }\n\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    }\n}\n", "import { RowNode } from \"../../entities/rowNode\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { RowCtrl } from \"../row/rowCtrl\";\nimport { RowCtrlMap, RowRenderer } from \"../rowRenderer\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { IRowModel, RowModelType } from \"../../interfaces/iRowModel\";\nimport { GridBodyCtrl } from \"../../gridBodyComp/gridBodyCtrl\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { last } from \"../../utils/array\";\n\nexport class StickyRowFeature extends BeanStub {\n\n    @Autowired(\"rowModel\") private rowModel: IRowModel;\n    @Autowired(\"rowRenderer\") private rowRenderer: RowRenderer;\n    @Autowired(\"ctrlsService\") private ctrlsService: CtrlsService;\n\n    private stickyRowCtrls: RowCtrl[] = [];\n    private gridBodyCtrl: GridBodyCtrl;\n    private containerHeight = 0;\n    private isClientSide: boolean;\n\n    constructor(\n        private readonly createRowCon: (rowNode: RowNode, animate: boolean, afterScroll: boolean) => RowCtrl,\n        private readonly destroyRowCtrls: (rowCtrlsMap: RowCtrlMap | null | undefined, animate: boolean) => void\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.isClientSide = this.rowModel.getType() === 'clientSide';\n\n        this.ctrlsService.whenReady(params => {\n            this.gridBodyCtrl = params.gridBodyCtrl;\n        });\n    }\n\n    public getStickyRowCtrls(): RowCtrl[] {\n        return this.stickyRowCtrls;\n    }\n\n    public checkStickyRows(): boolean {\n        let height = 0;\n\n        if (!this.gridOptionsService.isGroupRowsSticky()) {\n            return this.refreshNodesAndContainerHeight([], height);\n        }\n\n        const stickyRows: RowNode[] = [];\n        const firstPixel = this.rowRenderer.getFirstVisibleVerticalPixel();\n\n        const addStickyRow = (stickyRow: RowNode) => {\n            stickyRows.push(stickyRow);\n\n            let lastChildBottom: number;\n\n            if (this.isClientSide) {\n                let lastAncestor = stickyRow;\n                while (lastAncestor.isExpandable() && lastAncestor.expanded) {\n                    if (lastAncestor.master) {\n                        lastAncestor = lastAncestor.detailNode;\n                    } else if (lastAncestor.childrenAfterSort) {\n                        // Tree Data will have `childrenAfterSort` without any nodes, but\n                        // the current node will still be marked as expansible.\n                        if (lastAncestor.childrenAfterSort.length === 0) { break; }\n                        lastAncestor = last(lastAncestor.childrenAfterSort);\n                    }\n                }\n                lastChildBottom = lastAncestor.rowTop! + lastAncestor.rowHeight!;\n            }\n            // if the rowModel is `serverSide` as only `clientSide` and `serverSide` create this feature.\n            else {\n                if (stickyRow.master) {\n                    lastChildBottom = stickyRow.detailNode.rowTop! + stickyRow.detailNode.rowHeight!;\n                } else {\n                    const storeBounds = stickyRow.childStore?.getStoreBounds();\n                    lastChildBottom = (storeBounds?.heightPx ?? 0) + (storeBounds?.topPx ?? 0);\n                }\n            }\n\n            const stickRowBottom = firstPixel + height + stickyRow.rowHeight!;\n            if (lastChildBottom < stickRowBottom) {\n                stickyRow.stickyRowTop = height + (lastChildBottom - stickRowBottom);\n            } else {\n                stickyRow.stickyRowTop = height;\n            }\n\n            height = 0;\n            stickyRows.forEach(rowNode => {\n                const thisRowLastPx = rowNode.stickyRowTop + rowNode.rowHeight!;\n                if (height < thisRowLastPx) {\n                    height = thisRowLastPx;\n                }\n            });\n\n        };\n\n        let counter = 0;\n        while (true) {\n            const firstPixelAfterStickyRows = firstPixel + height;\n            const firstIndex = this.rowModel.getRowIndexAtPixel(firstPixelAfterStickyRows);\n            const firstRow = this.rowModel.getRow(firstIndex);\n\n            if (firstRow == null) {  break; }\n\n            // only happens when pivoting, and we are showing root node\n            if (firstRow.level < 0) { break; }\n\n            // added logic to break out of the loop when the row calculation\n            // changes while rows are becoming sticky (happens with auto height)\n            if (counter++ === 100) { break; }\n\n            const parents: RowNode[] = [];\n            let p = firstRow.parent!;\n            while (p.level >= 0) {\n                parents.push(p);\n                p = p.parent!;\n            }\n            const firstMissingParent = parents.reverse().find(parent => stickyRows.indexOf(parent) < 0 && parent.displayed);\n            if (firstMissingParent) {\n                addStickyRow(firstMissingParent);\n                continue;\n            }\n\n            // if first row is an open group, and practically shown, it needs\n            // to be stuck\n            if (firstRow.isExpandable() && firstRow.expanded && firstRow.rowTop! < firstPixelAfterStickyRows) {\n                addStickyRow(firstRow);\n                continue;\n            }\n\n            break;\n        }\n\n        return this.refreshNodesAndContainerHeight(stickyRows, height);\n    }\n\n    public refreshStickyNode(stickRowNode:  RowNode): void {\n        const allStickyNodes: RowNode[] = [];\n        for (let i = 0; i < this.stickyRowCtrls.length; i++) {\n            const currentNode = this.stickyRowCtrls[i].getRowNode();\n            if (currentNode !== stickRowNode) {\n                allStickyNodes.push(currentNode);\n            }\n        }\n\n        if (this.refreshNodesAndContainerHeight(allStickyNodes, this.containerHeight)) {\n            this.checkStickyRows();\n        }\n    }\n\n    private refreshNodesAndContainerHeight(allStickyNodes: RowNode[], height: number): boolean {\n        let stickyRowsChanged = false;\n\n        const removedCtrls = this.stickyRowCtrls.filter(ctrl => allStickyNodes.indexOf(ctrl.getRowNode()) === -1);\n        const addedNodes = allStickyNodes.filter(rowNode => this.stickyRowCtrls.findIndex(ctrl => ctrl.getRowNode() === rowNode) === -1);\n\n        if (removedCtrls.length || addedNodes.length) {\n            stickyRowsChanged = true;\n        }\n\n        const ctrlsToDestroy: RowCtrlMap = {};\n        removedCtrls.forEach(removedCtrl => {\n            ctrlsToDestroy[removedCtrl.getRowNode().id!] = removedCtrl;\n            this.stickyRowCtrls = this.stickyRowCtrls.filter(ctrl => ctrl !== removedCtrl);\n        });\n\n        for (const ctrl of Object.values(ctrlsToDestroy)) {\n            ctrl.getRowNode().sticky = false;\n        }\n\n        this.destroyRowCtrls(ctrlsToDestroy, false);\n\n        const newCtrls = addedNodes.map(rowNode => {\n            rowNode.sticky = true;\n            return this.createRowCon(rowNode, false, false);\n        });\n\n        this.stickyRowCtrls.push(...newCtrls);\n        this.stickyRowCtrls.forEach(ctrl => ctrl.setRowTop(ctrl.getRowNode().stickyRowTop));\n        this.stickyRowCtrls.sort((a, b) => b.getRowNode().rowIndex! - a.getRowNode().rowIndex!);\n\n        if (this.containerHeight !== height) {\n            this.containerHeight = height;\n            this.gridBodyCtrl.setStickyTopHeight(height);\n            stickyRowsChanged = true;\n        }\n\n        return stickyRowsChanged;\n    }\n}", "import { RowCtrl } from \"./row/rowCtrl\";\nimport { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport {\n    AgEventListener,\n    BodyScrollEvent,\n    CellFocusedEvent,\n    DisplayedRowsChangedEvent,\n    Events,\n    FirstDataRenderedEvent,\n    ModelUpdatedEvent,\n    ViewportChangedEvent\n} from \"../events\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { FocusService } from \"../focusService\";\nimport { CellPosition } from \"../entities/cellPositionUtils\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { Beans } from \"./beans\";\nimport { RowContainerHeightService } from \"./rowContainerHeightService\";\nimport { ICellRenderer } from \"./cellRenderers/iCellRenderer\";\nimport { ICellEditor } from \"../interfaces/iCellEditor\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowPosition } from \"../entities/rowPositionUtils\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { exists } from \"../utils/generic\";\nimport { getAllValuesInObject, iterateObject } from \"../utils/object\";\nimport { createArrayOfNumbers } from \"../utils/number\";\nimport { executeInAWhile } from \"../utils/function\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { GridBodyCtrl } from \"../gridBodyComp/gridBodyCtrl\";\nimport { CellCtrl } from \"./cell/cellCtrl\";\nimport { removeFromArray } from \"../utils/array\";\nimport { StickyRowFeature } from \"./features/stickyRowFeature\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { browserSupportsPreventScroll } from \"../utils/browser\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { IRowNode, VerticalScrollPosition } from \"../interfaces/iRowNode\";\n\nexport interface RowCtrlMap {\n    [key: string]: RowCtrl;\n}\n\ninterface RowNodeMap {\n    [id: string]: IRowNode;\n}\n\nexport interface GetCellsParams<TData = any> {\n    /** Optional list of row nodes to restrict operation to */\n    rowNodes?: IRowNode<TData>[];\n    /** Optional list of columns to restrict operation to */\n    columns?: (string | Column)[];\n}\n\nexport interface RefreshCellsParams<TData = any> extends GetCellsParams<TData> {\n    /** Skip change detection, refresh everything. */\n    force?: boolean;\n    /** Skip cell flashing, if cell flashing is enabled. */\n    suppressFlash?: boolean;\n}\n\nexport interface FlashCellsParams<TData = any> extends GetCellsParams<TData> {\n    /** @deprecated v31.1 Use `flashDuration` instead. */\n    flashDelay?: number;\n    /** @deprecated v31.1 Use `fadeDuration` instead. */\n    fadeDelay?: number;\n\n    /** The duration in milliseconds of how long a cell should remain in its \"flashed\" state. */\n    flashDuration?: number;\n    /** The duration in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `flashDuration` has completed. */\n    fadeDuration?: number;\n}\n\nexport interface GetCellRendererInstancesParams<TData = any> extends GetCellsParams<TData> { }\n\nexport interface GetCellEditorInstancesParams<TData = any> extends GetCellsParams<TData> { }\n\nexport interface RedrawRowsParams<TData = any> {\n    /** Row nodes to redraw */\n    rowNodes?: IRowNode<TData>[];\n}\n\n@Bean(\"rowRenderer\")\nexport class RowRenderer extends BeanStub {\n\n    @Autowired(\"animationFrameService\") private animationFrameService: AnimationFrameService;\n    @Autowired(\"paginationProxy\") private paginationProxy: PaginationProxy;\n    @Autowired(\"columnModel\") private columnModel: ColumnModel;\n    @Autowired(\"pinnedRowModel\") private pinnedRowModel: PinnedRowModel;\n    @Autowired(\"rowModel\") private rowModel: IRowModel;\n    @Autowired(\"focusService\") private focusService: FocusService;\n    @Autowired(\"beans\") private beans: Beans;\n    @Autowired(\"rowContainerHeightService\") private rowContainerHeightService: RowContainerHeightService;\n    @Autowired(\"ctrlsService\") private ctrlsService: CtrlsService;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private destroyFuncsForColumnListeners: (() => void)[] = [];\n\n    private firstRenderedRow: number;\n    private lastRenderedRow: number;\n\n    // map of row ids to row objects. keeps track of which elements\n    // are rendered for which rows in the dom.\n    private rowCtrlsByRowIndex: RowCtrlMap = {};\n    private zombieRowCtrls: RowCtrlMap = {};\n    private cachedRowCtrls: RowCtrlCache;\n    private allRowCtrls: RowCtrl[] = [];\n\n    private topRowCtrls: RowCtrl[] = [];\n    private bottomRowCtrls: RowCtrl[] = [];\n\n    private pinningLeft: boolean;\n    private pinningRight: boolean;\n\n    private firstVisibleVPixel: number;\n\n    // we only allow one refresh at a time, otherwise the internal memory structure here\n    // will get messed up. this can happen if the user has a cellRenderer, and inside the\n    // renderer they call an API method that results in another pass of the refresh,\n    // then it will be trying to draw rows in the middle of a refresh.\n    private refreshInProgress = false;\n\n    private printLayout: boolean;\n    private embedFullWidthRows: boolean;\n    private stickyRowFeature: StickyRowFeature;\n\n    private dataFirstRenderedFired = false;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.initialise();\n        });\n    }\n\n    private initialise(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.onBodyScroll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redraw.bind(this));\n\n        this.addManagedPropertyListeners(['domLayout', 'embedFullWidthRows'], () => this.onDomLayoutChanged());\n        this.addManagedPropertyListeners(['suppressMaxRenderedRowRestriction', 'rowBuffer'], () => this.redraw());\n        this.addManagedPropertyListeners([\n            'suppressCellFocus', 'getBusinessKeyForNode',\n            'fullWidthCellRenderer', 'fullWidthCellRendererParams',\n            'rowStyle', 'getRowStyle',\n            'rowClass', 'getRowClass', 'rowClassRules',\n\n            'groupRowRenderer', 'groupRowRendererParams', // maybe only needs to refresh FW rows...\n            'loadingCellRenderer', 'loadingCellRendererParams',\n            'detailCellRenderer', 'detailCellRendererParams',\n            'enableRangeSelection', 'enableCellTextSelection',\n        ], () => this.redrawRows());\n\n        if (this.gridOptionsService.isGroupRowsSticky()) {\n            const rowModelType = this.rowModel.getType();\n            if (rowModelType === 'clientSide' || rowModelType === 'serverSide') {\n                this.stickyRowFeature = this.createManagedBean(new StickyRowFeature(\n                    this.createRowCon.bind(this),\n                    this.destroyRowCtrls.bind(this)\n                ));\n            }\n        }\n\n        this.registerCellEventListeners();\n\n        this.initialiseCache();\n        this.printLayout = this.gridOptionsService.isDomLayout('print');\n        this.embedFullWidthRows = this.printLayout || this.gridOptionsService.get('embedFullWidthRows');\n\n        this.redrawAfterModelUpdate();\n    }\n\n    private initialiseCache(): void {\n        if (this.gridOptionsService.get('keepDetailRows')) {\n            const countProp = this.getKeepDetailRowsCount();\n            const count = countProp != null ? countProp : 3;\n            this.cachedRowCtrls = new RowCtrlCache(count);\n        }\n    }\n\n    private getKeepDetailRowsCount(): number {\n        return this.gridOptionsService.get('keepDetailRowsCount');\n    }\n\n    public getStickyTopRowCtrls(): RowCtrl[] {\n        if (!this.stickyRowFeature) { return []; }\n\n        return this.stickyRowFeature.getStickyRowCtrls();\n    }\n    private updateAllRowCtrls(): void {\n        const liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);\n        const zombieList = getAllValuesInObject(this.zombieRowCtrls);\n        const cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];\n\n        if (zombieList.length > 0 || cachedList.length > 0) {\n            // Only spread if we need to.\n            this.allRowCtrls = [...liveList, ...zombieList, ...cachedList];\n        } else {\n            this.allRowCtrls = liveList;\n        }\n    }\n\n    private onCellFocusChanged(event?: CellFocusedEvent) {\n        this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onCellFocused(event));\n        this.getFullWidthRowCtrls().forEach(rowCtrl => rowCtrl.onFullWidthRowFocused(event));\n    }\n\n    // in a clean design, each cell would register for each of these events. however when scrolling, all the cells\n    // registering and de-registering for events is a performance bottleneck. so we register here once and inform\n    // all active cells.\n    private registerCellEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, (event: CellFocusedEvent) => {\n            this.onCellFocusChanged(event);\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUS_CLEARED, () => {\n            this.onCellFocusChanged();\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, event => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onFlashCells(event));\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onColumnHover());\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onDisplayedColumnsChanged());\n        });\n\n        // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,\n        // then changing the width of the containers will impact left position. eg the center cols all have their\n        // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,\n        // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are\n        // in different containers so doesn't impact.\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, () => {\n            if (this.printLayout) {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onLeftChanged());\n            }\n        });\n\n        this.setupRangeSelectionListeners();\n\n        // add listeners to the grid columns\n        this.refreshListenersToColumnsForCellComps();\n        // if the grid columns change, then refresh the listeners again\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));\n\n        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));\n    }\n\n    private setupRangeSelectionListeners = () => {\n        const onRangeSelectionChanged = () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onRangeSelectionChanged());\n        };\n\n        const onColumnMovedPinnedVisible = () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.updateRangeBordersIfRangeCount());\n        };\n\n        const addRangeSelectionListeners = () => {\n            this.eventService.addEventListener(Events.EVENT_RANGE_SELECTION_CHANGED, onRangeSelectionChanged);\n            this.eventService.addEventListener(Events.EVENT_COLUMN_MOVED, onColumnMovedPinnedVisible);\n            this.eventService.addEventListener(Events.EVENT_COLUMN_PINNED, onColumnMovedPinnedVisible);\n            this.eventService.addEventListener(Events.EVENT_COLUMN_VISIBLE, onColumnMovedPinnedVisible);\n        };\n\n        const removeRangeSelectionListeners = () => {\n            this.eventService.removeEventListener(Events.EVENT_RANGE_SELECTION_CHANGED, onRangeSelectionChanged);\n            this.eventService.removeEventListener(Events.EVENT_COLUMN_MOVED, onColumnMovedPinnedVisible);\n            this.eventService.removeEventListener(Events.EVENT_COLUMN_PINNED, onColumnMovedPinnedVisible);\n            this.eventService.removeEventListener(Events.EVENT_COLUMN_VISIBLE, onColumnMovedPinnedVisible);\n        };\n        this.addDestroyFunc(() => removeRangeSelectionListeners());\n        this.addManagedPropertyListener('enableRangeSelection', (params) => {\n            const isEnabled = params.currentValue;\n            if (isEnabled) {\n                addRangeSelectionListeners();\n            } else {\n                removeRangeSelectionListeners();\n            }\n        });\n        const rangeSelectionEnabled = this.gridOptionsService.get('enableRangeSelection');\n        if (rangeSelectionEnabled) {\n            addRangeSelectionListeners();\n        }\n    }\n\n    // executes all functions in destroyFuncsForColumnListeners and then clears the list\n    private removeGridColumnListeners(): void {\n        this.destroyFuncsForColumnListeners.forEach(func => func());\n        this.destroyFuncsForColumnListeners.length = 0;\n    }\n\n    // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.\n    // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to\n    // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here\n    // once instead.\n    private refreshListenersToColumnsForCellComps(): void {\n        this.removeGridColumnListeners();\n\n        const cols = this.columnModel.getAllGridColumns();\n\n        cols.forEach(col => {\n            const forEachCellWithThisCol = (callback: (cellCtrl: CellCtrl) => void) => {\n                this.getAllCellCtrls().forEach(cellCtrl => {\n                    if (cellCtrl.getColumn() === col) {\n                        callback(cellCtrl);\n                    }\n                });\n            };\n\n            const leftChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onLeftChanged());\n            };\n            const widthChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onWidthChanged());\n            };\n            const firstRightPinnedChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onFirstRightPinnedChanged());\n            };\n            const lastLeftPinnedChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onLastLeftPinnedChanged());\n            };\n            const colDefChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onColDefChanged());\n            };\n\n            col.addEventListener('leftChanged', leftChangedListener);\n            col.addEventListener('widthChanged', widthChangedListener);\n            col.addEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\n            col.addEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\n            col.addEventListener('colDefChanged', colDefChangedListener);\n\n            this.destroyFuncsForColumnListeners.push(() => {\n                col.removeEventListener('leftChanged', leftChangedListener);\n                col.removeEventListener('widthChanged', widthChangedListener);\n                col.removeEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\n                col.removeEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\n                col.removeEventListener('colDefChanged', colDefChangedListener);\n            });\n        });\n    }\n\n    private onDomLayoutChanged(): void {\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n        const embedFullWidthRows = printLayout || this.gridOptionsService.get('embedFullWidthRows');\n\n        // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid\n        // out using absolute positioning when doing print layout\n        const destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;\n\n        this.printLayout = printLayout;\n        this.embedFullWidthRows = embedFullWidthRows;\n\n        if (destroyRows) {\n            this.redrawAfterModelUpdate({ domLayoutChanged: true });\n        }\n    }\n\n    // for row models that have datasources, when we update the datasource, we need to force the rowRenderer\n    // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.\n    public datasourceChanged(): void {\n        this.firstRenderedRow = 0;\n        this.lastRenderedRow = -1;\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n\n    private onPageLoaded(event: ModelUpdatedEvent): void {\n        const params: RefreshViewParams = {\n            recycleRows: event.keepRenderedRows,\n            animate: event.animate,\n            newData: event.newData,\n            newPage: event.newPage,\n            // because this is a model updated event (not pinned rows), we\n            // can skip updating the pinned rows. this is needed so that if user\n            // is doing transaction updates, the pinned rows are not getting constantly\n            // trashed - or editing cells in pinned rows are not refreshed and put into read mode\n            onlyBody: true\n        };\n        this.redrawAfterModelUpdate(params);\n    }\n\n    public getAllCellsForColumn(column: Column): HTMLElement[] {\n        const res: HTMLElement[] = [];\n\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            const eCell = rowCtrl.getCellElement(column);\n            if (eCell) { res.push(eCell); }\n        });\n\n        return res;\n    }\n\n    public refreshFloatingRowComps(): void {\n        this.refreshFloatingRows(\n            this.topRowCtrls,\n            this.pinnedRowModel.getPinnedTopRowData()\n        );\n\n        this.refreshFloatingRows(\n            this.bottomRowCtrls,\n            this.pinnedRowModel.getPinnedBottomRowData()\n        );\n    }\n\n    public getTopRowCtrls(): RowCtrl[] {\n        return this.topRowCtrls;\n    }\n\n    public getCentreRowCtrls(): RowCtrl[] {\n        return this.allRowCtrls;\n    }\n\n    public getBottomRowCtrls(): RowCtrl[] {\n        return this.bottomRowCtrls;\n    }\n\n    private refreshFloatingRows(rowComps: RowCtrl[], rowNodes: RowNode[]): void {\n        rowComps.forEach((row: RowCtrl) => {\n            row.destroyFirstPass();\n            row.destroySecondPass();\n        });\n\n        rowComps.length = 0;\n\n        if (!rowNodes) { return; }\n\n        rowNodes.forEach(rowNode => {\n            const rowCtrl = new RowCtrl(\n                rowNode,\n                this.beans,\n                false,\n                false,\n                this.printLayout\n            );\n\n            rowComps.push(rowCtrl);\n        });\n    }\n\n    private onPinnedRowDataChanged(): void {\n        // recycling rows in order to ensure cell editing is not cancelled\n        const params: RefreshViewParams = {\n            recycleRows: true\n        };\n\n        this.redrawAfterModelUpdate(params);\n    }\n\n    public redrawRow(rowNode: RowNode, suppressEvent = false) {\n        if (rowNode.sticky) {\n            this.stickyRowFeature.refreshStickyNode(rowNode);\n        } else if (this.cachedRowCtrls?.has(rowNode)) {\n            // delete row from cache if it needs redrawn\n            // if it's in the cache no updates need fired, as nothing\n            // has been rendered\n            this.cachedRowCtrls.removeRow(rowNode);\n            return;\n        } else {\n            const destroyAndRecreateCtrl = (dataStruct: RowCtrl[] | { [idx: number]: RowCtrl }) => {\n                const ctrl = dataStruct[rowNode.rowIndex!];\n                if (!ctrl) {\n                    return;\n                }\n                if (ctrl.getRowNode() !== rowNode) {\n                    // if the node is in the wrong place, then the row model is responsible for triggering a full refresh.\n                    return;\n                }\n                ctrl.destroyFirstPass();\n                ctrl.destroySecondPass();\n                dataStruct[rowNode.rowIndex!] = this.createRowCon(rowNode, false, false);\n            }\n\n            switch (rowNode.rowPinned) {\n                case 'top':\n                    destroyAndRecreateCtrl(this.topRowCtrls);\n                    break;\n                case 'bottom':\n                    destroyAndRecreateCtrl(this.bottomRowCtrls);\n                    break;\n                default:\n                    destroyAndRecreateCtrl(this.rowCtrlsByRowIndex);\n                    this.updateAllRowCtrls();\n            }\n        }\n\n        if (!suppressEvent) {\n            this.dispatchDisplayedRowsChanged(false);\n        }\n    }\n\n    public redrawRows(rowNodes?: IRowNode[]): void {\n        // if no row nodes provided, then refresh everything\n        const partialRefresh = rowNodes != null;\n\n        if (partialRefresh) {\n            rowNodes?.forEach(node => this.redrawRow(node as RowNode, true));\n            this.dispatchDisplayedRowsChanged(false);\n            return;\n        }\n\n        this.redrawAfterModelUpdate();\n    }\n\n    private getCellToRestoreFocusToAfterRefresh(params?: RefreshViewParams): CellPosition | null {\n        const focusedCell = (params?.suppressKeepFocus) ? null : this.focusService.getFocusCellToUseAfterRefresh();\n\n        if (focusedCell == null) { return null; }\n\n        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this\n        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the\n        // cell itself, then the cell can be registered as having focus, however it's the text field that\n        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus\n        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,\n        // the focus is lost from the text field. we do not want this.\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement;\n        const cellDomData = this.gridOptionsService.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const rowDomData = this.gridOptionsService.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n\n        const gridElementFocused = cellDomData || rowDomData;\n\n        return gridElementFocused ? focusedCell : null;\n    }\n\n    // gets called from:\n    // +) initialisation (in registerGridComp) params = null\n    // +) onDomLayoutChanged, params = null\n    // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true\n    // +) onPinnedRowDataChanged, recycleRows = true\n    // +) redrawRows (from Grid API), recycleRows = true/false\n    private redrawAfterModelUpdate(params: RefreshViewParams = {}): void {\n        this.getLockOnRefresh();\n\n        const focusedCell: CellPosition | null = this.getCellToRestoreFocusToAfterRefresh(params);\n\n        this.updateContainerHeights();\n        this.scrollToTopIfNewData(params);\n\n        // never recycle rows on layout change as rows could change from normal DOM layout\n        // back to the grid's row positioning.\n        const recycleRows: boolean = !params.domLayoutChanged && !!params.recycleRows;\n        const animate = params.animate && this.gridOptionsService.isAnimateRows();\n\n        // after modelUpdate, row indexes can change, so we clear out the rowsByIndex map,\n        // however we can reuse the rows, so we keep them but index by rowNode.id\n        const rowsToRecycle = recycleRows ? this.getRowsToRecycle() : null;\n        if (!recycleRows) {\n            this.removeAllRowComps();\n        }\n\n        this.workOutFirstAndLastRowsToRender();\n\n        if (this.stickyRowFeature) {\n            this.stickyRowFeature.checkStickyRows();\n        }\n\n        this.recycleRows(rowsToRecycle, animate);\n\n        this.gridBodyCtrl.updateRowCount();\n\n        if (!params.onlyBody) {\n            this.refreshFloatingRowComps();\n        }\n\n        this.dispatchDisplayedRowsChanged();\n\n        // if a cell was focused before, ensure focus now.\n        if (focusedCell != null) {\n            this.restoreFocusedCell(focusedCell);\n        }\n\n        this.releaseLockOnRefresh();\n    }\n\n    private scrollToTopIfNewData(params: RefreshViewParams): void {\n        const scrollToTop = params.newData || params.newPage;\n        const suppressScrollToTop = this.gridOptionsService.get('suppressScrollOnNewData');\n\n        if (scrollToTop && !suppressScrollToTop) {\n            this.gridBodyCtrl.getScrollFeature().scrollToTop();\n        }\n    }\n\n    private updateContainerHeights(): void {\n        // when doing print layout, we don't explicitly set height on the containers\n        if (this.printLayout) {\n            this.rowContainerHeightService.setModelHeight(null);\n            return;\n        }\n\n        let containerHeight = this.paginationProxy.getCurrentPageHeight();\n        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,\n        // we still want the scroll to be present, otherwise there would be no way to scroll the header\n        // which might be needed us user wants to access columns\n        // on the RHS - and if that was where the filter was that cause no rows to be presented, there\n        // is no way to remove the filter.\n        if (containerHeight === 0) {\n            containerHeight = 1;\n        }\n\n        this.rowContainerHeightService.setModelHeight(containerHeight);\n    }\n\n    private getLockOnRefresh(): void {\n        if (this.refreshInProgress) {\n            throw new Error(\n                \"AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. \" +\n                \"Your code probably called a grid API method while the grid was in the render stage. To overcome \" +\n                \"this, put the API call into a timeout, e.g. instead of api.redrawRows(), \" +\n                \"call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code \" +\n                \"that caused the refresh check this stacktrace.\"\n            );\n        }\n\n        this.refreshInProgress = true;\n    }\n\n    private releaseLockOnRefresh(): void {\n        this.refreshInProgress = false;\n    }\n\n    public isRefreshInProgress(): boolean {\n        return this.refreshInProgress;\n    }\n\n    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without\n    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits\n    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the\n    // edited cell).\n    private restoreFocusedCell(cellPosition: CellPosition | null): void {\n        if (cellPosition) {\n            // we don't wish to dispatch an event as the rowRenderer is not capable of changing the selected cell,\n            // so we mock a change event for the full width rows and cells to ensure they update to the newly selected\n            // state\n            this.focusService.setRestoreFocusedCell(cellPosition);\n\n            this.onCellFocusChanged(this.beans.gridOptionsService.addGridCommonParams<CellFocusedEvent>({\n                rowIndex: cellPosition.rowIndex,\n                column: cellPosition.column,\n                rowPinned: cellPosition.rowPinned,\n                forceBrowserFocus: true,\n                preventScrollOnBrowserFocus: true,\n                type: 'mock',\n            }));\n        }\n    }\n\n    public stopEditing(cancel: boolean = false) {\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            rowCtrl.stopEditing(cancel);\n        });\n    }\n\n    public getAllCellCtrls(): CellCtrl[] {\n        const res: CellCtrl[] = [];\n        const rowCtrls = this.getAllRowCtrls();\n        const rowCtrlsLength = rowCtrls.length;\n\n        for (let i = 0; i < rowCtrlsLength; i++) {\n            const cellCtrls = rowCtrls[i].getAllCellCtrls();\n            const cellCtrlsLength = cellCtrls.length;\n\n            for (let j = 0; j < cellCtrlsLength; j++) {\n                res.push(cellCtrls[j]);\n            }\n        }\n\n        return res;\n    }\n\n    private getAllRowCtrls(): RowCtrl[] {\n        const stickyRowCtrls = (this.stickyRowFeature && this.stickyRowFeature.getStickyRowCtrls()) || [];\n        const res = [...this.topRowCtrls, ...this.bottomRowCtrls, ...stickyRowCtrls];\n\n        for (const key of Object.keys(this.rowCtrlsByRowIndex)) {\n            res.push(this.rowCtrlsByRowIndex[key]);\n        }\n        return res;\n    }\n\n    public addRenderedRowListener(eventName: string, rowIndex: number, callback: AgEventListener): void {\n        const rowComp = this.rowCtrlsByRowIndex[rowIndex];\n        if (rowComp) {\n            rowComp.addEventListener(eventName, callback);\n        }\n    }\n\n    public flashCells(params: FlashCellsParams = {}): void {\n        this.getCellCtrls(params.rowNodes, params.columns)\n            .forEach(cellCtrl => cellCtrl.flashCell(params));\n    }\n\n    public refreshCells(params: RefreshCellsParams = {}): void {\n        const refreshCellParams = {\n            forceRefresh: params.force,\n            newData: false,\n            suppressFlash: params.suppressFlash\n        };\n        this.getCellCtrls(params.rowNodes, params.columns)\n            .forEach(cellCtrl => cellCtrl.refreshOrDestroyCell(refreshCellParams));\n\n        if (params.rowNodes) {\n            // refresh the full width rows too\n            this.getRowCtrls(params.rowNodes).forEach(rowCtrl => {\n                if (!rowCtrl.isFullWidth()) {\n                    return;\n                }\n                const refreshed = rowCtrl.refreshFullWidth();\n                if (!refreshed) {\n                    this.redrawRow(rowCtrl.getRowNode(), true);\n                }\n            });\n            this.dispatchDisplayedRowsChanged(false);\n        }\n    }\n\n    public getCellRendererInstances(params: GetCellRendererInstancesParams): ICellRenderer[] {\n        const cellRenderers = this.getCellCtrls(params.rowNodes, params.columns)\n            .map(cellCtrl => cellCtrl.getCellRenderer())\n            .filter(renderer => renderer != null) as ICellRenderer[];\n        if (params.columns?.length) {\n            return cellRenderers;\n        }\n\n        const fullWidthRenderers: ICellRenderer[] = [];\n        const rowIdMap = this.mapRowNodes(params.rowNodes);\n\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            if (rowIdMap && !this.isRowInMap(rowCtrl.getRowNode(), rowIdMap)) {\n                return;\n            }\n\n            if (!rowCtrl.isFullWidth()) {\n                return;\n            }\n\n            const renderers = rowCtrl.getFullWidthCellRenderers();\n            for (let i = 0; i < renderers.length; i++) {\n                const renderer = renderers[i];\n                if (renderer != null) {\n                    fullWidthRenderers.push(renderer);\n                }\n            }\n        });\n\n        return [...fullWidthRenderers, ...cellRenderers];\n    }\n\n    public getCellEditorInstances(params: GetCellRendererInstancesParams): ICellEditor[] {\n\n        const res: ICellEditor[] = [];\n\n        this.getCellCtrls(params.rowNodes, params.columns).forEach(cellCtrl => {\n            const cellEditor = cellCtrl.getCellEditor() as ICellEditor;\n\n            if (cellEditor) {\n                res.push(cellEditor);\n            }\n        });\n\n        return res;\n    }\n\n    public getEditingCells(): CellPosition[] {\n        const res: CellPosition[] = [];\n\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.isEditing()) {\n                const cellPosition = cellCtrl.getCellPosition();\n                res.push(cellPosition);\n            }\n        });\n\n        return res;\n    }\n\n    private mapRowNodes(rowNodes?: IRowNode[] | null): { top: RowNodeMap, bottom: RowNodeMap, normal: RowNodeMap } | undefined {\n        if (!rowNodes) { return; }\n\n        const res: {top: RowNodeMap, bottom: RowNodeMap, normal: RowNodeMap} = {\n            top: {},\n            bottom: {},\n            normal: {}\n        };\n\n        rowNodes.forEach(rowNode => {\n            const id = rowNode.id!;\n            if (rowNode.rowPinned === 'top') {\n                res.top[id] = rowNode;\n            } else if (rowNode.rowPinned === 'bottom') {\n                res.bottom[id] = rowNode;\n            } else {\n                res.normal[id] = rowNode;\n            }\n        });\n\n        return res;\n    }\n\n    private isRowInMap(rowNode: RowNode, rowIdsMap: {top: RowNodeMap, bottom: RowNodeMap, normal: RowNodeMap}): boolean {\n        // skip this row if it is missing from the provided list\n        const id = rowNode.id!;\n        const floating = rowNode.rowPinned;\n\n        if (floating === 'bottom') {\n            return rowIdsMap.bottom[id] != null;\n        }\n\n        if (floating === 'top') {\n            return rowIdsMap.top[id] != null;\n        }\n\n        return rowIdsMap.normal[id] != null;\n    }\n\n    /**\n     * @param rowNodes if provided, returns the RowCtrls for the provided rowNodes. otherwise returns all RowCtrls.\n     */\n    public getRowCtrls(rowNodes?: IRowNode[] | null): RowCtrl[] {\n        const rowIdsMap = this.mapRowNodes(rowNodes);\n        const allRowCtrls = this.getAllRowCtrls();\n        if (!rowNodes || !rowIdsMap) {\n            return allRowCtrls;\n        }\n\n        return allRowCtrls.filter(rowCtrl => {\n            const rowNode = rowCtrl.getRowNode();\n            return this.isRowInMap(rowNode, rowIdsMap);\n        });\n    }\n\n    // returns CellCtrl's that match the provided rowNodes and columns. eg if one row node\n    // and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.\n    private getCellCtrls(rowNodes?: IRowNode[] | null, columns?: (string | Column)[]): CellCtrl[] {\n        let colIdsMap: any;\n        if (exists(columns)) {\n            colIdsMap = {};\n            columns.forEach((colKey: string | Column) => {\n                const column: Column | null = this.columnModel.getGridColumn(colKey);\n                if (exists(column)) {\n                    colIdsMap[column.getId()] = true;\n                }\n            });\n        }\n\n        const res: CellCtrl[] = [];\n        this.getRowCtrls(rowNodes).forEach(rowCtrl => {\n            rowCtrl.getAllCellCtrls().forEach(cellCtrl => {\n                const colId: string = cellCtrl.getColumn().getId();\n                const excludeColFromRefresh = colIdsMap && !colIdsMap[colId];\n\n                if (excludeColFromRefresh) { return; }\n\n                res.push(cellCtrl);\n            });\n        });\n        return res;\n    }\n\n    protected destroy(): void {\n        this.removeAllRowComps();\n        super.destroy();\n    }\n\n    private removeAllRowComps(): void {\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n\n    private getRowsToRecycle(): RowCtrlMap {\n        // remove all stub nodes, they can't be reused, as no rowNode id\n        const stubNodeIndexes: string[] = [];\n        iterateObject(this.rowCtrlsByRowIndex, (index: string, rowComp: RowCtrl) => {\n            const stubNode = rowComp.getRowNode().id == null;\n            if (stubNode) {\n                stubNodeIndexes.push(index);\n            }\n        });\n        this.removeRowCtrls(stubNodeIndexes);\n\n        // then clear out rowCompsByIndex, but before that take a copy, but index by id, not rowIndex\n        const ctrlsByIdMap: RowCtrlMap = {};\n        iterateObject(this.rowCtrlsByRowIndex, (index: string, rowComp: RowCtrl) => {\n            const rowNode = rowComp.getRowNode();\n            ctrlsByIdMap[rowNode.id!] = rowComp;\n        });\n        this.rowCtrlsByRowIndex = {};\n\n        return ctrlsByIdMap;\n    }\n\n    // takes array of row indexes\n    private removeRowCtrls(rowsToRemove: any[], suppressAnimation: boolean = false) {\n        // if no fromIndex then set to -1, which will refresh everything\n        // let realFromIndex = -1;\n\n        rowsToRemove.forEach((indexToRemove) => {\n            const rowCtrl = this.rowCtrlsByRowIndex[indexToRemove];\n            if (rowCtrl) {\n                rowCtrl.destroyFirstPass(suppressAnimation);\n                rowCtrl.destroySecondPass();\n            }\n            delete this.rowCtrlsByRowIndex[indexToRemove];\n        });\n    }\n\n    private onBodyScroll(e: BodyScrollEvent) {\n        if (e.direction !== 'vertical') { return; }\n        this.redraw({ afterScroll: true });\n    }\n\n    // gets called when rows don't change, but viewport does, so after:\n    // 1) height of grid body changes, ie number of displayed rows has changed\n    // 2) grid scrolled to new position\n    // 3) ensure index visible (which is a scroll)\n    public redraw(params: { afterScroll?: boolean } = {}) {\n        const { afterScroll } = params;\n        let cellFocused: CellPosition | undefined;\n\n        // only try to refocus cells shifting in and out of sticky container\n        // if the browser supports focus ({ preventScroll })\n        if (this.stickyRowFeature && browserSupportsPreventScroll()) {\n            cellFocused = this.getCellToRestoreFocusToAfterRefresh() || undefined;\n        }\n\n        const oldFirstRow = this.firstRenderedRow;\n        const oldLastRow = this.lastRenderedRow;\n        this.workOutFirstAndLastRowsToRender();\n\n        let hasStickyRowChanges = false;\n\n        if (this.stickyRowFeature) {\n            hasStickyRowChanges = this.stickyRowFeature.checkStickyRows();\n        }\n\n        const rangeChanged = this.firstRenderedRow !== oldFirstRow || this.lastRenderedRow !== oldLastRow;\n\n        if (afterScroll && !hasStickyRowChanges && !rangeChanged) { return; }\n\n        this.getLockOnRefresh();\n        this.recycleRows(null, false, afterScroll);\n        this.releaseLockOnRefresh();\n        // AfterScroll results in flushSync in React but we need to disable flushSync for sticky row group changes to avoid flashing\n        this.dispatchDisplayedRowsChanged(afterScroll && !hasStickyRowChanges);\n\n        if (cellFocused != null) {\n            const newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();\n\n            if (cellFocused != null && newFocusedCell == null) {\n                this.animationFrameService.flushAllFrames();\n                this.restoreFocusedCell(cellFocused);\n            }\n        }\n    }\n\n    private removeRowCompsNotToDraw(indexesToDraw: number[], suppressAnimation: boolean): void {\n        // for speedy lookup, dump into map\n        const indexesToDrawMap: { [index: string]: boolean; } = {};\n        indexesToDraw.forEach(index => (indexesToDrawMap[index] = true));\n\n        const existingIndexes = Object.keys(this.rowCtrlsByRowIndex);\n        const indexesNotToDraw: string[] = existingIndexes.filter(index => !indexesToDrawMap[index]);\n\n        this.removeRowCtrls(indexesNotToDraw, suppressAnimation);\n    }\n\n    private calculateIndexesToDraw(rowsToRecycle?: { [key: string]: RowCtrl; } | null): number[] {\n        // all in all indexes in the viewport\n        let indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);\n\n        const checkRowToDraw = (indexStr: string, rowComp: RowCtrl) => {\n            const index = rowComp.getRowNode().rowIndex;\n            if (index == null) { return; }\n            if (index < this.firstRenderedRow || index > this.lastRenderedRow) {\n                if (this.doNotUnVirtualiseRow(rowComp)) {\n                    indexesToDraw.push(index);\n                }\n            }\n        };\n\n        // if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex\n        iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);\n\n        // if we are redrawing due to model update, then old rows are in rowsToRecycle\n        iterateObject(rowsToRecycle, checkRowToDraw);\n\n        indexesToDraw.sort((a: number, b: number) => a - b);\n\n        const ret: number[] = [];\n\n        for (let i = 0; i < indexesToDraw.length; i++) {\n            const currRow = indexesToDraw[i];\n            const rowNode = this.paginationProxy.getRow(currRow);\n            if (rowNode && !rowNode.sticky) {\n                ret.push(currRow);\n            }\n        }\n\n        return ret;\n    }\n\n    private recycleRows(rowsToRecycle?: { [key: string]: RowCtrl; } | null, animate = false, afterScroll = false) {\n        // the row can already exist and be in the following:\n        // rowsToRecycle -> if model change, then the index may be different, however row may\n        //                         exist here from previous time (mapped by id).\n        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport\n\n        // this is all the indexes we want, including those that already exist, so this method\n        // will end up going through each index and drawing only if the row doesn't already exist\n        const indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);\n        \n        // never animate when doing print layout - as we want to get things ready to print as quickly as possible,\n        // otherwise we risk the printer printing a row that's half faded (half way through fading in)\n        // Don't animate rows that have been added or removed as part of scrolling\n        if (this.printLayout || afterScroll) {\n            animate = false;\n        }\n        \n        this.removeRowCompsNotToDraw(indexesToDraw, !animate);\n\n        // add in new rows\n        const rowCtrls: RowCtrl[] = [];\n\n        indexesToDraw.forEach(rowIndex => {\n            const rowCtrl = this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);\n            if (exists(rowCtrl)) {\n                rowCtrls.push(rowCtrl);\n            }\n        });\n\n        if (rowsToRecycle) {\n            const useAnimationFrame = afterScroll && !this.gridOptionsService.get('suppressAnimationFrame') && !this.printLayout;\n            if (useAnimationFrame) {\n                this.beans.animationFrameService.addDestroyTask(() => {\n                    this.destroyRowCtrls(rowsToRecycle, animate);\n                    this.updateAllRowCtrls();\n                    this.dispatchDisplayedRowsChanged();\n                });\n            } else {\n                this.destroyRowCtrls(rowsToRecycle, animate);\n            }\n        }\n\n        this.updateAllRowCtrls();\n    }\n\n    private dispatchDisplayedRowsChanged(afterScroll: boolean = false): void {\n        const event: WithoutGridCommon<DisplayedRowsChangedEvent> = { type: Events.EVENT_DISPLAYED_ROWS_CHANGED, afterScroll };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const pinningLeft = this.columnModel.isPinningLeft();\n        const pinningRight = this.columnModel.isPinningRight();\n        const atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;\n\n        if (atLeastOneChanged) {\n            this.pinningLeft = pinningLeft;\n            this.pinningRight = pinningRight;\n\n            if (this.embedFullWidthRows) {\n                this.redrawFullWidthEmbeddedRows();\n            }\n        }\n    }\n\n    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,\n    // then it should go into the pinned left area if pinning left, or the center area if not pinning.\n    private redrawFullWidthEmbeddedRows(): void {\n        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when\n        // embedded, as what appears in each section depends on whether we are pinned or not\n        const rowsToRemove: string[] = [];\n\n        this.getFullWidthRowCtrls().forEach(fullWidthCtrl => {\n            const rowIndex = fullWidthCtrl.getRowNode().rowIndex;\n            rowsToRemove.push(rowIndex!.toString());\n        });\n\n        this.refreshFloatingRowComps();\n        this.removeRowCtrls(rowsToRemove);\n        this.redraw({ afterScroll: true });\n    }\n\n    public getFullWidthRowCtrls(rowNodes?: IRowNode[]): RowCtrl[] {\n        const rowNodesMap = this.mapRowNodes(rowNodes);\n        \n        return this.getAllRowCtrls().filter((rowCtrl: RowCtrl) => {\n            // include just full width\n            if (!rowCtrl.isFullWidth()) { return false; }\n\n            // if Row Nodes provided, we exclude where Row Node is missing\n            const rowNode = rowCtrl.getRowNode();\n            if (rowNodesMap != null && !this.isRowInMap(rowNode, rowNodesMap)) { return false; }\n\n            return true;\n        });\n    }\n\n    private createOrUpdateRowCtrl(\n        rowIndex: number,\n        rowsToRecycle: { [key: string]: RowCtrl | null; } | null | undefined,\n        animate: boolean,\n        afterScroll: boolean\n    ): RowCtrl | null | undefined {\n        let rowNode: RowNode | undefined;\n        let rowCtrl: RowCtrl | null = this.rowCtrlsByRowIndex[rowIndex];\n\n        // if no row comp, see if we can get it from the previous rowComps\n        if (!rowCtrl) {\n            rowNode = this.paginationProxy.getRow(rowIndex);\n            if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id!] && rowNode.alreadyRendered) {\n                rowCtrl = rowsToRecycle[rowNode.id!];\n                rowsToRecycle[rowNode.id!] = null;\n            }\n        }\n\n        const creatingNewRowCtrl = !rowCtrl;\n\n        if (creatingNewRowCtrl) {\n            // create a new one\n            if (!rowNode) {\n                rowNode = this.paginationProxy.getRow(rowIndex);\n            }\n\n            if (exists(rowNode)) {\n                rowCtrl = this.createRowCon(rowNode, animate, afterScroll);\n            } else {\n                // this should never happen - if somehow we are trying to create\n                // a row for a rowNode that does not exist.\n                return;\n            }\n        }\n\n        if (rowNode) {\n            // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures\n            // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.\n            rowNode.alreadyRendered = true;\n        }\n\n        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl!;\n\n        return rowCtrl;\n    }\n\n    private destroyRowCtrls(rowCtrlsMap: RowCtrlMap | null | undefined, animate: boolean): void {\n        const executeInAWhileFuncs: (() => void)[] = [];\n        iterateObject(rowCtrlsMap, (nodeId: string, rowCtrl: RowCtrl) => {\n            // if row was used, then it's null\n            if (!rowCtrl) { return; }\n\n            if (this.cachedRowCtrls && rowCtrl.isCacheable()) {\n                this.cachedRowCtrls.addRow(rowCtrl);\n                return;\n            }\n\n            rowCtrl.destroyFirstPass(!animate);\n            if (animate) {\n                this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;\n                executeInAWhileFuncs.push(() => {\n                    rowCtrl.destroySecondPass();\n                    delete this.zombieRowCtrls[rowCtrl.getInstanceId()];\n                });\n            } else {\n                rowCtrl.destroySecondPass();\n            }\n        });\n        if (animate) {\n            // this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get\n            // executed, as we added it to the end of the list.\n            executeInAWhileFuncs.push(() => {\n                this.updateAllRowCtrls();\n                this.dispatchDisplayedRowsChanged();\n            });\n            executeInAWhile(executeInAWhileFuncs);\n        }\n    }\n\n    private getRowBuffer(): number {\n        return this.gridOptionsService.get('rowBuffer');\n    }\n\n    private getRowBufferInPixels() {\n        const rowsToBuffer = this.getRowBuffer();\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n\n        return rowsToBuffer * defaultRowHeight;\n    }\n\n    private workOutFirstAndLastRowsToRender(): void {\n        this.rowContainerHeightService.updateOffset();\n        let newFirst: number;\n        let newLast: number;\n\n        if (!this.paginationProxy.isRowsToRender()) {\n            newFirst = 0;\n            newLast = -1; // setting to -1 means nothing in range\n        } else if (this.printLayout) {\n            this.environment.refreshRowHeightVariable();\n            newFirst = this.paginationProxy.getPageFirstRow();\n            newLast = this.paginationProxy.getPageLastRow();\n        } else {\n            const bufferPixels = this.getRowBufferInPixels();\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            const suppressRowVirtualisation = this.gridOptionsService.get('suppressRowVirtualisation');\n\n            let rowHeightsChanged = false;\n            let firstPixel: number;\n            let lastPixel: number;\n            do {\n                const paginationOffset = this.paginationProxy.getPixelOffset();\n                const {pageFirstPixel, pageLastPixel} = this.paginationProxy.getCurrentPagePixelRange();\n                const divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();\n\n                const bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();\n                const bodyTopPixel = bodyVRange.top;\n                const bodyBottomPixel = bodyVRange.bottom;\n\n                if (suppressRowVirtualisation) {\n                    firstPixel = pageFirstPixel + divStretchOffset;\n                    lastPixel = pageLastPixel + divStretchOffset;\n                } else {\n                    firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;\n                    lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;\n                }\n\n                this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;\n\n                // if the rows we are about to display get their heights changed, then that upsets the calcs from above.\n                rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);\n\n            } while (rowHeightsChanged);\n\n            let firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);\n            let lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);\n\n            const pageFirstRow = this.paginationProxy.getPageFirstRow();\n            const pageLastRow = this.paginationProxy.getPageLastRow();\n\n            // adjust, in case buffer extended actual size\n            if (firstRowIndex < pageFirstRow) {\n                firstRowIndex = pageFirstRow;\n            }\n\n            if (lastRowIndex > pageLastRow) {\n                lastRowIndex = pageLastRow;\n            }\n\n            newFirst = firstRowIndex;\n            newLast = lastRowIndex;\n        }\n\n        // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up\n        // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of\n        // killing the browser, we limit the number of rows. just in case some use case we didn't think\n        // of, we also have a property to not do this operation.\n        const rowLayoutNormal = this.gridOptionsService.isDomLayout('normal');\n        const suppressRowCountRestriction = this.gridOptionsService.get('suppressMaxRenderedRowRestriction');\n        const rowBufferMaxSize = Math.max(this.getRowBuffer(), 500);\n\n        if (rowLayoutNormal && !suppressRowCountRestriction) {\n            if (newLast - newFirst > rowBufferMaxSize) {\n                newLast = newFirst + rowBufferMaxSize;\n            }\n        }\n\n        const firstDiffers = newFirst !== this.firstRenderedRow;\n        const lastDiffers = newLast !== this.lastRenderedRow;\n\n        if (firstDiffers || lastDiffers) {\n            this.firstRenderedRow = newFirst;\n            this.lastRenderedRow = newLast;\n\n            const event: WithoutGridCommon<ViewportChangedEvent> = {\n                type: Events.EVENT_VIEWPORT_CHANGED,\n                firstRow: newFirst,\n                lastRow: newLast\n            };\n\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * This event will only be fired once, and is queued until after the browser next renders.\n     * This allows us to fire an event during the start of the render cycle, when we first see data being rendered\n     * but not execute the event until all of the data has finished being rendered to the dom.\n     */\n    public dispatchFirstDataRenderedEvent() {\n        if (this.dataFirstRenderedFired) { return; }\n        this.dataFirstRenderedFired = true;\n\n        const event: WithoutGridCommon<FirstDataRenderedEvent> = {\n            type: Events.EVENT_FIRST_DATA_RENDERED,\n            firstRow: this.firstRenderedRow,\n            lastRow: this.lastRenderedRow,\n        };\n\n        // See AG-7018\n        window.requestAnimationFrame(() => {\n            this.beans.eventService.dispatchEvent(event);\n        });\n    }\n\n    private ensureAllRowsInRangeHaveHeightsCalculated(topPixel: number, bottomPixel: number): boolean {\n        // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.\n        // all the other row models just hard code so the method just returns back false\n        const res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);\n\n        if (res) {\n            this.updateContainerHeights();\n        }\n\n        return res;\n    }\n\n    public getFirstVisibleVerticalPixel(): number {\n        return this.firstVisibleVPixel;\n    }\n\n    public getFirstVirtualRenderedRow() {\n        return this.firstRenderedRow;\n    }\n\n    public getLastVirtualRenderedRow() {\n        return this.lastRenderedRow;\n    }\n\n    // check that none of the rows to remove are editing or focused as:\n    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,\n    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered\n    //    the edit is reset - so we want to keep it rendered.\n    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,\n    //    otherwise the user can range select and drag (with focus cell going out of the viewport)\n    //    and then ctrl+c, nothing will happen if cell is removed from dom.\n    // c) if detail record of master detail, as users complained that the context of detail rows\n    //    was getting lost when detail row out of view. eg user expands to show detail row,\n    //    then manipulates the detail panel (eg sorts the detail grid), then context is lost\n    //    after detail panel is scrolled out of / into view.\n    private doNotUnVirtualiseRow(rowComp: RowCtrl): boolean {\n        const REMOVE_ROW: boolean = false;\n        const KEEP_ROW: boolean = true;\n        const rowNode = rowComp.getRowNode();\n\n        const rowHasFocus = this.focusService.isRowNodeFocused(rowNode);\n        const rowIsEditing = rowComp.isEditing();\n        const rowIsDetail = rowNode.detail;\n\n        const mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;\n\n        // if we deffo don't want to keep it,\n        if (!mightWantToKeepRow) {\n            return REMOVE_ROW;\n        }\n\n        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.\n        // the reason we want to keep is if user is scrolling up and down, we don't want to loose\n        // the context of the editing in process.\n        const rowNodePresent = this.paginationProxy.isRowPresent(rowNode);\n        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;\n    }\n\n    private createRowCon(rowNode: RowNode, animate: boolean, afterScroll: boolean): RowCtrl {\n\n        const rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;\n        if (rowCtrlFromCache) { return rowCtrlFromCache; }\n\n        // we don't use animations frames for printing, so the user can put the grid into print mode\n        // and immediately print - otherwise the user would have to wait for the rows to draw in the background\n        // (via the animation frames) which is awkward to do from code.\n\n        // we only do the animation frames after scrolling, as this is where we want the smooth user experience.\n        // having animation frames for other times makes the grid look 'jumpy'.\n\n        const suppressAnimationFrame = this.gridOptionsService.get('suppressAnimationFrame');\n        const useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;\n\n        const res = new RowCtrl(\n            rowNode,\n            this.beans,\n            animate,\n            useAnimationFrameForCreate,\n            this.printLayout\n        );\n\n        return res;\n    }\n\n    public getRenderedNodes() {\n        const renderedRows = this.rowCtrlsByRowIndex;\n\n        return Object.keys(renderedRows).map(key => renderedRows[key]!.getRowNode());\n    }\n\n    public getRowByPosition(rowPosition: RowPosition): RowCtrl | null {\n        let rowCtrl: RowCtrl | null;\n        const {rowIndex} = rowPosition;\n        switch (rowPosition.rowPinned) {\n            case 'top':\n                rowCtrl = this.topRowCtrls[rowIndex];\n                break;\n            case 'bottom':\n                rowCtrl = this.bottomRowCtrls[rowIndex];\n                break;\n            default:\n                rowCtrl = this.rowCtrlsByRowIndex[rowIndex];\n                if (!rowCtrl) {\n                    rowCtrl = this.getStickyTopRowCtrls().find(ctrl => ctrl.getRowNode().rowIndex === rowIndex) || null;\n                }\n                break;\n        }\n\n        return rowCtrl;\n    }\n\n    public getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n\n    // returns true if any row between startIndex and endIndex is rendered. used by\n    // SSRM or IRM, as they don't want to purge visible blocks from cache.\n    public isRangeInRenderedViewport(startIndex: number, endIndex: number): boolean {\n\n        // parent closed means the parent node is not expanded, thus these blocks are not visible\n        const parentClosed = startIndex == null || endIndex == null;\n        if (parentClosed) { return false; }\n\n        const blockAfterViewport = startIndex > this.lastRenderedRow;\n        const blockBeforeViewport = endIndex < this.firstRenderedRow;\n        const blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;\n\n        return blockInsideViewport;\n    }\n}\n\nclass RowCtrlCache {\n\n    // map for fast access\n    private entriesMap: RowCtrlMap = {};\n\n    // list for keeping order\n    private entriesList: RowCtrl[] = [];\n\n    private readonly maxCount: number;\n\n    constructor(maxCount: number) {\n        this.maxCount = maxCount;\n    }\n\n    public addRow(rowCtrl: RowCtrl): void {\n        this.entriesMap[rowCtrl.getRowNode().id!] = rowCtrl;\n        this.entriesList.push(rowCtrl);\n        rowCtrl.setCached(true);\n\n        if (this.entriesList.length > this.maxCount) {\n            const rowCtrlToDestroy = this.entriesList[0];\n            rowCtrlToDestroy.destroyFirstPass();\n            rowCtrlToDestroy.destroySecondPass();\n            this.removeFromCache(rowCtrlToDestroy);\n        }\n    }\n\n    public getRow(rowNode: RowNode): RowCtrl | null {\n        if (rowNode == null || rowNode.id == null) { return null; }\n\n        const res = this.entriesMap[rowNode.id];\n\n        if (!res) { return null; }\n\n        this.removeFromCache(res);\n        res.setCached(false);\n\n        // this can happen if user reloads data, and a new RowNode is reusing\n        // the same ID as the old one\n        const rowNodeMismatch = res.getRowNode() != rowNode;\n\n        return rowNodeMismatch ? null : res;\n    }\n\n    public has(rowNode: RowNode): boolean {\n        return this.entriesMap[rowNode.id!] != null;\n    }\n\n    public removeRow(rowNode: RowNode): void {\n        const rowNodeId = rowNode.id!;\n        const ctrl = this.entriesMap[rowNodeId];\n        delete this.entriesMap[rowNodeId];\n        removeFromArray(this.entriesList, ctrl);\n    }\n\n    public removeFromCache(rowCtrl: RowCtrl): void {\n        const rowNodeId = rowCtrl.getRowNode().id!;\n        delete this.entriesMap[rowNodeId];\n        removeFromArray(this.entriesList, rowCtrl);\n    }\n\n    public getEntries(): RowCtrl[] {\n        return this.entriesList;\n    }\n}\n\nexport interface RefreshViewParams {\n    recycleRows?: boolean;\n    animate?: boolean;\n    suppressKeepFocus?: boolean;\n    onlyBody?: boolean;\n    // when new data, grid scrolls back to top\n    newData?: boolean;\n    newPage?: boolean;\n    domLayoutChanged?: boolean;\n}\n", "import { Bean, Autowired } from '../context/context';\nimport { Column } from '../entities/column';\nimport { ExpressionService } from '../valueService/expressionService';\nimport { ValueFormatterParams } from '../entities/colDef';\nimport { BeanStub } from \"../context/beanStub\";\nimport { IRowNode } from '../interfaces/iRowNode';\n\n@Bean('valueFormatterService')\nexport class ValueFormatterService extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n\n    public formatValue(\n        column: Column,\n        node: IRowNode | null,\n        value: any,\n        suppliedFormatter?: (value: any) => string,\n        useFormatterFromColumn = true\n    ): string | null {\n        let result: string | null = null;\n        let formatter: ((value: any) => string) | string | undefined;\n\n        const colDef = column.getColDef();\n\n        if (suppliedFormatter) {\n            // use supplied formatter if provided, e.g. set filter items can have their own value formatters\n            formatter = suppliedFormatter;\n        } else if (useFormatterFromColumn) {\n            formatter = colDef.valueFormatter;\n        }\n\n        if (formatter) {\n            const params: ValueFormatterParams = this.gridOptionsService.addGridCommonParams({\n                value,\n                node,\n                data: node ? node.data : null,\n                colDef,\n                column\n            });\n            if (typeof formatter === 'function') {\n                result = formatter(params);\n            } else {\n                result = this.expressionService.evaluate(formatter, params);\n            }\n        } else if (colDef.refData) {\n            return colDef.refData[value] || '';\n        }\n\n        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)\n        if (result == null && Array.isArray(value)) {\n            result = value.join(', ');\n        }\n\n        return result;\n    }\n}\n", "import { RowNode } from \"../entities/rowNode\";\nimport { RowPinnedType } from \"../interfaces/iRowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events, PinnedRowDataChangedEvent } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { missingOrEmpty } from \"../utils/generic\";\nimport { last } from \"../utils/array\";\nimport { Beans } from \"../rendering/beans\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\n@Bean('pinnedRowModel')\nexport class PinnedRowModel extends BeanStub {\n\n    @Autowired('beans') private beans: Beans;\n\n    private pinnedTopRows: RowNode[];\n    private pinnedBottomRows: RowNode[];\n\n    @PostConstruct\n    public init(): void {\n        this.setPinnedTopRowData();\n        this.setPinnedBottomRowData();\n        this.addManagedPropertyListener('pinnedTopRowData', () => this.setPinnedTopRowData());\n        this.addManagedPropertyListener('pinnedBottomRowData', () => this.setPinnedBottomRowData());\n    }\n\n    public isEmpty(floating: RowPinnedType): boolean {\n        const rows = floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\n        return missingOrEmpty(rows);\n    }\n\n    public isRowsToRender(floating: RowPinnedType): boolean {\n        return !this.isEmpty(floating);\n    }\n\n    public getRowAtPixel(pixel: number, floating: RowPinnedType): number {\n        const rows = floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\n        if (missingOrEmpty(rows)) {\n            return 0; // this should never happen, just in case, 0 is graceful failure\n        }\n        for (let i = 0; i < rows.length; i++) {\n            const rowNode = rows[i];\n            const rowTopPixel = rowNode.rowTop! + rowNode.rowHeight! - 1;\n            // only need to range check against the top pixel, as we are going through the list\n            // in order, first row to hit the pixel wins\n            if (rowTopPixel >= pixel) {\n                return i;\n            }\n        }\n        return rows.length - 1;\n    }\n\n    private setPinnedTopRowData(): void {\n        const rowData = this.gridOptionsService.get('pinnedTopRowData');\n        this.pinnedTopRows = this.createNodesFromData(rowData, true);\n        const event: WithoutGridCommon<PinnedRowDataChangedEvent> = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setPinnedBottomRowData(): void {\n        const rowData = this.gridOptionsService.get('pinnedBottomRowData');\n        this.pinnedBottomRows = this.createNodesFromData(rowData, false);\n        const event: WithoutGridCommon<PinnedRowDataChangedEvent> = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private createNodesFromData(allData: any[] | undefined, isTop: boolean): RowNode[] {\n        const rowNodes: RowNode[] = [];\n        if (allData) {\n            let nextRowTop = 0;\n            allData.forEach((dataItem: any, index: number) => {\n                const rowNode = new RowNode(this.beans);\n                rowNode.data = dataItem;\n\n                const idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;\n                rowNode.id = idPrefix + index;\n\n                rowNode.rowPinned = isTop ? 'top' : 'bottom';\n                rowNode.setRowTop(nextRowTop);\n                rowNode.setRowHeight(this.gridOptionsService.getRowHeightForNode(rowNode).height);\n                rowNode.setRowIndex(index);\n                nextRowTop += rowNode.rowHeight!;\n                rowNodes.push(rowNode);\n            });\n        }\n        return rowNodes;\n    }\n\n    public getPinnedTopRowData(): RowNode[] {\n        return this.pinnedTopRows;\n    }\n\n    public getPinnedBottomRowData(): RowNode[] {\n        return this.pinnedBottomRows;\n    }\n\n    public getPinnedTopTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedTopRows);\n    }\n\n    public getPinnedTopRowCount(): number {\n        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;\n    }\n\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;\n    }\n\n    public getPinnedTopRow(index: number): RowNode | undefined {\n        return this.pinnedTopRows[index];\n    }\n\n    public getPinnedBottomRow(index: number): RowNode | undefined {\n        return this.pinnedBottomRows[index];\n    }\n\n    public forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (missingOrEmpty(this.pinnedTopRows)) {\n            return;\n        }\n        this.pinnedTopRows.forEach(callback);\n    }\n\n    public forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (missingOrEmpty(this.pinnedBottomRows)) {\n            return;\n        }\n        this.pinnedBottomRows.forEach(callback);\n    }\n\n    public getPinnedBottomTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedBottomRows);\n    }\n\n    private getTotalHeight(rowNodes: RowNode[]): number {\n        if (!rowNodes || rowNodes.length === 0) { return 0; }\n\n        const lastNode = last(rowNodes);\n        return lastNode.rowTop! + lastNode.rowHeight!;\n    }\n}\n", "import { IRowNode } from \"./iRowNode\";\n\nexport interface ServerSideTransaction {\n    /**\n     * The Row Store to apply the transaction to, ie what group level.\n     * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups.\n     * Passing in blank to empty applies the transaction to the top level.\n     */\n    route?: string[];\n    /** Index position to add at. If missing, rows will be added to the end. */\n    addIndex?: number;\n    /** Rows to add */\n    add?: any[];\n    /** Rows to remove */\n    remove?: any[];\n    /** Rows to update */\n    update?: any[];\n}\n\nexport interface ServerSideTransactionResult {\n    /** The status of applying the transaction. */\n    status: ServerSideTransactionResultStatus;\n    /** If rows were added, the newly created Row Nodes for those rows. */\n    add?: IRowNode[];\n    /** If rows were removed, the deleted Row Nodes. */\n    remove?: IRowNode[];\n    /** If rows were updated, the updated Row Nodes. */\n    update?: IRowNode[];\n}\n\nexport enum ServerSideTransactionResultStatus {\n    /** Transaction was successfully applied */\n    Applied = 'Applied',\n    /**\n     * Store was not found, transaction not applied.\n     * Either invalid route, or the parent row has not yet been expanded.\n     */\n    StoreNotFound = 'StoreNotFound',\n    /**\n     * Store is loading, transaction not applied.\n     */\n    StoreLoading = 'StoreLoading',\n    /**\n     * Store is loading (as max loads exceeded), transaction not applied.\n     */\n    StoreWaitingToLoad = 'StoreWaitingToLoad',\n    /**\n     * Store load attempt failed, transaction not applied.\n     */\n    StoreLoadingFailed = 'StoreLoadingFailed',\n    /**\n     * Store is type Partial, which doesn't accept transactions\n     */\n    StoreWrongType = 'StoreWrongType',\n    /**\n     * Transaction was cancelled, due to grid.\n     * Callback isApplyServerSideTransaction() returning false\n     */\n    Cancelled = 'Cancelled',\n    /**\n     * Store has not started yet, transaction not applied\n     */\n    StoreNotStarted = \"StoreNotStarted\"\n}", "import { RowNode } from \"../entities/rowNode\";\nimport { Column } from \"../entities/column\";\n\n// the class below contains a tree of row nodes. each node is\n// represented by a PathItem\ninterface PathItem {\n    rowNode: RowNode; // the node this item points to\n    children: PathItem[] | null; // children of this node - will be a subset of all the nodes children\n}\n\n// when doing transactions, or change detection, and grouping is present\n// in the data, there is no need for the ClientSideRowModel to update each\n// group after an update, ony parts that were impacted by the change.\n// this class keeps track of all groups that were impacted by a transaction.\n// the the different CSRM operations (filter, sort etc) use the forEach method\n// to visit each group that was changed.\nexport class ChangedPath {\n\n    // we keep columns when doing changed detection after user edits.\n    // when a user edits, we only need to re-aggregate the column\n    // that was edited.\n    private readonly keepingColumns: boolean;\n\n    // the root path always points to RootNode, and RootNode\n    // is always in the changed path. over time, we add items to\n    // the path, but this stays as the root. when the changed path\n    // is ready, this will be the root of the tree of RowNodes that\n    // need to be refreshed (all the row nodes that were impacted by\n    // the transaction).\n    private readonly pathRoot: PathItem;\n\n    // whether changed path is active of not. it is active when a) doing\n    // a transaction update or b) doing change detection. if we are doing\n    // a CSRM refresh for other reasons (after sort or filter, or user calling\n    // setRowData() without delta mode) then we are not active. we are also\n    // marked as not active if secondary columns change in pivot (as this impacts\n    // aggregations)\n    private active = true;\n\n    // for each node in the change path, we also store which columns need\n    // to be re-aggregated.\n    private nodeIdsToColumns: {[nodeId:string]: {[colId:string]:boolean}} = {};\n\n    // for quick lookup, all items in the change path are mapped by nodeId\n    private mapToItems: {[id: string]: PathItem} = {};\n\n    public constructor(keepingColumns: boolean, rootNode: RowNode) {\n        this.keepingColumns = keepingColumns;\n\n        this.pathRoot = {\n            rowNode: rootNode,\n            children: null\n        };\n        this.mapToItems[rootNode.id!] = this.pathRoot;\n    }\n\n    // can be set inactive by:\n    // a) ClientSideRowModel, if no transactions or\n    // b) PivotService, if secondary columns changed\n    public setInactive(): void {\n        this.active = false;\n    }\n\n    public isActive(): boolean {\n        return this.active;\n    }\n\n    private depthFirstSearchChangedPath(pathItem: PathItem, callback: (rowNode: RowNode) => void): void {\n        if (pathItem.children) {\n            for (let i = 0; i < pathItem.children.length; i++) {\n                this.depthFirstSearchChangedPath(pathItem.children[i], callback);\n            }\n        }\n        callback(pathItem.rowNode);\n    }\n\n    private depthFirstSearchEverything(rowNode: RowNode, callback: (rowNode: RowNode) => void, traverseEverything: boolean): void {\n        if (rowNode.childrenAfterGroup) {\n            for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                const childNode = rowNode.childrenAfterGroup[i];\n                if (childNode.childrenAfterGroup) {\n                    this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);\n                } else if (traverseEverything) {\n                    callback(childNode);\n                }\n            }\n        }\n        callback(rowNode);\n    }\n\n    // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback\n    // will be called for child nodes in addition to parent nodes.\n    public forEachChangedNodeDepthFirst(\n        callback: (rowNode: RowNode) => void,\n        traverseLeafNodes = false,\n        includeUnchangedNodes = false,\n    ): void {\n        if (this.active && !includeUnchangedNodes) {\n            // if we are active, then use the change path to callback\n            // only for updated groups\n            this.depthFirstSearchChangedPath(this.pathRoot, callback);\n        } else {\n            // we are not active, so callback for everything, walk the entire path\n            this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);\n        }\n    }\n\n    public executeFromRootNode(callback: (rowNode: RowNode) => void) {\n        callback(this.pathRoot.rowNode);\n    }\n\n    private createPathItems(rowNode: RowNode): number {\n        let pointer = rowNode;\n        let newEntryCount = 0;\n        while (!this.mapToItems[pointer.id!]) {\n            const newEntry: PathItem = {\n                rowNode: pointer,\n                children: null\n            };\n            this.mapToItems[pointer.id!] = newEntry;\n            newEntryCount++;\n            pointer = pointer.parent!;\n        }\n        return newEntryCount;\n    }\n\n    private populateColumnsMap(rowNode: RowNode, columns: Column[]): void {\n        if (!this.keepingColumns || !columns) { return; }\n\n        let pointer = rowNode;\n        while (pointer) {\n            // if columns, add the columns in all the way to parent, merging\n            // in any other columns that might be there already\n            if (!this.nodeIdsToColumns[pointer.id!]) {\n                this.nodeIdsToColumns[pointer.id!] = {};\n            }\n            columns.forEach(col => this.nodeIdsToColumns[pointer.id!][col.getId()] = true);\n            pointer = pointer.parent!;\n        }\n    }\n\n    private linkPathItems(rowNode: RowNode, newEntryCount: number): void {\n        let pointer = rowNode;\n        for (let i = 0; i < newEntryCount; i++) {\n            const thisItem = this.mapToItems[pointer.id!];\n            const parentItem = this.mapToItems[pointer.parent!.id!];\n            if (!parentItem.children) {\n                parentItem.children = [];\n            }\n            parentItem.children.push(thisItem);\n            pointer = pointer.parent!;\n        }\n    }\n\n    // called by\n    // 1) change detection (provides cols) and\n    // 2) groupStage if doing transaction update (doesn't provide cols)\n    public addParentNode(rowNode: RowNode | null, columns?: Column[]): void {\n\n        if (!rowNode || rowNode.isRowPinned()) { return; }\n\n        // we cannot do  both steps below in the same loop as\n        // the second loop has a dependency on the first loop.\n        // ie the hierarchy cannot be stitched up yet because\n        // we don't have it built yet\n\n        // create the new PathItem objects.\n        const newEntryCount = this.createPathItems(rowNode);\n\n        // link in the node items\n        this.linkPathItems(rowNode, newEntryCount);\n\n        // update columns\n        this.populateColumnsMap(rowNode, columns!);\n    }\n\n    public canSkip(rowNode: RowNode): boolean {\n        return this.active && !this.mapToItems[rowNode.id!];\n    }\n\n    public getValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[] {\n        if (!this.keepingColumns) { return valueColumns; }\n\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\n        const result = valueColumns.filter(col => colsForThisNode[col.getId()]);\n        return result;\n    }\n\n    public getNotValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[] | null {\n        if (!this.keepingColumns) { return null; }\n\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\n        const result = valueColumns.filter(col => !colsForThisNode[col.getId()]);\n        return result;\n    }\n}\n", "import { AgEvent } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\n\nexport interface LoadCompleteEvent extends AgEvent {\n    success: boolean;\n    block: RowNodeBlock;\n}\n\nexport interface LoadSuccessParams {\n    /**\n     * Data retrieved from the server as requested by the grid.\n     */\n    rowData: any[];\n    /**\n     * The last row, if known, to help Infinite Scroll.\n     */\n    rowCount?: number;\n    /**\n     * Any extra information for the grid to associate with this load.\n     */\n    groupLevelInfo?: any;\n    /**\n     * The pivot fields in the response - if provided the grid will attempt to generate secondary columns.\n     */\n    pivotResultFields?: string[];\n}\n\nexport abstract class RowNodeBlock extends BeanStub {\n\n    public static EVENT_LOAD_COMPLETE = 'loadComplete';\n\n    public static STATE_WAITING_TO_LOAD = 'needsLoading';\n    public static STATE_LOADING = 'loading';\n    public static STATE_LOADED = 'loaded';\n    public static STATE_FAILED = 'failed';\n\n    private readonly id: number;\n\n    private state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n\n    private version = 0;\n\n    public abstract getBlockStateJson(): { id: string, state: any };\n\n    protected abstract loadFromDatasource(): void;\n\n    protected abstract processServerResult(params: LoadSuccessParams): void;\n\n    protected abstract processServerFail(): void;\n\n    protected constructor(id: number) {\n        super();\n        this.id = id;\n    }\n\n    public getId(): number {\n        return this.id;\n    }\n\n    public load(): void {\n        this.state = RowNodeBlock.STATE_LOADING;\n        this.loadFromDatasource();\n    }\n\n    public getVersion(): number {\n        return this.version;\n    }\n\n    public setStateWaitingToLoad(): void {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n    }\n\n    public getState(): string {\n        return this.state;\n    }\n\n    protected pageLoadFailed(version: number) {\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_FAILED;\n            this.processServerFail();\n        }\n\n        this.dispatchLoadCompleted(false);\n    }\n\n    protected success(version: number, params: LoadSuccessParams): void {\n        this.successCommon(version, params);\n    }\n\n    protected pageLoaded(version: number, rows: any[], lastRow: number) {\n        this.successCommon(version, { rowData: rows, rowCount: lastRow });\n    }\n\n    private isRequestMostRecentAndLive(version: number): boolean {\n        // thisIsMostRecentRequest - if block was refreshed, then another request\n        // could of been sent after this one.\n        const thisIsMostRecentRequest = version === this.version;\n\n        // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\n        // and new blocks created. so data loads of old blocks are discarded.\n        const weAreNotDestroyed = this.isAlive();\n\n        return thisIsMostRecentRequest && weAreNotDestroyed;\n    }\n\n    protected successCommon(version: number, params: LoadSuccessParams) {\n\n        // need to dispatch load complete before processing the data, as PaginationComp checks\n        // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\n        // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\n        this.dispatchLoadCompleted();\n\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_LOADED;\n            this.processServerResult(params);\n        }\n    }\n\n    private dispatchLoadCompleted(success = true) {\n        // we fire event regardless of processing data or now, as we want\n        // the concurrentLoadRequests count to be reduced in BlockLoader\n        const event: LoadCompleteEvent = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: success,\n            block: this\n        };\n\n        this.dispatchEvent(event);\n    }\n}\n", "import { RowNodeBlock } from \"./rowNodeBlock\";\nimport { Autowired, Bean, PostConstruct, Qualifier } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Logger, LoggerFactory } from \"../logger\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IServerSideRowModel } from \"../interfaces/iServerSideRowModel\";\nimport { _ } from \"../utils\";\n\n@Bean('rowNodeBlockLoader')\nexport class RowNodeBlockLoader extends BeanStub {\n    @Autowired('rowModel') private rowModel: IRowModel;\n    \n    public static BLOCK_LOADED_EVENT = 'blockLoaded';\n    public static BLOCK_LOADER_FINISHED_EVENT = 'blockLoaderFinished';\n\n    private maxConcurrentRequests: number | undefined;\n    private checkBlockToLoadDebounce: () => void;\n\n    private activeBlockLoadsCount = 0;\n    private blocks: RowNodeBlock[] = [];\n    private logger: Logger;\n    private active = true;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.maxConcurrentRequests = this.getMaxConcurrentDatasourceRequests();\n        const blockLoadDebounceMillis = this.gridOptionsService.get('blockLoadDebounceMillis');\n\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\n            this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);\n        }\n    }\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('RowNodeBlockLoader');\n    }\n\n    private getMaxConcurrentDatasourceRequests(): number | undefined {\n        const res = this.gridOptionsService.get('maxConcurrentDatasourceRequests');\n        if (res == null) { return 2; } // 2 is the default\n        if (res <= 0) { return; } // negative number, eg -1, means no max restriction\n        return res;\n    }\n\n    public addBlock(block: RowNodeBlock): void {\n        this.blocks.push(block);\n\n        // note that we do not remove this listener when removing the block. this is because the\n        // cache can get destroyed (and containing blocks) when a block is loading. however the loading block\n        // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.\n        block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));\n\n        this.checkBlockToLoad();\n    }\n\n    public removeBlock(block: RowNodeBlock): void {\n        _.removeFromArray(this.blocks, block);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        this.active = false;\n    }\n\n    public loadComplete(): void {\n        this.activeBlockLoadsCount--;\n        this.checkBlockToLoad();\n        this.dispatchEvent({type: RowNodeBlockLoader.BLOCK_LOADED_EVENT});\n        if (this.activeBlockLoadsCount == 0) {\n            this.dispatchEvent({type: RowNodeBlockLoader.BLOCK_LOADER_FINISHED_EVENT});\n        }\n    }\n\n    public checkBlockToLoad(): void {\n        if (this.checkBlockToLoadDebounce) {\n            this.checkBlockToLoadDebounce();\n        } else {\n            this.performCheckBlocksToLoad();\n        }\n    }\n\n    private performCheckBlocksToLoad(): void {\n        if (!this.active) { return; }\n\n        this.printCacheStatus();\n\n        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\n            this.logger.log(`checkBlockToLoad: max loads exceeded`);\n            return;\n        }\n\n        const loadAvailability = this.getAvailableLoadingCount();\n        const blocksToLoad: RowNodeBlock[] = this.blocks.filter(block => (\n            block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD\n        )).slice(0, loadAvailability);\n\n        this.registerLoads(blocksToLoad.length);\n        blocksToLoad.forEach(block => block.load());\n        this.printCacheStatus();\n    }\n\n    public getBlockState() {\n        if (this.gridOptionsService.isRowModelType('serverSide')) {\n            const ssrm = this.rowModel as IServerSideRowModel;\n            return ssrm.getBlockStates();\n        }\n\n        const result: { [key: string]: any } = {};\n        this.blocks.forEach((block: RowNodeBlock) => {\n            const {id, state} = block.getBlockStateJson();\n            result[id] = state;\n        });\n        return result;\n    }\n\n    private printCacheStatus(): void {\n\n        if (this.logger.isLogging()) {\n            this.logger.log(`printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},`\n                + ` blocks = ${JSON.stringify(this.getBlockState())}`);\n        }\n    }\n\n    public isLoading(): boolean {\n        return this.activeBlockLoadsCount > 0;\n    }\n\n    public registerLoads(count: number) {\n        this.activeBlockLoadsCount += count;\n    }\n\n    public getAvailableLoadingCount() {\n        return this.maxConcurrentRequests !== undefined ? this.maxConcurrentRequests - this.activeBlockLoadsCount : undefined;\n    }\n}\n", "import { IRowModel, RowBounds, RowModelType } from \"../interfaces/iRowModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events, ModelUpdatedEvent, PaginationChangedEvent } from \"../events\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { missing, exists } from \"../utils/generic\";\nimport { RowPosition } from \"../entities/rowPositionUtils\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\n@Bean('paginationProxy')\nexport class PaginationProxy extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n\n    private active: boolean;\n    private paginateChildRows: boolean;\n\n    // We should track all the different sources of page size, as we can fall back to the next one if one is missing.\n    // or if user preferences change (Example: disabling auto page size option should mean we get page size from\n    // page size selector value - if a value was previously selected .. otherwise fall back to initial state value).\n    // IMPORTANT: We should always use this.pageSize getter to get the page size instead of accessing\n    // directly to these variables, as the getter takes care of returning the correct value based on precedence.\n    private pageSizeAutoCalculated?: number; // When paginationAutoPageSize = true or when the pages panel is disabled\n    private pageSizeFromPageSizeSelector?: number; // When user selects page size from page size selector.\n    private pageSizeFromInitialState?: number; // When the initial grid state is loaded, and a page size rehydrated\n    private pageSizeFromGridOptions?: number; // When user sets gridOptions.paginationPageSize.\n    private defaultPageSize: 100; // When nothing else set, default page size is 100.\n\n    private totalPages: number;\n    private currentPage = 0;\n\n    private topDisplayedRowIndex = 0;\n    private bottomDisplayedRowIndex = 0;\n    private pixelOffset = 0;\n    private topRowBounds: RowBounds;\n    private bottomRowBounds: RowBounds;\n\n    private masterRowCount: number = 0;\n\n    @PostConstruct\n    private postConstruct() {\n        this.active = this.gridOptionsService.get('pagination');\n        this.pageSizeFromGridOptions = this.gridOptionsService.get('paginationPageSize');\n        this.paginateChildRows = this.isPaginateChildRows();\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n        this.addManagedPropertyListener('pagination', this.onPaginationGridOptionChanged.bind(this));\n        this.addManagedPropertyListener('paginationPageSize', this.onPageSizeGridOptionChanged.bind(this));\n\n        this.onModelUpdated();\n    }\n\n    public ensureRowHeightsValid(startPixel: number, endPixel: number, startLimitIndex: number, endLimitIndex: number): boolean {\n        const res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());\n        if (res) {\n            this.calculatePages();\n        }\n        return res;\n    }\n\n    private isPaginateChildRows(): boolean {\n        const shouldPaginate = this.gridOptionsService.get('groupRemoveSingleChildren') || this.gridOptionsService.get('groupRemoveLowestSingleChildren');\n        if (shouldPaginate) { return true; }\n        return this.gridOptionsService.get('paginateChildRows');\n    }\n\n    private onModelUpdated(modelUpdatedEvent?: WithoutGridCommon<ModelUpdatedEvent>): void {\n        this.calculatePages();\n        const paginationChangedEvent: WithoutGridCommon<PaginationChangedEvent> = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n            newPageSize: modelUpdatedEvent ? modelUpdatedEvent.newPageSize : false,\n            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    private onPaginationGridOptionChanged(): void {\n        this.active = this.gridOptionsService.get('pagination');\n        this.calculatePages();\n        const paginationChangedEvent: WithoutGridCommon<PaginationChangedEvent> = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: false,\n            newData: false,\n            newPage: false,\n            newPageSize: false,\n            // important to keep rendered rows, otherwise every time grid is resized,\n            // we would destroy all the rows.\n            keepRenderedRows: true\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    private onPageSizeGridOptionChanged(): void {\n        this.setPageSize(this.gridOptionsService.get('paginationPageSize'),'gridOptions');\n    }\n\n    public goToPage(page: number): void {\n        if (!this.active || this.currentPage === page || typeof this.currentPage !== 'number') { return; }\n\n        this.currentPage = page;\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: true,\n            newPageSize: false\n        };\n        this.onModelUpdated(event);\n    }\n\n    public getPixelOffset(): number {\n        return this.pixelOffset;\n    }\n\n    public getRow(index: number): RowNode | undefined {\n        return this.rowModel.getRow(index);\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        return this.rowModel.getRowNode(id);\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        return this.rowModel.getRowIndexAtPixel(pixel);\n    }\n\n    public getCurrentPageHeight(): number {\n        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {\n            return 0;\n        }\n        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);\n    }\n\n    public getCurrentPagePixelRange(): {pageFirstPixel: number, pageLastPixel: number} {\n        const pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;\n        const pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;\n        return {pageFirstPixel, pageLastPixel};\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        if (!this.rowModel.isRowPresent(rowNode)) {\n            return false;\n        }\n        const nodeIsInPage = rowNode.rowIndex! >= this.topDisplayedRowIndex && rowNode.rowIndex! <= this.bottomDisplayedRowIndex;\n        return nodeIsInPage;\n    }\n\n    public isEmpty(): boolean {\n        return this.rowModel.isEmpty();\n    }\n\n    public isRowsToRender(): boolean {\n        return this.rowModel.isRowsToRender();\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        return this.rowModel.forEachNode(callback);\n    }\n\n    public forEachNodeOnPage(callback: (rowNode: RowNode) => void) {\n        const firstRow = this.getPageFirstRow();\n        const lastRow = this.getPageLastRow();\n        for (let i = firstRow; i <= lastRow; i++) {\n            const node = this.getRow(i);\n            if (node) {\n                callback(node);\n            }\n        }\n    }\n\n    public getType(): RowModelType {\n        return this.rowModel.getType();\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        const res = this.rowModel.getRowBounds(index)!;\n        res.rowIndex = index;\n        return res;\n    }\n\n    public getPageFirstRow(): number {\n        return this.topRowBounds ? this.topRowBounds.rowIndex! : -1;\n    }\n\n    public getPageLastRow(): number {\n        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex! : -1;\n    }\n\n    public getRowCount(): number {\n        return this.rowModel.getRowCount();\n    }\n\n    public getPageForIndex(index: number): number {\n        return Math.floor(index / this.pageSize);\n    }\n\n    public goToPageWithIndex(index: any): void {\n        if (!this.active) { return; }\n\n        const pageNumber = this.getPageForIndex(index);\n        this.goToPage(pageNumber);\n    }\n\n    public isRowInPage(row: RowPosition): boolean {\n        if (!this.active) { return true; }\n        const rowPage = this.getPageForIndex(row.rowIndex);\n        return rowPage === this.currentPage;\n    }\n\n    public isLastPageFound(): boolean {\n        return this.rowModel.isLastRowIndexKnown();\n    }\n\n    public getCurrentPage(): number {\n        return this.currentPage;\n    }\n\n    public goToNextPage(): void {\n        this.goToPage(this.currentPage + 1);\n    }\n\n    public goToPreviousPage(): void {\n        this.goToPage(this.currentPage - 1);\n    }\n\n    public goToFirstPage(): void {\n        this.goToPage(0);\n    }\n\n    public goToLastPage(): void {\n        const rowCount = this.rowModel.getRowCount();\n        const lastPage = Math.floor(rowCount / this.pageSize);\n        this.goToPage(lastPage);\n    }\n\n    public getPageSize(): number {\n        return this.pageSize;\n    }\n\n    public getTotalPages(): number {\n        return this.totalPages;\n    }\n\n    /** This is only for state setting before data has been loaded */\n    public setPage(page: number): void {\n        this.currentPage = page;\n    }\n\n    private get pageSize(): number {\n        if (exists(this.pageSizeAutoCalculated)) { return this.pageSizeAutoCalculated; }\n        if (exists(this.pageSizeFromPageSizeSelector)) { return this.pageSizeFromPageSizeSelector; }\n        if (exists(this.pageSizeFromInitialState)) { return this.pageSizeFromInitialState; }\n        if (exists(this.pageSizeFromGridOptions)) { return this.pageSizeFromGridOptions; }\n        return this.defaultPageSize;\n    }\n\n    public unsetAutoCalculatedPageSize(): void {\n        if (this.pageSizeAutoCalculated === undefined) { return; }\n        const oldPageSize = this.pageSizeAutoCalculated;\n\n        this.pageSizeAutoCalculated = undefined;\n\n        if (this.pageSize === oldPageSize) { return; }\n        this.onModelUpdated({\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: false,\n            newPageSize: true,\n        });\n    }\n\n    public setPageSize(size: number, source: 'autoCalculated' | 'pageSizeSelector' | 'initialState' | 'gridOptions'): void {\n        const currentSize = this.pageSize;\n        switch (source) {\n            case 'autoCalculated':\n                this.pageSizeAutoCalculated = size;\n                break;\n            case 'pageSizeSelector':\n                this.pageSizeFromPageSizeSelector = size;\n                if (this.currentPage !== 0) { this.goToFirstPage(); }\n                break;\n            case 'initialState':\n                this.pageSizeFromInitialState = size;\n                break;\n            case 'gridOptions':\n                this.pageSizeFromGridOptions = size;\n                this.pageSizeFromInitialState = undefined;\n                this.pageSizeFromPageSizeSelector = undefined;\n                if (this.currentPage !== 0) { this.goToFirstPage(); }\n                break;\n        }\n\n        if (currentSize !== this.pageSize) {\n            const event: WithoutGridCommon<ModelUpdatedEvent> = {\n                type: Events.EVENT_MODEL_UPDATED,\n                animate: false,\n                keepRenderedRows: false,\n                newData: false,\n                newPage: false,\n                newPageSize: true,\n            };\n\n            this.onModelUpdated(event);\n        }\n    }\n\n    private calculatePages(): void {\n        if (this.active) {\n            if (this.paginateChildRows) {\n                this.calculatePagesAllRows();\n            } else {\n                this.calculatePagesMasterRowsOnly();\n            }\n        } else {\n            this.calculatedPagesNotActive();\n        }\n\n        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex)!;\n        if (this.topRowBounds) {\n            this.topRowBounds.rowIndex = this.topDisplayedRowIndex;\n        }\n\n        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex)!;\n        if (this.bottomRowBounds) {\n            this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;\n        }\n\n        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);\n    }\n\n    private setPixelOffset(value: number): void {\n        if (this.pixelOffset === value) { return; }\n\n        this.pixelOffset = value;\n        this.eventService.dispatchEvent({type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED});\n    }\n\n    private setZeroRows(): void {\n        this.masterRowCount = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = -1;\n        this.currentPage = 0;\n        this.totalPages = 0;\n    }\n\n    private adjustCurrentPageIfInvalid() {\n\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n\n        if (!isFinite(this.currentPage) || isNaN(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n    }\n\n    private calculatePagesMasterRowsOnly(): void {\n\n        // const csrm = <ClientSideRowModel> this.rowModel;\n        // const rootNode = csrm.getRootNode();\n        // const masterRows = rootNode.childrenAfterSort;\n\n        this.masterRowCount = this.rowModel.getTopLevelRowCount();\n\n        // we say <=0 (rather than =0) as viewport returns -1 when no rows\n        if (this.masterRowCount <= 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const masterLastRowIndex = this.masterRowCount - 1;\n        this.totalPages = Math.floor((masterLastRowIndex) / this.pageSize) + 1;\n\n        this.adjustCurrentPageIfInvalid();\n\n        const masterPageStartIndex = this.pageSize * this.currentPage;\n        let masterPageEndIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n\n        if (masterPageEndIndex > masterLastRowIndex) {\n            masterPageEndIndex = masterLastRowIndex;\n        }\n\n        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);\n        // masterRows[masterPageStartIndex].rowIndex;\n\n        if (masterPageEndIndex === masterLastRowIndex) {\n            // if showing the last master row, then we want to show the very last row of the model\n            this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n        } else {\n            const firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);\n            //masterRows[masterPageEndIndex + 1].rowIndex;\n            // this gets the index of the last child - eg current row is open, we want to display all children,\n            // the index of the last child is one less than the index of the next parent row.\n            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\n        }\n    }\n\n    public getMasterRowCount(): number {\n        return this.masterRowCount;\n    }\n\n    private calculatePagesAllRows(): void {\n        this.masterRowCount = this.rowModel.getRowCount();\n\n        if (this.masterRowCount === 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const maxRowIndex = this.masterRowCount - 1;\n        this.totalPages = Math.floor((maxRowIndex) / this.pageSize) + 1;\n\n        this.adjustCurrentPageIfInvalid();\n\n        this.topDisplayedRowIndex = this.pageSize * this.currentPage;\n        this.bottomDisplayedRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n\n        if (this.bottomDisplayedRowIndex > maxRowIndex) {\n            this.bottomDisplayedRowIndex = maxRowIndex;\n        }\n    }\n\n    private calculatedPagesNotActive(): void {\n        this.setPageSize(this.masterRowCount, 'autoCalculated');\n        this.totalPages = 1;\n        this.currentPage = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n    }\n}\n", "import { CellClassParams, ColDef } from \"../entities/colDef\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { ExpressionService } from \"../valueService/expressionService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { RowClassParams } from \"../entities/gridOptions\";\n\n@Bean('stylingService')\nexport class StylingService extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n\n    public processAllCellClasses(\n        colDef: ColDef,\n        params: CellClassParams,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ) {\n        this.processClassRules(undefined, colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);\n        this.processStaticCellClasses(colDef, params, onApplicableClass);\n    }\n\n    public processClassRules(\n        previousClassRules: { [cssClassName: string]: (Function | string) } | undefined,\n        classRules: { [cssClassName: string]: (Function | string) } | undefined,\n        params: RowClassParams | CellClassParams,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ) {\n        if (classRules == null && previousClassRules == null) {\n            return;\n        }\n        \n        const classesToApply: {[name: string]: boolean} = {};\n        const classesToRemove: {[name: string]: boolean} = {};\n\n        const forEachSingleClass = (className: string, callback: (singleClass: string) => void) => {\n            // in case className = 'my-class1 my-class2', we need to split into individual class names\n            className.split(' ').forEach(singleClass => {\n                if (singleClass.trim() == '') return;\n                callback(singleClass);\n            });\n        };\n\n        if (classRules) {\n            const classNames = Object.keys(classRules);\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                const rule = classRules![className];\n\n                let resultOfRule: any;\n\n                if (typeof rule === 'string') {\n                    resultOfRule = this.expressionService.evaluate(rule, params);\n                } else if (typeof rule === 'function') {\n                    resultOfRule = rule(params);\n                }\n\n                forEachSingleClass(className, singleClass => {\n                    resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;\n                })\n            }\n        }\n        if (previousClassRules && onNotApplicableClass) {\n            Object.keys(previousClassRules).forEach(className => forEachSingleClass(className, singleClass => {\n                if (!classesToApply[singleClass]) {\n                    // if we're not applying a previous class now, make sure we remove it\n                    classesToRemove[singleClass] = true;\n                }\n            }));\n        }\n\n        // we remove all classes first, then add all classes second,\n        // in case a class appears in more than one rule, this means it will be added\n        // if appears in at least one truthy rule\n        if (onNotApplicableClass) {\n            Object.keys(classesToRemove).forEach(onNotApplicableClass);\n        }\n        Object.keys(classesToApply).forEach(onApplicableClass);\n    }\n\n    public getStaticCellClasses(colDef: ColDef, params: CellClassParams): string[] {\n        const { cellClass } = colDef;\n\n        if (!cellClass) { return []; }\n\n        let classOrClasses: string | string[] | null | undefined;\n\n        if (typeof cellClass === 'function') {\n            const cellClassFunc = cellClass;\n            classOrClasses = cellClassFunc(params);\n        } else {\n            classOrClasses = cellClass;\n        }\n\n        if (typeof classOrClasses === 'string') {\n            classOrClasses = [classOrClasses];\n        }\n\n        return classOrClasses || [];\n    }\n\n    private processStaticCellClasses(\n        colDef: ColDef,\n        params: CellClassParams,\n        onApplicableClass: (className: string) => void\n    ) {\n        const classOrClasses = this.getStaticCellClasses(colDef, params);\n\n        classOrClasses.forEach((cssClassItem: string) => {\n            onApplicableClass(cssClassItem);\n        });\n    }\n\n}\n", "import { AgCheckbox, AgCheckboxParams } from './agCheckbox';\n\nexport interface AgToggleButtonParams extends AgCheckboxParams {}\n\nexport class AgToggleButton extends AgCheckbox<AgToggleButtonParams> {\n    constructor(config?: AgToggleButtonParams) {\n        super(config, 'ag-toggle-button');\n    }\n\n    public setValue(value: boolean, silent?: boolean): this {\n        super.setValue(value, silent);\n\n        this.addOrRemoveCssClass('ag-selected', this.getValue()!);\n\n        return this;\n    }\n}\n", "import { AgAbstractInputField, AgInputFieldParams } from \"./agAbstractInputField\";\n\nexport class AgInputTextArea extends AgAbstractInputField<HTMLTextAreaElement, string> {\n    constructor(config?: AgInputFieldParams) {\n        super(config, 'ag-text-area', null, 'textarea');\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n\n    public setCols(cols: number): this {\n        this.eInput.cols = cols;\n\n        return this;\n    }\n\n    public setRows(rows: number): this {\n        this.eInput.rows = rows;\n\n        return this;\n    }\n}", "import { AgInputTextField, AgInputTextFieldParams } from \"./agInputTextField\";\nimport { addOrRemoveAttribute } from \"../utils/dom\";\nimport { parseDateTimeFromString, serialiseDate } from \"../utils/date\";\nimport { isBrowserSafari } from \"../utils/browser\";\n\nexport class AgInputDateField extends AgInputTextField {\n    private min?: string;\n    private max?: string;\n    private step?: number;\n\n    constructor(config?: AgInputTextFieldParams) {\n        super(config, 'ag-date-field', 'date');\n    }\n\n    postConstruct() {\n        super.postConstruct();\n\n        this.addManagedListener(this.eInput, 'wheel', this.onWheel.bind(this));\n\n        // ensures that the input element is focussed when a clear button is clicked,\n        // unless using safari as there is no clear button and focus does not work properly\n        const usingSafari = isBrowserSafari();\n        this.addManagedListener(this.eInput, 'mousedown', () => {\n            if (this.isDisabled() || usingSafari) { return; }\n            this.eInput.focus();\n        });\n\n        this.eInput.step = 'any';\n    }\n\n    private onWheel(e: WheelEvent) {\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\n        if (document.activeElement === this.eInput) {\n            e.preventDefault();\n        }\n    }\n\n    public setMin(minDate: Date | string | undefined): this {\n        const min = minDate instanceof Date ? serialiseDate(minDate ?? null, false) ?? undefined : minDate;\n        if (this.min === min) {\n            return this;\n        }\n\n        this.min = min;\n\n        addOrRemoveAttribute(this.eInput, 'min', min);\n\n        return this;\n    }\n\n    public setMax(maxDate: Date | string | undefined): this {\n        const max = maxDate instanceof Date ? serialiseDate(maxDate ?? null, false) ?? undefined : maxDate;\n        if (this.max === max) {\n            return this;\n        }\n\n        this.max = max;\n\n        addOrRemoveAttribute(this.eInput, 'max', max);\n\n        return this;\n    }\n\n    public setStep(step?: number): this {\n        if (this.step === step) {\n            return this;\n        }\n\n        this.step = step;\n\n        addOrRemoveAttribute(this.eInput, 'step', step);\n\n        return this;\n    }\n\n    public getDate(): Date | undefined {\n        if (!this.eInput.validity.valid) {\n            return undefined;\n        }\n        return parseDateTimeFromString(this.getValue()) ?? undefined;\n    }\n\n    public setDate(date: Date | undefined, silent?: boolean): void {\n        this.setValue(serialiseDate(date ?? null, false), silent);\n    }\n}\n", "import { AgInputFieldParams, AgAbstractInputField } from \"./agAbstractInputField\";\n\ninterface IInputRange extends AgInputFieldParams {\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\nexport class AgInputRange extends AgAbstractInputField<HTMLInputElement, string, IInputRange> {\n    private min: number;\n    private max: number;\n\n    constructor(config?: IInputRange) {\n        super(config, 'ag-range-field', 'range');\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        const { min, max, step } = this.config;\n\n        if (min != null) {\n            this.setMinValue(min);\n        }\n\n        if (max != null) {\n            this.setMaxValue(max);\n        }\n\n        this.setStep(step || 1);\n    }\n\n    protected addInputListeners() {\n        this.addManagedListener(this.eInput, 'input', (e) => {\n            const value = e.target.value;\n\n            this.setValue(value);\n        });\n    }\n\n    public setMinValue(value: number): this {\n        this.min = value;\n\n        this.eInput.setAttribute('min', value.toString());\n\n        return this;\n    }\n\n    public setMaxValue(value: number): this {\n        this.max = value;\n\n        this.eInput.setAttribute('max', value.toString());\n\n        return this;\n    }\n\n    public setStep(value: number): this {\n        this.eInput.setAttribute('step', value.toString());\n\n        return this;\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        if (this.min != null) {\n            value = Math.max(parseFloat(value), this.min).toString();\n        }\n\n        if (this.max != null) {\n            value = Math.min(parseFloat(value), this.max).toString();\n        }\n\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n}\n", "import { UserCompDetails, UserComponentFactory } from \"../components/framework/userComponentFactory\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\nimport { AgPromise } from \"../utils\";\nimport { bindCellRendererToHtmlElement, getInnerWidth } from \"../utils/dom\";\nimport { RichSelectParams } from \"./agRichSelect\";\nimport { FieldPickerValueSelectedEvent } from \"../events\";\nimport { Component } from \"./component\";\nimport { escapeString } from \"../utils/string\";\nimport { exists } from \"../utils/generic\";\nimport { setAriaActiveDescendant, setAriaSelected } from \"../utils/aria\";\nimport { VirtualList } from \"./virtualList\";\n\nexport class RichSelectRow<TValue> extends Component {\n\n    private value: TValue;\n    private parsedValue: string | null;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    constructor(private readonly params: RichSelectParams<TValue>, private readonly wrapperEl: HTMLElement) {\n        super(/* html */`<div class=\"ag-rich-select-row\" role=\"presentation\"></div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.getGui(), 'click', this.onClick.bind(this));\n    }\n\n    public setState(value: TValue): void {\n        let formattedValue: string = ''\n\n        if (this.params.valueFormatter) {\n            formattedValue = this.params.valueFormatter(value);\n        }\n        const rendererSuccessful = this.populateWithRenderer(value, formattedValue);\n        if (!rendererSuccessful) {\n            this.populateWithoutRenderer(value, formattedValue);\n        }\n\n        this.value = value;\n    }\n\n    public highlightString(matchString: string): void {\n        const { parsedValue } = this;\n\n        if (this.params.cellRenderer || !exists(parsedValue)) { return; }\n\n        let hasMatch = exists(matchString);\n\n        if (hasMatch) {\n            const index = parsedValue?.toLocaleLowerCase().indexOf(matchString.toLocaleLowerCase());\n            if (index >= 0) {\n                const highlightEndIndex = index + matchString.length;\n                const startPart = escapeString(parsedValue.slice(0, index), true);\n                const highlightedPart = escapeString(parsedValue.slice(index, highlightEndIndex), true);\n                const endPart = escapeString(parsedValue.slice(highlightEndIndex));\n                this.renderValueWithoutRenderer(`${startPart}<span class=\"ag-rich-select-row-text-highlight\">${highlightedPart}</span>${endPart}`);\n            } else {\n                hasMatch = false;\n            }\n        }\n\n        if (!hasMatch) {\n            this.renderValueWithoutRenderer(parsedValue);\n        }\n    }\n\n    public updateHighlighted(highlighted: boolean): void {\n        const eGui = this.getGui();\n        const parentId = `ag-rich-select-row-${this.getCompId()}`;\n\n        eGui.parentElement?.setAttribute('id', parentId);\n\n        if (highlighted) {\n            const parentAriaEl = (this.getParentComponent() as VirtualList).getAriaElement();\n            setAriaActiveDescendant(parentAriaEl, parentId);\n            this.wrapperEl.setAttribute('data-active-option', parentId);\n        }\n\n        setAriaSelected(eGui.parentElement!, highlighted);\n        this.addOrRemoveCssClass('ag-rich-select-row-selected', highlighted);\n    }\n\n    private populateWithoutRenderer(value: any, valueFormatted: any) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const eGui = this.getGui();\n\n        const span = eDocument.createElement('span');\n        span.style.overflow = 'hidden';\n        span.style.textOverflow = 'ellipsis';\n        const parsedValue = escapeString(exists(valueFormatted) ? valueFormatted : value, true);\n        this.parsedValue = exists(parsedValue) ? parsedValue : null;\n\n        eGui.appendChild(span);\n        this.renderValueWithoutRenderer(parsedValue);\n        this.setTooltip ({\n            newTooltipText: this.parsedValue,\n            shouldDisplayTooltip: () => span.scrollWidth > span.clientWidth\n        });\n    }\n\n    private renderValueWithoutRenderer(value: string | null): void {\n        const span = this.getGui().querySelector('span');\n        if (!span) { return; }\n        span.innerHTML = exists(value) ? value : '&nbsp;'\n    }\n\n    private populateWithRenderer(value: TValue, valueFormatted: string): boolean {\n        // bad coder here - we are not populating all values of the cellRendererParams\n        let cellRendererPromise: AgPromise<any> | undefined;\n        let userCompDetails: UserCompDetails | undefined;\n\n\n        if (this.params.cellRenderer) {\n            userCompDetails = this.userComponentFactory.getCellRendererDetails(this.params, {\n                value,\n                valueFormatted,\n                setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                    this.setTooltip({ newTooltipText: value, shouldDisplayTooltip });\n                },\n            } as ICellRendererParams);\n            \n        }\n\n        if (userCompDetails) {\n            cellRendererPromise = userCompDetails.newAgStackInstance();\n        }\n\n        if (cellRendererPromise) {\n            bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());\n        }\n\n        if (cellRendererPromise) {\n            cellRendererPromise.then(childComponent => {\n                this.addDestroyFunc(() => {\n                    this.getContext().destroyBean(childComponent);\n                });\n            });\n            return true;\n        }\n        return false;\n    }\n\n    private onClick(): void {\n        const parent = this.getParentComponent();\n        const event: WithoutGridCommon<FieldPickerValueSelectedEvent> = {\n            type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n            fromEnterKey: false,\n            value: this.value\n        };\n\n        parent?.dispatchEvent(event);\n    }\n\n}", "import { Component } from './component';\nimport { Autowired, PostConstruct } from '../context/context';\nimport { RefSelector } from './componentAnnotations';\nimport { getAriaPosInSet, setAriaSetSize, setAriaPosInSet, setAriaSelected, setAriaChecked, setAriaRole, setAriaLabel } from '../utils/aria';\nimport { KeyCode } from '../constants/keyCode';\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { waitUntil } from '../utils/function';\nimport { TabGuardComp } from './tabGuardComp';\nimport { Events } from '../eventKeys';\nimport { stopPropagationForAgGrid } from '../utils/event';\nimport { AnimationFrameService } from '../misc/animationFrameService';\n\nexport interface VirtualListModel {\n    getRowCount(): number;\n    getRow(index: number): any;\n    /** Required if using soft refresh. If rows are equal, componentUpdater will be called instead of remove/create */\n    areRowsEqual?(oldRow: any, newRow: any): boolean;\n}\n\ninterface VirtualListParams {\n    cssIdentifier?: string;\n    ariaRole?: string;\n    listName?: string;\n}\n\nexport class VirtualList<C extends Component = Component> extends TabGuardComp {\n    private readonly cssIdentifier: string;\n    private readonly ariaRole: string;\n    private listName?: string;\n\n    private model: VirtualListModel;\n    private renderedRows = new Map<number, { rowComponent: C; eDiv: HTMLDivElement; value: any; }>();\n    private componentCreator: (value: any, listItemElement: HTMLElement) => C;\n    private componentUpdater: (value: any, component: C) => void;\n    private rowHeight = 20;\n    private lastFocusedRowIndex: number | null;\n    private isHeightFromTheme: boolean = true;\n\n    @Autowired('resizeObserverService') private readonly resizeObserverService: ResizeObserverService;\n    @Autowired('animationFrameService') private readonly animationFrameService: AnimationFrameService;\n    @RefSelector('eContainer') private readonly eContainer: HTMLElement;\n\n    constructor(params?: VirtualListParams) {\n        super(VirtualList.getTemplate(params?.cssIdentifier || 'default'));\n\n        const { cssIdentifier = 'default', ariaRole = 'listbox', listName } = params || {};\n\n        this.cssIdentifier = cssIdentifier;\n        this.ariaRole = ariaRole;\n        this.listName = listName;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addScrollListener();\n        this.rowHeight = this.getItemHeight();\n        this.addResizeObserver();\n\n        this.initialiseTabGuard({\n            onFocusIn: (e: FocusEvent) => this.onFocusIn(e),\n            onFocusOut: (e: FocusEvent) => this.onFocusOut(e),\n            focusInnerElement: (fromBottom: boolean) => this.focusInnerElement(fromBottom),\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n\n        this.setAriaProperties();\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanged.bind(this));\n    }\n\n    private onGridStylesChanged(): void {\n        this.rowHeight = this.getItemHeight();\n        this.refresh();\n    }\n\n    private setAriaProperties(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const listName = translate('ariaDefaultListName', this.listName || 'List');\n        const ariaEl = this.eContainer;\n\n        setAriaRole(ariaEl, this.ariaRole);\n        setAriaLabel(ariaEl, listName);\n    }\n\n    private addResizeObserver(): void {\n        // do this in an animation frame to prevent loops\n        const listener = () => this.animationFrameService.requestAnimationFrame(() => this.drawVirtualRows());\n        const destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);\n        this.addDestroyFunc(destroyObserver);\n    }\n\n    protected focusInnerElement(fromBottom: boolean): void {\n        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);\n    }\n\n    protected onFocusIn(e: FocusEvent): void {\n        const target = e.target as HTMLElement;\n\n        if (target.classList.contains('ag-virtual-list-item')) {\n            this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;\n        }\n    }\n\n    protected onFocusOut(e: FocusEvent): void {\n        if (!this.getFocusableElement().contains(e.relatedTarget as HTMLElement)) {\n            this.lastFocusedRowIndex = null;\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (this.navigate(e.key === KeyCode.UP)) {\n                    e.preventDefault();\n                }\n\n                break;\n        }\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        if (this.navigate(e.shiftKey)) {\n            e.preventDefault();\n        } else {\n            stopPropagationForAgGrid(e);\n            this.forceFocusOutOfContainer(e.shiftKey);\n        }\n    }\n\n    private navigate(up: boolean): boolean {\n        if (this.lastFocusedRowIndex == null) { return false; }\n\n        const nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);\n\n        if (nextRow < 0 || nextRow >= this.model.getRowCount()) { return false; }\n\n        this.focusRow(nextRow);\n\n        return true;\n    }\n\n    public getLastFocusedRow(): number | null {\n        return this.lastFocusedRowIndex;\n    }\n\n    public focusRow(rowNumber: number): void {\n        this.ensureIndexVisible(rowNumber);\n\n        window.setTimeout(() => {\n            if (!this.isAlive()) { return; }\n            const renderedRow = this.renderedRows.get(rowNumber);\n\n            if (renderedRow) {\n                renderedRow.eDiv.focus();\n            }\n        }, 10);\n    }\n\n    public getComponentAt(rowIndex: number): C | undefined {\n        const comp = this.renderedRows.get(rowIndex);\n\n        return comp && comp.rowComponent;\n    }\n\n    public forEachRenderedRow(func: (comp: C, idx: number) => void): void {\n        this.renderedRows.forEach((value, key)  => func(value.rowComponent, key));\n    }\n\n    private static getTemplate(cssIdentifier: string) {\n        return (/* html */\n            `<div class=\"ag-virtual-list-viewport ag-${cssIdentifier}-virtual-list-viewport\" role=\"presentation\">\n                <div class=\"ag-virtual-list-container ag-${cssIdentifier}-virtual-list-container\" ref=\"eContainer\"></div>\n            </div>`\n        );\n    }\n\n    private getItemHeight(): number {\n        if (!this.isHeightFromTheme) {\n            return this.rowHeight;\n        }\n        return this.environment.getListItemHeight();\n    }\n\n    /**\n     * Returns true if the view had to be scrolled, otherwise, false.\n     */\n    public ensureIndexVisible(index: number, scrollPartialIntoView: boolean = true): boolean {\n        const lastRow = this.model.getRowCount();\n\n        if (typeof index !== 'number' || index < 0 || index >= lastRow) {\n            console.warn('AG Grid: invalid row index for ensureIndexVisible: ' + index);\n            return false;\n        }\n\n        const rowTopPixel = index * this.rowHeight;\n        const rowBottomPixel = rowTopPixel + this.rowHeight;\n        const eGui = this.getGui();\n\n        const viewportTopPixel = eGui.scrollTop;\n        const viewportHeight = eGui.offsetHeight;\n        const viewportBottomPixel = viewportTopPixel + viewportHeight;\n\n        const diff = scrollPartialIntoView ? 0 : this.rowHeight;\n        const viewportScrolledPastRow = viewportTopPixel > rowTopPixel + diff;\n        const viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel - diff;\n\n        if (viewportScrolledPastRow) {\n            // if row is before, scroll up with row at top\n            eGui.scrollTop = rowTopPixel;\n            return true;\n        }\n        \n        if (viewportScrolledBeforeRow) {\n            // if row is below, scroll down with row at bottom\n            const newScrollPosition = rowBottomPixel - viewportHeight;\n            eGui.scrollTop = newScrollPosition;\n            return true;\n        }\n\n        return false;\n    }\n\n    public setComponentCreator(componentCreator: (value: any, listItemElement: HTMLElement) => C): void {\n        this.componentCreator = componentCreator;\n    }\n\n    public setComponentUpdater(componentUpdater: (value: any, component: C) => void): void {\n        this.componentUpdater = componentUpdater;\n    }\n\n    public getRowHeight(): number {\n        return this.rowHeight;\n    }\n\n    public getScrollTop(): number {\n        return this.getGui().scrollTop;\n    }\n\n    public setRowHeight(rowHeight: number): void {\n        this.isHeightFromTheme = false;\n        this.rowHeight = rowHeight;\n        this.refresh();\n    }\n\n    public refresh(softRefresh?: boolean): void {\n        if (this.model == null || !this.isAlive()) { return; }\n\n        const rowCount = this.model.getRowCount();\n        this.eContainer.style.height = `${rowCount * this.rowHeight}px`;\n\n        // ensure height is applied before attempting to redraw rows\n        waitUntil(() => this.eContainer.clientHeight >= rowCount * this.rowHeight,\n            () => {\n                if (!this.isAlive()) { return; }\n\n                if (this.canSoftRefresh(softRefresh)) {\n                    this.drawVirtualRows(true);\n                } else {\n                    this.clearVirtualRows();\n                    this.drawVirtualRows();\n                }\n            }\n        );\n    }\n\n    private canSoftRefresh(softRefresh: boolean | undefined): boolean {\n        return !!(softRefresh && this.renderedRows.size && typeof this.model.areRowsEqual === 'function' && this.componentUpdater);\n    }\n\n    private clearVirtualRows() {\n        this.renderedRows.forEach((_, rowIndex) => this.removeRow(rowIndex));\n    }\n\n    private drawVirtualRows(softRefresh?: boolean) {\n        if (!this.isAlive() || !this.model) { return; }\n\n        const gui = this.getGui();\n        const topPixel = gui.scrollTop;\n        const bottomPixel = topPixel + gui.offsetHeight;\n        const firstRow = Math.floor(topPixel / this.rowHeight);\n        const lastRow = Math.floor(bottomPixel / this.rowHeight);\n\n        this.ensureRowsRendered(firstRow, lastRow, softRefresh);\n    }\n\n    private ensureRowsRendered(start: number, finish: number, softRefresh?: boolean) {\n        // remove any rows that are no longer required\n        this.renderedRows.forEach((_, rowIndex) => {\n            if ((rowIndex < start || rowIndex > finish) && rowIndex !== this.lastFocusedRowIndex) {\n                this.removeRow(rowIndex);\n            }\n        });\n\n        if (softRefresh) {\n            // refresh any existing rows\n            this.refreshRows();\n        }\n\n        // insert any required new rows\n        for (let rowIndex = start; rowIndex <= finish; rowIndex++) {\n            if (this.renderedRows.has(rowIndex)) { continue; }\n\n            // check this row actually exists (in case overflow buffer window exceeds real data)\n            if (rowIndex < this.model.getRowCount()) {\n                this.insertRow(rowIndex);\n            }\n        }\n    }\n\n    private insertRow(rowIndex: number): void {\n        const value = this.model.getRow(rowIndex);\n        const eDiv = document.createElement('div');\n\n        eDiv.classList.add('ag-virtual-list-item', `ag-${this.cssIdentifier}-virtual-list-item`);\n        setAriaRole(eDiv, this.ariaRole === 'tree' ? 'treeitem' : 'option');\n        setAriaSetSize(eDiv, this.model.getRowCount());\n        setAriaPosInSet(eDiv, rowIndex + 1);\n        eDiv.setAttribute('tabindex', '-1');\n\n        eDiv.style.height = `${this.rowHeight}px`;\n        eDiv.style.top = `${this.rowHeight * rowIndex}px`;\n\n        const rowComponent = this.componentCreator(value, eDiv);\n\n        rowComponent.addGuiEventListener('focusin', () => this.lastFocusedRowIndex = rowIndex);\n\n        eDiv.appendChild(rowComponent.getGui());\n\n        // keep the DOM order consistent with the order of the rows\n        if (this.renderedRows.has(rowIndex - 1)) {\n            this.renderedRows.get(rowIndex - 1)!.eDiv.insertAdjacentElement('afterend', eDiv);\n        } else if (this.renderedRows.has(rowIndex + 1)) {\n            this.renderedRows.get(rowIndex + 1)!.eDiv.insertAdjacentElement('beforebegin', eDiv);\n        } else {\n            this.eContainer.appendChild(eDiv);\n        }\n\n        this.renderedRows.set(rowIndex, { rowComponent, eDiv, value });\n    }\n\n    private removeRow(rowIndex: number) {\n        const component = this.renderedRows.get(rowIndex)!;\n\n        this.eContainer.removeChild(component.eDiv);\n        this.destroyBean(component.rowComponent);\n        this.renderedRows.delete(rowIndex);\n    }\n\n    private refreshRows(): void {\n        const rowCount = this.model.getRowCount();\n        this.renderedRows.forEach((row, rowIndex) => {\n            if (rowIndex >= rowCount) {\n                this.removeRow(rowIndex);\n            } else {\n                const newValue = this.model.getRow(rowIndex);\n                if (this.model.areRowsEqual?.(row.value, newValue)) {\n                    this.componentUpdater(newValue, row.rowComponent);\n                } else {\n                    // to be replaced later\n                    this.removeRow(rowIndex);\n                }\n            }\n        });\n    }\n\n    private addScrollListener() {\n        this.addGuiEventListener('scroll', () => this.drawVirtualRows(), { passive: true });\n    }\n\n    public setModel(model: VirtualListModel): void {\n        this.model = model;\n    }\n\n    public getAriaElement(): Element {\n        return this.eContainer;\n    }\n\n    public destroy(): void {\n        if (!this.isAlive()) { return; }\n\n        this.clearVirtualRows();\n        super.destroy();\n    }\n}\n", "import { UserCompDetails, UserComponentFactory } from \"../components/framework/userComponentFactory\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { Autowired } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { FieldPickerValueSelectedEvent } from \"../events\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\nimport { AgPromise } from \"../utils\";\nimport { setAriaActiveDescendant, setAriaControls, setAriaLabel } from \"../utils/aria\";\nimport { bindCellRendererToHtmlElement, clearElement, isVisible } from \"../utils/dom\";\nimport { stopPropagationForAgGrid } from \"../utils/event\";\nimport { debounce } from \"../utils/function\";\nimport { fuzzySuggestions } from \"../utils/fuzzyMatch\";\nimport { exists } from \"../utils/generic\";\nimport { isEventFromPrintableCharacter } from \"../utils/keyboard\";\nimport { escapeString } from \"../utils/string\";\nimport { AgInputTextField } from \"./agInputTextField\";\nimport { AgPickerField, AgPickerFieldParams } from \"./agPickerField\";\nimport { RichSelectRow } from \"./agRichSelectRow\";\nimport { Component } from \"./component\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { VirtualList } from \"./virtualList\";\n\nexport interface RichSelectParams<TValue = any> extends AgPickerFieldParams {\n    value?: TValue;\n    valueList?: TValue[]\n    allowTyping?: boolean;\n    cellRenderer?: any;\n    cellRowHeight?: number;\n    searchDebounceDelay?: number;\n\n    filterList?: boolean;\n    searchType?: 'match' | 'matchAny' | 'fuzzy';\n    highlightMatch?: boolean;\n    placeholder?: string;\n    initialInputValue?: string;\n\n    valueFormatter?: (value: TValue) => any;\n    searchStringCreator?: (values: TValue[]) => string[]\n}\n\nconst TEMPLATE = /* html */`\n    <div class=\"ag-picker-field\" role=\"presentation\">\n        <div ref=\"eLabel\"></div>\n            <div ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-rich-select-value ag-picker-collapsed\">\n            <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n            <ag-input-text-field ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n            <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n        </div>\n    </div>`;\n\nexport class AgRichSelect<TValue = any> extends AgPickerField<TValue, RichSelectParams<TValue>, VirtualList> {\n\n    private searchString = '';\n    private listComponent: VirtualList | undefined;\n    protected values: TValue[];\n    private currentList: TValue[] | undefined\n    private cellRowHeight: number;\n    private highlightedItem: number = -1;\n    private lastRowHovered: number = -1;\n    private searchStringCreator: ((values: TValue[]) => string[]) | null = null;\n    private eLoading: HTMLElement | undefined;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @RefSelector('eInput') private eInput: AgInputTextField;\n    \n\n    constructor(config?: RichSelectParams<TValue>) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelRichSelectField',\n            pickerAriaLabelValue: 'Rich Select Field',\n            pickerType: 'ag-list',\n            className: 'ag-rich-select',\n            pickerIcon: 'smallDown',\n            ariaRole: 'combobox',\n            template: config?.template ?? TEMPLATE,\n            modalPicker: false,\n            ...config,\n            // maxPickerHeight needs to be set after expanding `config`\n            maxPickerHeight: config?.maxPickerHeight ?? 'calc(var(--ag-row-height) * 6.5)',\n        });\n\n        const { cellRowHeight, value, valueList, searchStringCreator } = config || {};\n\n        if (cellRowHeight != null) {\n            this.cellRowHeight = cellRowHeight;\n        }\n\n        if (value !== undefined) {\n            this.value = value;\n        }\n\n        if (valueList != null) {\n            this.values = valueList;\n        }\n\n        if (searchStringCreator) {\n            this.searchStringCreator = searchStringCreator;\n        }\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n        this.createLoadingElement();\n        this.createListComponent();\n\n        const { allowTyping, placeholder } = this.config;\n\n        if (allowTyping) {\n            this.eInput\n                .setAutoComplete(false)\n                .setInputPlaceholder(placeholder);\n\n            this.eDisplayField.classList.add('ag-hidden');\n        } else {\n            this.eInput.setDisplayed(false);\n        }\n\n        this.eWrapper.tabIndex = this.gridOptionsService.get('tabIndex');\n\n        const { searchDebounceDelay = 300 } = this.config;\n        this.clearSearchString = debounce(this.clearSearchString, searchDebounceDelay);\n\n        this.renderSelectedValue();\n\n        if (allowTyping) {\n            this.eInput.onValueChange(value => this.searchTextFromString(value));\n            this.addManagedListener(this.eWrapper, 'focus', this.onWrapperFocus.bind(this));\n        }\n        this.addManagedListener(this.eWrapper, 'focusout', this.onWrapperFocusOut.bind(this));\n\n    }\n\n    private createLoadingElement(): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const translate = this.localeService.getLocaleTextFunc();\n        const el = eDocument.createElement('div');\n\n        el.classList.add('ag-loading-text');\n        el.innerText = translate('loadingOoo', 'Loading...');\n        this.eLoading = el;\n    }\n\n    private createListComponent(): void {\n        this.listComponent = this.createBean(new VirtualList({ cssIdentifier: 'rich-select' }))\n        this.listComponent.setComponentCreator(this.createRowComponent.bind(this));\n\n        const componentUpdater = (item: TValue, component: any) => { /* nothing to update but method required to soft refresh */ };\n        this.listComponent.setComponentUpdater(componentUpdater);\n        this.listComponent.setParentComponent(this);\n\n        this.addManagedListener(this.listComponent, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, (e: FieldPickerValueSelectedEvent) => {\n            this.onListValueSelected(e.value, e.fromEnterKey);\n        });\n        \n        const { cellRowHeight } = this;\n        if (cellRowHeight) {\n            this.listComponent.setRowHeight(cellRowHeight);\n        }\n\n        const eListGui = this.listComponent.getGui();\n        const eListAriaEl = this.listComponent.getAriaElement();\n\n        this.addManagedListener(eListGui, 'mousemove', this.onPickerMouseMove.bind(this));\n        this.addManagedListener(eListGui, 'mousedown', e => e.preventDefault());\n        eListGui.classList.add('ag-rich-select-list');\n\n        const listId = `ag-rich-select-list-${this.listComponent.getCompId()}`;\n        eListAriaEl.setAttribute('id', listId);\n        const translate = this.localeService.getLocaleTextFunc();\n        const ariaLabel = translate(this.config.pickerAriaLabelKey, this.config.pickerAriaLabelValue);\n\n        setAriaLabel(eListAriaEl, ariaLabel);\n        setAriaControls(this.eWrapper, eListAriaEl);\n    }\n\n    private renderSelectedValue(): void {\n        const { value, eDisplayField, config } = this;\n        const { allowTyping, initialInputValue } = this.config;\n        const valueFormatted = this.config.valueFormatter ? this.config.valueFormatter(value) : value;\n\n        if (allowTyping) {\n            this.eInput.setValue(initialInputValue ?? valueFormatted)\n            return;\n        }\n\n        let userCompDetails: UserCompDetails | undefined;\n\n        if (config.cellRenderer) {\n            userCompDetails = this.userComponentFactory.getCellRendererDetails(this.config, {\n                value,\n                valueFormatted\n            } as ICellRendererParams);\n        }\n\n        let userCompDetailsPromise: AgPromise<any> | undefined;\n\n        if (userCompDetails) {\n            userCompDetailsPromise = userCompDetails.newAgStackInstance();\n        }\n\n        if (userCompDetailsPromise) {\n            clearElement(eDisplayField);\n            bindCellRendererToHtmlElement(userCompDetailsPromise, eDisplayField);\n            userCompDetailsPromise.then(renderer => {\n                this.addDestroyFunc(() => this.getContext().destroyBean(renderer));\n            });\n        } else {\n            if (exists(this.value)) {\n                eDisplayField.innerText = valueFormatted;\n                eDisplayField.classList.remove('ag-display-as-placeholder');\n            } else {\n                const { placeholder } = config;\n                if (exists(placeholder)) {\n                    eDisplayField.innerHTML = `${escapeString(placeholder)}`\n                    eDisplayField.classList.add('ag-display-as-placeholder');\n                } else {\n                    clearElement(eDisplayField);\n                }\n            }\n\n            this.setTooltip({\n                newTooltipText: valueFormatted ?? null,\n                shouldDisplayTooltip: () => this.eDisplayField.scrollWidth > this.eDisplayField.clientWidth\n            });\n        }\n    }\n\n    private getCurrentValueIndex(): number {\n        const { currentList, value } = this;\n\n        if (value == null || !currentList) { return -1; }\n\n        for (let i = 0; i < currentList.length; i++) {\n            if (currentList[i] === value) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    private highlightFilterMatch(): void {\n        this.listComponent?.forEachRenderedRow((cmp: RichSelectRow<TValue>, idx: number) => {\n            cmp.highlightString(this.searchString);\n        });\n    }\n\n    private highlightSelectedValue(index?: number): void {\n        if (index == null) {\n            index = this.getCurrentValueIndex();\n        }\n\n        this.highlightedItem = index;\n\n        this.listComponent?.forEachRenderedRow((cmp: RichSelectRow<TValue>, idx: number) => {\n            const highlighted = index === -1 ? false : this.highlightedItem === idx;\n            cmp.updateHighlighted(highlighted);\n        });\n    }\n\n    public setRowHeight(height: number): void {\n        if (height !== this.cellRowHeight) {\n            this.cellRowHeight = height;\n        }\n\n        if (this.listComponent) {\n            this.listComponent.setRowHeight(height);\n        }\n    }\n\n    protected createPickerComponent() {\n        const { values }  = this;\n\n        if (values) {\n            this.setValueList({ valueList: values });\n        }\n\n        // do not create the picker every time to save state\n        return this.listComponent!;\n    }\n\n    public setSearchStringCreator(searchStringFn: (values: TValue[]) => string[]): void {\n        this.searchStringCreator = searchStringFn;\n    }\n\n    public setValueList(params: { valueList: TValue[], refresh?: boolean }): void {\n        const { valueList, refresh } = params;\n\n        if (!this.listComponent) { return; }\n        if (this.currentList === valueList) { return; }\n\n        this.currentList = valueList;\n\n        this.listComponent.setModel({\n            getRowCount: () => valueList.length,\n            getRow: (index: number) => valueList[index],\n            areRowsEqual: (oldRow, newRow) => oldRow === newRow,\n        });\n\n        if (refresh) {\n            // if `values` is not present, it means the valuesList was set asynchronously\n            if (!this.values) {\n                this.values = valueList;\n                if (this.isPickerDisplayed) {\n                    this.showCurrentValueInPicker();\n                }\n            } else {\n                this.listComponent.refresh(true);\n            }\n        }\n    }\n\n    public showPicker() {\n        super.showPicker();\n        this.showCurrentValueInPicker();\n        this.displayOrHidePicker();\n    }\n\n    private showCurrentValueInPicker(): void {\n        if (!this.listComponent) { return; }\n\n        if (!this.currentList) { \n            if (this.isPickerDisplayed && this.eLoading) {\n                this.listComponent.appendChild(this.eLoading);\n            }\n            return;\n        }\n\n        if (this.eLoading?.offsetParent) {\n            this.eLoading.parentElement?.removeChild(this.eLoading);\n        }\n\n        const currentValueIndex = this.getCurrentValueIndex();\n\n        if (currentValueIndex !== -1) {\n            // make sure the virtual list has been sized correctly\n            this.listComponent.refresh();\n            this.listComponent.ensureIndexVisible(currentValueIndex);\n            // this second call to refresh is necessary to force scrolled elements\n            // to be rendered with the correct index info.\n            this.listComponent.refresh(true);\n            this.highlightSelectedValue(currentValueIndex);\n        } else {\n            this.listComponent.refresh();\n        }\n    }\n\n    protected beforeHidePicker(): void {\n        this.highlightedItem = -1;\n        super.beforeHidePicker();\n    }\n\n    private onWrapperFocus(): void {\n        if (!this.eInput) { return; }\n\n        const focusableEl = this.eInput.getFocusableElement() as HTMLInputElement;\n        focusableEl.focus();\n        focusableEl.select();\n    }\n\n    private onWrapperFocusOut(e: FocusEvent): void {\n        if (!this.eWrapper.contains(e.relatedTarget as Element)) {\n            this.hidePicker();\n        }\n    }\n\n    private buildSearchStringFromKeyboardEvent(searchKey: KeyboardEvent) {\n        let { key } = searchKey;\n\n        if (key === KeyCode.BACKSPACE) {\n            this.searchString = this.searchString.slice(0, -1);\n            key = '';\n        } else if (!isEventFromPrintableCharacter(searchKey)) {\n            return;\n        }\n\n        searchKey.preventDefault();\n\n        this.searchTextFromCharacter(key);\n    }\n\n    private searchTextFromCharacter(char: string): void {\n        this.searchString += char;\n        this.runSearch();\n        this.clearSearchString();\n    }\n\n    public searchTextFromString(str: string | null | undefined): void {\n        if (str == null) { str = ''; }\n        this.searchString = str;\n        this.runSearch();\n    }\n\n    private buildSearchStrings(values: TValue[]): string[] | undefined {\n        const { valueFormatter = (value => value) } = this.config;\n\n        let searchStrings: string[] | undefined;\n        if (typeof values[0] === 'number' || typeof values[0] === 'string') {\n            searchStrings = values.map(v => valueFormatter(v));\n        } else if (typeof values[0] === 'object' && this.searchStringCreator) {\n            searchStrings = this.searchStringCreator(values);\n        }\n\n        return searchStrings;\n    }\n\n    private getSuggestionsAndFilteredValues(searchValue: string, valueList: string[]): { suggestions: string[], filteredValues: TValue[] } {\n        let suggestions: string[] = [];\n        let filteredValues: TValue[] = [];\n\n        if (!searchValue.length) { return { suggestions, filteredValues } };\n\n        const { searchType = 'fuzzy', filterList } = this.config;\n\n        if (searchType === 'fuzzy') {\n            const fuzzySearchResult = fuzzySuggestions(this.searchString, valueList, true);\n            suggestions = fuzzySearchResult.values;\n\n            const indices = fuzzySearchResult.indices;\n            if (filterList && indices.length) {\n                for (let i = 0; i < indices.length; i++) {\n                    filteredValues.push(this.values[indices[i]]);\n                }\n            }\n        } else {\n            suggestions = valueList.filter((val, idx) => {\n                const currentValue = val.toLocaleLowerCase();\n                const valueToMatch = this.searchString.toLocaleLowerCase();\n\n                const isMatch = searchType === 'match' ? currentValue.startsWith(valueToMatch) : currentValue.indexOf(valueToMatch) !== -1;\n                if (filterList && isMatch) {\n                    filteredValues.push(this.values[idx]);\n                }\n                return isMatch;\n            });\n        }\n\n        return { suggestions, filteredValues };\n    }\n\n    private filterListModel(filteredValues: TValue[]): void {\n        const { filterList } = this.config;\n\n        if (!filterList) { return; }\n\n        this.setValueList({ valueList: filteredValues, refresh: true });\n        this.alignPickerToComponent();\n    }\n\n    private runSearch() {\n        const { values } = this;\n        const searchStrings = this.buildSearchStrings(values);\n\n        if (!searchStrings) {\n            this.highlightSelectedValue(-1);\n            return;\n        }\n\n        const { suggestions, filteredValues } = this.getSuggestionsAndFilteredValues(this.searchString, searchStrings);\n        const { filterList, highlightMatch, searchType = 'fuzzy' } = this.config;\n\n        const filterValueLen = filteredValues.length;\n        const shouldFilter = !!(filterList && this.searchString !== '');\n\n        this.filterListModel(shouldFilter ? filteredValues : values);\n\n        if (suggestions.length) {\n            const topSuggestionIndex = shouldFilter ? 0 : searchStrings.indexOf(suggestions[0]);\n            this.selectListItem(topSuggestionIndex);\n        } else {\n            this.highlightSelectedValue(-1);\n            \n            if (!shouldFilter || filterValueLen) {\n                this.listComponent?.ensureIndexVisible(0);\n            } else if (shouldFilter) {\n                this.getAriaElement().removeAttribute('data-active-option');\n                const eListAriaEl = this.listComponent?.getAriaElement();\n                if (eListAriaEl) {\n                    setAriaActiveDescendant(eListAriaEl, null);\n                }\n            }\n        }\n\n        if (highlightMatch && searchType !== 'fuzzy') {\n            this.highlightFilterMatch();\n        }\n\n        this.displayOrHidePicker();\n    }\n\n    private displayOrHidePicker(): void {\n        const eListGui = this.listComponent?.getGui();\n        const toggleValue = this.currentList ? this.currentList.length === 0 : false;\n        eListGui?.classList.toggle('ag-hidden', toggleValue)\n    }\n\n    private clearSearchString(): void {\n        this.searchString = '';\n    }\n\n    private selectListItem(index: number, preventUnnecessaryScroll?: boolean): void {\n        if (!this.isPickerDisplayed || !this.currentList || !this.listComponent || index < 0 || index >= this.currentList.length) { return; }\n\n        const wasScrolled = this.listComponent.ensureIndexVisible(index, !preventUnnecessaryScroll);\n\n        if (wasScrolled  && !preventUnnecessaryScroll) {\n            this.listComponent.refresh(true);\n        }\n        this.highlightSelectedValue(index);\n    }\n\n    public setValue(value: TValue, silent?: boolean, fromPicker?: boolean): this {\n        const index = this.currentList ? this.currentList.indexOf(value) : -1;\n\n        if (index === -1) { return this; }\n\n        this.value = value;\n\n        if (!fromPicker) {\n            this.selectListItem(index);\n        }\n\n        this.renderSelectedValue();\n\n        return super.setValue(value, silent);\n    }\n\n    private createRowComponent(value: TValue): Component {\n        const row = new RichSelectRow<TValue>(this.config, this.eWrapper);\n        row.setParentComponent(this.listComponent!);\n\n        this.getContext().createBean(row);\n        row.setState(value);\n\n        const { highlightMatch, searchType = 'fuzzy' } = this.config;\n\n        if (highlightMatch && searchType !== 'fuzzy') {\n            row.highlightString(this.searchString);\n        }\n\n        return row;\n    }\n\n    private getRowForMouseEvent(e: MouseEvent): number {\n        const { listComponent } = this;\n\n        if (!listComponent) { return  -1; }\n\n\n        const eGui = listComponent?.getGui();\n        const rect = eGui.getBoundingClientRect();\n        const scrollTop = listComponent.getScrollTop();\n        const mouseY = e.clientY - rect.top + scrollTop;\n\n        return Math.floor(mouseY / listComponent.getRowHeight());\n    }\n\n    private onPickerMouseMove(e: MouseEvent): void {\n        if (!this.listComponent) { return; }\n        const row = this.getRowForMouseEvent(e);\n\n        if (row !== -1 && row != this.lastRowHovered) {\n            this.lastRowHovered = row;\n            this.selectListItem(row, true);\n        }\n    }\n\n    private onNavigationKeyDown(event: any, key: string): void {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n\n        const isDown = key === KeyCode.DOWN;\n\n        if (!this.isPickerDisplayed && isDown) {\n            this.showPicker();\n            return;\n        }\n\n        const oldIndex = this.highlightedItem;\n\n        const diff = isDown ? 1 : -1;\n        const newIndex = oldIndex === - 1 ? 0 : oldIndex + diff;\n\n        this.selectListItem(newIndex);\n    }\n\n    protected onEnterKeyDown(e: KeyboardEvent): void {\n        if (!this.isPickerDisplayed) { return; }\n        e.preventDefault();\n\n        if (this.currentList) {\n            this.onListValueSelected(this.currentList[this.highlightedItem], true)\n        }\n    }\n\n    private onTabKeyDown(): void {\n        if (!this.isPickerDisplayed || !this.currentList) { return; }\n\n        this.setValue(this.currentList[this.highlightedItem], false, true);\n    }\n\n    private onListValueSelected(value: TValue, fromEnterKey: boolean): void {\n        this.setValue(value, false, true);\n        this.dispatchPickerEvent(value, fromEnterKey);\n        this.hidePicker();\n    }\n\n    private dispatchPickerEvent(value: TValue, fromEnterKey: boolean): void {\n        const event: WithoutGridCommon<FieldPickerValueSelectedEvent> = {\n            type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n            fromEnterKey,\n            value\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    public getFocusableElement(): HTMLElement {\n        const { allowTyping } = this.config;\n\n        if (allowTyping) {\n            return this.eInput.getFocusableElement();\n        }\n\n        return super.getFocusableElement();\n    }\n\n    protected onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        const { allowTyping } = this.config;\n\n        switch (key) {\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                if (!allowTyping) {\n                    event.preventDefault();\n                }\n                break;\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_DOWN:\n                event.preventDefault();\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onNavigationKeyDown(event, key);\n                break;\n            case KeyCode.ESCAPE:\n                if (this.isPickerDisplayed) {\n                    if (isVisible(this.listComponent!.getGui())) {\n                        event.preventDefault();\n                        stopPropagationForAgGrid(event);\n                    }\n\n                    this.hidePicker();\n                }\n                break;\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown();\n                break;\n            default:\n                if (!allowTyping) {\n                    this.buildSearchStringFromKeyboardEvent(event);\n                }\n        }\n    }\n\n    public destroy(): void {\n        if (this.listComponent) {\n            this.destroyBean(this.listComponent);\n            this.listComponent = undefined;\n        }\n\n        this.eLoading = undefined;\n\n        super.destroy();\n    }\n\n}", "import { RefSelector } from \"./componentAnnotations\";\nimport { AgInputRange } from \"./agInputRange\";\nimport { AgAbstractLabel, LabelAlignment, AgLabelParams } from \"./agAbstractLabel\";\nimport { AgInputNumberField } from \"./agInputNumberField\";\nimport { PostConstruct } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\n\nexport interface AgSliderParams extends AgLabelParams {\n    minValue?: number;\n    maxValue?: number;\n    textFieldWidth?: number;\n    step?: number;\n    value?: string;\n    onValueChange?: (newValue: number) => void;\n}\n\nexport class AgSlider extends AgAbstractLabel<AgSliderParams> {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-slider\">\n            <label ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>`;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eSlider') private readonly eSlider: AgInputRange;\n    @RefSelector('eText') private readonly eText: AgInputNumberField;\n\n    protected labelAlignment: LabelAlignment = 'top';\n\n    constructor(config?: AgSliderParams) {\n        super(config, AgSlider.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.eSlider.addCssClass('ag-slider-field');\n        const { minValue, maxValue, textFieldWidth, step, value, onValueChange } = this.config;\n        if (minValue != null) {\n            this.setMinValue(minValue);\n        }\n        if (maxValue != null) {\n            this.setMaxValue(maxValue);\n        }\n        if (textFieldWidth != null) {\n            this.setTextFieldWidth(textFieldWidth);\n        }\n        if (step != null) {\n            this.setStep(step);\n        }\n        if (value != null) {\n            this.setValue(value);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void) {\n        const eventChanged = Events.EVENT_FIELD_VALUE_CHANGED;\n        this.addManagedListener(this.eText, eventChanged, () => {\n            const textValue = parseFloat(this.eText.getValue()!);\n            this.eSlider.setValue(textValue.toString(), true);\n            callbackFn(textValue || 0);\n        });\n\n        this.addManagedListener(this.eSlider, eventChanged, () => {\n            const sliderValue = this.eSlider.getValue()!;\n            this.eText.setValue(sliderValue, true);\n            callbackFn(parseFloat(sliderValue));\n        });\n\n        return this;\n    }\n\n    public setSliderWidth(width: number): this {\n        this.eSlider.setWidth(width);\n        return this;\n    }\n\n    public setTextFieldWidth(width: number): this {\n        this.eText.setWidth(width);\n        return this;\n    }\n\n    public setMinValue(minValue: number): this {\n        this.eSlider.setMinValue(minValue);\n        this.eText.setMin(minValue);\n\n        return this;\n    }\n\n    public setMaxValue(maxValue: number): this {\n        this.eSlider.setMaxValue(maxValue);\n        this.eText.setMax(maxValue);\n        return this;\n    }\n\n    public getValue(): string | null | undefined {\n        return this.eText.getValue();\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        if (this.getValue() === value) {\n            return this;\n        }\n\n        this.eText.setValue(value, true);\n        this.eSlider.setValue(value, true);\n\n        if (!silent) {\n            this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n        }\n\n        return this;\n    }\n\n    public setStep(step: number): this {\n        this.eSlider.setStep(step);\n        this.eText.setStep(step);\n        return this;\n    }\n}\n", "import { Component } from './component';\nimport { RefSelector } from './componentAnnotations';\nimport { PostConstruct } from '../context/context';\nimport { AgCheckbox } from './agCheckbox';\nimport { createIcon } from '../utils/icon';\nimport { setDisplayed } from '../utils/dom';\nimport { KeyCode } from '../constants/keyCode';\nimport { setAriaExpanded } from '../utils/aria';\nimport { AgToggleButton } from './agToggleButton';\nimport { AgEvent } from '../events';\n\ntype GroupItem = Component | HTMLElement;\ntype Align = 'start' | 'end' | 'center' | 'stretch';\ntype Direction = 'horizontal' | 'vertical';\n\nexport interface AgGroupComponentParams {\n    title?: string;\n    enabled?: boolean;\n    suppressEnabledCheckbox?: boolean;\n    suppressOpenCloseIcons?: boolean;\n    suppressToggleExpandOnEnableChange?: boolean;\n    cssIdentifier?: string;\n    items?: GroupItem[];\n    alignItems?: Align;\n    direction?: Direction;\n    onEnableChange?: (enabled: boolean) => void;\n    expanded?: boolean;\n    useToggle?: boolean;\n}\n\ninterface ExpandChangedEvent extends AgEvent {\n    expanded?: boolean;\n}\n\ninterface EnableChangeEvent extends AgEvent {\n    enabled: boolean;\n}\n\nexport class AgGroupComponent extends Component {\n    public static EVENT_EXPANDED = 'expanded';\n    public static EVENT_COLLAPSED = 'collapsed';\n    public static EVENT_ENABLE_CHANGE = 'enableChange';\n\n    private items: GroupItem[];\n    private cssIdentifier: string;\n    private enabled: boolean;\n    private expanded: boolean;\n    private suppressEnabledCheckbox: boolean = true;\n    private suppressToggleExpandOnEnableChange: boolean = false;\n    private alignItems: Align | undefined;\n    private useToggle: boolean;\n\n    private eToggle?: AgToggleButton;\n    private eTitleBar?: DefaultTitleBar;\n\n    @RefSelector('eToolbar') private eToolbar: HTMLElement;\n    @RefSelector('cbGroupEnabled') private cbGroupEnabled: AgCheckbox;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n\n    constructor(private readonly params: AgGroupComponentParams = {}) {\n        super(AgGroupComponent.getTemplate(params));\n\n        const {\n            enabled, items, suppressEnabledCheckbox, expanded, suppressToggleExpandOnEnableChange, useToggle: toggleMode\n        } = params;\n\n        this.cssIdentifier = params.cssIdentifier || 'default';\n        this.enabled = enabled != null ? enabled : true;\n        this.items = items || [];\n        this.useToggle = toggleMode ?? false;\n\n        this.alignItems = params.alignItems || 'center';\n\n        // expanded by default\n        this.expanded = expanded == null ? true : expanded;\n\n        if (suppressEnabledCheckbox != null) {\n            this.suppressEnabledCheckbox = suppressEnabledCheckbox;\n        }\n\n        if (suppressToggleExpandOnEnableChange != null) {\n            this.suppressToggleExpandOnEnableChange = suppressToggleExpandOnEnableChange;\n        }\n    }\n\n    private static getTemplate(params: AgGroupComponentParams) {\n        const cssIdentifier = params.cssIdentifier || 'default';\n        const direction: Direction = params.direction || 'vertical';\n\n        return /* html */ `\n            <div class=\"ag-group ag-${cssIdentifier}-group\" role=\"presentation\">\n                <div ref=\"eToolbar\" class=\"ag-group-toolbar ag-${cssIdentifier}-group-toolbar\">\n                    <ag-checkbox ref=\"cbGroupEnabled\"></ag-checkbox>\n                </div>\n                <div ref=\"eContainer\" class=\"ag-group-container ag-group-container-${direction} ag-${cssIdentifier}-group-container\"></div>\n            </div>\n        `;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.setupTitleBar();\n\n        if (this.items.length) {\n            const initialItems = this.items;\n            this.items = [];\n\n            this.addItems(initialItems);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbGroupEnabled.setLabel(localeTextFunc('enabled', 'Enabled'));\n\n        if (this.enabled) {\n            this.setEnabled(this.enabled, undefined, true);\n        }\n\n        this.setAlignItems(this.alignItems);\n\n        const { onEnableChange, suppressOpenCloseIcons } = this.params;\n\n        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);\n        this.hideOpenCloseIcons(suppressOpenCloseIcons ?? false);\n\n        this.refreshChildDisplay();\n        setDisplayed(this.eContainer, this.expanded);\n\n        this.cbGroupEnabled.onValueChange((newSelection: boolean) => {\n            this.setEnabled(newSelection, true, this.suppressToggleExpandOnEnableChange);\n            this.dispatchEnableChangeEvent(newSelection);\n        });\n\n        if (onEnableChange != null) {\n            this.onEnableChange(onEnableChange);\n        }\n    }\n\n    private refreshChildDisplay(): void {\n        setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);\n        this.eTitleBar?.refreshOnExpand(this.expanded);\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public setAlignItems(alignment: AgGroupComponentParams['alignItems']): this {\n        if (this.alignItems !== alignment) {\n            this.removeCssClass(`ag-group-item-alignment-${this.alignItems}`);\n        }\n\n        this.alignItems = alignment;\n        const newCls = `ag-group-item-alignment-${this.alignItems}`;\n\n        this.addCssClass(newCls);\n\n        return this;\n    }\n\n    public toggleGroupExpand(expanded?: boolean): this {\n        let silent = false;\n        if (this.eTitleBar?.isSuppressCollapse() && !this.useToggle) {\n            expanded = true;\n            silent = true;\n        } else {\n            expanded = expanded != null ? expanded : !this.expanded;\n\n            if (this.expanded === expanded) {\n                return this;\n            }\n        }\n\n        this.expanded = expanded;\n        this.refreshChildDisplay();\n\n        setDisplayed(this.eContainer, expanded);\n\n        if (!silent) {\n            this.dispatchEvent({ type: expanded ? AgGroupComponent.EVENT_EXPANDED : AgGroupComponent.EVENT_COLLAPSED });\n        }\n\n        return this;\n    }\n\n    public addItems(items: GroupItem[]) {\n        items.forEach(item => this.addItem(item));\n    }\n\n    public prependItem(item: GroupItem) {\n        this.insertItem(item, true);\n    }\n\n    public addItem(item: GroupItem) {\n        this.insertItem(item, false);\n    }\n\n    private insertItem(item: GroupItem, prepend?: boolean) {\n        const container = this.eContainer;\n        const el = item instanceof Component ? item.getGui() : item;\n\n        el.classList.add('ag-group-item', `ag-${this.cssIdentifier}-group-item`);\n\n        if (prepend) {\n            container.insertAdjacentElement('afterbegin', el);\n            this.items.unshift(el);\n        } else {\n            container.appendChild(el);\n            this.items.push(el);\n        }\n    }\n\n    public hideItem(hide: boolean, index: number) {\n        const itemToHide = this.items[index] as HTMLElement;\n        setDisplayed(itemToHide, !hide);\n    }\n\n    public getItemIndex(item: GroupItem): number | -1 {\n        const el = item instanceof Component ? item.getGui() : item;\n        return this.items.indexOf(el);\n    }\n\n    public setTitle(title: string): this {\n        this.eTitleBar?.setTitle(title);\n        return this;\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.eTitleBar?.addCssClass(cssClass);\n    }\n\n    private dispatchEnableChangeEvent(enabled: boolean): void {\n        const event: EnableChangeEvent = {\n            type: AgGroupComponent.EVENT_ENABLE_CHANGE,\n            enabled\n        };\n        this.dispatchEvent(event);\n    }\n\n    public setEnabled(enabled: boolean, skipToggle?: boolean, skipExpand?: boolean): this {\n        this.enabled = enabled;\n        this.refreshDisabledStyles();\n\n        if (!skipExpand) {\n            this.toggleGroupExpand(enabled);\n        }\n\n        if (!skipToggle) {\n            this.cbGroupEnabled.setValue(enabled);\n            this.eToggle?.setValue(enabled);\n        }\n\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    public onEnableChange(callbackFn: (enabled: boolean) => void): this {\n        this.addManagedListener(this, AgGroupComponent.EVENT_ENABLE_CHANGE, (event: EnableChangeEvent) => callbackFn(event.enabled));\n\n        return this;\n    }\n\n    public hideEnabledCheckbox(hide: boolean): this {\n        this.suppressEnabledCheckbox = hide;\n        this.refreshChildDisplay();\n        this.refreshDisabledStyles();\n        return this;\n    }\n\n    public hideOpenCloseIcons(hide: boolean): this {\n        this.eTitleBar?.hideOpenCloseIcons(hide);\n\n        return this;\n    }\n\n    private refreshDisabledStyles() {\n        const disabled = !this.enabled;\n        this.eContainer.classList.toggle('ag-disabled', disabled);\n        this.eTitleBar?.refreshDisabledStyles(this.suppressEnabledCheckbox && disabled);\n        this.eContainer.classList.toggle('ag-disabled-group-container', disabled);\n    }\n\n    private setupTitleBar(): void {\n        const titleBar = this.useToggle ? this.createToggleTitleBar() : this.createDefaultTitleBar();\n        this.eToolbar.insertAdjacentElement('beforebegin', titleBar.getGui());\n    }\n\n    private createDefaultTitleBar(): DefaultTitleBar {\n        const titleBar = this.createManagedBean(new DefaultTitleBar(this.params));\n        this.eTitleBar = titleBar;\n        titleBar.refreshOnExpand(this.expanded);\n        this.addManagedListener(titleBar, DefaultTitleBar.EVENT_EXPAND_CHANGED, (event: ExpandChangedEvent) => this.toggleGroupExpand(event.expanded));\n        return titleBar;\n    }\n\n    private createToggleTitleBar(): AgToggleButton {\n        const eToggle = this.createManagedBean(new AgToggleButton({\n            value: this.enabled,\n            label: this.params.title,\n            labelAlignment: 'left',\n            labelWidth: 'flex',\n            onValueChange: enabled => {\n                this.setEnabled(enabled, true);\n                this.dispatchEnableChangeEvent(enabled);\n            }\n        }));\n        eToggle.addCssClass('ag-group-title-bar')\n        eToggle.addCssClass(`ag-${this.params.cssIdentifier ?? 'default'}-group-title-bar ag-unselectable`);\n        this.eToggle = eToggle;\n        this.toggleGroupExpand(this.enabled);\n        return eToggle;\n    }\n}\n\nclass DefaultTitleBar extends Component {\n    public static EVENT_EXPAND_CHANGED = 'expandedChanged';\n\n    private title: string | undefined;\n    private suppressOpenCloseIcons: boolean = false;\n\n    @RefSelector('eGroupOpenedIcon') private eGroupOpenedIcon: HTMLElement;\n    @RefSelector('eGroupClosedIcon') private eGroupClosedIcon: HTMLElement;\n    @RefSelector('eTitle') private eTitle: HTMLElement;\n\n    constructor(params: AgGroupComponentParams = {}) {\n        super(DefaultTitleBar.getTemplate(params));\n\n        const { title, suppressOpenCloseIcons } = params;\n\n        this.title = title;\n\n        if (suppressOpenCloseIcons != null) {\n            this.suppressOpenCloseIcons = suppressOpenCloseIcons;\n        }\n    }\n\n    private static getTemplate(params: AgGroupComponentParams) {\n        const cssIdentifier = params.cssIdentifier ?? 'default';\n\n        return /* html */ `\n            <div class=\"ag-group-title-bar ag-${cssIdentifier}-group-title-bar ag-unselectable\" role=\"button\">\n                <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" ref=\"eGroupOpenedIcon\" role=\"presentation\"></span>\n                <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" ref=\"eGroupClosedIcon\" role=\"presentation\"></span>\n                <span ref=\"eTitle\" class=\"ag-group-title ag-${cssIdentifier}-group-title\"></span>\n            </div>\n        `;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.setTitle(this.title);\n\n        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);\n\n        this.setupExpandContract();\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(createIcon('columnSelectClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(createIcon('columnSelectOpen', this.gridOptionsService, null));\n        this.addManagedListener(this.getGui(), 'click', () => this.dispatchExpandChanged());\n        this.addManagedListener(this.getGui(), 'keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case KeyCode.ENTER:\n                case KeyCode.SPACE:\n                    e.preventDefault();\n                    this.dispatchExpandChanged();\n                    break;\n                case KeyCode.RIGHT:\n                case KeyCode.LEFT:\n                    e.preventDefault();\n                    this.dispatchExpandChanged(e.key === KeyCode.RIGHT);\n                    break;\n            }\n        });\n    }\n\n    public refreshOnExpand(expanded: boolean): void {\n        this.refreshAriaStatus(expanded);\n        this.refreshOpenCloseIcons(expanded);\n    }\n\n    private refreshAriaStatus(expanded: boolean): void {\n        if (!this.suppressOpenCloseIcons) {\n            setAriaExpanded(this.getGui(), expanded);\n        }\n    }\n\n    private refreshOpenCloseIcons(expanded: boolean): void {\n        const showIcon = !this.suppressOpenCloseIcons;\n\n        setDisplayed(this.eGroupOpenedIcon, showIcon && expanded);\n        setDisplayed(this.eGroupClosedIcon, showIcon && !expanded);\n    }\n\n    public isSuppressCollapse(): boolean {\n        return this.suppressOpenCloseIcons;\n    }\n\n    private dispatchExpandChanged(expanded?: boolean): void {\n        const event: ExpandChangedEvent = {\n            type: DefaultTitleBar.EVENT_EXPAND_CHANGED,\n            expanded\n        };\n        this.dispatchEvent(event);\n    }\n\n    public setTitle(title: string | undefined): this {\n        this.eTitle.innerText = title || '';\n        setDisplayed(this.getGui(), title != undefined);\n        return this;\n    }\n\n    public hideOpenCloseIcons(hide: boolean): this {\n        this.suppressOpenCloseIcons = hide;\n\n        if (hide) {\n            this.dispatchExpandChanged(true);\n        }\n\n        return this;\n    }\n\n    public refreshDisabledStyles(disabled: boolean) {\n        const eGui = this.getGui();\n        if (disabled) {\n            eGui.classList.add('ag-disabled-group-title-bar');\n            eGui.removeAttribute('tabindex');\n        } else {\n            eGui.classList.remove('ag-disabled-group-title-bar');\n            if (typeof this.title === 'string') {\n                eGui.setAttribute('tabindex', '0');\n            } else {\n                eGui.removeAttribute('tabindex');\n            }\n        }\n    }\n}\n", "import { FocusService } from \"../focusService\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { AgMenuItemComponent, CloseMenuEvent, MenuItemActivatedEvent } from \"./agMenuItemComponent\";\nimport { TabGuardComp } from \"./tabGuardComp\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { MenuItemDef } from \"../interfaces/menuItem\";\nimport { loadTemplate } from \"../utils/dom\";\nimport { last } from \"../utils/array\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { IMenuActionParams } from \"../interfaces/iCallbackParams\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { AgPromise } from \"../utils/promise\";\nimport { stopPropagationForAgGrid } from \"../utils/event\";\n\nexport class AgMenuList extends TabGuardComp {\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private menuItems: AgMenuItemComponent[] = [];\n    private activeMenuItem: AgMenuItemComponent | null;\n    private params: WithoutGridCommon<IMenuActionParams>;\n\n    constructor(private readonly level = 0, params?: WithoutGridCommon<IMenuActionParams>) {\n        super(/* html */`<div class=\"ag-menu-list\" role=\"tree\"></div>`);\n        this.params = params ?? {\n            column: null,\n            node: null,\n            value: null\n        };\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e),\n            onFocusIn: e => this.handleFocusIn(e),\n            onFocusOut: e => this.handleFocusOut(e),\n        });\n    }\n\n    private onTabKeyDown(e: KeyboardEvent) {\n        const parent = this.getParentComponent();\n        const parentGui = parent && parent.getGui();\n        const isManaged = parentGui && parentGui.classList.contains('ag-focus-managed');\n\n        if (!isManaged) {\n            e.preventDefault();\n        }\n\n        if (e.shiftKey) {\n            this.closeIfIsChild(e);\n        }\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.handleNavKey(e.key);\n                break;\n            case KeyCode.ESCAPE:\n                if (this.closeIfIsChild()) {\n                    stopPropagationForAgGrid(e);\n                }\n                break;\n        }\n    }\n\n    private handleFocusIn(e: FocusEvent): void {\n        // if focus is coming from outside the menu list, then re-activate an item\n        const oldFocusedElement = e.relatedTarget as HTMLElement;\n        if (!this.tabGuardCtrl.isTabGuard(oldFocusedElement) && (\n            this.getGui().contains(oldFocusedElement) || this.activeMenuItem?.getSubMenuGui()?.contains(oldFocusedElement)\n        )) {\n            return;\n        }\n        if (this.activeMenuItem) {\n            this.activeMenuItem.activate();\n        } else {\n            this.activateFirstItem();\n        }\n    }\n\n    private handleFocusOut(e: FocusEvent): void {\n        // if focus is going outside the menu list, deactivate the current item\n        const newFocusedElement = e.relatedTarget as HTMLElement;\n        if (!this.activeMenuItem || this.getGui().contains(newFocusedElement) || this.activeMenuItem.getSubMenuGui()?.contains(newFocusedElement)) {\n            return;\n        }\n        if (!this.activeMenuItem.isSubMenuOpening()) {\n            this.activeMenuItem.deactivate();\n        }\n    }\n\n    public clearActiveItem(): void {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.deactivate();\n            this.activeMenuItem = null;\n        }\n    }\n\n    public addMenuItems(menuItems?: (MenuItemDef | string)[]): void {\n        if (menuItems == null) { return; }\n\n        AgPromise.all(menuItems.map<AgPromise<{ eGui: HTMLElement | null, comp?: AgMenuItemComponent }>>(menuItemOrString => {\n            if (menuItemOrString === 'separator') {\n                return AgPromise.resolve({ eGui: this.createSeparator() });\n            } else if (typeof menuItemOrString === 'string') {\n                console.warn(`AG Grid: unrecognised menu item ${menuItemOrString}`);\n                return AgPromise.resolve({ eGui: null });\n            } else {\n                return this.addItem(menuItemOrString);\n            }\n        })).then(elements => {\n            elements!.forEach(element => {\n                if (element?.eGui) {\n                    this.appendChild(element.eGui);\n                    if (element.comp) {\n                        this.menuItems.push(element.comp);\n                    }\n                }\n            })\n        });\n    }\n\n    private addItem(menuItemDef: MenuItemDef): AgPromise<{ comp: AgMenuItemComponent, eGui: HTMLElement }> {\n        const menuItem = this.createManagedBean(new AgMenuItemComponent());\n        return menuItem.init({\n            menuItemDef,\n            isAnotherSubMenuOpen: () => this.menuItems.some(m => m.isSubMenuOpen()),\n            level: this.level,\n            contextParams: this.params\n        }).then(() => {\n            menuItem.setParentComponent(this);\n\n            this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_CLOSE_MENU, (event: CloseMenuEvent) => {\n                this.dispatchEvent(event);\n            });\n\n            this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, (event: MenuItemActivatedEvent) => {\n                if (this.activeMenuItem && this.activeMenuItem !== event.menuItem) {\n                    this.activeMenuItem.deactivate();\n                }\n\n                this.activeMenuItem = event.menuItem;\n            });\n\n            return {\n                comp: menuItem,\n                eGui: menuItem.getGui()\n            };\n        });\n    }\n\n    public activateFirstItem(): void {\n        const item = this.menuItems.filter(currentItem => !currentItem.isDisabled())[0];\n\n        if (!item) { return; }\n\n        item.activate();\n    }\n\n    private createSeparator(): HTMLElement {\n        const separatorHtml = /* html */`\n            <div class=\"ag-menu-separator\" aria-hidden=\"true\">\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n            </div>`;\n\n        return loadTemplate(separatorHtml);\n    }\n\n    private handleNavKey(key: string): void {\n        switch (key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                const nextItem = this.findNextItem(key === KeyCode.UP);\n\n                if (nextItem && nextItem !== this.activeMenuItem) {\n                    nextItem.activate();\n                }\n\n                return;\n        }\n\n        const left = this.gridOptionsService.get('enableRtl') ? KeyCode.RIGHT : KeyCode.LEFT;\n\n        if (key === left) {\n            this.closeIfIsChild();\n        } else {\n            this.openChild();\n        }\n    }\n\n    private closeIfIsChild(e?: KeyboardEvent): boolean {\n        const parentItem = this.getParentComponent() as BeanStub;\n\n        if (parentItem && parentItem instanceof AgMenuItemComponent) {\n            if (e) { e.preventDefault(); }\n\n            parentItem.closeSubMenu();\n            parentItem.getGui().focus();\n            return true;\n        }\n        return false;\n    }\n\n    private openChild(): void {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.openSubMenu(true);\n        }\n    }\n\n    private findNextItem(up?: boolean): AgMenuItemComponent | undefined {\n        const items = this.menuItems.filter(item => !item.isDisabled());\n\n        if (!items.length) { return; }\n\n        if (!this.activeMenuItem) {\n            return up ? last(items) : items[0];\n        }\n\n        if (up) {\n            items.reverse();\n        }\n\n        let nextItem: AgMenuItemComponent | undefined;\n        let foundCurrent = false;\n\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n\n            if (!foundCurrent) {\n                if (item === this.activeMenuItem) {\n                    foundCurrent = true;\n                }\n                continue;\n            }\n\n            nextItem = item;\n            break;\n        }\n\n        if (foundCurrent && !nextItem) {\n            // start again from the beginning (/end)\n            return items[0];\n        }\n\n        return nextItem! || this.activeMenuItem;\n    }\n\n    protected destroy(): void {\n        this.clearActiveItem();\n        super.destroy();\n    }\n}\n", "import { PostConstruct } from '../context/context';\nimport { KeyCode } from '../constants/keyCode';\nimport { AgMenuItemComponent } from './agMenuItemComponent';\nimport { TabGuardComp } from './tabGuardComp';\nimport { IComponent } from '../interfaces/iComponent';\n\nexport class AgMenuPanel extends TabGuardComp {\n    constructor(private readonly wrappedComponent: IComponent<any>) {\n        super();\n\n        this.setTemplateFromElement(wrappedComponent.getGui());\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ESCAPE) {\n            this.closePanel();\n        }\n    }\n\n    private onTabKeyDown(e: KeyboardEvent): void {\n        if (e.defaultPrevented) { return; }\n\n        this.closePanel();\n        e.preventDefault();\n    }\n\n    private closePanel(): void {\n        const menuItem = (this.parentComponent as unknown as AgMenuItemComponent);\n        menuItem.closeSubMenu();\n        setTimeout(() => menuItem.getGui().focus(), 0);\n    }\n}", "import { AgMenuList } from './agMenuList';\nimport { AgMenuPanel } from './agMenuPanel';\nimport { Component } from './component';\nimport { PopupService } from './popupService';\nimport { KeyCode } from '../constants/keyCode';\nimport { Autowired } from '../context/context';\nimport { AgEvent } from '../events';\nimport { loadTemplate } from '../utils/dom';\nimport { setAriaDisabled, setAriaExpanded, setAriaLevel, setAriaRole } from '../utils/aria';\nimport { BeanStub } from '../context/beanStub';\nimport { UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { AgPromise } from '../utils/promise';\nimport { TooltipFeature } from './tooltipFeature';\nimport { Beans } from '../rendering/beans';\nimport { IMenuConfigParams, IMenuItemComp,  MenuItemDef } from '../interfaces/menuItem';\nimport { IComponent } from '../interfaces/iComponent';\nimport { WithoutGridCommon } from '../interfaces/iCommon';\nimport { IMenuActionParams } from '../interfaces/iCallbackParams';\n\nexport interface CloseMenuEvent extends AgEvent {\n    event?: MouseEvent | KeyboardEvent;\n}\n\nexport interface MenuItemActivatedEvent extends AgEvent {\n    menuItem: AgMenuItemComponent;\n}\n\ninterface AgMenuItemComponentParams {\n    menuItemDef: MenuItemDef;\n    isAnotherSubMenuOpen: () => boolean;\n    level: number;\n    childComponent?: IComponent<any>;\n    contextParams: WithoutGridCommon<IMenuActionParams>;\n}\n\nexport class AgMenuItemComponent extends BeanStub {\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n    @Autowired('beans') private readonly beans: Beans;\n\n    public static EVENT_CLOSE_MENU = 'closeMenu';\n    public static EVENT_MENU_ITEM_ACTIVATED = 'menuItemActivated';\n    public static ACTIVATION_DELAY = 80;\n\n    private eGui?: HTMLElement;\n    private params: MenuItemDef;\n    private isAnotherSubMenuOpen: () => boolean;\n    private level: number;\n    private childComponent?: IComponent<any>;\n    private contextParams: WithoutGridCommon<IMenuActionParams>;\n    private menuItemComp: IMenuItemComp;\n    private isActive = false;\n    private hideSubMenu: (() => void) | null;\n    private subMenuIsOpen = false;\n    private subMenuIsOpening = false;\n    private activateTimeoutId: number;\n    private deactivateTimeoutId: number;\n    private parentComponent?: Component;\n    private tooltip?: string;\n    private tooltipFeature?: TooltipFeature;\n    private suppressRootStyles: boolean = true;\n    private suppressAria: boolean = true;\n    private suppressFocus: boolean = true;\n    private cssClassPrefix: string;\n    private eSubMenuGui?: HTMLElement;\n\n    public init(params: AgMenuItemComponentParams): AgPromise<void> {\n        const { menuItemDef, isAnotherSubMenuOpen, level, childComponent, contextParams } = params;\n        this.params = params.menuItemDef;\n        this.level = level;\n        this.isAnotherSubMenuOpen = isAnotherSubMenuOpen;\n        this.childComponent = childComponent;\n        this.contextParams = contextParams;\n        this.cssClassPrefix = this.params.menuItemParams?.cssClassPrefix ?? 'ag-menu-option';\n        const compDetails = this.userComponentFactory.getMenuItemCompDetails(this.params, {\n            ...menuItemDef,\n            level,\n            isAnotherSubMenuOpen,\n            openSubMenu: activateFirstItem => this.openSubMenu(activateFirstItem),\n            closeSubMenu: () => this.closeSubMenu(),\n            closeMenu: event => this.closeMenu(event),\n            updateTooltip: (tooltip?: string, shouldDisplayTooltip?: () => boolean)  => this.refreshTooltip(tooltip, shouldDisplayTooltip),\n            onItemActivated: () => this.onItemActivated()\n        });\n        return compDetails.newAgStackInstance().then((comp: IMenuItemComp) => {\n            this.menuItemComp = comp;\n            const configureDefaults = comp.configureDefaults?.();\n            if (configureDefaults) {\n                this.configureDefaults(configureDefaults === true ? undefined : configureDefaults);\n            }\n        });\n    }\n\n    private addListeners(eGui: HTMLElement, params?: IMenuConfigParams): void {\n        if (!params?.suppressClick) {\n            this.addManagedListener(eGui, 'click', e => this.onItemSelected(e));\n        }\n        if (!params?.suppressKeyboardSelect) {\n            this.addManagedListener(eGui, 'keydown', (e: KeyboardEvent) => {\n                if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onItemSelected(e);\n                }\n            });\n        }\n        if (!params?.suppressMouseDown) {\n            this.addManagedListener(eGui, 'mousedown', e => {\n                // Prevent event bubbling to other event handlers such as PopupService triggering\n                // premature closing of any open sub-menu popup.\n                e.stopPropagation();\n                e.preventDefault();\n            });\n        }\n        if (!params?.suppressMouseOver) {\n            this.addManagedListener(eGui, 'mouseenter', () => this.onMouseEnter());\n            this.addManagedListener(eGui, 'mouseleave', () => this.onMouseLeave());\n        }\n    }\n\n    public isDisabled(): boolean {\n        return !!this.params.disabled;\n    }\n\n    public openSubMenu(activateFirstItem = false): void {\n        this.closeSubMenu();\n\n        if (!this.params.subMenu) { return; }\n\n        this.subMenuIsOpening = true;\n\n        const ePopup = loadTemplate(/* html */ `<div class=\"ag-menu\" role=\"presentation\"></div>`);\n        this.eSubMenuGui = ePopup;\n        let destroySubMenu: () => void;\n        let afterGuiAttached = () => {\n            this.subMenuIsOpening = false;\n        };\n\n        if (this.childComponent) {\n            const menuPanel = this.createBean(new AgMenuPanel(this.childComponent));\n            menuPanel.setParentComponent(this as any);\n\n            const subMenuGui = menuPanel.getGui();\n            const mouseEvent = 'mouseenter';\n            const mouseEnterListener = () => this.cancelDeactivate();\n\n            subMenuGui.addEventListener(mouseEvent, mouseEnterListener);\n\n            destroySubMenu = () => subMenuGui.removeEventListener(mouseEvent, mouseEnterListener);\n\n            ePopup.appendChild(subMenuGui);\n\n            if ((this.childComponent as any).afterGuiAttached) {\n                afterGuiAttached = () => {\n                    (this.childComponent as any).afterGuiAttached!();\n                    this.subMenuIsOpening = false;\n                };\n            }\n        } else if (this.params.subMenu) {\n            const childMenu = this.createBean(new AgMenuList(this.level + 1, this.contextParams));\n\n            childMenu.setParentComponent(this as any);\n            childMenu.addMenuItems(this.params.subMenu);\n            ePopup.appendChild(childMenu.getGui());\n\n            // bubble menu item selected events\n            this.addManagedListener(childMenu, AgMenuItemComponent.EVENT_CLOSE_MENU, e => this.dispatchEvent(e));\n            childMenu.addGuiEventListener('mouseenter', () => this.cancelDeactivate());\n\n            destroySubMenu = () => this.destroyBean(childMenu);\n\n            if (activateFirstItem) {\n                afterGuiAttached = () => {\n                    childMenu.activateFirstItem();\n                    this.subMenuIsOpening = false;\n                };\n            }\n        }\n\n        const positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService,\n            { eventSource: this.eGui, ePopup });\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            positionCallback: positionCallback,\n            anchorToElement: this.eGui,\n            ariaLabel: translate('ariaLabelSubMenu', 'SubMenu'),\n            afterGuiAttached\n        });\n\n        this.subMenuIsOpen = true;\n        this.setAriaExpanded(true);\n\n        this.hideSubMenu = () => {\n            if (addPopupRes) {\n                addPopupRes.hideFunc();\n            }\n            this.subMenuIsOpen = false;\n            this.setAriaExpanded(false);\n            destroySubMenu();\n            this.menuItemComp.setExpanded?.(false);\n            this.eSubMenuGui = undefined;\n        };\n\n        this.menuItemComp.setExpanded?.(true);\n    }\n\n    private setAriaExpanded(expanded: boolean): void {\n        if (!this.suppressAria) {\n            setAriaExpanded(this.eGui!, expanded);\n        }\n    }\n\n    public closeSubMenu(): void {\n        if (!this.hideSubMenu) { return; }\n        this.hideSubMenu();\n        this.hideSubMenu = null;\n        this.setAriaExpanded(false);\n    }\n\n    public isSubMenuOpen(): boolean {\n        return this.subMenuIsOpen;\n    }\n\n    public isSubMenuOpening(): boolean {\n        return this.subMenuIsOpening;\n    }\n\n    public activate(openSubMenu?: boolean): void {\n        this.cancelActivate();\n\n        if (this.params.disabled) { return; }\n\n        this.isActive = true;\n        if (!this.suppressRootStyles) {\n            this.eGui!.classList.add(`${this.cssClassPrefix}-active`);\n        }\n        this.menuItemComp.setActive?.(true);\n        if (!this.suppressFocus) {\n            this.eGui!.focus({ preventScroll: true });\n        }\n\n        if (openSubMenu && this.params.subMenu) {\n            window.setTimeout(() => {\n                if (this.isAlive() && this.isActive) {\n                    this.openSubMenu();\n                }\n            }, 300);\n        }\n\n        this.onItemActivated();\n    }\n\n    public deactivate() {\n        this.cancelDeactivate();\n        if (!this.suppressRootStyles) {\n            this.eGui!.classList.remove(`${this.cssClassPrefix}-active`);\n        }\n        this.menuItemComp.setActive?.(false);\n        this.isActive = false;\n\n        if (this.subMenuIsOpen) {\n            this.hideSubMenu!();\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.menuItemComp.getGui();\n    }\n\n    public getParentComponent(): Component | undefined {\n        return this.parentComponent;\n    }\n\n    public setParentComponent(component: Component): void {\n        this.parentComponent = component;\n    }\n\n    public getSubMenuGui(): HTMLElement | undefined {\n        return this.eSubMenuGui;\n    }\n\n    private onItemSelected(event: MouseEvent | KeyboardEvent): void {\n        this.menuItemComp.select?.();\n        if (this.params.action) {\n            this.getFrameworkOverrides().wrapOutgoing(() => this.params.action!(this.gridOptionsService.addGridCommonParams({\n                ...this.contextParams\n            })));\n        } else {\n            this.openSubMenu(event && event.type === 'keydown');\n        }\n\n        if ((this.params.subMenu && !this.params.action) || this.params.suppressCloseOnSelect) { return; }\n\n        this.closeMenu(event);\n    }\n    \n    private closeMenu(event?: MouseEvent | KeyboardEvent): void {\n        const e: CloseMenuEvent = {\n            type: AgMenuItemComponent.EVENT_CLOSE_MENU,\n            event\n        };\n    \n        this.dispatchEvent(e);    \n    }\n\n    private onItemActivated(): void {\n        const event: MenuItemActivatedEvent = {\n            type: AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED,\n            menuItem: this,\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    private cancelActivate(): void {\n        if (this.activateTimeoutId) {\n            window.clearTimeout(this.activateTimeoutId);\n            this.activateTimeoutId = 0;\n        }\n    }\n\n    private cancelDeactivate(): void {\n        if (this.deactivateTimeoutId) {\n            window.clearTimeout(this.deactivateTimeoutId);\n            this.deactivateTimeoutId = 0;\n        }\n    }\n\n    private onMouseEnter(): void {\n        this.cancelDeactivate();\n\n        if (this.isAnotherSubMenuOpen()) {\n            // wait to see if the user enters the open sub-menu\n            this.activateTimeoutId = window.setTimeout(() => this.activate(true), AgMenuItemComponent.ACTIVATION_DELAY);\n        } else {\n            // activate immediately\n            this.activate(true);\n        }\n    }\n\n    private onMouseLeave(): void {\n        this.cancelActivate();\n\n        if (this.isSubMenuOpen()) {\n            // wait to see if the user enters the sub-menu\n            this.deactivateTimeoutId = window.setTimeout(() => this.deactivate(), AgMenuItemComponent.ACTIVATION_DELAY);\n        } else {\n            // de-activate immediately\n            this.deactivate();\n        }\n    }\n\n    private configureDefaults(params?: IMenuConfigParams): void {\n        this.tooltip = this.params.tooltip;\n\n        if (!this.menuItemComp) {\n            // need to wait for init to complete\n            setTimeout(() => this.configureDefaults(params));\n            return;\n        }\n\n        let eGui = this.menuItemComp.getGui();\n        // in some frameworks, `getGui` might be a framework element\n        const rootElement = (this.menuItemComp as any).getRootElement?.() as HTMLElement | undefined;\n        if (rootElement) {\n            if (!params?.suppressRootStyles) {\n                eGui.classList.add('ag-menu-option-custom');\n            }\n            eGui = rootElement;\n        }\n        this.eGui = eGui;\n\n        this.suppressRootStyles = !!params?.suppressRootStyles;\n        if (!this.suppressRootStyles) {\n            eGui.classList.add(this.cssClassPrefix);\n            this.params.cssClasses?.forEach(it => eGui.classList.add(it));\n            if (this.params.disabled) {\n                eGui.classList.add(`${this.cssClassPrefix}-disabled`);\n            }\n        }\n        if (!params?.suppressTooltip) {\n            this.refreshTooltip();\n        }\n        this.suppressAria = !!params?.suppressAria;\n        if (!this.suppressAria) {\n            setAriaRole(eGui, 'treeitem');\n            setAriaLevel(eGui, this.level + 1);\n            if (this.params.disabled) {\n                setAriaDisabled(eGui, true);\n            }\n        }\n        if (!params?.suppressTabIndex) {\n            eGui.setAttribute('tabindex', '-1');\n        }\n        if (!this.params.disabled) {\n            this.addListeners(eGui, params);\n        }\n        this.suppressFocus = !!params?.suppressFocus;\n    }\n\n    private refreshTooltip(tooltip?: string, shouldDisplayTooltip?: () => boolean): void {\n        this.tooltip = tooltip;\n\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        if (!tooltip || !this.menuItemComp) {\n            return;\n        }\n\n        this.tooltipFeature = this.createBean(new TooltipFeature({\n            getGui: () => this.getGui(),\n            getTooltipValue: () => this.tooltip,\n            getLocation: () => 'menu',\n            shouldDisplayTooltip\n        }));\n    }\n\n    protected destroy(): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n        super.destroy();\n    }\n}\n", "import { RefSelector } from \"./componentAnnotations\";\nimport { PostConstruct } from \"../context/context\";\nimport { Component } from \"./component\";\nimport { getInnerHeight, getInnerWidth, isVisible, setDisplayed } from \"../utils/dom\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { PositionableFeature, PositionableOptions, ResizableStructure } from \"../rendering/features/positionableFeature\";\n\nexport interface PanelOptions extends PositionableOptions {\n    component?: Component;\n    hideTitleBar?: boolean | null;\n    closable?: boolean | null;\n    resizable?: boolean | ResizableStructure;\n    title?: string | null;\n    cssIdentifier?: string | null;\n}\n\nexport class AgPanel<TConfig extends PanelOptions = PanelOptions> extends Component {\n\n    protected static CLOSE_BTN_TEMPLATE = /* html */ `<div class=\"ag-button\"></div>`;\n    protected closable = true;\n\n    protected closeButtonComp: Component | undefined;\n    protected positionableFeature: PositionableFeature;\n    public close: () => void;\n\n    @RefSelector('eContentWrapper') protected readonly eContentWrapper: HTMLElement;\n    @RefSelector('eTitleBar') protected readonly eTitleBar: HTMLElement;\n    @RefSelector('eTitleBarButtons') protected readonly eTitleBarButtons: HTMLElement;\n    @RefSelector('eTitle') protected readonly eTitle: HTMLElement;\n\n    constructor(protected readonly config: TConfig) {\n        super(AgPanel.getTemplate(config));\n    }\n\n    private static getTemplate(config: PanelOptions) {\n        const cssIdentifier = config.cssIdentifier || 'default';\n        return /* html */ `<div class=\"ag-panel ag-${cssIdentifier}-panel\" tabindex=\"-1\">\n            <div ref=\"eTitleBar\" class=\"ag-panel-title-bar ag-${cssIdentifier}-panel-title-bar ag-unselectable\">\n                <span ref=\"eTitle\" class=\"ag-panel-title-bar-title ag-${cssIdentifier}-panel-title-bar-title\"></span>\n                <div ref=\"eTitleBarButtons\" class=\"ag-panel-title-bar-buttons ag-${cssIdentifier}-panel-title-bar-buttons\"></div>\n            </div>\n            <div ref=\"eContentWrapper\" class=\"ag-panel-content-wrapper ag-${cssIdentifier}-panel-content-wrapper\"></div>\n        </div>`;\n    }\n\n    @PostConstruct\n    protected postConstruct() {\n        const {\n            component,\n            closable,\n            hideTitleBar,\n            title,\n            minWidth = 250,\n            width,\n            minHeight = 250,\n            height,\n            centered,\n            popup,\n            x,\n            y\n        } = this.config;\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), {\n            minWidth, width, minHeight, height, centered, x, y, popup,\n            calculateTopBuffer: () => this.positionableFeature.getHeight()! - this.getBodyHeight()\n        });\n\n        this.createManagedBean(this.positionableFeature);\n\n        const eGui = this.getGui();\n\n        if (component) { this.setBodyComponent(component); }\n\n        if (!hideTitleBar) {\n            if (title) { this.setTitle(title); }\n            this.setClosable(closable != null ? closable : this.closable);\n        } else {\n            setDisplayed(this.eTitleBar, false);\n        }\n\n        this.addManagedListener(this.eTitleBar, 'mousedown', (e: MouseEvent) => {\n            const eDocument = this.gridOptionsService.getDocument();\n            if (\n                eGui.contains(e.relatedTarget as HTMLElement) ||\n                eGui.contains(eDocument.activeElement) ||\n                this.eTitleBarButtons.contains(e.target as HTMLElement)\n            ) {\n                e.preventDefault();\n                return;\n            }\n\n            const focusEl = this.eContentWrapper.querySelector('button, [href], input, select, textarea, [tabindex]');\n\n            if (focusEl) {\n                (focusEl as HTMLElement).focus();\n            }\n        });\n\n        if (popup && this.positionableFeature.isPositioned()) { return; }\n\n        if (this.renderComponent) {\n            this.renderComponent();\n        }\n\n        this.positionableFeature.initialisePosition();\n        this.eContentWrapper.style.height = '0';\n    }\n\n    protected renderComponent() {\n        const eGui = this.getGui();\n        eGui.focus();\n\n        this.close = () => {\n            eGui.parentElement!.removeChild(eGui);\n            this.destroy();\n        };\n    }\n\n    public getHeight(): number | undefined {\n        return this.positionableFeature.getHeight();\n    }\n\n    public setHeight(height: number | string): void {\n        this.positionableFeature.setHeight(height);\n    }\n\n    public getWidth(): number | undefined {\n        return this.positionableFeature.getWidth();\n    }\n\n    public setWidth(width: number | string): void {\n        this.positionableFeature.setWidth(width);\n    }\n\n    public setClosable(closable: boolean) {\n        if (closable !== this.closable) {\n            this.closable = closable;\n        }\n\n        if (closable) {\n            const closeButtonComp = this.closeButtonComp = new Component(AgPanel.CLOSE_BTN_TEMPLATE);\n            this.getContext().createBean(closeButtonComp);\n\n            const eGui = closeButtonComp.getGui();\n            const child = createIconNoSpan('close', this.gridOptionsService)!;\n            child.classList.add('ag-panel-title-bar-button-icon');\n            eGui.appendChild(child);\n\n            this.addTitleBarButton(closeButtonComp);\n            closeButtonComp.addManagedListener(eGui, 'click', this.onBtClose.bind(this));\n        } else if (this.closeButtonComp) {\n            const eGui = this.closeButtonComp.getGui();\n            eGui.parentElement!.removeChild(eGui);\n\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n    }\n\n    public setBodyComponent(bodyComponent: Component) {\n        bodyComponent.setParentComponent(this);\n        this.eContentWrapper.appendChild(bodyComponent.getGui());\n    }\n\n    public addTitleBarButton(button: Component, position?: number) {\n        const eTitleBarButtons = this.eTitleBarButtons;\n        const buttons = eTitleBarButtons.children;\n        const len = buttons.length;\n\n        if (position == null) {\n            position = len;\n        }\n\n        position = Math.max(0, Math.min(position, len));\n\n        button.addCssClass('ag-panel-title-bar-button');\n\n        const eGui = button.getGui();\n\n        if (position === 0) {\n            eTitleBarButtons.insertAdjacentElement('afterbegin', eGui);\n        } else if (position === len) {\n            eTitleBarButtons.insertAdjacentElement('beforeend', eGui);\n        } else {\n            buttons[position - 1].insertAdjacentElement('afterend', eGui);\n        }\n\n        button.setParentComponent(this);\n    }\n\n    public getBodyHeight(): number {\n        return getInnerHeight(this.eContentWrapper);\n    }\n\n    public getBodyWidth(): number {\n        return getInnerWidth(this.eContentWrapper);\n    }\n\n    public setTitle(title: string) {\n        this.eTitle.innerText = title;\n    }\n\n    // called when user hits the 'x' in the top right\n    private onBtClose() {\n        this.close();\n    }\n\n    protected destroy(): void {\n        if (this.closeButtonComp) {\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n\n        const eGui = this.getGui();\n\n        if (eGui && isVisible(eGui)) {\n            this.close();\n        }\n\n        super.destroy();\n    }\n}\n", "import { Autowired } from \"../context/context\";\nimport { PanelOptions, AgPanel } from \"./agPanel\";\nimport { Component } from \"./component\";\nimport { setDisplayed } from \"../utils/dom\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { PopupService } from \"./popupService\";\nimport { ResizableStructure } from \"../rendering/features/positionableFeature\";\n\nexport type ResizableSides = 'topLeft' |\n    'top' |\n    'topRight' |\n    'right' |\n    'bottomRight' |\n    'bottom' |\n    'bottomLeft' |\n    'left';\n\nexport interface DialogOptions extends PanelOptions {\n    eWrapper?: HTMLElement;\n    modal?: boolean;\n    movable?: boolean;\n    alwaysOnTop?: boolean;\n    maximizable?: boolean;\n    afterGuiAttached?: () => void;\n    closedCallback?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;\n}\n\nexport class AgDialog extends AgPanel<DialogOptions> {\n\n    @Autowired('popupService') private popupService: PopupService;\n\n    private isMaximizable: boolean = false;\n    private isMaximized: boolean = false;\n    private maximizeListeners: (() => void)[] = [];\n    private maximizeButtonComp: Component | undefined;\n    private maximizeIcon: Element | undefined;\n    private minimizeIcon: Element | undefined;\n    private resizeListenerDestroy: (() => void) | null | undefined = null;\n\n    private lastPosition = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n    };\n\n    constructor(config: DialogOptions) {\n        super({...config, popup: true });\n    }\n\n    protected postConstruct() {\n        const eGui = this.getGui();\n        const { movable, resizable, maximizable } = this.config;\n\n        this.addCssClass('ag-dialog');\n\n        super.postConstruct();\n\n        this.addManagedListener(eGui, 'focusin', (e: FocusEvent) => {\n            this.popupService.bringPopupToFront(eGui);\n        });\n\n        if (movable) { this.setMovable(movable); }\n        if (maximizable) { this.setMaximizable(maximizable); }\n        if (resizable) { this.setResizable(resizable); }\n    }\n\n    protected renderComponent() {\n        const eGui = this.getGui();\n        const { alwaysOnTop, modal, title, afterGuiAttached  } = this.config;\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: this.onClosed.bind(this),\n            alwaysOnTop,\n            ariaLabel: title || translate('ariaLabelDialog', 'Dialog'),\n            afterGuiAttached\n        });\n\n        if (addPopupRes) {\n            this.close = addPopupRes.hideFunc;\n        }\n    }\n\n    private onClosed(event?: MouseEvent | TouchEvent | KeyboardEvent): void {\n        this.destroy();\n        this.config.closedCallback?.(event);\n    }\n\n    private toggleMaximize() {\n        const position = this.positionableFeature.getPosition();\n        if (this.isMaximized) {\n            const { x, y, width, height } = this.lastPosition;\n            this.setWidth(width);\n            this.setHeight(height);\n            this.positionableFeature.offsetElement(x, y);\n        } else {\n            this.lastPosition.width = this.getWidth()!;\n            this.lastPosition.height = this.getHeight()!;\n            this.lastPosition.x = position.x;\n            this.lastPosition.y = position.y;\n            this.positionableFeature.offsetElement(0, 0);\n            this.setHeight('100%');\n            this.setWidth('100%');\n        }\n\n        this.isMaximized = !this.isMaximized;\n        this.refreshMaximizeIcon();\n    }\n\n    private refreshMaximizeIcon() {\n        setDisplayed(this.maximizeIcon!, !this.isMaximized);\n        setDisplayed(this.minimizeIcon!, this.isMaximized);\n    }\n\n    private clearMaximizebleListeners() {\n        if (this.maximizeListeners.length) {\n            this.maximizeListeners.forEach(destroyListener => destroyListener());\n            this.maximizeListeners.length = 0;\n        }\n\n        if (this.resizeListenerDestroy) {\n            this.resizeListenerDestroy();\n            this.resizeListenerDestroy = null;\n        }\n    }\n\n    protected destroy(): void {\n        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);\n\n        this.clearMaximizebleListeners();\n        super.destroy();\n    }\n\n    public setResizable(resizable: boolean | ResizableStructure) {\n        this.positionableFeature.setResizable(resizable);\n    }\n\n    public setMovable(movable: boolean) {\n        this.positionableFeature.setMovable(movable, this.eTitleBar);\n    }\n\n    public setMaximizable(maximizable: boolean) {\n        if (!maximizable) {\n            this.clearMaximizebleListeners();\n\n            if (this.maximizeButtonComp) {\n                this.destroyBean(this.maximizeButtonComp);\n                this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;\n            }\n            return;\n        }\n\n        const eTitleBar = this.eTitleBar;\n\n        if (!eTitleBar || maximizable === this.isMaximizable) { return; }\n\n        const maximizeButtonComp = this.buildMaximizeAndMinimizeElements();\n        this.refreshMaximizeIcon();\n\n        maximizeButtonComp.addManagedListener(maximizeButtonComp.getGui(), 'click', this.toggleMaximize.bind(this));\n\n        this.addTitleBarButton(maximizeButtonComp, 0);\n\n        this.maximizeListeners.push(\n            this.addManagedListener(eTitleBar, 'dblclick', this.toggleMaximize.bind(this))!\n        );\n\n        this.resizeListenerDestroy = this.addManagedListener(this, 'resize', () => {\n            this.isMaximized = false;\n            this.refreshMaximizeIcon();\n        });\n    }\n\n    private buildMaximizeAndMinimizeElements(): Component{\n        const maximizeButtonComp = this.maximizeButtonComp =\n        this.createBean(new Component(/* html */`<div class=\"ag-dialog-button\"></span>`));\n\n        const eGui = maximizeButtonComp.getGui();\n\n        this.maximizeIcon = createIconNoSpan('maximize', this.gridOptionsService)!;\n        eGui.appendChild(this.maximizeIcon);\n        this.maximizeIcon.classList.add('ag-panel-title-bar-button-icon');\n\n        this.minimizeIcon = createIconNoSpan('minimize', this.gridOptionsService)!;\n        eGui.appendChild(this.minimizeIcon);\n        this.minimizeIcon.classList.add('ag-panel-title-bar-button-icon');\n\n        return maximizeButtonComp;\n    }\n}\n", "import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { Events } from '../events';\nimport { BeanStub } from \"../context/beanStub\";\nimport { getAbsoluteHeight, getAbsoluteWidth, getElementRectWithOffset } from '../utils/dom';\nimport { last } from '../utils/array';\nimport { isElementInEventPath, isStopPropagationForAgGrid } from '../utils/event';\nimport { KeyCode } from '../constants/keyCode';\nimport { FocusService } from \"../focusService\";\nimport { GridCtrl } from \"../gridComp/gridCtrl\";\nimport { IAfterGuiAttachedParams } from \"../interfaces/iAfterGuiAttachedParams\";\nimport { AgPromise } from \"../utils\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { setAriaLabel, setAriaRole } from \"../utils/aria\";\nimport { PostProcessPopupParams } from \"../interfaces/iCallbackParams\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { IRowNode } from \"../interfaces/iRowNode\";\nimport { exists } from \"../utils/generic\";\n\nexport interface PopupPositionParams {\n    ePopup: HTMLElement;\n    column?: Column | null;\n    rowNode?: IRowNode | null;\n    nudgeX?: number;\n    nudgeY?: number;\n    position?: 'over' | 'under';\n    alignSide?: 'left' | 'right';\n    keepWithinBounds?: boolean;\n    skipObserver?: boolean;\n    updatePosition?: () => { x: number; y: number; };\n    postProcessCallback?: () => void;\n}\n\nexport interface PopupEventParams {\n    originalMouseEvent?: MouseEvent | Touch | null;\n    mouseEvent?: MouseEvent;\n    touchEvent?: TouchEvent;\n    keyboardEvent?: KeyboardEvent;\n}\n\nexport interface AgPopup {\n    element: HTMLElement;\n    wrapper: HTMLElement;\n    hideFunc: () => void;\n    isAnchored: boolean;\n    instanceId: number;\n    alignedToElement?: HTMLElement;\n    stopAnchoringPromise?: AgPromise<() => void>;\n}\n\nenum DIRECTION { vertical, horizontal }\n\nlet instanceIdSeq = 0;\n\nexport interface AddPopupParams {\n    // if true then listens to background checking for clicks, so that when the background is clicked,\n    // the child is removed again, giving a model look to popups.\n    modal?: boolean;\n    // the element to place in the popup\n    eChild: HTMLElement;\n    // if hitting ESC should close the popup\n    closeOnEsc?: boolean;\n    // a callback that gets called when the popup is closed\n    closedCallback?: (e?: MouseEvent | TouchEvent | KeyboardEvent) => void;\n    // if a clicked caused the popup (eg click a button) then the click that caused it\n    click?: MouseEvent | Touch | null;\n    alwaysOnTop?: boolean;\n    afterGuiAttached?: (params: IAfterGuiAttachedParams) => void;\n    // this gets called after the popup is created. the called could just call positionCallback themselves,\n    // however it needs to be called first before anchorToElement is called, so must provide this callback\n    // here if setting anchorToElement\n    positionCallback?: () => void;\n    // if the underlying anchorToElement moves, the popup will follow it. for example if context menu\n    // showing, and the whole grid moves (browser is scrolled down) then we want the popup to stay above\n    // the cell it appeared on. make sure though if setting, don't anchor to a temporary or moving element,\n    // eg if cellComp element is passed, what happens if row moves (sorting, filtering etc)? best anchor against\n    // the grid, not the cell.\n    anchorToElement?: HTMLElement;\n\n    // an aria label should be added to provided context to screen readers\n    ariaLabel: string;\n}\n\nexport interface AddPopupResult {\n    hideFunc: () => void;\n}\n\n@Bean('popupService')\nexport class PopupService extends BeanStub {\n\n    // really this should be using eGridDiv, not sure why it's not working.\n    // maybe popups in the future should be parent to the body??\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('resizeObserverService') public resizeObserverService: ResizeObserverService;\n\n    private gridCtrl: GridCtrl;\n\n    private popupList: AgPopup[] = [];\n\n    private static WAIT_FOR_POPUP_CONTENT_RESIZE: number = 200;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.handleThemeChange.bind(this));\n    }\n\n    public getPopupParent(): HTMLElement {\n        const ePopupParent = this.gridOptionsService.get('popupParent');\n\n        if (ePopupParent) { return ePopupParent; }\n\n        return this.gridCtrl.getGui();\n    }\n\n    public positionPopupForMenu(params: { eventSource: HTMLElement; ePopup: HTMLElement; }): void {\n        const { eventSource, ePopup } = params;\n\n        const popupIdx = this.getPopupIndex(ePopup);\n\n        if (popupIdx !== -1) {\n            const popup = this.popupList[popupIdx];\n            popup.alignedToElement = eventSource;\n        }\n\n        const sourceRect = eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect();\n        const y = this.keepXYWithinBounds(ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);\n\n        const minWidth = (ePopup.clientWidth > 0) ? ePopup.clientWidth : 200;\n        ePopup.style.minWidth = `${minWidth}px`;\n        const widthOfParent = parentRect.right - parentRect.left;\n        const maxX = widthOfParent - minWidth;\n\n        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup\n        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,\n        // we try place it first to the left, and then if not to the right.\n        let x: number;\n        if (this.gridOptionsService.get('enableRtl')) {\n            // for RTL, try left first\n            x = xLeftPosition();\n            if (x < 0) {\n                x = xRightPosition();\n                this.setAlignedStyles(ePopup, 'left');\n            }\n            if (x > maxX) {\n                x = 0;\n                this.setAlignedStyles(ePopup, 'right');\n            }\n        } else {\n            // for LTR, try right first\n            x = xRightPosition();\n            if (x > maxX) {\n                x = xLeftPosition();\n                this.setAlignedStyles(ePopup, 'right');\n            }\n            if (x < 0) {\n                x = 0;\n                this.setAlignedStyles(ePopup, 'left');\n            }\n        }\n\n        ePopup.style.left = `${x}px`;\n        ePopup.style.top = `${y}px`;\n\n        function xRightPosition(): number {\n            return sourceRect.right - parentRect.left - 2;\n        }\n\n        function xLeftPosition(): number {\n            return sourceRect.left - parentRect.left - minWidth;\n        }\n    }\n\n    public positionPopupUnderMouseEvent(params: PopupPositionParams & { type: string, mouseEvent: MouseEvent | Touch }): void {\n        const { ePopup, nudgeX, nudgeY, skipObserver } = params;\n\n        this.positionPopup({\n            ePopup: ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds: true,\n            skipObserver,\n            updatePosition: () => this.calculatePointerAlign(params.mouseEvent),\n            postProcessCallback: () => this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode)\n        });\n    }\n\n    private calculatePointerAlign(e: MouseEvent | Touch): { x: number, y: number; } {\n        const parentRect = this.getParentRect();\n\n        return {\n            x: e.clientX - parentRect.left,\n            y: e.clientY - parentRect.top\n        };\n    }\n\n    public positionPopupByComponent(params: PopupPositionParams & { type: string, eventSource: HTMLElement }) {\n        const { ePopup, nudgeX, nudgeY, keepWithinBounds, eventSource, alignSide = 'left', position = 'over', column, rowNode, type } = params;\n\n        const sourceRect = eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect() as DOMRect;\n\n        const popupIdx = this.getPopupIndex(ePopup);\n\n\n        if (popupIdx !== -1) {\n            const popup = this.popupList[popupIdx];\n            popup.alignedToElement = eventSource;\n        }\n\n        const updatePosition = () => {\n            let x = sourceRect.left - parentRect.left;\n            if (alignSide === 'right') {\n                x -= (ePopup.offsetWidth - sourceRect.width);\n            }\n\n            let y;\n\n            if (position === 'over') {\n                y = (sourceRect.top - parentRect.top);\n                this.setAlignedStyles(ePopup, 'over');\n            } else {\n                this.setAlignedStyles(ePopup, 'under');\n                const alignSide = this.shouldRenderUnderOrAbove(ePopup, sourceRect, parentRect, params.nudgeY || 0);\n                if (alignSide === 'under') {\n                    y = (sourceRect.top - parentRect.top + sourceRect.height);\n                } else {\n                    y = (sourceRect.top - ePopup.offsetHeight - (nudgeY || 0) * 2) - parentRect.top;\n                }\n            }\n\n            return { x, y };\n        };\n\n        this.positionPopup({\n            ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds,\n            updatePosition,\n            postProcessCallback: () => this.callPostProcessPopup(type, ePopup, eventSource, null, column, rowNode)\n        });\n    }\n\n    private shouldRenderUnderOrAbove(ePopup: HTMLElement, targetCompRect: DOMRect, parentRect: DOMRect, nudgeY: number): 'under' | 'above' {\n        const spaceAvailableUnder = parentRect.bottom - targetCompRect.bottom;\n        const spaceAvailableAbove = targetCompRect.top - parentRect.top;\n        const spaceRequired = ePopup.offsetHeight + nudgeY;\n\n        if (spaceAvailableUnder > spaceRequired) {\n            return 'under';\n        }\n\n        if (spaceAvailableAbove > spaceRequired || spaceAvailableAbove > spaceAvailableUnder) {\n            return 'above';\n        }\n\n        return 'under';\n    }\n\n    private setAlignedStyles(ePopup: HTMLElement, positioned: 'right' | 'left' | 'over' | 'above' | 'under' | null) {\n        const popupIdx = this.getPopupIndex(ePopup);\n\n        if (popupIdx === -1) { return; }\n\n        const popup = this.popupList[popupIdx];\n\n        const { alignedToElement } = popup;\n\n        if (!alignedToElement) { return; }\n\n        const positions = ['right', 'left', 'over', 'above', 'under'];\n\n        positions.forEach(position => {\n            alignedToElement.classList.remove(`ag-has-popup-positioned-${position}`)\n            ePopup.classList.remove(`ag-popup-positioned-${position}`);\n        });\n\n        if (!positioned) { return; }\n\n        alignedToElement.classList.add(`ag-has-popup-positioned-${positioned}`);\n        ePopup.classList.add(`ag-popup-positioned-${positioned}`);\n    }\n\n    private callPostProcessPopup(\n        type: string,\n        ePopup: HTMLElement,\n        eventSource?: HTMLElement | null,\n        mouseEvent?: MouseEvent | Touch | null,\n        column?: Column | null,\n        rowNode?: IRowNode | null\n    ): void {\n        const callback = this.gridOptionsService.getCallback('postProcessPopup');\n        if (callback) {\n            const params: WithoutGridCommon<PostProcessPopupParams> = {\n                column: column,\n                rowNode: rowNode,\n                ePopup: ePopup,\n                type: type,\n                eventSource: eventSource,\n                mouseEvent: mouseEvent\n            };\n            callback(params);\n        }\n    }\n\n    public positionPopup(params: PopupPositionParams): void {\n        const { ePopup, keepWithinBounds, nudgeX, nudgeY, skipObserver, updatePosition } = params;\n        const lastSize = { width: 0, height: 0 };\n\n        const updatePopupPosition = (fromResizeObserver: boolean = false) => {\n            let { x, y } = updatePosition!();\n\n            if (\n                fromResizeObserver &&\n                ePopup.clientWidth === lastSize.width &&\n                ePopup.clientHeight === lastSize.height\n            ) {\n                return;\n            }\n\n            lastSize.width = ePopup.clientWidth;\n            lastSize.height = ePopup.clientHeight;\n\n            if (nudgeX) { x += nudgeX; }\n            if (nudgeY) { y += nudgeY; }\n\n            // if popup is overflowing to the bottom, move it up\n            if (keepWithinBounds) {\n                x = this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);\n                y = this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);\n            }\n\n            ePopup.style.left = `${x}px`;\n            ePopup.style.top = `${y}px`;\n\n            if (params.postProcessCallback) {\n                params.postProcessCallback();\n            }\n        };\n\n        updatePopupPosition();\n\n        // Mouse tracking will recalculate positioning when moving, so won't need to recalculate here\n        if (!skipObserver) {\n            // Since rendering popup contents can be asynchronous, use a resize observer to\n            // reposition the popup after initial updates to the size of the contents\n            const resizeObserverDestroyFunc = this.resizeObserverService.observeResize(ePopup, () => updatePopupPosition(true));\n            // Only need to reposition when first open, so can clean up after a bit of time\n            setTimeout(() => resizeObserverDestroyFunc(), PopupService.WAIT_FOR_POPUP_CONTENT_RESIZE);\n        }\n    }\n\n    public getActivePopups(): HTMLElement[] {\n        return this.popupList.map((popup) => popup.element);\n    }\n\n    public getPopupList(): AgPopup[] {\n        return this.popupList;\n    }\n\n    private getParentRect() {\n        // subtract the popup parent borders, because popupParent.getBoundingClientRect\n        // returns the rect outside the borders, but the 0,0 coordinate for absolute\n        // positioning is inside the border, leading the popup to be off by the width\n        // of the border\n        const eDocument = this.gridOptionsService.getDocument();\n        let popupParent = this.getPopupParent();\n\n        if (popupParent === eDocument.body) {\n            popupParent = eDocument.documentElement;\n        } else if (getComputedStyle(popupParent).position === 'static') {\n            popupParent = popupParent.offsetParent as HTMLElement;\n        }\n\n        return getElementRectWithOffset(popupParent);\n    }\n\n    private keepXYWithinBounds(\n        ePopup: HTMLElement,\n        position: number,\n        direction: DIRECTION\n    ): number {\n        const isVertical = direction === DIRECTION.vertical;\n        const sizeProperty = isVertical ? 'clientHeight' : 'clientWidth';\n        const anchorProperty = isVertical ? 'top' : 'left';\n        const offsetProperty = isVertical ? 'offsetHeight' : 'offsetWidth';\n        const scrollPositionProperty = isVertical ? 'scrollTop' : 'scrollLeft';\n\n        const eDocument = this.gridOptionsService.getDocument();\n        const docElement = eDocument.documentElement;\n        const popupParent = this.getPopupParent();\n        const parentRect = popupParent.getBoundingClientRect();\n        const documentRect = eDocument.documentElement.getBoundingClientRect();\n        const isBody = popupParent === eDocument.body;\n\n        const offsetSize = ePopup[offsetProperty];\n        const getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;\n\n        let sizeOfParent = isBody ? (getSize(docElement) + docElement[scrollPositionProperty]) : popupParent[sizeProperty];\n\n        if (isBody) {\n            sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);\n        }\n\n        const max = sizeOfParent - offsetSize;\n\n        return Math.min(Math.max(position, 0), Math.abs(max));\n    }\n\n    public addPopup(params: AddPopupParams): AddPopupResult { \n        const eDocument = this.gridOptionsService.getDocument();\n        const { eChild, ariaLabel, alwaysOnTop, positionCallback, anchorToElement } = params;\n\n        if (!eDocument) {\n            console.warn('AG Grid: could not find the document, document is empty');\n            return { hideFunc: () => { } };\n        }\n\n        const pos = this.getPopupIndex(eChild);\n\n        if (pos !== -1) {\n            const popup = this.popupList[pos];\n            return { hideFunc: popup.hideFunc };\n        }\n\n        this.initialisePopupPosition(eChild);\n\n        const wrapperEl = this.createPopupWrapper(eChild, ariaLabel, !!alwaysOnTop);\n        const removeListeners = this.addEventListenersToPopup({ ...params, wrapperEl });\n\n        if (positionCallback) {\n            positionCallback();\n        }\n\n        this.addPopupToPopupList(eChild, wrapperEl, removeListeners, anchorToElement);\n\n        return {\n            hideFunc: removeListeners\n        };\n    }\n\n    private initialisePopupPosition(element: HTMLElement): void {\n        const ePopupParent = this.getPopupParent();\n        const ePopupParentRect = ePopupParent.getBoundingClientRect();\n\n        if (!exists(element.style.top)) {\n            element.style.top = `${ePopupParentRect.top * -1}px`;\n        }\n        if (!exists(element.style.left)) {\n            element.style.left = `${ePopupParentRect.left * -1}px`;\n        }\n    }\n\n    private createPopupWrapper(element: HTMLElement, ariaLabel: string, alwaysOnTop: boolean): HTMLElement {\n        const ePopupParent = this.getPopupParent();\n\n        // add env CSS class to child, in case user provided a popup parent, which means\n        // theme class may be missing\n        const eWrapper = document.createElement('div');\n        const { allThemes } = this.environment.getTheme();\n\n        if (allThemes.length) {\n            eWrapper.classList.add(...allThemes);\n        }\n\n        eWrapper.classList.add('ag-popup');\n        element.classList.add(\n            this.gridOptionsService.get('enableRtl') ? 'ag-rtl' : 'ag-ltr',\n            'ag-popup-child'\n        );\n\n        if (!element.hasAttribute('role')) {\n            setAriaRole(element, 'dialog');\n        }\n\n        setAriaLabel(element, ariaLabel);\n\n        eWrapper.appendChild(element);\n        ePopupParent.appendChild(eWrapper);\n\n        if (alwaysOnTop) {\n            this.setAlwaysOnTop(element, true);\n        } else {\n            this.bringPopupToFront(element);\n        }\n\n        return eWrapper;\n    }\n\n    private handleThemeChange() {\n        const { allThemes } = this.environment.getTheme();\n\n        for (const popup of this.popupList) {\n            for (const className of Array.from(popup.wrapper.classList)) {\n                if (className.startsWith(\"ag-theme-\")) {\n                    popup.wrapper.classList.remove(className)\n                }\n            }\n            if (allThemes.length) {\n                popup.wrapper.classList.add(...allThemes);\n            }\n        }\n\n    }\n\n    private addEventListenersToPopup(params: AddPopupParams & { wrapperEl: HTMLElement }): () => void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const ePopupParent = this.getPopupParent();\n\n        const { wrapperEl, eChild: popupEl, click: pointerEvent, closedCallback, afterGuiAttached, closeOnEsc, modal } = params;\n\n        let popupHidden = false;\n\n        const hidePopupOnKeyboardEvent = (event: KeyboardEvent) => {\n            if (!wrapperEl.contains(eDocument.activeElement)) {\n                return;\n            }\n\n            const key = event.key;\n\n            if (key === KeyCode.ESCAPE && !isStopPropagationForAgGrid(event)) {\n                removeListeners({ keyboardEvent: event });\n            }\n        };\n\n        const hidePopupOnMouseEvent = (event: MouseEvent) => removeListeners({ mouseEvent: event });\n        const hidePopupOnTouchEvent = (event: TouchEvent) => removeListeners({ touchEvent: event });\n\n        const removeListeners = (popupParams: PopupEventParams = {}) => {\n            const { mouseEvent, touchEvent, keyboardEvent } = popupParams;\n            if (\n                // we don't hide popup if the event was on the child, or any\n                // children of this child\n                this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, popupEl) ||\n                // this method should only be called once. the client can have different\n                // paths, each one wanting to close, so this method may be called multiple times.\n                popupHidden\n            ) {\n                return;\n            }\n\n            popupHidden = true;\n\n            ePopupParent.removeChild(wrapperEl);\n\n            eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);\n            eDocument.removeEventListener('mousedown', hidePopupOnMouseEvent);\n            eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);\n            eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);\n\n            this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent as any);\n\n            if (closedCallback) {\n                closedCallback(mouseEvent || touchEvent || keyboardEvent);\n            }\n\n            this.removePopupFromPopupList(popupEl);\n        };\n\n        if (afterGuiAttached) {\n            afterGuiAttached({ hidePopup: removeListeners });\n        }\n\n        // if we add these listeners now, then the current mouse\n        // click will be included, which we don't want\n        window.setTimeout(() => {\n            if (closeOnEsc) {\n                eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);\n            }\n\n            if (modal) {\n                eDocument.addEventListener('mousedown', hidePopupOnMouseEvent);\n                this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent as any);\n                eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);\n                eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);\n            }\n        }, 0);\n\n        return removeListeners;\n    }\n\n    private addPopupToPopupList(element: HTMLElement, wrapperEl: HTMLElement, removeListeners: () => void, anchorToElement?: HTMLElement): void {\n        this.popupList.push({\n            element: element,\n            wrapper: wrapperEl,\n            hideFunc: removeListeners,\n            instanceId: instanceIdSeq++,\n            isAnchored: !!anchorToElement\n        });\n\n        if (anchorToElement) {\n            this.setPopupPositionRelatedToElement(element, anchorToElement);\n        }\n    }\n\n    private getPopupIndex(el: HTMLElement): number {\n        return this.popupList.findIndex(p => p.element === el);\n    }\n\n    public setPopupPositionRelatedToElement(popupEl: HTMLElement, relativeElement?: HTMLElement | null): AgPromise<() => void> | undefined {\n        const popupIndex = this.getPopupIndex(popupEl);\n\n        if (popupIndex === -1) { return; }\n\n        const popup = this.popupList[popupIndex];\n\n        if (popup.stopAnchoringPromise) {\n            popup.stopAnchoringPromise.then(destroyFunc => destroyFunc && destroyFunc());\n        }\n\n        popup.stopAnchoringPromise = undefined;\n        popup.isAnchored = false;\n\n        if (!relativeElement) { return; }\n\n        // keeps popup positioned under created, eg if context menu, if user scrolls\n        // using touchpad and the cell moves, it moves the popup to keep it with the cell.\n        const destroyPositionTracker = this.keepPopupPositionedRelativeTo({\n            element: relativeElement,\n            ePopup: popupEl,\n            hidePopup: popup.hideFunc\n        });\n\n        popup.stopAnchoringPromise = destroyPositionTracker;\n        popup.isAnchored = true;\n\n        return destroyPositionTracker;\n    }\n\n    private removePopupFromPopupList(element: HTMLElement): void {\n        this.setAlignedStyles(element, null);\n        this.setPopupPositionRelatedToElement(element, null);\n\n        this.popupList = this.popupList.filter(p => p.element !== element);\n    }\n\n    private keepPopupPositionedRelativeTo(params: {\n        ePopup: HTMLElement,\n        element: HTMLElement,\n        hidePopup: () => void;\n    }): AgPromise<() => void> {\n        const eParent = this.getPopupParent();\n        const parentRect = eParent.getBoundingClientRect();\n\n        const { element, ePopup } = params;\n\n        const sourceRect = element.getBoundingClientRect();\n        const initialDiffTop = parentRect.top - sourceRect.top;\n        const initialDiffLeft = parentRect.left - sourceRect.left;\n\n        let lastDiffTop = initialDiffTop;\n        let lastDiffLeft = initialDiffLeft;\n\n        const topPx = ePopup.style.top;\n        const top = parseInt(topPx!.substring(0, topPx!.length - 1), 10);\n\n        const leftPx = ePopup.style.left;\n        const left = parseInt(leftPx!.substring(0, leftPx!.length - 1), 10);\n\n        return new AgPromise<() => void>(resolve => {\n            this.getFrameworkOverrides().setInterval(() => {\n                const pRect = eParent.getBoundingClientRect();\n                const sRect = element.getBoundingClientRect();\n\n                const elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;\n                if (elementNotInDom) {\n                    params.hidePopup();\n                    return;\n                }\n\n                const currentDiffTop = pRect.top - sRect.top;\n                if (currentDiffTop != lastDiffTop) {\n                    const newTop = this.keepXYWithinBounds(ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);\n                    ePopup.style.top = `${newTop}px`;\n                }\n                lastDiffTop = currentDiffTop;\n\n                const currentDiffLeft = pRect.left - sRect.left;\n                if (currentDiffLeft != lastDiffLeft) {\n                    const newLeft = this.keepXYWithinBounds(ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);\n                    ePopup.style.left = `${newLeft}px`;\n                }\n                lastDiffLeft = currentDiffLeft;\n\n            }, 200).then(intervalId => {\n                const result = () => {\n                    if (intervalId != null) {\n                        window.clearInterval(intervalId);\n                    }\n                };\n                resolve(result);\n            });\n        });\n    }\n\n    public hasAnchoredPopup(): boolean {\n        return this.popupList.some(popup => popup.isAnchored);\n    }\n\n    private isEventFromCurrentPopup(params: PopupEventParams, target: HTMLElement): boolean {\n        const { mouseEvent, touchEvent } = params;\n\n        const event = mouseEvent ? mouseEvent : touchEvent;\n\n        if (!event) { return false; }\n\n        const indexOfThisChild = this.getPopupIndex(target);\n\n        if (indexOfThisChild === -1) { return false; }\n\n        for (let i = indexOfThisChild; i < this.popupList.length; i++) {\n            const popup = this.popupList[i];\n\n            if (isElementInEventPath(popup.element, event)) { return true; }\n        }\n\n        // if the user did not write their own Custom Element to be rendered as popup\n        // and this component has an additional popup element, they should have the\n        // `ag-custom-component-popup` class to be detected as part of the Custom Component\n        return this.isElementWithinCustomPopup(event.target as HTMLElement);\n    }\n\n    public isElementWithinCustomPopup(el: HTMLElement): boolean {\n        const eDocument = this.gridOptionsService.getDocument();\n        while (el && el !== eDocument.body) {\n            if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {\n                return true;\n            }\n            el = el.parentElement;\n        }\n\n        return false;\n    }\n\n    private getWrapper(ePopup: HTMLElement): HTMLElement | null {\n        while (!ePopup.classList.contains('ag-popup') && ePopup.parentElement) {\n            ePopup = ePopup.parentElement;\n        }\n\n        return ePopup.classList.contains('ag-popup') ? ePopup : null;\n    }\n\n    public setAlwaysOnTop(ePopup: HTMLElement, alwaysOnTop?: boolean): void {\n        const eWrapper = this.getWrapper(ePopup);\n\n        if (!eWrapper) {\n            return;\n        }\n\n        eWrapper.classList.toggle('ag-always-on-top', !!alwaysOnTop);\n\n        if (alwaysOnTop) {\n            this.bringPopupToFront(eWrapper);\n        }\n    }\n\n    public bringPopupToFront(ePopup: HTMLElement) {\n        const parent = this.getPopupParent();\n        const popupList: HTMLElement[] = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup'));\n        const popupLen = popupList.length;\n        const alwaysOnTopList: HTMLElement[] = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup.ag-always-on-top'));\n        const onTopLength = alwaysOnTopList.length;\n        const eWrapper = this.getWrapper(ePopup);\n\n        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {\n            return;\n        }\n\n        const pos = popupList.indexOf(eWrapper);\n\n        const innerEls = eWrapper.querySelectorAll('div');\n        const innerElsScrollMap: [HTMLElement, number][] = [];\n\n        innerEls.forEach(el => {\n            if (el.scrollTop !== 0) {\n                innerElsScrollMap.push([el, el.scrollTop]);\n            }\n        });\n\n        if (onTopLength) {\n            const isPopupAlwaysOnTop = eWrapper.classList.contains('ag-always-on-top');\n\n            if (isPopupAlwaysOnTop) {\n                if (pos !== popupLen - 1) {\n                    last(alwaysOnTopList).insertAdjacentElement('afterend', eWrapper);\n                }\n            } else if (pos !== popupLen - onTopLength - 1) {\n                alwaysOnTopList[0].insertAdjacentElement('beforebegin', eWrapper);\n            }\n        } else if (pos !== popupLen - 1) {\n            last(popupList).insertAdjacentElement('afterend', eWrapper);\n        }\n\n        while (innerElsScrollMap.length) {\n            const currentEl = innerElsScrollMap.pop();\n            currentEl![0].scrollTop = currentEl![1];\n        }\n    }\n}\n", "import { escapeString } from \"../utils/string\";\nimport { exists } from \"../utils/generic\";\nimport { Component } from \"./component\";\n\nexport class AgAutocompleteRow extends Component {\n    private value: string;\n    private hasHighlighting = false;\n\n    constructor() {\n        super(/* html */`\n        <div class=\"ag-autocomplete-row\" role=\"presentation\">\n            <div class=\"ag-autocomplete-row-label\"></div>\n        </div>`);\n    }\n\n    public setState(value: string, selected: boolean): void {\n        this.value = value;\n\n        this.render();\n\n        this.updateSelected(selected);\n    }\n\n    public updateSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-autocomplete-row-selected', selected);\n    }\n\n    public setSearchString(searchString: string): void {\n        let keepHighlighting = false;\n        if (exists(searchString)) {\n            const index = this.value?.toLocaleLowerCase().indexOf(searchString.toLocaleLowerCase());\n            if (index >= 0) {\n                keepHighlighting = true;\n                this.hasHighlighting = true;\n                const highlightEndIndex = index + searchString.length;\n                const startPart = escapeString(this.value.slice(0, index));\n                const highlightedPart = escapeString(this.value.slice(index, highlightEndIndex));\n                const endPart = escapeString(this.value.slice(highlightEndIndex));\n                this.getGui().lastElementChild!.innerHTML = `${startPart}<b>${highlightedPart}</b>${endPart}`;\n            }\n        }\n        if (!keepHighlighting && this.hasHighlighting) {\n            this.hasHighlighting = false;\n            this.render();\n        }\n    }\n\n    private render() {\n        // putting in blank if missing, so at least the user can click on it\n        this.getGui().lastElementChild!.innerHTML = escapeString(this.value) ?? '&nbsp;';\n    }\n}\n", "import { Component } from \"./component\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { VirtualList } from \"./virtualList\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { AgAutocompleteRow } from \"./agAutocompleteRow\";\nimport { fuzzySuggestions } from \"../utils/fuzzyMatch\";\nimport { PopupComponent } from \"./popupComponent\";\nimport { PostConstruct } from \"../context/context\";\nimport { AutocompleteEntry } from \"./autocompleteParams\";\nimport { exists } from \"../utils/generic\";\n\nexport class AgAutocompleteList extends PopupComponent {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-autocomplete-list-popup\">\n            <div ref=\"eList\" class=\"ag-autocomplete-list\"></div>\n        <div>`;\n\n    @RefSelector('eList') private eList: HTMLElement;\n\n    private virtualList: VirtualList;\n\n    private autocompleteEntries: AutocompleteEntry[];\n\n    // as the user moves the mouse, the selectedValue changes\n    private selectedValue: AutocompleteEntry;\n\n    private searchString = '';\n\n    constructor(private params: {\n        autocompleteEntries: AutocompleteEntry[];\n        onConfirmed: () => void;\n        useFuzzySearch?: boolean;\n        forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean;\n    }) {\n        super(AgAutocompleteList.TEMPLATE);\n    }\n\n    public destroy(): void {\n        super.destroy();\n    }\n\n    @PostConstruct\n    protected init(): void {\n        this.autocompleteEntries = this.params.autocompleteEntries;\n        this.virtualList = this.createManagedBean(new VirtualList({ cssIdentifier: 'autocomplete' }));\n        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n        this.eList.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setModel({\n            getRowCount: () => this.autocompleteEntries.length,\n            getRow: (index: number) => this.autocompleteEntries[index]\n        });\n\n        const virtualListGui = this.virtualList.getGui();\n\n        this.addManagedListener(virtualListGui, 'click', () => this.params.onConfirmed());\n        this.addManagedListener(virtualListGui, 'mousemove', this.onMouseMove.bind(this));\n        this.addManagedListener(virtualListGui, 'mousedown', (e) => e.preventDefault());\n\n        this.setSelectedValue(0);\n    }\n\n    public onNavigationKeyDown(event: any, key: string): void {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n        const oldIndex = this.autocompleteEntries.indexOf(this.selectedValue);\n        const newIndex = key === KeyCode.UP ? oldIndex - 1 : oldIndex + 1;\n\n        this.checkSetSelectedValue(newIndex);\n    }\n\n    public setSearch(searchString: string): void {\n        this.searchString = searchString;\n        if (exists(searchString)) {\n            this.runSearch();\n        } else {\n            // reset\n            this.autocompleteEntries = this.params.autocompleteEntries;\n            this.virtualList.refresh();\n            this.checkSetSelectedValue(0);\n        }\n        this.updateSearchInList();\n    }\n\n    private runContainsSearch(searchString: string, searchStrings: string[]): { topMatch: string | undefined, allMatches: string[] } {\n        let topMatch: string | undefined;\n        let topMatchStartsWithSearchString = false;\n        const lowerCaseSearchString = searchString.toLocaleLowerCase();\n        const allMatches = searchStrings.filter(string => {\n            const lowerCaseString = string.toLocaleLowerCase();\n            const index = lowerCaseString.indexOf(lowerCaseSearchString);\n            const startsWithSearchString = index === 0;\n            const isMatch = index >= 0;\n            // top match is shortest value that starts with the search string, otherwise shortest value that includes the search string\n            if (isMatch && (\n                !topMatch ||\n                (!topMatchStartsWithSearchString && startsWithSearchString) ||\n                (topMatchStartsWithSearchString === startsWithSearchString && string.length < topMatch.length)\n            )) {\n                topMatch = string;\n                topMatchStartsWithSearchString = startsWithSearchString;\n            }\n            return isMatch;\n        });\n        if (!topMatch && allMatches.length) {\n            topMatch = allMatches[0];\n        }\n        return { topMatch, allMatches };\n    }\n\n    private runSearch() {\n        const { autocompleteEntries } = this.params;\n        const searchStrings = autocompleteEntries.map(v => v.displayValue ?? v.key);\n\n        let matchingStrings: string[];\n        let topSuggestion: string | undefined;\n        if (this.params.useFuzzySearch) {\n            matchingStrings = fuzzySuggestions(this.searchString, searchStrings, true).values;\n            topSuggestion = matchingStrings.length ? matchingStrings[0] : undefined;\n        } else {\n            const containsMatches = this.runContainsSearch(this.searchString, searchStrings);\n            matchingStrings = containsMatches.allMatches;\n            topSuggestion = containsMatches.topMatch;\n        }\n\n        let filteredEntries = autocompleteEntries.filter(({ key, displayValue }) => matchingStrings.includes(displayValue ?? key));\n        if (!filteredEntries.length && this.selectedValue && this.params?.forceLastSelection?.(this.selectedValue, this.searchString)) {\n            filteredEntries = [this.selectedValue];\n        }\n        this.autocompleteEntries = filteredEntries;\n        this.virtualList.refresh();\n\n        if (!topSuggestion) {\n            return;\n        }\n\n        const topSuggestionIndex = matchingStrings.indexOf(topSuggestion);\n\n        this.checkSetSelectedValue(topSuggestionIndex);\n    }\n\n    private updateSearchInList(): void {\n        this.virtualList.forEachRenderedRow((row: AgAutocompleteRow) => row.setSearchString(this.searchString));\n    }\n\n    private checkSetSelectedValue(index: number): void {\n        if (index >= 0 && index < this.autocompleteEntries.length) {\n            this.setSelectedValue(index);\n        }\n    }\n\n    private setSelectedValue(index: number): void {\n        const value = this.autocompleteEntries[index];\n\n        if (this.selectedValue === value) { return; }\n\n        this.selectedValue = value;\n        this.virtualList.ensureIndexVisible(index);\n\n        this.virtualList.forEachRenderedRow((cmp: AgAutocompleteRow, idx: number) => {\n            cmp.updateSelected(index === idx);\n        });\n    }\n\n    private createRowComponent(value: AutocompleteEntry): Component {\n        const row = new AgAutocompleteRow();\n\n        this.getContext().createBean(row);\n        row.setState(value.displayValue ?? value.key, value === this.selectedValue);\n\n        return row;\n    }\n\n    private onMouseMove(mouseEvent: MouseEvent): void {\n        const rect = this.virtualList.getGui().getBoundingClientRect();\n        const scrollTop = this.virtualList.getScrollTop();\n        const mouseY = mouseEvent.clientY - rect.top + scrollTop;\n        const row = Math.floor(mouseY / this.virtualList.getRowHeight());\n\n        this.checkSetSelectedValue(row);\n    }\n\n    public afterGuiAttached(): void {\n        this.virtualList.refresh();\n    }\n\n    public getSelectedValue(): AutocompleteEntry | null {\n        if (!this.autocompleteEntries.length) { return null };\n        return this.selectedValue ?? null;\n    }\n}\n", "import { Component } from \"./component\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { AgInputTextField } from \"./agInputTextField\";\nimport { AgAutocompleteList } from \"./agAutocompleteList\";\nimport { PopupPositionParams, PopupService } from \"./popupService\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { AutocompleteEntry, AutocompleteListParams } from \"./autocompleteParams\";\nimport { AgEvent } from \"../events\";\nimport { makeNull } from \"../utils/generic\";\n\nexport interface AutocompleteValueChangedEvent extends AgEvent {\n    value: string | null;\n}\n\nexport interface AutocompleteValueConfirmedEvent extends AutocompleteValueChangedEvent {\n    isValid: boolean;\n}\n\nexport interface AutocompleteOptionSelectedEvent extends AutocompleteValueChangedEvent {\n    position: number;\n    updateEntry: AutocompleteEntry;\n    autocompleteType?: string;\n}\n\nexport interface AutocompleteValidChangedEvent extends AgEvent {\n    isValid: boolean;\n    validationMessage: string | null;\n}\n\nexport class AgAutocomplete extends Component {\n    public static EVENT_VALUE_CHANGED = 'eventValueChanged';\n    public static EVENT_VALUE_CONFIRMED = 'eventValueConfirmed';\n    public static EVENT_OPTION_SELECTED = 'eventOptionSelected';\n    public static EVENT_VALID_CHANGED = 'eventValidChanged';\n\n    @Autowired('popupService') private popupService: PopupService;\n\n    @RefSelector('eAutocompleteInput') private eAutocompleteInput: AgInputTextField;\n\n    private isListOpen = false;\n    private autocompleteList: AgAutocompleteList | null;\n    private hidePopup: () => void;\n    private autocompleteListParams: AutocompleteListParams;\n    private lastPosition: number = 0;\n    private valid: boolean = true;\n    private validationMessage: string | null;\n    private listAriaLabel: string;\n    private listGenerator?: (value: string | null, position: number) => AutocompleteListParams;\n    private validator?: (value: string | null) => string | null;\n    private forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-autocomplete\" role=\"presentation\">\n                <ag-input-text-field ref=\"eAutocompleteInput\"></ag-input-text-field>\n            </div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.eAutocompleteInput.onValueChange(value => this.onValueChanged(value));\n        this.eAutocompleteInput.getInputElement().setAttribute('autocomplete', 'off');\n\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n\n        this.addGuiEventListener('click', this.updatePositionAndList.bind(this));\n\n        this.addDestroyFunc(() => {\n            this.destroyBean(this.autocompleteList);\n        });\n\n        this.addGuiEventListener('focusout', () => this.onFocusOut());\n    }\n\n    private onValueChanged(value?: string | null): void {\n        const parsedValue = makeNull(value);\n        this.updateValue(parsedValue);\n        this.updateAutocompleteList(parsedValue);\n    }\n\n    private updateValue(value: string | null): void {\n        this.updateLastPosition();\n        this.dispatchEvent<AutocompleteValueChangedEvent>({\n            type: AgAutocomplete.EVENT_VALUE_CHANGED,\n            value\n        });\n        this.validate(value);\n    }\n\n    private updateAutocompleteList(value: string | null): void {\n        const autocompleteListParams = this.listGenerator?.(value, this.lastPosition) ?? { enabled: false };\n        if (!autocompleteListParams.type || autocompleteListParams.type !== this.autocompleteListParams?.type) {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n        this.autocompleteListParams = autocompleteListParams;\n        if (this.autocompleteListParams?.enabled) {\n            if (!this.isListOpen) {\n               this.openList();\n            }\n            const { searchString } = this.autocompleteListParams;\n            this.autocompleteList!.setSearch(searchString ?? '');\n        } else {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        this.updateLastPosition();\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onUpDownKeyDown(event, key);\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // input position is updated after this is called, so do async\n                setTimeout(() => {\n                    this.updatePositionAndList();\n                });\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.SPACE:\n                if (event.ctrlKey && !this.isListOpen) {\n                    event.preventDefault();\n                    this.forceOpenList();\n                }\n                break;\n        }\n    }\n\n    private confirmSelection(): void {\n        const selectedValue = this.autocompleteList?.getSelectedValue();\n        if (selectedValue) {\n            this.closeList();\n            this.dispatchEvent<AutocompleteOptionSelectedEvent>({\n                type: AgAutocomplete.EVENT_OPTION_SELECTED,\n                value: this.getValue()!,\n                position: this.lastPosition,\n                updateEntry: selectedValue,\n                autocompleteType: this.autocompleteListParams.type\n            });\n        }\n    }\n    \n    private onTabKeyDown(event: KeyboardEvent): void {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.confirmSelection();\n        }    \n    }\n    \n    private onEnterKeyDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        if (this.isListOpen) {\n            this.confirmSelection();\n        } else {\n            this.onCompleted();\n        }\n    }\n\n    private onUpDownKeyDown(event: KeyboardEvent, key: string): void {\n        event.preventDefault();\n        if (!this.isListOpen) {\n            this.forceOpenList();\n        } else {\n            this.autocompleteList?.onNavigationKeyDown(event, key);\n        }\n    }\n\n    private onEscapeKeyDown(event: KeyboardEvent): void {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.closeList();\n            this.setCaret(this.lastPosition, true);\n        }\n    }\n\n    private onFocusOut(): void {\n        if (this.isListOpen) { this.closeList(); }\n    }\n\n    private updatePositionAndList(): void {\n        this.updateLastPosition();\n        this.updateAutocompleteList(this.eAutocompleteInput.getValue() ?? null);\n    }\n\n    private setCaret(position: number, setFocus?: boolean): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (setFocus && eDocument.activeElement === eDocument.body) {\n            // clicking on the list loses focus, so restore\n            this.eAutocompleteInput.getFocusableElement().focus();\n        }\n        const eInput = this.eAutocompleteInput.getInputElement()\n        eInput.setSelectionRange(position, position);\n        if (position === eInput.value.length) {\n            // ensure the caret is visible\n            eInput.scrollLeft = eInput.scrollWidth;\n        }\n    }\n\n    private forceOpenList(): void {\n        this.onValueChanged(this.eAutocompleteInput.getValue());\n    }\n\n    private updateLastPosition(): void {\n        this.lastPosition = this.eAutocompleteInput.getInputElement().selectionStart ?? 0;\n    }\n\n    private validate(value: string | null): void {\n        if (!this.validator) { return; }\n        this.validationMessage = this.validator(value);\n        this.eAutocompleteInput.getInputElement().setCustomValidity(this.validationMessage ?? '');\n        this.valid = !this.validationMessage;\n        this.dispatchEvent<AutocompleteValidChangedEvent>({\n            type: AgAutocomplete.EVENT_VALID_CHANGED,\n            isValid: this.valid,\n            validationMessage: this.validationMessage\n        })\n    }\n\n    private openList(): void {\n        this.isListOpen = true;\n        // this is unmanaged as it gets destroyed/created each time it is opened\n        this.autocompleteList = this.createBean(new AgAutocompleteList({\n            autocompleteEntries: this.autocompleteListParams.entries!,\n            onConfirmed: () => this.confirmSelection(),\n            forceLastSelection: this.forceLastSelection\n        }));\n        const ePopupGui = this.autocompleteList.getGui();\n\n        const positionParams: PopupPositionParams & { type: string, eventSource: HTMLElement } = {\n            ePopup: ePopupGui,\n            type: 'autocomplete',\n            eventSource: this.getGui(),\n            position: 'under',\n            alignSide: this.gridOptionsService.get('enableRtl') ? 'right' : 'left',\n            keepWithinBounds: true\n        };\n\n        const addPopupRes = this.popupService.addPopup({\n            eChild: ePopupGui,\n            anchorToElement: this.getGui(),\n            positionCallback: () => this.popupService.positionPopupByComponent(positionParams),\n            ariaLabel: this.listAriaLabel\n        });\n        this.hidePopup = addPopupRes.hideFunc;\n\n        this.autocompleteList.afterGuiAttached();\n    }\n\n    private closeList(): void {\n        this.isListOpen = false;\n        this.hidePopup();\n        this.destroyBean(this.autocompleteList);\n        this.autocompleteList = null;\n    }\n\n    private onCompleted(): void {\n        if (this.isListOpen) { this.closeList(); }\n        this.dispatchEvent<AutocompleteValueConfirmedEvent>({\n            type: AgAutocomplete.EVENT_VALUE_CONFIRMED,\n            value: this.getValue(),\n            isValid: this.isValid()\n        });\n    }\n\n    public getValue(): string | null {\n        return makeNull(this.eAutocompleteInput.getValue());\n    }\n\n    public setInputPlaceholder(placeholder: string): this {\n        this.eAutocompleteInput.setInputPlaceholder(placeholder);\n        return this;\n    }\n\n    public setInputAriaLabel(label?: string | null): this {\n        this.eAutocompleteInput.setInputAriaLabel(label);\n        return this;\n    }\n\n    public setListAriaLabel(label: string): this {\n        this.listAriaLabel = label;\n        return this;\n    }\n\n    public setListGenerator(listGenerator?: (value: string | null, position: number) => AutocompleteListParams): this {\n        this.listGenerator = listGenerator;\n        return this;\n    }\n\n    public setValidator(validator?: (value: string | null) => string | null): this {\n        this.validator = validator;\n        return this;\n    }\n\n    public isValid(): boolean {\n        return this.valid;\n    }\n\n    public setValue(params: {\n        value: string,\n        position?: number,\n        silent?: boolean,\n        updateListOnlyIfOpen?: boolean,\n        restoreFocus?: boolean\n    }): void {\n        const { value, position, silent, updateListOnlyIfOpen, restoreFocus } = params;\n        this.eAutocompleteInput.setValue(value, true);\n        this.setCaret(position ?? this.lastPosition, restoreFocus);\n        if (!silent) {\n            this.updateValue(value);\n        }\n        if (!updateListOnlyIfOpen || this.isListOpen) {\n            this.updateAutocompleteList(value);\n        }\n    }\n\n    public setForceLastSelection(forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean): this {\n        this.forceLastSelection = forceLastSelection;\n        return this;\n    }\n\n    public setInputDisabled(disabled: boolean): this {\n        this.eAutocompleteInput.setDisabled(disabled);\n        return this;\n    }\n}\n", "import { AgEvent } from \"../events\";\nimport { DragAndDropService, DropTarget, DragSource, DragSourceType, DragItem } from \"../dragAndDrop/dragAndDropService\";\nimport { Component } from \"./component\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { setDisplayed } from \"../utils/dom\";\nimport { Events } from '../eventKeys';\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { setAriaLabel } from \"../utils/aria\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { TouchListener } from \"./touchListener\";\nimport { escapeString } from \"../utils/string\";\n\nexport abstract class PillDragComp<TItem> extends Component {\n    public static EVENT_COLUMN_REMOVE = 'columnRemove';\n\n    private static TEMPLATE = /* html */\n        `<span role=\"option\">\n          <span ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n          <span ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n          <span ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n        </span>`;\n\n    @Autowired('dragAndDropService') private readonly dragAndDropService: DragAndDropService;\n\n    @RefSelector('eText') private eText: HTMLElement;\n    @RefSelector('eDragHandle') private eDragHandle: HTMLElement;\n    @RefSelector('eButton') private eButton: HTMLElement;\n\n    public abstract getItem(): TItem;\n    protected abstract getDisplayName(): string;\n    protected abstract getAriaDisplayName(): string;\n    protected abstract getTooltip(): string | null | undefined;\n    protected abstract createGetDragItem(): () => DragItem<TItem>;\n    protected abstract getDragSourceType(): DragSourceType;\n\n    constructor(\n        private dragSourceDropTarget: DropTarget,\n        private ghost: boolean,\n        private horizontal: boolean,\n        private template?: string\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.setTemplate(this.template ?? PillDragComp.TEMPLATE);\n        const eGui = this.getGui();\n\n        this.addElementClasses(eGui);\n        this.addElementClasses(this.eDragHandle, 'drag-handle');\n        this.addElementClasses(this.eText, 'text');\n        this.addElementClasses(this.eButton, 'button');\n\n        this.eDragHandle.appendChild(createIconNoSpan('columnDrag', this.gridOptionsService)!);\n\n        this.eButton.appendChild(createIconNoSpan('cancel', this.gridOptionsService)!);\n\n        this.setupComponents();\n\n        if (!this.ghost && this.isDraggable()) {\n            this.addDragSource();\n        }\n\n        this.setupAria();\n\n        this.setupTooltip();\n        this.activateTabIndex();\n\n        this.refreshDraggable();\n    }\n\n    protected isDraggable(): boolean {\n        return true;\n    }\n\n    protected refreshDraggable(): void {\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !this.isDraggable());\n    }\n\n    protected setupAria() {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const ariaInstructions = [this.getAriaDisplayName()];\n\n        this.addAdditionalAriaInstructions(ariaInstructions, translate);\n\n        setAriaLabel(this.getGui(), ariaInstructions.join('. '));\n    }\n\n    protected addAdditionalAriaInstructions(ariaInstructions: string[], translate: (key: string, defaultValue: string) => string): void {\n        if (this.isRemovable()) {\n            const deleteAria = translate('ariaDropZoneColumnComponentDescription', 'Press DELETE to remove');\n            ariaInstructions.push(deleteAria);\n        }\n    }\n\n    private setupTooltip(): void {\n        const refresh = () => {\n            const newTooltipText = this.getTooltip();\n            this.setTooltip({ newTooltipText });\n        };\n\n        refresh();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n\n    protected getDragSourceId(): string | undefined {\n        return undefined;\n    }\n\n    protected getDefaultIconName(): string {\n        return DragAndDropService.ICON_NOT_ALLOWED;\n    }\n\n    private addDragSource(): void {\n        const { dragAndDropService, eDragHandle } = this;\n        const getDragItem = this.createGetDragItem();\n        const defaultIconName = this.getDefaultIconName();\n        const dragSource: DragSource = {\n            type: this.getDragSourceType(),\n            sourceId: this.getDragSourceId(),\n            eElement: eDragHandle,\n            getDefaultIconName: () => defaultIconName,\n            getDragItem,\n            dragItemName: this.getDisplayName()\n        };\n\n        dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => dragAndDropService.removeDragSource(dragSource));\n    }\n\n    protected setupComponents(): void {\n        this.setTextValue();\n        this.setupRemove();\n\n        if (this.ghost) {\n            this.addCssClass('ag-column-drop-cell-ghost');\n        }\n    }\n\n    protected isRemovable(): boolean {\n         return true;\n    }\n\n    protected refreshRemove(): void {\n        setDisplayed(this.eButton, this.isRemovable());\n    }\n\n    private setupRemove(): void {\n        this.refreshRemove();\n\n        const agEvent: AgEvent = { type: PillDragComp.EVENT_COLUMN_REMOVE };\n\n        this.addGuiEventListener('keydown', (e: KeyboardEvent) => this.onKeyDown(e));\n\n        this.addManagedListener(this.eButton, 'click', (mouseEvent: MouseEvent) => {\n            this.dispatchEvent(agEvent);\n            mouseEvent.stopPropagation();\n        });\n\n        const touchListener = new TouchListener(this.eButton);\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, () => {\n            this.dispatchEvent(agEvent);\n        });\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n\n    protected onKeyDown(e: KeyboardEvent): void {\n        const isDelete = e.key === KeyCode.DELETE;\n\n        if (isDelete) {\n            if (this.isRemovable()) {\n                e.preventDefault();\n                this.dispatchEvent({ type: PillDragComp.EVENT_COLUMN_REMOVE });\n            }\n        }\n    }\n\n    protected getDisplayValue(): string {\n        return this.getDisplayName();\n    }\n\n    private setTextValue(): void {\n        const displayValue = this.getDisplayValue();\n        const displayValueSanitised: any = escapeString(displayValue);\n\n        this.eText.innerHTML = displayValueSanitised;\n    }\n\n    private addElementClasses(el: HTMLElement, suffix?: string) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop-cell${suffix}`, `ag-column-drop-${direction}-cell${suffix}`);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        (this.dragSourceDropTarget as any) = null;\n    }\n}\n", "import { Autowired } from \"../context/context\";\nimport { Component } from \"./component\";\nimport { DragAndDropService, DraggingEvent, DragItem, DragSourceType, DropTarget } from \"../dragAndDrop/dragAndDropService\";\nimport { PillDragComp } from \"./pillDragComp\";\nimport { PositionableFeature } from \"../rendering/features/positionableFeature\";\nimport { FocusService } from \"../focusService\";\nimport { ManagedFocusFeature } from \"./managedFocusFeature\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { setAriaHidden, setAriaLabel, setAriaPosInSet, setAriaRole, setAriaSetSize } from \"../utils/aria\";\nimport { areEqual, existsAndNotEmpty, includes, insertArrayIntoArray } from \"../utils/array\";\nimport { clearElement } from \"../utils/dom\";\n\nexport interface PillDropZonePanelParams {\n    emptyMessage?: string;\n    title?: string;\n    icon?: Element;\n}\n\nexport abstract class PillDropZonePanel<TPill extends PillDragComp<TItem>, TItem> extends Component {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('dragAndDropService') protected readonly dragAndDropService: DragAndDropService;\n\n    private static STATE_NOT_DRAGGING = 'notDragging';\n    private static STATE_NEW_ITEMS_IN = 'newItemsIn';\n    private static STATE_REARRANGE_ITEMS = 'rearrangeItems';\n\n    private state = PillDropZonePanel.STATE_NOT_DRAGGING;\n\n    private dropTarget: DropTarget;\n\n    // when we are considering a drop from a dnd event,\n    // the items to be dropped go in here\n    private potentialDndItems: TItem[];\n\n    private guiDestroyFunctions: (() => void)[] = [];\n\n    private params: PillDropZonePanelParams;\n\n    private childPillComponents: TPill[] = [];\n    private insertIndex: number;\n\n    // when this component is refreshed, we rip out all DOM elements and build it up\n    // again from scratch. one exception is ePillDropList, as we want to maintain the\n    // scroll position between the refreshes, so we create one instance of it here and\n    // reuse it.\n    private ePillDropList: HTMLElement;\n\n    private positionableFeature: PositionableFeature;\n    private resizeEnabled: boolean = false;\n\n    protected abstract isItemDroppable(item: TItem, draggingEvent: DraggingEvent): boolean;\n    protected abstract updateItems(items: TItem[]): void;\n    protected abstract getExistingItems(): TItem[];\n    protected abstract getIconName(): string;\n    protected abstract getAriaLabel(): string;\n    protected abstract createPillComponent(item: TItem, dropTarget: DropTarget, ghost: boolean, horizontal: boolean): TPill;\n    protected abstract getItems(dragItem: DragItem<TItem>): TItem[];\n    protected abstract isInterestedIn(type: DragSourceType): boolean;\n\n    constructor(private horizontal: boolean) {\n        super(/* html */ `<div class=\"ag-unselectable\" role=\"presentation\"></div>`);\n        this.addElementClasses(this.getGui());\n        this.ePillDropList = document.createElement('div');\n        this.addElementClasses(this.ePillDropList, 'list');\n        setAriaRole(this.ePillDropList, 'listbox');\n    }\n\n    public isHorizontal(): boolean {\n        return this.horizontal;\n    }\n\n    public toggleResizable(resizable: boolean) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n        this.resizeEnabled = resizable;\n    }\n\n    protected isSourceEventFromTarget(draggingEvent: DraggingEvent): boolean {\n        const { dropZoneTarget, dragSource } = draggingEvent;\n        return dropZoneTarget.contains(dragSource.eElement)\n    }\n\n    protected destroy(): void {\n        this.destroyGui();\n        super.destroy();\n    }\n\n    private destroyGui(): void {\n        this.guiDestroyFunctions.forEach(func => func());\n        this.guiDestroyFunctions.length = 0;\n        this.childPillComponents.length = 0;\n        clearElement(this.getGui());\n        clearElement(this.ePillDropList);\n    }\n\n    public init(params?: PillDropZonePanelParams): void {\n        this.params = params ?? {};\n\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n\n        this.setupDropTarget();\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n\n        this.refreshGui();\n        setAriaLabel(this.ePillDropList, this.getAriaLabel());\n    }\n\n    private handleKeyDown(e: KeyboardEvent) {\n        const isVertical = !this.horizontal;\n\n        let isNext = e.key === KeyCode.DOWN;\n        let isPrevious = e.key === KeyCode.UP;\n\n        if (!isVertical) {\n            const isRtl = this.gridOptionsService.get('enableRtl');\n            isNext = (!isRtl && e.key === KeyCode.RIGHT) || (isRtl && e.key === KeyCode.LEFT);\n            isPrevious = (!isRtl && e.key === KeyCode.LEFT) || (isRtl && e.key === KeyCode.RIGHT);\n        }\n\n        if (!isNext && !isPrevious) { return; }\n\n        const el = this.focusService.findNextFocusableElement(\n            this.getFocusableElement(),\n            false,\n            isPrevious\n        );\n\n        if (el) {\n            e.preventDefault();\n            el.focus();\n        }\n    }\n\n    private addElementClasses(el: Element, suffix?: string) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop${suffix}`, `ag-column-drop-${direction}${suffix}`);\n    }\n\n    private setupDropTarget(): void {\n        this.dropTarget = {\n            getContainer: this.getGui.bind(this),\n            getIconName: this.getIconName.bind(this),\n            onDragging: this.onDragging.bind(this),\n            onDragEnter: this.onDragEnter.bind(this),\n            onDragLeave: this.onDragLeave.bind(this),\n            onDragStop: this.onDragStop.bind(this),\n            isInterestedIn: this.isInterestedIn.bind(this)\n        };\n\n        this.dragAndDropService.addDropTarget(this.dropTarget);\n    }\n\n    protected minimumAllowedNewInsertIndex(): number {\n        return 0;\n    }\n\n    private checkInsertIndex(draggingEvent: DraggingEvent): boolean {\n        const newIndex = this.getNewInsertIndex(draggingEvent);\n\n        // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel\n        if (newIndex < 0) {\n            return false;\n        }\n\n        const minimumAllowedIndex = this.minimumAllowedNewInsertIndex();\n        const newAdjustedIndex = Math.max(minimumAllowedIndex, newIndex);\n\n        const changed = newAdjustedIndex !== this.insertIndex;\n\n        if (changed) {\n            this.insertIndex = newAdjustedIndex;\n        }\n\n        return changed;\n    }\n\n    private getNewInsertIndex(draggingEvent: DraggingEvent): number {\n        const mouseEvent = draggingEvent.event;\n        const mouseLocation = this.horizontal ? mouseEvent.clientX : mouseEvent.clientY;\n\n        const boundsList = this.childPillComponents.map(comp => (\n            comp.getGui().getBoundingClientRect()\n        ));\n        // find the non-ghost component we're hovering\n        const hoveredIndex = boundsList.findIndex(rect => (\n            this.horizontal ? (\n                rect.right > mouseLocation && rect.left < mouseLocation\n            ) : (\n                rect.top < mouseLocation && rect.bottom > mouseLocation\n            )\n        ));\n\n        // not hovering a non-ghost component\n        if (hoveredIndex === -1) {\n            const enableRtl = this.gridOptionsService.get('enableRtl');\n\n            // if mouse is below or right of all components then new index should be placed last\n            const isLast = boundsList.every(rect => (\n                mouseLocation > (this.horizontal ? rect.right : rect.bottom)\n            ));\n\n            if (isLast) {\n                return enableRtl && this.horizontal ? 0 : this.childPillComponents.length;\n            }\n\n            // if mouse is above or left of all components, new index is first\n            const isFirst = boundsList.every(rect => (\n                mouseLocation < (this.horizontal ? rect.left : rect.top)\n            ));\n\n            if (isFirst) {\n                return enableRtl && this.horizontal ? this.childPillComponents.length : 0;\n            }\n            \n            // must be hovering a ghost, don't change the index\n            return this.insertIndex;\n        }\n\n        // if the old index is equal to or less than the index of our new target\n        // we need to shift right, to insert after rather than before\n        if (this.insertIndex <= hoveredIndex) {\n            return hoveredIndex + 1;\n        }\n        return hoveredIndex;\n    }\n\n\n    private checkDragStartedBySelf(draggingEvent: DraggingEvent): void {\n        if (this.state !== PillDropZonePanel.STATE_NOT_DRAGGING) {\n            return;\n        }\n\n        this.state = PillDropZonePanel.STATE_REARRANGE_ITEMS;\n\n        this.potentialDndItems = this.getItems(draggingEvent.dragSource.getDragItem());\n        this.refreshGui();\n\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    }\n\n    private onDragging(draggingEvent: DraggingEvent): void {\n        this.checkDragStartedBySelf(draggingEvent);\n\n        if (this.checkInsertIndex(draggingEvent)) {\n            this.refreshGui();\n        }\n    }\n\n    protected handleDragEnterEnd(draggingEvent: DraggingEvent): void {}\n\n    private onDragEnter(draggingEvent: DraggingEvent): void {\n        // this will contain all items that are potential drops\n        const dragItems = this.getItems(draggingEvent.dragSource.getDragItem());\n        this.state = PillDropZonePanel.STATE_NEW_ITEMS_IN;\n        // take out items that are not droppable\n        const goodDragItems = dragItems.filter(item => this.isItemDroppable(item, draggingEvent));\n        const alreadyPresent = goodDragItems.every(item => this.childPillComponents.map(cmp => cmp.getItem()).indexOf(item) !== -1);\n\n        if (goodDragItems.length === 0) { return; }\n\n        this.potentialDndItems = goodDragItems;\n\n        if (alreadyPresent) {\n            this.state = PillDropZonePanel.STATE_NOT_DRAGGING;\n            return; \n        }\n\n        this.handleDragEnterEnd(draggingEvent);\n\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    }\n\n    protected isPotentialDndItems(): boolean {\n        return existsAndNotEmpty(this.potentialDndItems);\n    }\n\n    protected handleDragLeaveEnd(draggingEvent: DraggingEvent): void {}\n\n    private onDragLeave(draggingEvent: DraggingEvent): void {\n        // if the dragging started from us, we remove the group, however if it started\n        // some place else, then we don't, as it was only 'asking'\n\n        if (this.state === PillDropZonePanel.STATE_REARRANGE_ITEMS) {\n            const items = this.getItems(draggingEvent.dragSource.getDragItem());\n            this.removeItems(items);\n        }\n\n        if (this.isPotentialDndItems()) {\n            this.handleDragLeaveEnd(draggingEvent);\n\n            this.potentialDndItems = [];\n            this.refreshGui();\n        }\n\n        this.state = PillDropZonePanel.STATE_NOT_DRAGGING;\n    }\n\n    protected refreshOnDragStop(): boolean {\n        return true;\n    }\n\n    private onDragStop(): void {\n        if (this.isPotentialDndItems()) {\n            let success = false;\n\n            if (this.state === PillDropZonePanel.STATE_NEW_ITEMS_IN) {\n                this.addItems(this.potentialDndItems);\n                success = true;\n            } else {\n                success = this.rearrangeItems(this.potentialDndItems);\n            }\n\n            this.potentialDndItems = [];\n\n            if (this.refreshOnDragStop() || !success) {\n                this.refreshGui();\n            }\n        }\n\n        this.state = PillDropZonePanel.STATE_NOT_DRAGGING;\n    }\n\n    private removeItems(itemsToRemove: TItem[]): void {\n        const newItemList = this.getExistingItems().filter(item => !includes(itemsToRemove, item));\n        this.updateItems(newItemList);\n    }\n\n    private addItems(itemsToAdd: TItem[]): void {\n        if (!itemsToAdd) { return; }\n        const newItemList = this.getExistingItems().slice();\n        const itemsToAddNoDuplicates = itemsToAdd.filter(item => newItemList.indexOf(item) < 0);\n        insertArrayIntoArray(newItemList, itemsToAddNoDuplicates, this.insertIndex);\n        this.updateItems(newItemList);\n    }\n\n    public addItem(item: TItem): void {\n        this.insertIndex = this.getExistingItems().length;\n        this.addItems([item]);\n        this.refreshGui();\n    }\n\n    private rearrangeItems(itemsToAdd: TItem[]): boolean {\n        const newItemList = this.getNonGhostItems().slice();\n        insertArrayIntoArray(newItemList, itemsToAdd, this.insertIndex);\n\n        if (areEqual(newItemList, this.getExistingItems())) {\n            return false;\n        }\n\n        this.updateItems(newItemList);\n        return true;\n    }\n\n    public refreshGui(): void {\n        // we reset the scroll position after the refresh.\n        // if we don't do this, then the list will always scroll to the top\n        // each time we refresh it. this is because part of the refresh empties\n        // out the list which sets scroll to zero. so the user could be just\n        // reordering the list - we want to prevent the resetting of the scroll.\n        // this is relevant for vertical display only (as horizontal has no scroll)\n        const scrollTop = this.ePillDropList.scrollTop;\n        const resizeEnabled = this.resizeEnabled;\n        const focusedIndex = this.getFocusedItem();\n\n        let alternateElement = this.focusService.findNextFocusableElement();\n\n        if (!alternateElement) {\n            alternateElement = this.focusService.findNextFocusableElement(undefined, false, true);\n        }\n\n        this.toggleResizable(false);\n        this.destroyGui();\n\n        this.addIconAndTitleToGui();\n        this.addEmptyMessageToGui();\n        this.addItemsToGui();\n\n        if (!this.isHorizontal()) {\n            this.ePillDropList.scrollTop = scrollTop;\n        }\n\n        if (resizeEnabled) {\n            this.toggleResizable(resizeEnabled);\n        }\n\n        // focus should only be restored when keyboard mode\n        // otherwise mouse clicks will cause containers to scroll\n        // without no apparent reason.\n        if (this.focusService.isKeyboardMode()) {\n            this.restoreFocus(focusedIndex, alternateElement!);\n        }\n    }\n\n    private getFocusedItem(): number {\n        const eGui = this.getGui();\n        const activeElement = this.gridOptionsService.getDocument().activeElement;\n\n        if (!eGui.contains(activeElement)) { return - 1; }\n\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n\n        return items.indexOf(activeElement as HTMLElement);\n    }\n\n    private restoreFocus(index: number, alternateElement: HTMLElement): void {\n        const eGui = this.getGui();\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n\n        if (index === -1) { return; }\n\n        if (items.length === 0) {\n            alternateElement.focus();\n        }\n\n        const indexToFocus = Math.min(items.length - 1, index);\n        const el = items[indexToFocus] as HTMLElement;\n\n        if (el) { el.focus(); }\n    }\n\n    public focusList(fromBottom?: boolean): void {\n        const index = fromBottom ? this.childPillComponents.length - 1 : 0;\n        this.restoreFocus(index, this.getFocusableElement());\n    }\n\n    private getNonGhostItems(): TItem[] {\n        const existingItems = this.getExistingItems();\n\n        if (this.isPotentialDndItems()) {\n            return existingItems.filter(item => !includes(this.potentialDndItems, item));\n        }\n        return existingItems;\n    }\n\n    private addItemsToGui(): void {\n        const nonGhostItems = this.getNonGhostItems();\n        const itemsToAddToGui: TPill[] = nonGhostItems.map(item => (\n            this.createItemComponent(item, false)\n        ));\n\n        if (this.isPotentialDndItems()) {\n            const dndItems = this.potentialDndItems.map(item => (\n                this.createItemComponent(item, true)\n            ));\n            if (this.insertIndex >= itemsToAddToGui.length) {\n                itemsToAddToGui.push(...dndItems);\n            } else {\n                itemsToAddToGui.splice(this.insertIndex, 0, ...dndItems);\n            }\n        }\n\n        this.appendChild(this.ePillDropList);\n\n        itemsToAddToGui.forEach((itemComponent, index) => {\n            if (index > 0) {\n                this.addArrow(this.ePillDropList);\n            }\n\n            this.ePillDropList.appendChild(itemComponent.getGui());\n        });\n\n        this.addAriaLabelsToComponents();\n    }\n\n    private addAriaLabelsToComponents(): void {\n        this.childPillComponents.forEach((comp, idx) => {\n            const eGui = comp.getGui();\n            setAriaPosInSet(eGui, idx + 1);\n            setAriaSetSize(eGui, this.childPillComponents.length);\n        });\n    }\n\n    private createItemComponent(item: TItem, ghost: boolean): TPill {\n        const itemComponent = this.createPillComponent(item, this.dropTarget, ghost, this.horizontal);\n        itemComponent.addEventListener(PillDragComp.EVENT_COLUMN_REMOVE, this.removeItems.bind(this, [item]));\n\n        this.context.createBean(itemComponent);\n        this.guiDestroyFunctions.push(() => this.destroyBean(itemComponent));\n\n        if (!ghost) {\n            this.childPillComponents.push(itemComponent);\n        }\n\n        return itemComponent;\n    }\n\n    private addIconAndTitleToGui(): void {\n        const { title, icon: eGroupIcon } = this.params;\n        if (!title || !eGroupIcon) { \n            return;\n        }\n        const eTitleBar = document.createElement('div');\n        setAriaHidden(eTitleBar, true);\n        this.addElementClasses(eTitleBar, 'title-bar');\n        this.addElementClasses(eGroupIcon, 'icon');\n        this.addOrRemoveCssClass('ag-column-drop-empty', this.isExistingItemsEmpty());\n\n        eTitleBar.appendChild(eGroupIcon);\n\n        if (!this.horizontal) {\n            const eTitle = document.createElement('span');\n            this.addElementClasses(eTitle, 'title');\n            eTitle.innerHTML = title;\n\n            eTitleBar.appendChild(eTitle);\n        }\n\n        this.appendChild(eTitleBar);\n    }\n\n    private isExistingItemsEmpty(): boolean {\n        return this.getExistingItems().length === 0;\n    }\n\n    private addEmptyMessageToGui(): void {\n        const { emptyMessage } =  this.params;\n        if (!emptyMessage || !this.isExistingItemsEmpty() || this.isPotentialDndItems()) {\n            return;\n        }\n\n        const eMessage = document.createElement('span');\n        eMessage.innerHTML = emptyMessage;\n        this.addElementClasses(eMessage, 'empty-message');\n        this.ePillDropList.appendChild(eMessage);\n    }\n\n    private addArrow(eParent: HTMLElement): void {\n        // only add the arrows if the layout is horizontal\n        if (this.horizontal) {\n            // for RTL it's a left arrow, otherwise it's a right arrow\n            const enableRtl = this.gridOptionsService.get('enableRtl');\n            const icon = createIconNoSpan(enableRtl ? 'smallLeft' : 'smallRight', this.gridOptionsService)!;\n            this.addElementClasses(icon, 'cell-separator');\n            eParent.appendChild(icon);\n        }\n    }\n}\n", "import { FrameworkOverridesIncomingSource, IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nimport { includes } from \"./utils/array\";\nimport { AgPromise } from \"./utils\";\n\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\n/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */\nexport class VanillaFrameworkOverrides implements IFrameworkOverrides {\n\n    public renderingEngine: 'vanilla' | 'react' = \"vanilla\";\n\n    constructor(private frameworkName: 'javascript' | 'angular' | 'react' | 'vue' | 'solid' = 'javascript') {}\n\n    public setInterval(action: any, timeout?: any): AgPromise<number> {\n        return new AgPromise(resolve => {\n            resolve(window.setInterval(action, timeout));\n        });\n    }\n\n    // for Vanilla JS, we just add the event to the element\n    public addEventListener(\n        element: HTMLElement,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        useCapture?: boolean\n    ): void {\n        const isPassive = includes(PASSIVE_EVENTS, type);\n        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });\n    }\n\n    wrapIncoming: <T>(callback: () => T, source?: FrameworkOverridesIncomingSource) => T = callback => callback();\n    wrapOutgoing: <T>(callback: () => T) => T = callback => callback();\n    get shouldWrapOutgoing() { return false;}\n\n    frameworkComponent(name: string): any {\n        return null;\n    }\n\n    isFrameworkComponent(comp: any): boolean {\n        return false;\n    }\n\n    getDocLink(path?: string): string {\n        const framework = this.frameworkName === 'solid' ? 'react' : this.frameworkName;\n        return `https://www.ag-grid.com/${framework}-data-grid${path ? `/${path}` : ''}`;\n    }\n}\n", "import { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { CellPosition } from \"./entities/cellPositionUtils\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { Column } from \"./entities/column\";\nimport { RowPosition } from \"./entities/rowPositionUtils\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { missing } from \"./utils/generic\";\nimport { last } from \"./utils/array\";\nimport { KeyCode } from './constants/keyCode';\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\n\n@Bean('cellNavigationService')\nexport class CellNavigationService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    // returns null if no cell to focus on, ie at the end of the grid\n    public getNextCellToFocus(key: string, focusedCell: CellPosition, ctrlPressed: boolean = false): CellPosition | null {\n        if (ctrlPressed) {\n            return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);\n        }\n\n        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);\n    }\n\n    private getNextCellToFocusWithCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\n        const upKey = key === KeyCode.UP;\n        const downKey = key === KeyCode.DOWN;\n        const leftKey = key === KeyCode.LEFT;\n\n        let column: Column;\n        let rowIndex: number;\n\n        if (upKey || downKey) {\n            rowIndex = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();\n            column = focusedCell.column;\n        } else {\n            const allColumns: Column[] = this.columnModel.getAllDisplayedColumns();\n            const isRtl = this.gridOptionsService.get('enableRtl');\n            rowIndex = focusedCell.rowIndex;\n            column = leftKey !== isRtl ? allColumns[0] : last(allColumns);\n        }\n\n        return {\n            rowIndex,\n            rowPinned: null,\n            column\n        };\n    }\n\n    private getNextCellToFocusWithoutCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        let pointer: CellPosition | null = focusedCell;\n        let finished = false;\n\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n\n            switch (key) {\n                case KeyCode.UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case KeyCode.DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case KeyCode.RIGHT:\n                    if (this.gridOptionsService.get('enableRtl')) {\n                        pointer = this.getCellToLeft(pointer);\n                    } else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case KeyCode.LEFT:\n                    if (this.gridOptionsService.get('enableRtl')) {\n                        pointer = this.getCellToRight(pointer);\n                    } else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    console.warn('AG Grid: unknown key for navigation ' + key);\n                    break;\n            }\n\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            } else {\n                finished = true;\n            }\n        }\n\n        return pointer;\n    }\n\n    private isCellGoodToFocusOn(gridCell: CellPosition): boolean {\n        const column: Column = gridCell.column;\n        let rowNode: RowNode | undefined;\n\n        switch (gridCell.rowPinned) {\n            case 'top':\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case 'bottom':\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n\n        if (!rowNode) { return false; }\n\n        const suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    }\n\n    private getCellToLeft(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);\n        if (!colToLeft) { return null; }\n\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned\n        } as CellPosition;\n    }\n\n    private getCellToRight(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);\n        // if already on right, do nothing\n        if (!colToRight) { return null; }\n\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned\n        } as CellPosition;\n    }\n\n    public getRowBelow(rowPosition: RowPosition): RowPosition | null {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case 'bottom':\n                    // never any rows after pinned bottom\n                    return null;\n                case 'top':\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null } as RowPosition;\n                    }\n\n                    if (this.pinnedRowModel.isRowsToRender('bottom')) {\n                        return { rowIndex: 0, rowPinned: 'bottom' } as RowPosition;\n                    }\n\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender('bottom')) {\n                        return { rowIndex: 0, rowPinned: 'bottom' } as RowPosition;\n                    }\n                    return null;\n            }\n        }\n\n        const rowNode = this.rowModel.getRow(rowPosition.rowIndex);\n        const nextStickyPosition = this.getNextStickyPosition(rowNode);\n\n        if (nextStickyPosition) {\n            return nextStickyPosition;\n        }\n\n        return { rowIndex: index + 1, rowPinned: pinned } as RowPosition;\n    }\n\n    private getNextStickyPosition(rowNode?: RowNode, up?: boolean): RowPosition | undefined {\n        if (!this.gridOptionsService.isGroupRowsSticky() || !rowNode || !rowNode.sticky) { return; }\n\n        const stickyRowCtrls = [...this.rowRenderer.getStickyTopRowCtrls()].sort(\n            (a, b) => a.getRowNode().rowIndex! - b.getRowNode().rowIndex!\n        );\n\n        const diff = up ? -1 : 1;\n        const idx = stickyRowCtrls.findIndex(ctrl => ctrl.getRowNode().rowIndex === rowNode.rowIndex);\n        const nextCtrl = stickyRowCtrls[idx + diff];\n\n        if (nextCtrl) {\n            return { rowIndex: nextCtrl.getRowNode().rowIndex!, rowPinned: null };\n        }\n    }\n\n    private getCellBelow(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned\n            } as CellPosition;\n        }\n\n        return null;\n    }\n\n    private isLastRowInContainer(rowPosition: RowPosition): boolean {\n        const pinned = rowPosition.rowPinned;\n        const index = rowPosition.rowIndex;\n\n        if (pinned === 'top') {\n            const lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n            return lastTopIndex <= index;\n        }\n\n        if (pinned === 'bottom') {\n            const lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n            return lastBottomIndex <= index;\n        }\n\n        const lastBodyIndex = this.paginationProxy.getPageLastRow();\n        return lastBodyIndex <= index;\n    }\n\n    public getRowAbove(rowPosition: RowPosition): RowPosition | null {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        const isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();\n\n        // if already on top row, do nothing\n        if (isFirstRow) {\n            if (pinned === 'top') { return null; }\n\n            if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender('top')) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n\n            // last floating bottom\n            if (this.rowModel.isRowsToRender()) {\n                return this.getLastBodyCell();\n            }\n\n            if (this.pinnedRowModel.isRowsToRender('top')) {\n                return this.getLastFloatingTopRow();\n            }\n\n            return null;\n        }\n\n        const rowNode = this.rowModel.getRow(rowPosition.rowIndex);\n        const nextStickyPosition = this.getNextStickyPosition(rowNode, true);\n\n        if (nextStickyPosition) {\n            return nextStickyPosition;\n        }\n\n        return { rowIndex: index - 1, rowPinned: pinned } as RowPosition;\n    }\n\n    private getCellAbove(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned\n            } as CellPosition;\n        }\n\n        return null;\n    }\n\n    private getLastBodyCell(): RowPosition {\n        const lastBodyRow = this.paginationProxy.getPageLastRow();\n\n        return { rowIndex: lastBodyRow, rowPinned: null } as RowPosition;\n    }\n\n    private getLastFloatingTopRow(): RowPosition {\n        const lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n\n        return { rowIndex: lastFloatingRow, rowPinned: 'top' } as RowPosition;\n    }\n\n    public getNextTabbedCell(gridCell: CellPosition, backwards: boolean): CellPosition | null {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n\n        return this.getNextTabbedCellForwards(gridCell);\n    }\n\n    public getNextTabbedCellForwards(gridCell: CellPosition): CellPosition | null {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n\n        let newRowIndex: number | null = gridCell.rowIndex;\n        let newFloating: string | null | undefined = gridCell.rowPinned;\n\n        // move along to the next cell\n        let newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);\n\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n\n            const rowBelow = this.getRowBelow(gridCell);\n            if (missing(rowBelow)) { return null; }\n\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {\n                return null;\n            }\n\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\n    }\n\n    public getNextTabbedCellBackwards(gridCell: CellPosition): CellPosition | null {\n\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n\n        let newRowIndex: number | null = gridCell.rowIndex;\n        let newFloating: string | null | undefined = gridCell.rowPinned;\n\n        // move along to the next cell\n        let newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);\n\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = last(displayedColumns);\n\n            const rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n\n            if (missing(rowAbove)) { return null; }\n\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {\n                return null;\n            }\n\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\n    }\n\n}\n", "import { ColumnModel } from \"./columns/columnModel\";\nimport { Logger } from \"./logger\";\nimport { LoggerFactory } from \"./logger\";\nimport {\n    AgEvent,\n    BodyScrollEvent,\n    ColumnEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnResizedEvent,\n    ColumnVisibleEvent,\n    Events\n} from \"./events\";\nimport { Column } from \"./entities/column\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { ProvidedColumnGroup } from \"./entities/providedColumnGroup\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { GridApi } from \"./gridApi\";\nimport { errorOnce } from \"./utils/function\";\n\n@Bean('alignedGridsService')\nexport class AlignedGridsService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private logger: Logger;\n\n    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n    private consuming = false;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    }\n\n    private getAlignedGridApis(): GridApi[]{\n        let alignedGrids = this.gridOptionsService.get('alignedGrids') ?? [];\n        const isCallbackConfig = typeof alignedGrids === 'function';\n        if (typeof alignedGrids === 'function') {\n            alignedGrids = alignedGrids();\n        }\n        const seeUrl = () => `See ${this.getFrameworkOverrides().getDocLink('aligned-grids')}`\n        const apis = alignedGrids.map((alignedGrid) => {\n            if (!alignedGrid) {\n                errorOnce(`alignedGrids contains an undefined option.`);\n                if (!isCallbackConfig) {\n                    errorOnce(`You may want to configure via a callback to avoid setup race conditions:\n                     \"alignedGrids: () => [linkedGrid]\"`);\n                }\n                errorOnce(seeUrl())\n                return; \n            } \n            if (alignedGrid instanceof GridApi) {\n                return alignedGrid;\n            }\n            // Extract the GridApi from a ref or component\n            const refOrComp = alignedGrid;\n            if ('current' in refOrComp) {\n                return refOrComp.current?.api;\n            } else {\n                if (!refOrComp.api) {\n                    errorOnce(`alignedGrids - No api found on the linked grid. If you are passing gridOptions to alignedGrids since v31 this is no longer valid. ${seeUrl()}`);\n                }\n                return refOrComp.api;\n            }\n        }).filter(api => !!api && !api.isDestroyed());\n\n        return apis as GridApi[];\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    }\n\n    // common logic across all the fire methods\n    private fireEvent(callback: (alignedGridService: AlignedGridsService) => void): void {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        this.getAlignedGridApis().forEach((api) => {\n            const alignedGridService = api.__getAlignedGridService();\n            callback(alignedGridService);\n        });        \n    }\n\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    private onEvent(callback: () => void): void {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    }\n\n    private fireColumnEvent(event: ColumnEvent): void {\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onColumnEvent(event);\n        });\n    }\n\n    private fireScrollEvent(event: BodyScrollEvent): void {\n        if (event.direction !== 'horizontal') { return; }\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onScrollEvent(event);\n        });\n    }\n\n    private onScrollEvent(event: BodyScrollEvent): void {\n        this.onEvent(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left, true);\n        });\n    }\n\n    public getMasterColumns(event: ColumnEvent): Column[] {\n        const result: Column[] = [];\n        if (event.columns) {\n            event.columns.forEach((column: Column) => {\n                result.push(column);\n            });\n        } else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    }\n\n    public getColumnIds(event: ColumnEvent): string[] {\n        const result: string[] = [];\n        if (event.columns) {\n            event.columns.forEach(column => {\n                result.push(column.getColId());\n            });\n        } else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    }\n\n    public onColumnEvent(event: AgEvent): void {\n        this.onEvent(() => {\n\n            switch (event.type) {\n\n                case Events.EVENT_COLUMN_MOVED:\n                case Events.EVENT_COLUMN_VISIBLE:\n                case Events.EVENT_COLUMN_PINNED:\n                case Events.EVENT_COLUMN_RESIZED:\n                    const colEvent = event as ColumnEvent;\n                    this.processColumnEvent(colEvent);\n                    break;\n\n                case Events.EVENT_COLUMN_GROUP_OPENED:\n                    const groupOpenedEvent = event as ColumnGroupOpenedEvent;\n                    this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n\n                case Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('AG Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n\n        });\n    }\n\n    private processGroupOpenedEvent(groupOpenedEvent: ColumnGroupOpenedEvent): void {\n        groupOpenedEvent.columnGroups.forEach(masterGroup => {\n            // likewise for column group\n            let otherColumnGroup: ProvidedColumnGroup | null = null;\n    \n            if (masterGroup) {\n                const groupId = masterGroup.getGroupId();\n                otherColumnGroup = this.columnModel.getProvidedColumnGroup(groupId);\n            }\n    \n            if (masterGroup && !otherColumnGroup) { return; }\n    \n            this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterGroup.isExpanded());\n            this.columnModel.setColumnGroupOpened(otherColumnGroup, masterGroup.isExpanded(), \"alignedGridChanged\");\n        });\n    }\n\n    private processColumnEvent(colEvent: ColumnEvent): void {\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        const masterColumn = colEvent.column;\n        let otherColumn: Column | null = null;\n\n        if (masterColumn) {\n            otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) { return; }\n\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        const masterColumns = this.getMasterColumns(colEvent);\n\n        switch (colEvent.type) {\n            case Events.EVENT_COLUMN_MOVED:\n                // when the user moves columns via applyColumnState, we can't depend on moving specific columns\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n                // so only way to be sure is match the order of all columns using Column State.\n                {\n                    const movedEvent = colEvent as ColumnMovedEvent;\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId }));\n                    this.columnModel.applyColumnState(\n                        { state: destColState, applyOrder: true }, \"alignedGridChanged\"\n                    );\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} toIndex = ${movedEvent.toIndex}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_VISIBLE:\n                // when the user changes visibility via applyColumnState, we can't depend on visibility flag in event\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n                // so only way to be sure is match the visibility of all columns using Column State.\n                {\n                    const visibleEvent = colEvent as ColumnVisibleEvent;\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, hide: s.hide }));\n                    this.columnModel.applyColumnState({ state: destColState }, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} visible = ${visibleEvent.visible}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_PINNED:\n                {\n                    const pinnedEvent = colEvent as ColumnPinnedEvent;\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, pinned: s.pinned }));\n                    this.columnModel.applyColumnState({state: destColState}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} pinned = ${pinnedEvent.pinned}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_RESIZED:\n                const resizedEvent = colEvent as ColumnResizedEvent;\n\n                const columnWidths: {\n                    [key: string]: {\n                        key: string | Column;\n                        newWidth: number;\n                    }\n                } = {};\n                masterColumns.forEach((column: Column) => {\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} actualWidth = ${column.getActualWidth()}`);\n                    columnWidths[column.getId()] = {key: column.getColId(), newWidth: column.getActualWidth()};\n                });\n                // don't set flex columns width\n                resizedEvent.flexColumns?.forEach(col => {\n                    if (columnWidths[col.getId()]) {\n                        delete columnWidths[col.getId()];\n                    }\n                });\n                this.columnModel.setColumnWidths(Object.values(columnWidths), false, resizedEvent.finished, \"alignedGridChanged\");\n                break;\n        }\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n        this.getAlignedGridApis().forEach((api) => {\n            api.setGridOption('alwaysShowVerticalScroll', isVerticalScrollShowing);\n        });\n    }\n}\n", "import { RowNode } from \"./entities/rowNode\";\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Events, SelectionChangedEvent, SelectionEventSourceType } from \"./events\";\nimport { Autowired } from \"./context/context\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { PostConstruct } from \"./context/context\";\nimport { ChangedPath } from \"./utils/changedPath\";\nimport { IClientSideRowModel } from \"./interfaces/iClientSideRowModel\";\nimport { exists, missing } from \"./utils/generic\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { ISelectionService, ISetNodesSelectedParams } from \"./interfaces/iSelectionService\";\nimport { last } from \"./utils/array\";\nimport { ServerSideRowGroupSelectionState, ServerSideRowSelectionState } from \"./interfaces/selectionState\";\n\n@Bean('selectionService')\nexport class SelectionService extends BeanStub implements ISelectionService {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    private selectedNodes: Map<string, RowNode> = new Map();\n    private lastRowNode: RowNode | null = null;\n\n    private groupSelectsChildren: boolean;\n    private rowSelection?: 'single' | 'multiple';\n\n    @PostConstruct\n    private init(): void {\n        this.rowSelection = this.gridOptionsService.get('rowSelection');\n        this.groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n        this.addManagedPropertyListeners(['groupSelectsChildren', 'rowSelection'], () => {\n            this.groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n            this.rowSelection = this.gridOptionsService.get('rowSelection');\n            this.deselectAllRowNodes({ source: 'api' });\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        this.resetNodes();\n        this.lastRowNode = null;\n    }\n\n    private isMultiselect() {\n        return this.rowSelection === 'multiple';\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        const {\n            newValue,\n            clearSelection,\n            suppressFinishActions,\n            rangeSelect,\n            nodes,\n            event,\n            source = 'api',\n        } = params;\n\n        if (nodes.length === 0) return 0;\n\n\n        if (nodes.length > 1 && !this.isMultiselect()) {\n            console.warn(`AG Grid: cannot multi select while rowSelection='single'`);\n            return 0;\n        }\n\n        // groupSelectsFiltered only makes sense when group selects children\n        const groupSelectsFiltered = this.groupSelectsChildren && (params.groupSelectsFiltered === true);\n\n        // if node is a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        const filteredNodes = nodes.map(node => node.footer ? node.sibling! : node);\n\n        if (rangeSelect) {\n            if (nodes.length > 1) {\n                console.warn('AG Grid: cannot range select while selecting multiple rows');\n                return 0;\n            }\n\n            let toNode: RowNode | null = null;\n            if (source === 'checkboxSelected' && newValue === false && this.lastRowNode) {\n                if (this.lastRowNode.id) {\n                    toNode = this.lastRowNode;\n                } else {\n                    this.lastRowNode = null;\n                }\n            }\n\n            if (toNode == null) {\n                toNode = this.getLastSelectedNode();\n            }\n\n            if (toNode) {\n                // if node is a footer, we don't do selection, just pass the info\n                // to the sibling (the parent of the group)\n                const fromNode = filteredNodes[0];\n                const newRowClicked = fromNode !== toNode;\n                if (newRowClicked && this.isMultiselect()) {\n                    return this.selectRange(fromNode, toNode, newValue, source);\n                }\n            }\n        }\n\n        // when deselecting nodes, we want to use the last deselected node\n        // as starting point for deselection\n        this.lastRowNode = newValue ? null : filteredNodes[0];\n\n        let updatedCount = 0;\n        for (let i = 0; i < filteredNodes.length; i++) {\n            const node = filteredNodes[i];\n            // when groupSelectsFiltered, then this node may end up intermediate despite\n            // trying to set it to true / false. this group will be calculated further on\n            // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n            // here, otherwise the updatedCount would include it.\n            const skipThisNode = groupSelectsFiltered && node.group;\n\n            if (!skipThisNode) {\n                const thisNodeWasSelected = node.selectThisNode(newValue, event, source);\n                if (thisNodeWasSelected) {\n                    updatedCount++;\n                }\n            }\n\n            if (this.groupSelectsChildren && node.childrenAfterGroup?.length) {\n                updatedCount += this.selectChildren(node, newValue, groupSelectsFiltered, source);\n            }\n        }\n\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            const clearOtherNodes = newValue && (clearSelection || !this.isMultiselect());\n            if (clearOtherNodes) {\n                updatedCount += this.clearOtherNodes(filteredNodes[0], source);\n            }\n\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.updateGroupsFromChildrenSelections(source);\n\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                const event: WithoutGridCommon<SelectionChangedEvent> = {\n                    type: Events.EVENT_SELECTION_CHANGED,\n                    source\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        }\n        return updatedCount;\n    }\n    \n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    private selectRange(fromNode: RowNode, toNode: RowNode, value: boolean = true, source: SelectionEventSourceType): number {\n        const nodesToSelect = this.rowModel.getNodesInRangeForSelection(fromNode, toNode);   \n\n        let updatedCount = 0;\n\n        nodesToSelect.forEach(rowNode => {\n            if (rowNode.group && this.groupSelectsChildren) { return; }\n\n            const nodeWasSelected = rowNode.selectThisNode(value, undefined, source);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n\n        this.updateGroupsFromChildrenSelections(source);\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source\n        };\n\n        this.eventService.dispatchEvent(event);\n\n        return updatedCount;\n    }\n\n    private selectChildren(node: RowNode, newValue: boolean, groupSelectsFiltered: boolean, source: SelectionEventSourceType): number {\n        const children = groupSelectsFiltered ? node.childrenAfterAggFilter : node.childrenAfterGroup;\n\n        if (missing(children)) { return 0; }\n\n        return this.setNodesSelected({\n            newValue: newValue,\n            clearSelection: false,\n            suppressFinishActions: true,\n            groupSelectsFiltered,\n            source,\n            nodes: children,\n        });\n    }\n\n    private getLastSelectedNode(): RowNode | null {\n        const selectedKeys = Array.from(this.selectedNodes.keys());\n\n        if (selectedKeys.length == 0) { return null; }\n\n        const node = this.selectedNodes.get(last(selectedKeys));\n\n        if (node) {\n            return node;\n        }\n        \n        return null;\n    }\n\n    public getSelectedNodes() {\n        const selectedNodes: RowNode[] = [];\n        this.selectedNodes.forEach((rowNode: RowNode) => {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    }\n\n    public getSelectedRows() {\n        const selectedRows: any[] = [];\n\n        this.selectedNodes.forEach((rowNode: RowNode) => {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    }\n\n    public getSelectionCount(): number {\n        return this.selectedNodes.size;\n    }\n\n    /**\n     * This method is used by the CSRM to remove groups which are being disposed of,\n     * events do not need fired in this case\n     */\n    public filterFromSelection(predicate: (node: RowNode) => boolean): void {\n        const newSelectedNodes: Map<string, RowNode> = new Map();\n        this.selectedNodes.forEach((rowNode: RowNode, key: string) => {\n            const passesPredicate = rowNode && predicate(rowNode);\n            if (passesPredicate) {\n                newSelectedNodes.set(key, rowNode);\n            }\n        })\n        this.selectedNodes = newSelectedNodes;\n    }\n\n    // should only be called if groupSelectsChildren=true\n    public updateGroupsFromChildrenSelections(source: SelectionEventSourceType, changedPath?: ChangedPath): boolean {\n        // we only do this when group selection state depends on selected children\n        if (!this.groupSelectsChildren) {\n            return false;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== 'clientSide') {\n            return false;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n        const rootNode = clientSideRowModel.getRootNode();\n\n        if (!changedPath) {\n            changedPath = new ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n\n        let selectionChanged = false;\n\n        changedPath.forEachChangedNodeDepthFirst(rowNode => {\n            if (rowNode !== rootNode) {\n                const selected = rowNode.calculateSelectedFromChildren();\n                selectionChanged = rowNode.selectThisNode(selected === null ? false : selected, undefined, source) || selectionChanged;\n            }\n        });\n\n        return selectionChanged;\n    }\n\n    public clearOtherNodes(rowNodeToKeepSelected: RowNode, source: SelectionEventSourceType): number {\n        const groupsToRefresh: Map<string, RowNode> = new Map();\n        let updatedCount = 0;\n        this.selectedNodes.forEach((otherRowNode: RowNode) => {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                const rowNode = this.selectedNodes.get(otherRowNode.id!);\n                updatedCount += rowNode!.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true,\n                    source,\n                });\n\n                if (this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh.set(otherRowNode.parent.id!, otherRowNode.parent);\n                }\n            }\n        });\n\n        groupsToRefresh.forEach((group: RowNode) => {\n            const selected = group.calculateSelectedFromChildren();\n            group.selectThisNode(selected === null ? false : selected, undefined, source);\n        });\n\n        return updatedCount;\n    }\n\n    private onRowSelected(event: any): void {\n        const rowNode = event.node;\n\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n\n        if (rowNode.isSelected()) {\n            this.selectedNodes.set(rowNode.id, rowNode);\n        } else {\n            this.selectedNodes.delete(rowNode.id);\n        }\n    }\n\n    public syncInRowNode(rowNode: RowNode, oldNode: RowNode | null): void {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    }\n\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    private syncInOldRowNode(rowNode: RowNode, oldNode: RowNode | null): void {\n        const oldNodeHasDifferentId = exists(oldNode) && (rowNode.id !== oldNode.id);\n        if (oldNodeHasDifferentId && oldNode) {\n            const id = oldNode.id!;\n            const oldNodeSelected = this.selectedNodes.get(id) == rowNode;\n            if (oldNodeSelected) {\n                this.selectedNodes.set(oldNode.id!, oldNode);\n            }\n        }\n    }\n\n    private syncInNewRowNode(rowNode: RowNode): void {\n        if (this.selectedNodes.has(rowNode.id!)) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes.set(rowNode.id!, rowNode);\n        } else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    }\n\n    public reset(source: SelectionEventSourceType): void {\n        const selectionCount = this.getSelectionCount();\n        this.resetNodes();\n        if (selectionCount) {\n            const event: WithoutGridCommon<SelectionChangedEvent> = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                source\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private resetNodes(): void {\n        this.selectedNodes?.clear();\n    }\n\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    public getBestCostNodeSelection(): RowNode[] | undefined {\n        if (this.rowModel.getType() !== 'clientSide') {\n            // Error logged as part of gridApi as that is only call point for this method.\n            return;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n\n        const topLevelNodes = clientSideRowModel.getTopLevelNodes();\n\n        if (topLevelNodes === null) {\n            return;\n        }\n\n        const result: RowNode[] = [];\n\n        // recursive function, to find the selected nodes\n        function traverse(nodes: RowNode[]) {\n            for (let i = 0, l = nodes.length; i < l; i++) {\n                const node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                } else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    const maybeGroup = node as any;\n                    if (maybeGroup.group && maybeGroup.children) {\n                        traverse(maybeGroup.children);\n                    }\n                }\n            }\n        }\n\n        traverse(topLevelNodes);\n\n        return result;\n    }\n\n    public isEmpty(): boolean {\n        let count = 0;\n        this.selectedNodes.forEach((rowNode: RowNode) => {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    }\n\n    public deselectAllRowNodes(params: { source: SelectionEventSourceType, justFiltered?: boolean, justCurrentPage?: boolean }) {\n        const callback = (rowNode: RowNode) => rowNode.selectThisNode(false, undefined, source);\n        const rowModelClientSide = this.rowModel.getType() === 'clientSide';\n\n        const { source, justFiltered, justCurrentPage } = params;\n\n        if (justCurrentPage || justFiltered) {\n            if (!rowModelClientSide) {\n                console.error(\"AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n                return;\n            }\n            this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        } else {\n            this.selectedNodes.forEach((rowNode: RowNode) => {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset(source);\n        }\n\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections(source);\n        }\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getSelectedCounts(justFiltered?: boolean | undefined, justCurrentPage?: boolean | undefined): {\n        selectedCount: number, notSelectedCount: number\n    } {\n        let selectedCount = 0;\n        let notSelectedCount = 0;\n\n        const callback = (node: RowNode) => {\n            if (this.groupSelectsChildren && node.group) { return; }\n\n            if (node.isSelected()) {\n                selectedCount++;\n            } else if (!node.selectable) {\n                // don't count non-selectable nodes!\n            } else {\n                notSelectedCount++;\n            }\n        };\n\n        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        return { selectedCount, notSelectedCount };\n    }\n\n    public getSelectAllState(justFiltered?: boolean | undefined, justCurrentPage?: boolean | undefined): boolean | null {\n        const { selectedCount, notSelectedCount } = this.getSelectedCounts(justFiltered, justCurrentPage);\n        // if no rows, always have it unselected\n        if (selectedCount === 0 && notSelectedCount === 0) {\n            return false;\n        }\n\n        // if mix of selected and unselected, this is indeterminate\n        if (selectedCount > 0 && notSelectedCount > 0) {\n            return null;\n        }\n\n        // only selected\n        return selectedCount > 0;\n    }\n\n    public hasNodesToSelect(justFiltered = false, justCurrentPage = false) {\n        return this.getNodesToSelect(justFiltered, justCurrentPage).filter(node => node.selectable).length > 0;\n    }\n\n    /**\n     * @param justFiltered whether to just include nodes which have passed the filter\n     * @param justCurrentPage whether to just include nodes on the current page\n     * @returns all nodes including unselectable nodes which are the target of this selection attempt\n     */\n    private getNodesToSelect(justFiltered = false, justCurrentPage = false) {\n        if (this.rowModel.getType() !== 'clientSide') {\n            throw new Error(`selectAll only available when rowModelType='clientSide', ie not ${this.rowModel.getType()}`);\n        }\n\n        const nodes: RowNode[] = [];\n        if (justCurrentPage) {\n            this.paginationProxy.forEachNodeOnPage((node) => {\n                if (!node.group) {\n                    nodes.push(node);\n                    return;\n                }\n\n                if (!node.expanded) {\n                    // even with groupSelectsChildren, do this recursively as only the filtered children\n                    // are considered as the current page\n                    const recursivelyAddChildren = (child: RowNode) => {\n                        nodes.push(child);\n                        if (child.childrenAfterFilter?.length) {\n                            child.childrenAfterFilter.forEach(recursivelyAddChildren);\n                        }\n                    }\n                    recursivelyAddChildren(node);\n                    return;\n                }\n\n                // if the group node is expanded, the pagination proxy will include the visible nodes to select\n                if (!this.groupSelectsChildren) {\n                    nodes.push(node);\n                }\n            });\n            return nodes;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter(node => {\n                nodes.push(node);\n            });\n            return nodes;\n        }\n\n        clientSideRowModel.forEachNode(node => {\n            nodes.push(node);\n        })\n        return nodes;\n    }\n\n    public selectAllRowNodes(params: { source: SelectionEventSourceType, justFiltered?: boolean, justCurrentPage?: boolean }) {\n        if (this.rowModel.getType() !== 'clientSide') {\n            throw new Error(`selectAll only available when rowModelType='clientSide', ie not ${this.rowModel.getType()}`);\n        }\n\n        const { source, justFiltered, justCurrentPage } = params;\n\n        const callback = (rowNode: RowNode) => rowNode.selectThisNode(true, undefined, source);\n\n        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === 'clientSide' && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections(source);\n        }\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getSelectionState(): string[] | null {\n        const selectedIds: string[] = [];\n        this.selectedNodes.forEach((node) => {\n            if (node?.id) {\n                selectedIds.push(node.id);\n            }\n        });\n        return selectedIds.length ? selectedIds : null;\n    }\n\n    public setSelectionState(state: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState, source: SelectionEventSourceType): void {\n        if (!Array.isArray(state)) { return; }\n        const rowIds = new Set(state);\n        const nodes: RowNode[] = [];\n        this.rowModel.forEachNode(node => {\n            if (rowIds.has(node.id!)) {\n                nodes.push(node);\n            }\n        });\n        this.setNodesSelected({\n            newValue: true,\n            nodes,\n            source\n        });\n    }\n}\n", "import { Autowired, Bean } from \"../context/context\";\nimport { ColDef, ColGroupDef, HeaderLocation, IAggFunc } from \"../entities/colDef\";\nimport { Column, ColumnPinnedType } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { ColumnEventType } from \"../events\";\nimport { GridApi } from \"../gridApi\";\nimport { IHeaderColumn } from \"../interfaces/iHeaderColumn\";\nimport { warnOnce } from \"../utils/function\";\nimport { ApplyColumnStateParams, ColumnState } from \"./columnModel\";\n\n/** @deprecated Use methods via the grid api instead. */\n@Bean('columnApi')\nexport class ColumnApi {\n\n    @Autowired('gridApi') private api: GridApi;\n\n    constructor(gridAp: GridApi) {\n        this.api = gridAp;\n     }\n\n    private viaApi = <K extends keyof ColumnApi & keyof GridApi>(funcName: keyof ColumnApi & keyof GridApi, ...args: Parameters<ColumnApi[K]>) => {\n        warnOnce(`Since v31, 'columnApi.${funcName}' is deprecated and moved to 'api.${funcName}'.`);\n        return (this.api[funcName] as any)(...args);\n    }\n\n    /** @deprecated v31 use `api.sizeColumnsToFit()` instead.   */\n    public sizeColumnsToFit(gridWidth: number): void { this.viaApi('sizeColumnsToFit', gridWidth); }\n    /** @deprecated v31 use `api.setColumnGroupOpened() instead. */\n    public setColumnGroupOpened(group: ProvidedColumnGroup | string, newValue: boolean): void { this.viaApi('setColumnGroupOpened', group, newValue) }\n\n    /** @deprecated v31 use `api.getColumnGroup() instead. */\n    public getColumnGroup(name: string, instanceId?: number): ColumnGroup | null { return this.viaApi('getColumnGroup', name, instanceId); }\n    /** @deprecated v31 use `api.getProvidedColumnGroup() instead. */\n    public getProvidedColumnGroup(name: string): ProvidedColumnGroup | null {return this.viaApi('getProvidedColumnGroup', name);}\n\n    /** @deprecated v31 use `api.getDisplayNameForColumn() instead. */\n    public getDisplayNameForColumn(column: Column, location: HeaderLocation): string { return this.viaApi('getDisplayNameForColumn',column, location); }\n    /** @deprecated v31 use `api.getDisplayNameForColumnGroup() instead. */\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: HeaderLocation): string { return this.viaApi('getDisplayNameForColumnGroup',columnGroup, location); }\n\n    /** @deprecated v31 use `api.getColumn() instead. */\n    public getColumn(key: string | ColDef | Column): Column | null { return this.viaApi('getColumn', key); }\n    /** @deprecated v31 use `api.getColumns() instead. */\n    public getColumns(): Column[] | null { return this.viaApi('getColumns'); }\n    /** @deprecated v31 use `api.applyColumnState() instead. */\n    public applyColumnState(params: ApplyColumnStateParams): boolean { return this.viaApi('applyColumnState', params); }\n    /** @deprecated v31 use `api.getColumnState() instead. */\n    public getColumnState(): ColumnState[] { return this.viaApi('getColumnState'); }\n    /** @deprecated v31 use `api.resetColumnState() instead. */\n    public resetColumnState(): void { this.viaApi('resetColumnState') }\n    /** @deprecated v31 use `api.getColumnGroupState() instead. */\n    public getColumnGroupState(): { groupId: string, open: boolean }[] { return this.viaApi('getColumnGroupState'); }\n    /** @deprecated v31 use `api.setColumnGroupState() instead. */\n    public setColumnGroupState(stateItems: ({ groupId: string, open: boolean })[]): void { this.viaApi('setColumnGroupState', stateItems); }\n    /** @deprecated v31 use `api.resetColumnGroupState() instead. */\n    public resetColumnGroupState(): void { this.viaApi('resetColumnGroupState') }\n\n    /** @deprecated v31 use `api.isPinning() instead. */\n    public isPinning(): boolean { return this.viaApi('isPinning'); }\n    /** @deprecated v31 use `api.isPinningLeft() instead. */\n    public isPinningLeft(): boolean { return this.viaApi('isPinningLeft'); }\n    /** @deprecated v31 use `api.isPinningRight() instead. */\n    public isPinningRight(): boolean { return this.viaApi('isPinningRight'); }\n    /** @deprecated v31 use `api.getDisplayedColAfter() instead. */\n    public getDisplayedColAfter(col: Column): Column | null { return this.viaApi('getDisplayedColAfter', col); }\n    /** @deprecated v31 use `api.getDisplayedColBefore() instead. */\n    public getDisplayedColBefore(col: Column): Column | null { return this.viaApi('getDisplayedColBefore', col); }\n    /** @deprecated v31 use `api.setColumnVisible() instead. */\n    public setColumnVisible(key: string | Column, visible: boolean): void { this.viaApi('setColumnVisible', key, visible); }\n    /** @deprecated v31 use `api.setColumnsVisible() instead. */\n    public setColumnsVisible(keys: (string | Column)[], visible: boolean): void { this.viaApi('setColumnsVisible', keys, visible); }\n    /** @deprecated v31 use `api.setColumnPinned() instead. */\n    public setColumnPinned(key: string | ColDef | Column, pinned: ColumnPinnedType): void { this.viaApi('setColumnPinned', key, pinned); }\n    /** @deprecated v31 use `api.setColumnsPinned() instead. */\n    public setColumnsPinned(keys: (string | ColDef | Column)[], pinned: ColumnPinnedType): void { this.viaApi('setColumnsPinned', keys, pinned); }\n\n    /** @deprecated v31 use `api.getAllGridColumns() instead. */\n    public getAllGridColumns(): Column[] { return this.viaApi('getAllGridColumns'); }\n    /** @deprecated v31 use `api.getDisplayedLeftColumns() instead. */\n    public getDisplayedLeftColumns(): Column[] { return this.viaApi('getDisplayedLeftColumns'); }\n    /** @deprecated v31 use `api.getDisplayedCenterColumns() instead. */\n    public getDisplayedCenterColumns(): Column[] { return this.viaApi('getDisplayedCenterColumns'); }\n    /** @deprecated v31 use `api.getDisplayedRightColumns() instead. */\n    public getDisplayedRightColumns(): Column[] { return this.viaApi('getDisplayedRightColumns'); }\n    /** @deprecated v31 use `api.getAllDisplayedColumns() instead. */\n    public getAllDisplayedColumns(): Column[] { return this.viaApi('getAllDisplayedColumns'); }\n    /** @deprecated v31 use `api.getAllDisplayedVirtualColumns() instead. */\n    public getAllDisplayedVirtualColumns(): Column[] { return this.viaApi('getAllDisplayedVirtualColumns'); }\n\n    /** @deprecated v31 use `api.moveColumn() instead. */\n    public moveColumn(key: string | ColDef | Column, toIndex: number): void {this.viaApi('moveColumn', key, toIndex);}\n    /** @deprecated v31 use `api.moveColumnByIndex() instead. */\n    public moveColumnByIndex(fromIndex: number, toIndex: number): void { this.viaApi('moveColumnByIndex', fromIndex, toIndex) }\n    /** @deprecated v31 use `api.moveColumns() instead. */\n    public moveColumns(columnsToMoveKeys: (string | ColDef | Column)[], toIndex: number) { this.viaApi('moveColumns', columnsToMoveKeys, toIndex) }\n    /** @deprecated v31 use `api.moveRowGroupColumn() instead. */\n    public moveRowGroupColumn(fromIndex: number, toIndex: number): void { this.viaApi('moveRowGroupColumn', fromIndex, toIndex) }\n    /** @deprecated v31 use `api.setColumnAggFunc() instead. */\n    public setColumnAggFunc(key: string | ColDef | Column, aggFunc: string | IAggFunc | null | undefined): void { this.viaApi('setColumnAggFunc', key, aggFunc) }\n    /** @deprecated v31 use `api.setColumnWidth() instead. */\n    public setColumnWidth(key: string | ColDef | Column, newWidth: number, finished: boolean = true, source?: ColumnEventType): void {\n        this.viaApi('setColumnWidth', key, newWidth, finished, source);\n    }\n    /** @deprecated v31 use `api.setColumnWidths() instead. */\n    public setColumnWidths(columnWidths: { key: string | ColDef | Column, newWidth: number }[], finished: boolean = true, source?: ColumnEventType): void {\n        this.viaApi('setColumnWidths', columnWidths, finished, source);\n    }\n    /** @deprecated v31 use `api.setPivotMode() instead. */\n    public setPivotMode(pivotMode: boolean): void { this.viaApi('setPivotMode', pivotMode); }\n    /** @deprecated v31 use `api.isPivotMode() instead. */\n    public isPivotMode(): boolean { return this.viaApi('isPivotMode'); }\n\n    /** @deprecated v31 use `api.getPivotResultColumn() instead. */\n    public getPivotResultColumn(pivotKeys: string[], valueColKey: string | ColDef | Column): Column | null { return this.viaApi('getPivotResultColumn', pivotKeys, valueColKey) }\n\n    /** @deprecated v31 use `api.setValueColumns() instead. */\n    public setValueColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('setValueColumns', colKeys) }\n    /** @deprecated v31 use `api.getValueColumns() instead. */\n    public getValueColumns(): Column[] { return this.viaApi('getValueColumns'); }\n    /** @deprecated v31 use `api.removeValueColumn() instead. */\n    public removeValueColumn(colKey: (string | ColDef | Column)): void { this.viaApi('removeValueColumn', colKey) }\n    /** @deprecated v31 use `api.removeValueColumns() instead. */\n    public removeValueColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('removeValueColumns', colKeys) }\n    /** @deprecated v31 use `api.addValueColumn() instead. */\n    public addValueColumn(colKey: (string | ColDef | Column)): void { this.viaApi('addValueColumn', colKey) }\n    /** @deprecated v31 use `api.addValueColumns() instead. */\n    public addValueColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('addValueColumns', colKeys) }\n\n    /** @deprecated v31 use `api.setRowGroupColumns() instead. */\n    public setRowGroupColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('setRowGroupColumns', colKeys) }\n    /** @deprecated v31 use `api.removeRowGroupColumn() instead. */\n    public removeRowGroupColumn(colKey: string | ColDef | Column): void { this.viaApi('removeRowGroupColumn', colKey) }\n    /** @deprecated v31 use `api.removeRowGroupColumns() instead. */\n    public removeRowGroupColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('removeRowGroupColumns', colKeys) }\n    /** @deprecated v31 use `api.addRowGroupColumn() instead. */\n    public addRowGroupColumn(colKey: string | ColDef | Column): void { this.viaApi('addRowGroupColumn', colKey) }\n    /** @deprecated v31 use `api.addRowGroupColumns() instead. */\n    public addRowGroupColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('addRowGroupColumns', colKeys) }\n    /** @deprecated v31 use `api.getRowGroupColumns() instead. */\n    public getRowGroupColumns(): Column[] { return  this.viaApi('getRowGroupColumns'); }\n\n    /** @deprecated v31 use `api.setPivotColumns() instead. */\n    public setPivotColumns(colKeys: (string | ColDef | Column)[]): void {this.viaApi('setPivotColumns', colKeys); }\n    /** @deprecated v31 use `api.removePivotColumn() instead. */\n    public removePivotColumn(colKey: string | ColDef | Column): void { this.viaApi('removePivotColumn', colKey) }\n    /** @deprecated v31 use `api.removePivotColumns() instead. */\n    public removePivotColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('removePivotColumns', colKeys) }\n    /** @deprecated v31 use `api.addPivotColumn() instead. */\n    public addPivotColumn(colKey: string | ColDef | Column): void { this.viaApi('addPivotColumn', colKey) }\n    /** @deprecated v31 use `api.addPivotColumns() instead. */\n    public addPivotColumns(colKeys: (string | ColDef | Column)[]): void { this.viaApi('addPivotColumns', colKeys) }\n    /** @deprecated v31 use `api.getPivotColumns() instead. */\n    public getPivotColumns(): Column[] { return this.viaApi('getPivotColumns'); }\n\n    /** @deprecated v31 use `api.getLeftDisplayedColumnGroups() instead. */\n    public getLeftDisplayedColumnGroups(): IHeaderColumn[] { return this.viaApi('getLeftDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.getCenterDisplayedColumnGroups() instead. */\n    public getCenterDisplayedColumnGroups(): IHeaderColumn[] { return this.viaApi('getCenterDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.getRightDisplayedColumnGroups() instead. */\n    public getRightDisplayedColumnGroups(): IHeaderColumn[] { return this.viaApi('getRightDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.getAllDisplayedColumnGroups() instead. */\n    public getAllDisplayedColumnGroups(): IHeaderColumn[] | null { return this.viaApi('getAllDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.autoSizeColumn() instead. */\n    public autoSizeColumn(key: string | ColDef | Column, skipHeader?: boolean): void { return this.viaApi('autoSizeColumn', key, skipHeader); }\n\n    /** @deprecated v31 use `api.autoSizeColumns() instead. */\n    public autoSizeColumns(keys: (string | ColDef | Column)[], skipHeader?: boolean): void {\n        this.viaApi('autoSizeColumns', keys, skipHeader);\n    }\n\n    /** @deprecated v31 use `api.autoSizeAllColumns() instead. */\n    public autoSizeAllColumns(skipHeader?: boolean): void { this.viaApi('autoSizeAllColumns', skipHeader); }\n\n    /** @deprecated v31 use `api.setPivotResultColumns() instead. */\n    public setPivotResultColumns(colDefs: (ColDef | ColGroupDef)[]): void { this.viaApi('setPivotResultColumns', colDefs); }\n\n    /** @deprecated v31 use `api.getPivotResultColumns() instead. */\n    public getPivotResultColumns(): Column[] | null { return this.viaApi('getPivotResultColumns'); }\n}\n\n\n", "import { ExpressionService } from \"./expressionService\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { ValueGetterParams, KeyCreatorParams, ValueSetterParams } from \"../entities/colDef\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { CellValueChangedEvent, Events } from \"../events\";\nimport { ValueCache } from \"./valueCache\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getValueUsingField } from \"../utils/object\";\nimport { missing, exists } from \"../utils/generic\";\nimport { warnOnce } from \"../utils/function\";\nimport { IRowNode } from \"../interfaces/iRowNode\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { DataTypeService } from \"../columns/dataTypeService\";\n\n@Bean('valueService')\nexport class ValueService extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('valueCache') private valueCache: ValueCache;\n    @Autowired('dataTypeService') private dataTypeService: DataTypeService;\n\n    private cellExpressions: boolean;\n    // Store locally for performance reasons and keep updated via property listener\n    private isTreeData: boolean;\n\n    private initialised = false;\n\n    private isSsrm = false;\n\n    @PostConstruct\n    public init(): void {\n        this.isSsrm = this.gridOptionsService.isRowModelType('serverSide');\n        this.cellExpressions = this.gridOptionsService.get('enableCellExpressions');\n        this.isTreeData = this.gridOptionsService.get('treeData');\n        this.initialised = true;\n\n        // We listen to our own event and use it to call the columnSpecific callback,\n        // this way the handler calls are correctly interleaved with other global events\n        const listener = (event: CellValueChangedEvent) => this.callColumnCellValueChangedHandler(event);\n        const async = this.gridOptionsService.useAsyncEvents();\n        this.eventService.addEventListener(Events.EVENT_CELL_VALUE_CHANGED, listener, async);\n        this.addDestroyFunc(() => this.eventService.removeEventListener(Events.EVENT_CELL_VALUE_CHANGED, listener, async));\n\n        this.addManagedPropertyListener('treeData', (propChange) => this.isTreeData = propChange.currentValue);\n    }\n\n    public getValue(column: Column,\n        rowNode?: IRowNode | null,\n        forFilter = false,\n        ignoreAggData = false): any {\n\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n        // really should have a way so they get initialised in the right order???\n        if (!this.initialised) {\n            this.init();\n        }\n\n        if (!rowNode) {\n            return;\n        }\n\n        // pull these out to make code below easier to read\n        const colDef = column.getColDef();\n        const field = colDef.field;\n        const colId = column.getColId();\n        const data = rowNode.data;\n\n        let result: any;\n\n        // if there is a value getter, this gets precedence over a field\n        const groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n        const aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n\n        // SSRM agg data comes from the data attribute, so ignore that instead\n        const ignoreSsrmAggData = this.isSsrm && ignoreAggData && !!column.getColDef().aggFunc;\n        const ssrmFooterGroupCol = this.isSsrm && rowNode.footer && rowNode.field && (column.getColDef().showRowGroup === true || column.getColDef().showRowGroup === rowNode.field);\n\n        if (forFilter && colDef.filterValueGetter) {\n            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n        } else if (this.isTreeData && aggDataExists) {\n            result = rowNode.aggData[colId];\n        } else if (this.isTreeData && colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        } else if (this.isTreeData && (field && data)) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        } else if (groupDataExists) {\n            result = rowNode.groupData![colId];\n        } else if (aggDataExists) {\n            result = rowNode.aggData[colId];\n        } else if (colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        } else if (ssrmFooterGroupCol) {\n            // this is for group footers in SSRM, as the SSRM row won't have groupData, need to extract\n            // the group value from the data using the row field\n            result = getValueUsingField(data, rowNode.field!, column.isFieldContainsDots());\n        } else if (field && data && !ignoreSsrmAggData) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n\n        // the result could be an expression itself, if we are allowing cell values to be expressions\n        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {\n            const cellValueGetter = result.substring(1);\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n        }\n\n        if (result == null) {\n            const openedGroup = this.getOpenedGroup(rowNode, column);\n            if (openedGroup != null) {\n                return openedGroup;\n            }\n        }\n\n        return result;\n    }\n\n    private getOpenedGroup(rowNode: IRowNode, column: Column): any {\n\n        if (!this.gridOptionsService.get('showOpenedGroup')) { return; }\n\n        const colDef = column.getColDef();\n        if (!colDef.showRowGroup) { return; }\n\n        const showRowGroup = column.getColDef().showRowGroup;\n\n        let pointer = rowNode.parent;\n\n        while (pointer != null) {\n            if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getColId())) {\n                return pointer.key;\n            }\n            pointer = pointer.parent;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the value of a GridCell\n     * @param rowNode The `RowNode` to be updated\n     * @param colKey The `Column` to be updated\n     * @param newValue The new value to be set\n     * @param eventSource The event source\n     * @returns `True` if the value has been updated, otherwise`False`.\n     */\n    public setValue(rowNode: IRowNode, colKey: string | Column, newValue: any, eventSource?: string): boolean {\n        const column = this.columnModel.getPrimaryColumn(colKey);\n\n        if (!rowNode || !column) {\n            return false;\n        }\n        // this will only happen if user is trying to paste into a group row, which doesn't make sense\n        // the user should not be trying to paste into group rows\n        if (missing(rowNode.data)) {\n            rowNode.data = {};\n        }\n\n        const { field, valueSetter } = column.getColDef();\n\n        if (missing(field) && missing(valueSetter)) {\n            console.warn(`AG Grid: you need either field or valueSetter set on colDef for editing to work`);\n            return false;\n        }\n\n        if (!this.dataTypeService.checkType(column, newValue)) {\n            console.warn(`AG Grid: Data type of the new value does not match the cell data type of the column`);\n            return false;\n        }\n\n        const params: ValueSetterParams = this.gridOptionsService.addGridCommonParams({\n            node: rowNode,\n            data: rowNode.data,\n            oldValue: this.getValue(column, rowNode),\n            newValue: newValue,\n            colDef: column.getColDef(),\n            column: column\n        });\n\n        params.newValue = newValue;\n\n        let valueWasDifferent: boolean;\n\n        if (exists(valueSetter)) {\n            if (typeof valueSetter === 'function') {\n                valueWasDifferent = valueSetter(params)\n            } else {\n                valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n            }\n        } else {\n            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\n        }\n\n        // in case user forgot to return something (possible if they are not using TypeScript\n        // and just forgot we default the return value to true, so we always refresh.\n        if (valueWasDifferent === undefined) {\n            valueWasDifferent = true;\n        }\n\n        // if no change to the value, then no need to do the updating, or notifying via events.\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n        // all the time.\n        if (!valueWasDifferent) {\n            return false;\n        }\n\n        // reset quick filter on this row\n        rowNode.resetQuickFilterAggregateText();\n\n        this.valueCache.onDataChanged();\n\n        params.newValue = this.getValue(column, rowNode);\n\n        const event: CellValueChangedEvent = {\n            type: Events.EVENT_CELL_VALUE_CHANGED,\n            event: null,\n            rowIndex: rowNode.rowIndex!,\n            rowPinned: rowNode.rowPinned,\n            column: params.column,\n            api: params.api!,\n            columnApi: params.columnApi!,\n            colDef: params.colDef,\n            context: params.context,\n            data: rowNode.data,\n            node: rowNode,\n            oldValue: params.oldValue,\n            newValue: params.newValue,\n            value: params.newValue,\n            source: eventSource\n        };\n\n        this.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    private callColumnCellValueChangedHandler(event: CellValueChangedEvent) {\n        const onCellValueChanged = event.colDef.onCellValueChanged;\n        if (typeof onCellValueChanged === 'function') {\n            this.getFrameworkOverrides().wrapOutgoing(() => {\n                onCellValueChanged({\n                    node: event.node,\n                    data: event.data,\n                    oldValue: event.oldValue,\n                    newValue: event.newValue,\n                    colDef: event.colDef,\n                    column: event.column,\n                    api: event.api,\n                    columnApi: event.columnApi,\n                    context: event.context\n                });\n            });\n        }\n    }\n\n    private setValueUsingField(data: any, field: string | undefined, newValue: any, isFieldContainsDots: boolean): boolean {\n        if (!field) {\n            return false;\n        }\n\n        // if no '.', then it's not a deep value\n        let valuesAreSame: boolean = false;\n        if (!isFieldContainsDots) {\n            valuesAreSame = data[field] === newValue;\n            if (!valuesAreSame) {\n                data[field] = newValue;\n            }\n        } else {\n            // otherwise it is a deep value, so need to dig for it\n            const fieldPieces = field.split('.');\n            let currentObject = data;\n            while (fieldPieces.length > 0 && currentObject) {\n                const fieldPiece: any = fieldPieces.shift();\n                if (fieldPieces.length === 0) {\n                    valuesAreSame = currentObject[fieldPiece] === newValue;\n                    if (!valuesAreSame) {\n                        currentObject[fieldPiece] = newValue;\n                    }\n                } else {\n                    currentObject = currentObject[fieldPiece];\n                }\n            }\n        }\n        return !valuesAreSame;\n    }\n\n    private executeFilterValueGetter(valueGetter: string | Function, data: any, column: Column, rowNode: IRowNode): any {\n        const params: ValueGetterParams = this.gridOptionsService.addGridCommonParams({\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        });\n\n        if (typeof valueGetter === 'function') {\n            return valueGetter(params);\n        }\n        return this.expressionService.evaluate(valueGetter, params);\n    }\n\n    private executeValueGetter(valueGetter: string | Function, data: any, column: Column, rowNode: IRowNode): any {\n\n        const colId = column.getColId();\n\n        // if inside the same turn, just return back the value we got last time\n        const valueFromCache = this.valueCache.getValue(rowNode as RowNode, colId);\n\n        if (valueFromCache !== undefined) {\n            return valueFromCache;\n        }\n\n        const params: ValueGetterParams = this.gridOptionsService.addGridCommonParams({\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        });\n\n        let result;\n        if (typeof valueGetter === 'function') {\n            result = valueGetter(params)\n        } else {\n            result = this.expressionService.evaluate(valueGetter, params);\n        }\n\n        // if a turn is active, store the value in case the grid asks for it again\n        this.valueCache.setValue(rowNode as RowNode, colId, result);\n\n        return result;\n    }\n\n    private getValueCallback(node: IRowNode, field: string | Column): any {\n        const otherColumn = this.columnModel.getPrimaryColumn(field);\n\n        if (otherColumn) {\n            return this.getValue(otherColumn, node);\n        }\n\n        return null;\n    }\n\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n    public getKeyForNode(col: Column, rowNode: IRowNode): any {\n        const value = this.getValue(col, rowNode);\n        const keyCreator = col.getColDef().keyCreator;\n\n        let result = value;\n        if (keyCreator) {\n            const keyParams: KeyCreatorParams = this.gridOptionsService.addGridCommonParams({\n                value: value,\n                colDef: col.getColDef(),\n                column: col,\n                node: rowNode,\n                data: rowNode.data\n            });\n            result = keyCreator(keyParams);\n        }\n\n        // if already a string, or missing, just return it\n        if (typeof result === 'string' || result == null) {\n            return result;\n        }\n\n        result = String(result);\n\n        if (result === '[object Object]') {\n            warnOnce('a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key');\n        }\n\n        return result;\n    }\n}\n", "import { Logger, LoggerFactory } from \"../logger\";\nimport { Bean } from \"../context/context\";\nimport { Qualifier } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('expressionService')\nexport class ExpressionService extends BeanStub {\n\n    private expressionToFunctionCache = {} as any;\n    private logger: Logger;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('ExpressionService');\n    }\n\n    public evaluate(expression: string | undefined, params: any): any {\n        if (typeof expression === 'string') {\n            // valueGetter is an expression, so execute the expression\n            return this.evaluateExpression(expression, params);\n        } else {\n            console.error('AG Grid: value should be either a string or a function', expression);\n        }\n    }\n\n    private evaluateExpression(expression: string, params: any): any {\n        try {\n            const javaScriptFunction = this.createExpressionFunction(expression);\n            // the params don't have all these values, rather we add every possible\n            // value a params can have, which makes whatever is in the params available.\n            const result = javaScriptFunction(params.value, params.context,\n                params.oldValue, params.newValue, params.value, params.node,\n                params.data, params.colDef, params.rowIndex, params.api, params.columnApi,\n                params.getValue, params.column, params.columnGroup);\n            return result;\n        } catch (e) {\n            // the expression failed, which can happen, as it's the client that\n            // provides the expression. so print a nice message\n            // tslint:disable-next-line\n            console.log('Processing of the expression failed');\n            // tslint:disable-next-line\n            console.log('Expression = ' + expression);\n            // tslint:disable-next-line\n            console.log('Params =', params);\n            // tslint:disable-next-line\n            console.log('Exception = ' + e);\n            return null;\n        }\n    }\n\n    private createExpressionFunction(expression: any) {\n        // check cache first\n        if (this.expressionToFunctionCache[expression]) {\n            return this.expressionToFunctionCache[expression];\n        }\n        // if not found in cache, return the function\n        const functionBody = this.createFunctionBody(expression);\n        const theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);\n\n        // store in cache\n        this.expressionToFunctionCache[expression] = theFunction;\n\n        return theFunction;\n    }\n\n    private createFunctionBody(expression: any) {\n        // if the expression has the 'return' word in it, then use as is,\n        // if not, then wrap it with return and ';' to make a function\n        if (expression.indexOf('return') >= 0) {\n            return expression;\n        } else {\n            return 'return ' + expression + ';';\n        }\n    }\n}\n", "import { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\n\n@Bean('templateService')\nexport class TemplateService extends BeanStub {\n\n    private templateCache:any = {};\n    private waitingCallbacks:any = {};\n\n    // returns the template if it is loaded, or null if it is not loaded\n    // but will call the callback when it is loaded\n    getTemplate(url: any, callback: any) {\n\n        const templateFromCache = this.templateCache[url];\n        if (templateFromCache) {\n            return templateFromCache;\n        }\n\n        let callbackList = this.waitingCallbacks[url];\n        const that = this;\n        if (!callbackList) {\n            // first time this was called, so need a new list for callbacks\n            callbackList = [];\n            this.waitingCallbacks[url] = callbackList;\n            // and also need to do the http request\n            const client = new XMLHttpRequest();\n            client.onload = function() {\n                that.handleHttpResult(this, url);\n            };\n            client.open(\"GET\", url);\n            client.send();\n        }\n\n        // add this callback\n        if (callback) {\n            callbackList.push(callback);\n        }\n\n        // caller needs to wait for template to load, so return null\n        return null;\n    }\n\n    handleHttpResult(httpResult: any, url: any) {\n\n        if (httpResult.status !== 200 || httpResult.response === null) {\n            console.warn(`AG Grid: Unable to get template error ${httpResult.status} - ${url}`);\n            return;\n        }\n\n        // response success, so process it\n        // in IE9 the response is in - responseText\n        this.templateCache[url] = httpResult.response || httpResult.responseText;\n\n        // inform all listeners that this is now in the cache\n        const callbacks = this.waitingCallbacks[url];\n        for (let i = 0; i < callbacks.length; i++) {\n            const callback = callbacks[i];\n            // we could pass the callback the response, however we know the client of this code\n            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback\n            // which doesn't take any parameters.\n            callback();\n        }\n    }\n}\n", "import { GridOptionsService } from \"./gridOptionsService\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\n\n@Bean('loggerFactory')\nexport class LoggerFactory extends BeanStub {\n\n    private logging: boolean;\n\n    private setBeans(@Qualifier('gridOptionsService') gridOptionsService: GridOptionsService): void {\n        this.logging = gridOptionsService.get('debug');\n    }\n\n    public create(name: string) {\n        return new Logger(name, this.isLogging.bind(this));\n    }\n\n    public isLogging(): boolean {\n        return this.logging;\n    }\n}\n\nexport class Logger {\n\n    private isLoggingFunc: () => boolean | undefined;\n    private name: string;\n\n    constructor(name: string, isLoggingFunc: () => boolean | undefined) {\n        this.name = name;\n        this.isLoggingFunc = isLoggingFunc;\n    }\n\n    public isLogging(): boolean | undefined {\n        return this.isLoggingFunc();\n    }\n\n    public log(message: string) {\n        if (this.isLoggingFunc()) {\n            // tslint:disable-next-line\n            console.log('AG Grid.' + this.name + ': ' + message);\n        }\n    }\n\n}\n", "import { Autowired } from \"../context/context\";\nimport { FocusService } from \"../focusService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\nimport { ModuleNames } from \"../modules/moduleNames\";\nimport { LayoutFeature, LayoutView } from \"../styling/layoutFeature\";\nimport { Events } from \"../eventKeys\";\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { GridSizeChangedEvent } from \"../events\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { MouseEventService } from \"../gridBodyComp/mouseEventService\";\nimport { last } from \"../utils/array\";\nimport { DragAndDropService, DragSourceType } from \"../dragAndDrop/dragAndDropService\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nexport interface IGridComp extends LayoutView {\n    setRtlClass(cssClass: string): void;\n    destroyGridUi(): void;\n    forceFocusOutOfContainer(up: boolean): void;\n    getFocusableContainers(): HTMLElement[];\n    setCursor(value: string | null): void;\n    setUserSelect(value: string | null): void;\n}\n\nexport class GridCtrl extends BeanStub {\n\n    @Autowired('focusService') protected readonly focusService: FocusService;\n    @Autowired('resizeObserverService') private readonly resizeObserverService: ResizeObserverService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('ctrlsService') private readonly ctrlsService: CtrlsService;\n    @Autowired('mouseEventService') private readonly mouseEventService: MouseEventService;\n    @Autowired('dragAndDropService') private readonly dragAndDropService: DragAndDropService;\n\n    private view: IGridComp;\n    private eGridHostDiv: HTMLElement;\n    private eGui: HTMLElement;\n\n    public setComp(view: IGridComp, eGridDiv: HTMLElement, eGui: HTMLElement): void {\n        this.view = view;\n        this.eGridHostDiv = eGridDiv;\n        this.eGui = eGui;\n\n        this.eGui.setAttribute('grid-id', this.context.getGridId());\n\n        // this drop target is just used to see if the drop event is inside the grid\n        this.dragAndDropService.addDropTarget({\n            getContainer: () => this.eGui,\n            isInterestedIn: (type) => type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel,\n            getIconName: () => DragAndDropService.ICON_NOT_ALLOWED,\n        });\n\n        this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);\n\n        this.createManagedBean(new LayoutFeature(this.view));\n\n        this.addRtlSupport();\n\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(\n            this.eGridHostDiv, this.onGridSizeChanged.bind(this));\n        this.addDestroyFunc(() => unsubscribeFromResize());\n\n        this.ctrlsService.registerGridCtrl(this);\n    }\n\n    public isDetailGrid(): boolean {\n        const el = this.focusService.findTabbableParent(this.getGui());\n\n        return el?.getAttribute('row-id')?.startsWith('detail') || false;\n    }\n\n    public showDropZones(): boolean {\n        return ModuleRegistry.__isRegistered(ModuleNames.RowGroupingModule, this.context.getGridId());\n    }\n\n    public showSideBar(): boolean {\n        return ModuleRegistry.__isRegistered(ModuleNames.SideBarModule, this.context.getGridId());\n    }\n\n    public showStatusBar(): boolean {\n        return ModuleRegistry.__isRegistered(ModuleNames.StatusBarModule, this.context.getGridId());\n    }\n\n    public showWatermark(): boolean {\n        return ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());\n    }\n\n    private onGridSizeChanged(): void {\n        const event: WithoutGridCommon<GridSizeChangedEvent> = {\n            type: Events.EVENT_GRID_SIZE_CHANGED,\n            clientWidth: this.eGridHostDiv.clientWidth,\n            clientHeight: this.eGridHostDiv.clientHeight\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private addRtlSupport(): void {\n        const cssClass = this.gridOptionsService.get('enableRtl') ? 'ag-rtl' : 'ag-ltr';\n        this.view.setRtlClass(cssClass);\n    }\n\n    public destroyGridUi(): void {\n        this.view.destroyGridUi();\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public setResizeCursor(on: boolean): void {\n        this.view.setCursor(on ? 'ew-resize' : null);\n    }\n\n    public disableUserSelect(on: boolean): void {\n        this.view.setUserSelect(on ? 'none' : null);\n    }\n\n    public focusNextInnerContainer(backwards: boolean): boolean {\n        const eDocument = this.gridOptionsService.getDocument();\n        const focusableContainers = this.view.getFocusableContainers();\n        const idxWithFocus = focusableContainers.findIndex(container => container.contains(eDocument.activeElement));\n        const nextIdx = idxWithFocus + (backwards ? -1 : 1);\n\n        if (nextIdx <= 0 || nextIdx >= focusableContainers.length) {\n            return false;\n        }\n\n        return this.focusService.focusInto(focusableContainers[nextIdx]);\n    }\n\n    public focusInnerElement(fromBottom?: boolean): boolean {\n        const focusableContainers = this.view.getFocusableContainers();\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n\n        if (fromBottom) {\n            if (focusableContainers.length > 1) {\n                return this.focusService.focusInto(last(focusableContainers), true);\n            }\n\n            const lastColumn = last(allColumns);\n            if (this.focusService.focusGridView(lastColumn, true)) { return true; }\n        }\n\n        if (this.gridOptionsService.get('headerHeight') === 0 || this.gridOptionsService.get('suppressHeaderFocus')) {\n            if (this.focusService.focusGridView(allColumns[0])) {\n                return true;\n            }\n\n            for (let i = 1; i < focusableContainers.length; i++) {\n                if (this.focusService.focusInto(focusableContainers[i])) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        return this.focusService.focusFirstHeader();\n    }\n\n    public forceFocusOutOfContainer(up = false): void {\n        this.view.forceFocusOutOfContainer(up);\n    }\n}", "import { GridBodyComp } from \"../gridBodyComp/gridBodyComp\";\nimport { Logger, LoggerFactory } from \"../logger\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { Component } from \"../widgets/component\";\nimport { ISideBar } from \"../interfaces/iSideBar\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport { isVisible } from \"../utils/dom\";\nimport { GridCtrl, IGridComp } from \"./gridCtrl\";\nimport { LayoutCssClasses, UpdateLayoutClassesParams } from \"../styling/layoutFeature\";\nimport { TabGuardComp } from \"../widgets/tabGuardComp\";\n\nexport class GridComp extends TabGuardComp {\n\n    @Autowired('loggerFactory') private readonly loggerFactory: LoggerFactory;\n\n    @RefSelector('gridBody') private readonly gridBodyComp: GridBodyComp;\n    @RefSelector('sideBar') private readonly sideBarComp: ISideBar & Component;\n    @RefSelector('rootWrapperBody') private readonly eRootWrapperBody: HTMLElement;\n\n    private logger: Logger;\n    private eGridDiv: HTMLElement;\n    private ctrl: GridCtrl;\n\n    constructor(eGridDiv: HTMLElement) {\n        super();\n        this.eGridDiv = eGridDiv;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.logger = this.loggerFactory.create('GridComp');\n\n        const compProxy: IGridComp = {\n            destroyGridUi:\n                () => this.destroyBean(this),\n            setRtlClass:\n                (cssClass: string) => this.addCssClass(cssClass),\n            forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),\n            updateLayoutClasses: this.updateLayoutClasses.bind(this),\n            getFocusableContainers: this.getFocusableContainers.bind(this),\n            setUserSelect: value => {\n                this.getGui().style.userSelect = value != null ? value : '';\n                this.getGui().style.webkitUserSelect = value != null ? value : '';\n            },\n            setCursor: value => {\n                this.getGui().style.cursor = value != null ? value : '';\n            }\n        };\n\n        this.ctrl = this.createManagedBean(new GridCtrl());\n\n        const template = this.createTemplate();\n        this.setTemplate(template);\n\n        this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());\n\n        this.insertGridIntoDom();\n\n        this.initialiseTabGuard({\n            // we want to override the default behaviour to do nothing for onTabKeyDown\n            onTabKeyDown: () => undefined,\n            focusInnerElement: fromBottom => this.ctrl.focusInnerElement(fromBottom),\n            forceFocusOutWhenTabGuardsAreEmpty: true\n        });\n    }\n\n    private insertGridIntoDom(): void {\n        const eGui = this.getGui();\n        this.eGridDiv.appendChild(eGui);\n        this.addDestroyFunc(() => {\n            this.eGridDiv.removeChild(eGui);\n            this.logger.log('Grid removed from DOM');\n        });\n    }\n\n    private updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const eRootWrapperBodyClassList = this.eRootWrapperBody.classList;\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);\n\n        this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n        this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n    }\n\n    private createTemplate(): string {\n        const dropZones = this.ctrl.showDropZones() ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>' : '';\n        const sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref=\"sideBar\"></ag-side-bar>' : '';\n        const statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref=\"statusBar\"></ag-status-bar>' : '';\n        const watermark = this.ctrl.showWatermark() ? '<ag-watermark></ag-watermark>' : '';\n\n        const template = /* html */\n            `<div class=\"ag-root-wrapper\" role=\"presentation\">\n                ${dropZones}\n                <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\" role=\"presentation\">\n                    <ag-grid-body ref=\"gridBody\"></ag-grid-body>\n                    ${sideBar}\n                </div>\n                ${statusBar}\n                <ag-pagination></ag-pagination>\n                ${watermark}\n            </div>`;\n\n        return template;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eRootWrapperBody;\n    }\n\n    protected getFocusableContainers(): HTMLElement[] {\n        const focusableContainers = [\n            this.gridBodyComp.getGui()\n        ];\n\n        if (this.sideBarComp) {\n            focusableContainers.push(\n                this.sideBarComp.getGui()\n            );\n        }\n\n        return focusableContainers.filter(el => isVisible(el));\n    }\n\n}\n", "import { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { ColumnEventType, Events, SortChangedEvent } from \"./events\";\nimport { SortOption } from \"./rowNodes/rowNodeSorter\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\nimport { SortDirection } from \"./entities/colDef\";\n\nexport interface SortModelItem {\n    /** Column Id to apply the sort to. */\n    colId: string;\n    /** Sort direction */\n    sort: 'asc' | 'desc';\n}\n\n@Bean('sortController')\nexport class SortController extends BeanStub {\n\n    private static DEFAULT_SORTING_ORDER: SortDirection[] = ['asc', 'desc', null];\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public progressSort(column: Column, multiSort: boolean, source: ColumnEventType): void {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n\n    public setSortForColumn(column: Column, sort: SortDirection, multiSort: boolean, source: ColumnEventType): void {\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== 'asc' && sort !== 'desc') {\n            sort = null;\n        }\n\n        const isColumnsSortingCoupledToGroup = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        let columnsToUpdate = [column];\n        if (isColumnsSortingCoupledToGroup) {\n            if (column.getColDef().showRowGroup) {\n                const rowGroupColumns = this.columnModel.getSourceColumnsForGroupColumn(column);\n                const sortableRowGroupColumns = rowGroupColumns?.filter(col => col.isSortable());\n                \n                if (sortableRowGroupColumns) {\n                    columnsToUpdate = [column, ...sortableRowGroupColumns];\n                } \n            }\n        }\n\n        columnsToUpdate.forEach(col => col.setSort(sort, source));\n\n        const doingMultiSort = (multiSort || this.gridOptionsService.get('alwaysMultiSort')) && !this.gridOptionsService.get('suppressMultiSort');\n\n        // clear sort on all columns except those changed, and update the icons\n        const updatedColumns: Column[] = [];\n        if (!doingMultiSort) {\n            const clearedColumns = this.clearSortBarTheseColumns(columnsToUpdate, source);\n            updatedColumns.push(...clearedColumns);\n        } \n\n        // sortIndex used for knowing order of cols when multi-col sort\n        this.updateSortIndex(column);\n\n        updatedColumns.push(...columnsToUpdate);\n        this.dispatchSortChangedEvents(source, updatedColumns);\n    }\n\n    private updateSortIndex(lastColToChange: Column) {\n        const isCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        const groupParent = this.columnModel.getGroupDisplayColumnForGroup(lastColToChange.getId());\n        const lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;\n\n        const allSortedCols = this.getColumnsWithSortingOrdered();\n\n        // reset sort index on everything\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(col => col.setSortIndex(null));\n        const allSortedColsWithoutChangesOrGroups = allSortedCols.filter(col => {\n            if (isCoupled && col.getColDef().showRowGroup) {\n                return false;\n            }\n            return col !== lastSortIndexCol;\n        });\n        const sortedColsWithIndices = !!lastSortIndexCol.getSort() ? [...allSortedColsWithoutChangesOrGroups, lastSortIndexCol] : allSortedColsWithoutChangesOrGroups;\n        sortedColsWithIndices.forEach((col, idx) => {\n            col.setSortIndex(idx);\n        });\n    }\n\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    public onSortChanged(source: string, columns?: Column[]): void {\n        this.dispatchSortChangedEvents(source, columns);\n    }\n\n    public isSortActive(): boolean {\n        // pull out all the columns that have sorting set\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const sortedCols = allCols.filter(column => !!column.getSort());\n        return sortedCols && sortedCols.length > 0;\n    }\n\n    public dispatchSortChangedEvents(source: string, columns?: Column[]): void {\n        const event: WithoutGridCommon<SortChangedEvent> = {\n            type: Events.EVENT_SORT_CHANGED,\n            source\n        };\n\n        if (columns) { event.columns = columns; }\n        this.eventService.dispatchEvent(event);\n    }\n\n    private clearSortBarTheseColumns(columnsToSkip: Column[], source: ColumnEventType): Column[] {\n        const clearedColumns: Column[] = [];\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach((columnToClear: Column) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!columnsToSkip.includes(columnToClear)) {\n                // add to list of cleared cols when sort direction is set\n                if (!!columnToClear.getSort()) { clearedColumns.push(columnToClear); }\n\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n\n        return clearedColumns;\n    }\n\n    private getNextSortDirection(column: Column): SortDirection {\n        let sortingOrder: (SortDirection)[] | null | undefined;\n\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        } else if (this.gridOptionsService.get('sortingOrder')) {\n            sortingOrder = this.gridOptionsService.get('sortingOrder');\n        } else {\n            sortingOrder = SortController.DEFAULT_SORTING_ORDER;\n        }\n\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(`AG Grid: sortingOrder must be an array with at least one element, currently it\\'s ${sortingOrder}`);\n            return null;\n        }\n\n        const currentIndex = sortingOrder.indexOf(column.getSort()!);\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result: SortDirection;\n\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        } else {\n            result = sortingOrder[currentIndex + 1];\n        }\n\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('AG Grid: invalid sort type ' + result);\n            return null;\n        }\n\n        return result;\n    }\n\n    /**\n     * @returns a map of sort indexes for every sorted column, if groups sort primaries then they will have equivalent indices\n     */\n    private getIndexedSortMap(): Map<Column, number> {\n        // pull out all the columns that have sorting set\n        let allSortedCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns()\n            .filter(col => !!col.getSort());\n\n        if (this.columnModel.isPivotMode()) {\n            const isSortingLinked = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n            allSortedCols = allSortedCols.filter(col => {\n                const isAggregated = !!col.getAggFunc();\n                const isSecondary = !col.isPrimary();\n                const isGroup = isSortingLinked ? this.columnModel.getGroupDisplayColumnForGroup(col.getId()) : col.getColDef().showRowGroup;\n                return isAggregated || isSecondary || isGroup;\n            });\n        }\n\n        const sortedRowGroupCols = this.columnModel.getRowGroupColumns()\n            .filter(col => !!col.getSort());\n\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\n        // cols is sorted by first.\n        const allColsIndexes: { [id: string]: number } = {};\n        allSortedCols.forEach((col: Column, index: number) => allColsIndexes[col.getId()] = index);\n\n        // put the columns in order of which one got sorted first\n        allSortedCols.sort((a: Column, b: Column) => {\n            const iA = a.getSortIndex();\n            const iB = b.getSortIndex();\n            if (iA != null && iB != null) {\n                return iA - iB; // both present, normal comparison\n            } else if (iA == null && iB == null) {\n                // both missing, compare using column positions\n                const posA = allColsIndexes[a.getId()];\n                const posB = allColsIndexes[b.getId()];\n                return posA > posB ? 1 : -1;\n            } else if (iB == null) {\n                return -1; // iB missing\n            } else {\n                return 1; // iA missing\n            }\n        });\n\n        const isSortLinked = this.gridOptionsService.isColumnsSortingCoupledToGroup() && !!sortedRowGroupCols.length;\n        if (isSortLinked) {\n            allSortedCols = [\n                ...new Set(\n                    // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness\n                    allSortedCols.map(col =>  this.columnModel.getGroupDisplayColumnForGroup(col.getId()) ?? col)\n                )\n            ];\n        }\n\n        const indexMap: Map<Column, number> = new Map();\n\n        allSortedCols.forEach((col, idx) => indexMap.set(col, idx));\n\n        // add the row group cols back\n        if (isSortLinked) {\n            sortedRowGroupCols.forEach(col => {\n                const groupDisplayCol =  this.columnModel.getGroupDisplayColumnForGroup(col.getId())!;\n                indexMap.set(col, indexMap.get(groupDisplayCol)!);\n            });\n        }\n\n        return indexMap;\n    }\n\n    public getColumnsWithSortingOrdered(): Column[] {\n        // pull out all the columns that have sorting set\n        return [...this.getIndexedSortMap().entries()]\n            .sort(([col1, idx1], [col2, idx2]) => idx1 - idx2)\n            .map(([col]) => col);\n    }\n\n    // used by server side row models, to sent sort to server\n    public getSortModel(): SortModelItem[] {\n        return this.getColumnsWithSortingOrdered()\n            .filter(column => column.getSort())\n            .map(column => ({\n                sort: column.getSort()!,\n                colId: column.getId()\n            }));\n    }\n\n    public getSortOptions(): SortOption[] {\n        return this.getColumnsWithSortingOrdered()\n            .filter(column => column.getSort())\n            .map(column => ({\n                sort: column.getSort()!,\n                column\n            }));\n    }\n\n    public canColumnDisplayMixedSort(column: Column): boolean {\n        const isColumnSortCouplingActive = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        const isGroupDisplayColumn = !!column.getColDef().showRowGroup;\n        return isColumnSortCouplingActive && isGroupDisplayColumn;\n    }\n\n    public getDisplaySortForColumn(column: Column): SortDirection | 'mixed' | undefined {\n        const linkedColumns = this.columnModel.getSourceColumnsForGroupColumn(column);\n        if (!this.canColumnDisplayMixedSort(column) || !linkedColumns?.length) {\n            return column.getSort();\n        }\n\n        // if column has unique data, its sorting is independent - but can still be mixed\n        const columnHasUniqueData = column.getColDef().field != null || !!column.getColDef().valueGetter;\n        const sortableColumns = columnHasUniqueData ? [column, ...linkedColumns] : linkedColumns;\n\n        const firstSort = sortableColumns[0].getSort();\n        // the == is intentional, as null and undefined both represent no sort, which means they are equivalent\n        const allMatch = sortableColumns.every(col => col.getSort() == firstSort);\n        if (!allMatch) {\n            return 'mixed';\n        }\n        return firstSort;\n    }\n\n    public getDisplaySortIndexForColumn(column: Column): number | null | undefined {\n        return this.getIndexedSortMap().get(column);\n    }\n}\n", "import { Autowired, Bean, Optional, PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { CellFocusedParams, CellFocusedEvent, Events, CellFocusClearedEvent, CommonCellFocusParams } from \"./events\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { CellPosition, CellPositionUtils } from \"./entities/cellPositionUtils\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { HeaderPosition, HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nimport { RowPositionUtils } from \"./entities/rowPositionUtils\";\nimport { IRangeService } from \"./interfaces/IRangeService\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { ColumnGroup } from \"./entities/columnGroup\";\nimport { ManagedFocusFeature } from \"./widgets/managedFocusFeature\";\nimport { getTabIndex } from './utils/browser';\nimport { makeNull } from './utils/generic';\nimport { GridCtrl } from \"./gridComp/gridCtrl\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowCtrl } from \"./rendering/row/rowCtrl\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { HeaderCellCtrl } from \"./headerRendering/cells/column/headerCellCtrl\";\nimport { AbstractHeaderCellCtrl } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl\";\nimport { last } from \"./utils/array\";\nimport { NavigateToNextHeaderParams, TabToNextHeaderParams } from \"./interfaces/iCallbackParams\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\nimport { FOCUSABLE_EXCLUDE, FOCUSABLE_SELECTOR, isVisible } from \"./utils/dom\";\nimport { TabGuardClassNames } from \"./widgets/tabGuardCtrl\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { IAdvancedFilterService } from \"./interfaces/iAdvancedFilterService\";\n\n@Bean('focusService')\nexport class FocusService extends BeanStub {\n\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('headerNavigationService') private readonly headerNavigationService: HeaderNavigationService;\n    @Autowired('headerPositionUtils') private headerPositionUtils: HeaderPositionUtils;\n    @Autowired('rowRenderer') private readonly rowRenderer: RowRenderer;\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Autowired('cellPositionUtils') private readonly cellPositionUtils: CellPositionUtils;\n    @Optional('rangeService') private readonly rangeService: IRangeService;\n    @Autowired('navigationService') public navigationService: NavigationService;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('filterManager') public filterManager: FilterManager;\n    @Optional('advancedFilterService') public advancedFilterService: IAdvancedFilterService;\n\n    private gridCtrl: GridCtrl;\n    private focusedCellPosition: CellPosition | null;\n    private restoredFocusedCellPosition: CellPosition | null;\n    private focusedHeaderPosition: HeaderPosition | null;\n    /** the column that had focus before it moved into the advanced filter */\n    private advancedFilterFocusColumn: Column | undefined;\n\n    private static keyboardModeActive: boolean = false;\n    private static instanceCount: number = 0;\n\n    private static addKeyboardModeEvents(doc: Document): void {\n        if (this.instanceCount > 0) { return; }\n        doc.addEventListener('keydown', FocusService.toggleKeyboardMode);\n        doc.addEventListener('mousedown', FocusService.toggleKeyboardMode);\n    }\n\n\n    private static removeKeyboardModeEvents(doc: Document): void {\n        if (this.instanceCount > 0) return; \n        doc.addEventListener('keydown', FocusService.toggleKeyboardMode);\n        doc.addEventListener('mousedown', FocusService.toggleKeyboardMode);\n    }\n\n    private static toggleKeyboardMode(event: KeyboardEvent | MouseEvent | TouchEvent): void {\n        const isKeyboardActive = FocusService.keyboardModeActive;\n        const isKeyboardEvent = event.type === 'keydown';\n\n        if (isKeyboardEvent) {\n            // the following keys should not toggle keyboard mode.\n            if (event.ctrlKey || event.metaKey || event.altKey) { return; }\n        }\n\n        if (isKeyboardActive === isKeyboardEvent) { return; }\n\n        FocusService.keyboardModeActive = isKeyboardEvent;\n    }\n\n    private static unregisterGridCompController(doc: Document): void {\n        FocusService.removeKeyboardModeEvents(doc);\n    }\n\n    @PostConstruct\n    private init(): void {\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);\n        this.registerKeyboardFocusEvents();\n\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n        });\n    }\n\n    private registerKeyboardFocusEvents(): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        FocusService.addKeyboardModeEvents(eDocument);\n\n        FocusService.instanceCount++;\n        this.addDestroyFunc(() => {\n            FocusService.instanceCount--;\n            FocusService.unregisterGridCompController(eDocument);\n        });\n    }\n\n    public onColumnEverythingChanged(): void {\n        // if the columns change, check and see if this column still exists. if it does, then\n        // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.\n        if (!this.focusedCellPosition) { return; }\n\n        const col = this.focusedCellPosition.column;\n        const colFromColumnModel = this.columnModel.getGridColumn(col.getId());\n\n        if (col !== colFromColumnModel) {\n            this.clearFocusedCell();\n        }\n    }\n\n    public isKeyboardMode(): boolean {\n        return FocusService.keyboardModeActive;\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition | null {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (this.gridOptionsService.get('suppressFocusAfterRefresh') || !this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)\n        // and Cells (covers cells as cells live in rows)\n        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    public getFocusHeaderToUseAfterRefresh(): HeaderPosition | null {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (this.gridOptionsService.get('suppressFocusAfterRefresh') || !this.focusedHeaderPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {\n            return null;\n        }\n\n        return this.focusedHeaderPosition;\n    }\n\n    private isDomDataMissingInHierarchy(eBrowserCell: Node | null, key: string): boolean {\n        let ePointer = eBrowserCell;\n\n        while (ePointer) {\n            const data = this.gridOptionsService.getDomData(ePointer, key);\n\n            if (data) {\n                return false;\n            }\n\n            ePointer = ePointer.parentNode;\n        }\n\n        return true;\n    }\n\n    public getFocusedCell(): CellPosition | null {\n        return this.focusedCellPosition;\n    }\n\n    public shouldRestoreFocus(cell: CellPosition): boolean {\n        if (this.isCellRestoreFocused(cell)) {\n\n            setTimeout(() => {\n                // Clear the restore focused cell position after the timeout to avoid\n                // the cell being focused again and stealing focus from another part of the app.\n                this.restoredFocusedCellPosition = null;\n            }, 0);\n            return true;\n        }\n        return false;\n    }\n\n    private isCellRestoreFocused(cellPosition: CellPosition): boolean {\n        if (this.restoredFocusedCellPosition == null) { return false; }\n\n        return this.cellPositionUtils.equals(cellPosition, this.restoredFocusedCellPosition);\n    }\n\n    public setRestoreFocusedCell(cellPosition: CellPosition): void {\n        if (this.getFrameworkOverrides().renderingEngine === 'react') {\n            // The restoredFocusedCellPosition is used in the React Rendering engine as we have to be able\n            // to support restoring focus after an async rendering.\n            this.restoredFocusedCellPosition = cellPosition;\n        }\n    }\n\n    private getFocusEventParams(): CommonCellFocusParams {\n        const { rowIndex, rowPinned, column } = this.focusedCellPosition!;\n\n        const params: CommonCellFocusParams = {\n            rowIndex: rowIndex,\n            rowPinned:rowPinned,\n            column: column,\n            isFullWidthCell: false\n        };\n\n        const rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n\n        if (rowCtrl) {\n            params.isFullWidthCell = rowCtrl.isFullWidth();\n        }\n\n        return params;\n    }\n\n    public clearFocusedCell(): void {\n        this.restoredFocusedCellPosition = null;\n        if (this.focusedCellPosition == null) { return; }\n\n        const event: WithoutGridCommon<CellFocusClearedEvent> = {\n            type: Events.EVENT_CELL_FOCUS_CLEARED,\n            ...this.getFocusEventParams(),\n        };\n\n        this.focusedCellPosition = null;\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setFocusedCell(params: CellFocusedParams): void {\n        const {\n            column,\n            rowIndex,\n            rowPinned,\n            forceBrowserFocus = false,\n            preventScrollOnBrowserFocus = false\n        } = params;\n\n        const gridColumn = this.columnModel.getGridColumn(column!);\n\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\n        // to re-focus the focused cell.\n        if (!gridColumn) {\n            this.focusedCellPosition = null;\n            return;\n        }\n\n        this.focusedCellPosition = gridColumn ? {\n            rowIndex: rowIndex!,\n            rowPinned: makeNull(rowPinned),\n            column: gridColumn\n        } : null;\n\n        const event: WithoutGridCommon<CellFocusedEvent> = {\n            type: Events.EVENT_CELL_FOCUSED,\n            ...this.getFocusEventParams(),\n            forceBrowserFocus,\n            preventScrollOnBrowserFocus,\n            floating: null\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.cellPositionUtils.equals(cellPosition, this.focusedCellPosition);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex!, rowNode.rowPinned);\n    }\n\n    public isHeaderWrapperFocused(headerCtrl: HeaderCellCtrl): boolean {\n        if (this.focusedHeaderPosition == null) { return false; }\n\n        const column = headerCtrl.getColumnGroupChild();\n        const headerRowIndex = headerCtrl.getRowIndex();\n        const pinned = headerCtrl.getPinned();\n\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeaderPosition;\n\n        return column === focusedColumn &&\n            headerRowIndex === focusedHeaderRowIndex &&\n            pinned == focusedColumn.getPinned();\n    }\n\n    public clearFocusedHeader(): void {\n        this.focusedHeaderPosition = null;\n    }\n\n    public getFocusedHeader(): HeaderPosition | null {\n        return this.focusedHeaderPosition;\n    }\n\n    public setFocusedHeader(headerRowIndex: number, column: ColumnGroup | Column): void {\n        this.focusedHeaderPosition = { headerRowIndex, column };\n    }\n\n    public focusHeaderPosition(params: {\n        headerPosition: HeaderPosition | null;\n        direction?: 'Before' | 'After' | null;\n        fromTab?: boolean;\n        allowUserOverride?: boolean;\n        event?: KeyboardEvent;\n        fromCell?: boolean;\n        rowWithoutSpanValue?: number;\n    }): boolean {\n        if (this.gridOptionsService.get('suppressHeaderFocus')) { return false; }\n\n        const { direction, fromTab, allowUserOverride, event, fromCell, rowWithoutSpanValue } = params;\n        let { headerPosition } = params;\n\n        if (fromCell && this.filterManager.isAdvancedFilterHeaderActive()) {\n            return this.focusAdvancedFilter(headerPosition);\n        }\n\n        if (allowUserOverride) {\n            const currentPosition = this.getFocusedHeader();\n            const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n\n            if (fromTab) {\n                const userFunc = this.gridOptionsService.getCallback('tabToNextHeader');\n                if (userFunc) {\n                    const params: WithoutGridCommon<TabToNextHeaderParams> = {\n                        backwards: direction === 'Before',\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            } else {\n                const userFunc = this.gridOptionsService.getCallback('navigateToNextHeader');\n                if (userFunc && event) {\n                    const params: WithoutGridCommon<NavigateToNextHeaderParams> = {\n                        key: event.key,\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        event,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n        }\n\n        if (!headerPosition) { return false; }\n\n        if (headerPosition.headerRowIndex === -1) {\n            if (this.filterManager.isAdvancedFilterHeaderActive()) {\n                return this.focusAdvancedFilter(headerPosition);\n            }\n            return this.focusGridView(headerPosition.column as Column);\n        }\n\n        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);\n\n        const headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());\n\n        // this will automatically call the setFocusedHeader method above\n        const focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);\n\n        if (focusSuccess && (rowWithoutSpanValue != null || fromCell)) {\n\n            this.headerNavigationService.setCurrentHeaderRowWithoutSpan(rowWithoutSpanValue ?? -1);\n        }\n\n        return focusSuccess;\n    }\n\n    public focusFirstHeader(): boolean {\n        let firstColumn: Column | ColumnGroup = this.columnModel.getAllDisplayedColumns()[0];\n        if (!firstColumn) { return false; }\n\n        if (firstColumn.getParent()) {\n            firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0)!;\n        }\n\n        const headerPosition = this.headerPositionUtils.getHeaderIndexToFocus(firstColumn, 0);\n\n        return this.focusHeaderPosition({\n            headerPosition,\n            rowWithoutSpanValue: 0\n        });\n    }\n\n    public focusLastHeader(event?: KeyboardEvent): boolean {\n        const headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;\n        const column = last(this.columnModel.getAllDisplayedColumns());\n\n        return this.focusHeaderPosition({\n            headerPosition: { headerRowIndex, column },\n            rowWithoutSpanValue: -1,\n            event\n        });\n    }\n\n    public focusPreviousFromFirstCell(event?: KeyboardEvent): boolean {\n        if (this.filterManager.isAdvancedFilterHeaderActive()) {\n            return this.focusAdvancedFilter(null);\n        }\n        return this.focusLastHeader(event);\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, floating?: string | null): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);\n    }\n\n    public findFocusableElements(rootNode: HTMLElement, exclude?: string | null, onlyUnmanaged = false): HTMLElement[] {\n        const focusableString = FOCUSABLE_SELECTOR;\n        let excludeString = FOCUSABLE_EXCLUDE;\n\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n\n        if (onlyUnmanaged) {\n            excludeString += ', [tabindex=\"-1\"]';\n        }\n\n        const nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString)).filter((node: HTMLElement ) => {\n            return isVisible(node);\n        }) as HTMLElement[];\n        const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\n\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n\n        const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter(element => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n\n    public focusInto(rootNode: HTMLElement, up = false, onlyUnmanaged = false): boolean {\n        const focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);\n        const toFocus = up ? last(focusableElements) : focusableElements[0];\n\n        if (toFocus) {\n            toFocus.focus({ preventScroll: true });\n            return true;\n        }\n\n        return false;\n    }\n\n    public findFocusableElementBeforeTabGuard(rootNode: HTMLElement, referenceElement?: HTMLElement): HTMLElement | null {\n        if (!referenceElement) { return null; }\n\n        const focusableElements = this.findFocusableElements(rootNode);\n        const referenceIndex = focusableElements.indexOf(referenceElement);\n\n        if (referenceIndex === -1) { return null; }\n\n        let lastTabGuardIndex = -1;\n        for (let i = referenceIndex - 1; i >= 0; i--) {\n            if (focusableElements[i].classList.contains(TabGuardClassNames.TAB_GUARD_TOP)) {\n                lastTabGuardIndex = i;\n                break;\n            }\n        }\n\n        if (lastTabGuardIndex <= 0) { return null; }\n\n        return focusableElements[lastTabGuardIndex - 1];\n    }\n\n    public findNextFocusableElement(rootNode: HTMLElement = this.eGridDiv, onlyManaged?: boolean | null, backwards?: boolean): HTMLElement | null {\n        const focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement as HTMLElement;\n        let currentIndex: number;\n\n        if (onlyManaged) {\n            currentIndex = focusable.findIndex(el => el.contains(activeEl));\n        } else {\n            currentIndex = focusable.indexOf(activeEl);\n        }\n\n        const nextIndex = currentIndex + (backwards ? -1 : 1);\n\n        if (nextIndex < 0 || nextIndex >= focusable.length) {\n            return null;\n        }\n\n        return focusable[nextIndex];\n    }\n\n    public isTargetUnderManagedComponent(rootNode: HTMLElement, target?: HTMLElement): boolean {\n        if (!target) { return false; }\n\n        const managedContainers = rootNode.querySelectorAll(`.${ManagedFocusFeature.FOCUS_MANAGED_CLASS}`);\n\n        if (!managedContainers.length) { return false; }\n\n        for (let i = 0; i < managedContainers.length; i++) {\n            if (managedContainers[i].contains(target)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public findTabbableParent(node: HTMLElement | null, limit: number = 5): HTMLElement | null {\n        let counter = 0;\n\n        while (node && getTabIndex(node) === null && ++counter <= limit) {\n            node = node.parentElement;\n        }\n\n        if (getTabIndex(node) === null) { return null; }\n\n        return node;\n    }\n\n    public focusGridView(column?: Column, backwards?: boolean): boolean {\n        // if suppressCellFocus is `true`, it means the user does not want to\n        // navigate between the cells using tab. Instead, we put focus on either\n        // the header or after the grid, depending on whether tab or shift-tab was pressed.\n        if (this.gridOptionsService.get('suppressCellFocus')) {\n            if (backwards) {\n                if (!this.gridOptionsService.get('suppressHeaderFocus')) {\n                    return this.focusLastHeader();\n                }\n                return this.focusNextGridCoreContainer(true, true);\n            }\n\n            return this.focusNextGridCoreContainer(false);\n        }\n\n        const nextRow = backwards\n            ? this.rowPositionUtils.getLastRow()\n            : this.rowPositionUtils.getFirstRow();\n\n        if (!nextRow) { return false; }\n\n        const { rowIndex, rowPinned } = nextRow;\n        const focusedHeader = this.getFocusedHeader();\n\n        if (!column && focusedHeader) {\n            column = focusedHeader.column as Column;\n        }\n\n        if (rowIndex == null || !column) { return false; }\n\n        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });\n\n        this.setFocusedCell({\n            rowIndex,\n            column,\n            rowPinned: makeNull(rowPinned),\n            forceBrowserFocus: true\n        });\n\n        if (this.rangeService) {\n            const cellPosition = { rowIndex, rowPinned, column };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n\n        return true;\n    }\n\n    public focusNextGridCoreContainer(backwards: boolean, forceOut: boolean = false): boolean {\n        if (!forceOut && this.gridCtrl.focusNextInnerContainer(backwards)) {\n            return true;\n        }\n\n        if (forceOut || (!backwards && !this.gridCtrl.isDetailGrid())) {\n            this.gridCtrl.forceFocusOutOfContainer(backwards);\n        }\n\n        return false;\n    }\n\n    private focusAdvancedFilter(position: HeaderPosition | null): boolean {\n        this.advancedFilterFocusColumn = position?.column as Column | undefined;\n        return this.advancedFilterService.getCtrl().focusHeaderComp();\n    }\n\n    public focusNextFromAdvancedFilter(backwards?: boolean, forceFirstColumn?: boolean): boolean {\n        const column = (forceFirstColumn ? undefined : this.advancedFilterFocusColumn) ?? this.columnModel.getAllDisplayedColumns()?.[0];\n        if (backwards) {\n            return this.focusHeaderPosition({\n                headerPosition: {\n                    column: column,\n                    headerRowIndex: this.headerNavigationService.getHeaderRowCount() - 1\n                }\n            });\n        } else {\n            return this.focusGridView(column);\n        }\n    }\n\n    public clearAdvancedFilterColumn(): void {\n        this.advancedFilterFocusColumn = undefined;\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Bean } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { ColumnHoverChangedEvent, Events } from \"../events\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\n@Bean('columnHoverService')\nexport class ColumnHoverService extends BeanStub {\n\n    private selectedColumns: Column[] | null;\n\n    public setMouseOver(columns: Column[]): void {\n        this.selectedColumns = columns;\n        const event: WithoutGridCommon<ColumnHoverChangedEvent> = {\n            type: Events.EVENT_COLUMN_HOVER_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public clearMouseOver(): void {\n        this.selectedColumns = null;\n        const event: WithoutGridCommon<ColumnHoverChangedEvent> = {\n            type: Events.EVENT_COLUMN_HOVER_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isHovered(column: Column): boolean {\n        return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;\n    }\n}\n", "import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { GridBodyCtrl } from \"../gridBodyComp/gridBodyCtrl\";\nimport { CtrlsService } from \"../ctrlsService\";\n\n@Bean('columnAnimationService')\nexport class ColumnAnimationService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private executeNextFuncs: Function[] = [];\n    private executeLaterFuncs: Function[] = [];\n\n    private active = false;\n    private suppressAnimation = false;\n\n    private animationThreadCount = 0;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => this.gridBodyCtrl = p.gridBodyCtrl);\n    }\n\n    public isActive(): boolean {\n        return this.active && !this.suppressAnimation;\n    }\n\n    public setSuppressAnimation(suppress: boolean): void {\n        this.suppressAnimation = suppress;\n    }\n\n    public start(): void {\n        if (this.active) { return; }\n\n        if (this.gridOptionsService.get('suppressColumnMoveAnimation')) { return; }\n\n        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,\n        // the animation moves all the row the the right rather than to the left (ie it's the static\n        // columns that actually get their coordinates updated)\n        if (this.gridOptionsService.get('enableRtl')) { return; }\n\n        this.ensureAnimationCssClassPresent();\n\n        this.active = true;\n    }\n\n    public finish(): void {\n        if (!this.active) { return; }\n        this.flush(() => { this.active = false });\n    }\n\n    public executeNextVMTurn(func: Function): void {\n        if (this.active) {\n            this.executeNextFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public executeLaterVMTurn(func: Function): void {\n        if (this.active) {\n            this.executeLaterFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    private ensureAnimationCssClassPresent(): void {\n        // up the count, so we can tell if someone else has updated the count\n        // by the time the 'wait' func executes\n        this.animationThreadCount++;\n        const animationThreadCountCopy = this.animationThreadCount;\n        this.gridBodyCtrl.setColumnMovingCss(true);\n\n        this.executeLaterFuncs.push(() => {\n            // only remove the class if this thread was the last one to update it\n            if (this.animationThreadCount === animationThreadCountCopy) {\n                this.gridBodyCtrl.setColumnMovingCss(false);\n            }\n        });\n    }\n\n    private flush(callback: () => void): void {\n        if (this.executeNextFuncs.length === 0 && this.executeLaterFuncs.length === 0) { \n            callback();\n            return; \n        }\n\n        const runFuncs = (queue: Function[]) => {\n            while (queue.length) {\n                const func = queue.pop();\n                if (func) { func(); }\n            }\n        }\n\n        this.getFrameworkOverrides().wrapIncoming(() => {\n            window.setTimeout(() => runFuncs(this.executeNextFuncs), 0);\n            window.setTimeout(() => {\n                runFuncs(this.executeLaterFuncs);\n                callback();\n            }, 200);\n        });\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../events\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"../gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { debounce } from \"../utils/function\";\nimport { PaginationProxy } from \"./paginationProxy\";\n\n@Bean('paginationAutoPageSizeService')\nexport class PaginationAutoPageSizeService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    private centerRowContainerCon: RowContainerCtrl;\n\n    // Once the body is rendered, we debounce changes to the page size,\n    // but we do not want to debounce the first time the body is rendered.\n    private isBodyRendered: boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCon = p.centerRowContainerCtrl;\n\n            this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.checkPageSize.bind(this));\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.checkPageSize.bind(this));\n            this.addManagedPropertyListener('paginationAutoPageSize', this.onPaginationAutoSizeChanged.bind(this));\n\n            this.checkPageSize();\n        });\n    }\n\n    private notActive(): boolean {\n        return !this.gridOptionsService.get('paginationAutoPageSize') || this.centerRowContainerCon == null;\n    }\n\n    private onPaginationAutoSizeChanged(): void {\n        if (this.notActive()) {\n            this.paginationProxy.unsetAutoCalculatedPageSize();\n        } else {\n            this.checkPageSize();\n        }\n    }\n\n    private checkPageSize(): void {\n        if (this.notActive()) { return; }\n\n        const bodyHeight = this.centerRowContainerCon.getViewportSizeFeature()!.getBodyHeight();\n\n        if (bodyHeight > 0) {\n            const update = () => {\n                const rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n                const newPageSize = Math.floor(bodyHeight / rowHeight);\n                this.paginationProxy.setPageSize(newPageSize, 'autoCalculated');\n            }\n\n            if (!this.isBodyRendered) {\n                update();\n                this.isBodyRendered = true;\n            } else {\n                debounce(() => update(), 50)();\n            }\n        } else {\n            this.isBodyRendered = false;\n        }\n    }\n}\n", "import { Bean, PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('valueCache')\nexport class ValueCache extends BeanStub {\n\n    private cacheVersion = 0;\n    private active: boolean;\n    private neverExpires: boolean;\n\n    @PostConstruct\n    public init(): void {\n        this.active = this.gridOptionsService.get('valueCache');\n        this.neverExpires = this.gridOptionsService.get('valueCacheNeverExpires');\n    }\n\n    public onDataChanged(): void {\n        if (this.neverExpires) { return; }\n\n        this.expire();\n    }\n\n    public expire(): void {\n        this.cacheVersion++;\n    }\n\n    public setValue(rowNode: RowNode, colId: string, value: any): any {\n        if (this.active) {\n            if (rowNode.__cacheVersion !== this.cacheVersion) {\n                rowNode.__cacheVersion = this.cacheVersion;\n                rowNode.__cacheData = {};\n            }\n\n            rowNode.__cacheData[colId] = value;\n        }\n    }\n\n    public getValue(rowNode: RowNode, colId: string): any {\n        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {\n            return undefined;\n        }\n\n        return rowNode.__cacheData[colId];\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ChangedPath } from \"../utils/changedPath\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { CellValueChangedEvent, Events } from \"../events\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\n\n// Matches value in clipboard module\nconst SOURCE_PASTE = 'paste';\n@Bean('changeDetectionService')\nexport class ChangeDetectionService extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    @PostConstruct\n    private init(): void {\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));\n    }\n\n    private onCellValueChanged(event: CellValueChangedEvent): void {\n\n        // Clipboard service manages its own change detection, so no need to do it here.\n        // The clipboard manages its own as otherwise this would happen once for every cell\n        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\n        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\n        // service executes the logic we have here once (in essence batching up all cell changes\n        // into one change detection).\n        if (event.source === SOURCE_PASTE) { return; }\n\n        this.doChangeDetection(event.node as RowNode, event.column);\n    }\n\n    private doChangeDetection(rowNode: RowNode, column: Column): void {\n        if (this.gridOptionsService.get('suppressChangeDetection')) { return; }\n\n        const nodesToRefresh: RowNode[] = [rowNode];\n\n        // step 1 of change detection is to update the aggregated values\n        if (this.clientSideRowModel && !rowNode.isRowPinned()) {\n            const onlyChangedColumns = this.gridOptionsService.get('aggregateOnlyChangedColumns');\n            const changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n            changedPath.addParentNode(rowNode.parent, [column]);\n            this.clientSideRowModel.doAggregate(changedPath);\n\n            // add all nodes impacted by aggregation, as they need refreshed also.\n            changedPath.forEachChangedNodeDepthFirst(rowNode => {\n                nodesToRefresh.push(rowNode);\n            });\n        }\n\n        // step 2 of change detection is to refresh the cells\n        this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\n    }\n}\n", "import { Autowired, Bean } from \"../../context/context\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport { ICellRendererComp, ICellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { loadTemplate } from \"../../utils/dom\";\n\n@Bean(\"agComponentUtils\")\nexport class AgComponentUtils extends BeanStub {\n\n    @Autowired(\"componentMetadataProvider\")\n    private componentMetadataProvider: ComponentMetadataProvider;\n\n    public adaptFunction(propertyName: string, jsCompFunc: any): any {\n        const metadata: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n        if (metadata && metadata.functionAdapter) {\n            return metadata.functionAdapter(jsCompFunc);\n        }\n        return null;\n    }\n\n    public adaptCellRendererFunction(callback: any): { new(): IComponent<ICellRendererParams>; } {\n        class Adapter implements ICellRendererComp {\n\n            private eGui: HTMLElement;\n\n            refresh(params: ICellRendererParams): boolean {\n                return false;\n            }\n\n            getGui(): HTMLElement {\n                return this.eGui;\n            }\n\n            init?(params: ICellRendererParams): void {\n                const callbackResult: string | HTMLElement = callback(params);\n                const type = typeof callbackResult;\n                if (type === 'string' || type === 'number' || type === 'boolean') {\n                    this.eGui = loadTemplate('<span>' + callbackResult + '</span>');\n                    return;\n                }\n                if (callbackResult==null) {\n                    this.eGui = loadTemplate('<span></span>');\n                    return;\n                }\n                this.eGui =  callbackResult as HTMLElement;\n            }\n        }\n\n        return Adapter;\n    }\n\n    public doesImplementIComponent(candidate: any): boolean {\n        if (!candidate) { return false; }\n        return (candidate as any).prototype && 'getGui' in (candidate as any).prototype;\n    }\n}\n", "import { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { BeanStub } from \"../../context/beanStub\";\n\nexport interface ComponentMetadata {\n    mandatoryMethodList: string[];\n    optionalMethodList: string[];\n    functionAdapter?: (callback: any) => { new(): IComponent<any> };\n}\n\n@Bean(\"componentMetadataProvider\")\nexport class ComponentMetadataProvider extends BeanStub {\n\n    private componentMetaData: { [key: string]: ComponentMetadata };\n\n    @Autowired(\"agComponentUtils\")\n    private agComponentUtils: AgComponentUtils;\n\n    @PostConstruct\n    public postConstruct() {\n        this.componentMetaData = {\n            dateComponent: {\n                mandatoryMethodList: ['getDate', 'setDate'],\n                optionalMethodList: ['afterGuiAttached', 'setInputPlaceholder', 'setInputAriaLabel', 'setDisabled', 'onParamsUpdated', 'refresh']\n            },\n            detailCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            headerComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh']\n            },\n            headerGroupComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            loadingCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            loadingOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh']\n            },\n            noRowsOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh']\n            },\n            floatingFilterComponent: {\n                mandatoryMethodList: ['onParentModelChanged'],\n                optionalMethodList: ['afterGuiAttached', 'onParamsUpdated', 'refresh']\n            },\n            cellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            cellEditor: {\n                mandatoryMethodList: ['getValue'],\n                optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'getPopupPosition', 'focusIn', 'focusOut', 'afterGuiAttached', 'refresh']\n            },\n            innerRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            fullWidthCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            groupRowRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            filter: {\n                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\n                optionalMethodList: ['afterGuiAttached', 'afterGuiDetached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged', 'onAnyFilterChanged', 'refresh']\n            },\n            statusPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n            },\n            toolPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'getState']\n            },\n            tooltipComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            menuItem: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['setActive', 'select', 'setExpanded', 'configureDefaults']\n            },\n        };\n    }\n\n    public retrieve(name: string): ComponentMetadata {\n        return this.componentMetaData[name];\n    }\n}\n", "import { Bean, Autowired, PostConstruct } from './context/context';\nimport { BeanStub } from \"./context/beanStub\";\nimport { exists } from './utils/generic';\nimport { Events } from './eventKeys';\nimport { WithoutGridCommon } from './interfaces/iCommon';\nimport { CssVariablesChanged } from './events';\n\nexport type SASS_PROPERTIES = 'headerHeight' | 'headerCellMinWidth' | 'listItemHeight' | 'rowHeight' | 'chartMenuPanelWidth';\n\ninterface HardCodedSize {\n    [key: string]: {\n        [key in SASS_PROPERTIES]?: number;\n    };\n}\n\nconst DEFAULT_ROW_HEIGHT = 25;\nconst MIN_COL_WIDTH = 10;\n\nconst MAT_GRID_SIZE = 8;\nconst BASE_GRID_SIZE = 4;\nconst BALHAM_GRID_SIZE = 4;\nconst ALPINE_GRID_SIZE = 6;\n\nconst QUARTZ_ICON_SIZE = 16;\nconst QUARTZ_FONT_SIZE = 14;\nconst QUARTZ_GRID_SIZE = 8;\n\nconst HARD_CODED_SIZES: HardCodedSize = {\n    // this item is required for custom themes\n    'ag-theme-custom': {\n        headerHeight: 25,\n        headerCellMinWidth: 24,\n        listItemHeight: BASE_GRID_SIZE * 5,\n        rowHeight: 25,\n        chartMenuPanelWidth: 220\n    },\n    'ag-theme-material': {\n        headerHeight: MAT_GRID_SIZE * 7,\n        headerCellMinWidth: 48,\n        listItemHeight: MAT_GRID_SIZE * 4,\n        rowHeight: MAT_GRID_SIZE * 6,\n        chartMenuPanelWidth: 240\n    },\n    'ag-theme-balham': {\n        headerHeight: BALHAM_GRID_SIZE * 8,\n        headerCellMinWidth: 24,\n        listItemHeight: BALHAM_GRID_SIZE * 6,\n        rowHeight: BALHAM_GRID_SIZE * 7,\n        chartMenuPanelWidth: 220\n    },\n    'ag-theme-alpine': {\n        headerHeight: ALPINE_GRID_SIZE * 8,\n        headerCellMinWidth: 36,\n        listItemHeight: ALPINE_GRID_SIZE * 4,\n        rowHeight: ALPINE_GRID_SIZE * 7,\n        chartMenuPanelWidth: 240\n    },\n    'ag-theme-quartz': {\n        headerHeight: QUARTZ_FONT_SIZE + QUARTZ_GRID_SIZE * 4.25,\n        headerCellMinWidth: 36,\n        listItemHeight: QUARTZ_ICON_SIZE + QUARTZ_GRID_SIZE,\n        rowHeight: QUARTZ_FONT_SIZE + QUARTZ_GRID_SIZE * 3.5,\n        chartMenuPanelWidth: 260\n    }\n};\n\n/**\n * this object contains a list of Sass variables and an array\n * of CSS styles required to get the correct value.\n * eg. $virtual-item-height requires a structure, so we can get its height.\n * <div class=\"ag-theme-balham\">\n *     <div class=\"ag-virtual-list-container\">\n *         <div class=\"ag-virtual-list-item\"></div>\n *     </div>\n * </div>\n */\nconst SASS_PROPERTY_BUILDER: { [key in SASS_PROPERTIES]: string[] } = {\n    headerHeight: ['ag-header-row'],\n    headerCellMinWidth: ['ag-header-cell'],\n    listItemHeight: ['ag-virtual-list-item'],\n    rowHeight: ['ag-row'],\n    chartMenuPanelWidth: ['ag-chart-docked-container']\n};\n\n@Bean('environment')\nexport class Environment extends BeanStub {\n\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n\n    private calculatedSizes: HardCodedSize | null = {};\n    private mutationObserver: MutationObserver;\n\n    @PostConstruct\n    private postConstruct(): void {\n        const el = this.getTheme().el ?? this.eGridDiv;\n\n        this.addManagedPropertyListener('rowHeight', () => this.refreshRowHeightVariable());\n\n        this.mutationObserver = new MutationObserver(() => {\n            this.calculatedSizes = {};\n            this.fireGridStylesChangedEvent();\n        });\n\n        this.mutationObserver.observe(el || this.eGridDiv, {\n            attributes: true,\n            attributeFilter: ['class']\n        });\n    }\n\n    private fireGridStylesChangedEvent(): void {\n        const event: WithoutGridCommon<CssVariablesChanged> = {\n            type: Events.EVENT_GRID_STYLES_CHANGED\n        }\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getSassVariable(key: SASS_PROPERTIES): number | undefined {\n        const { themeFamily, el } = this.getTheme();\n\n        if (!themeFamily || themeFamily.indexOf('ag-theme') !== 0) { return; }\n\n        if (!this.calculatedSizes) {\n            this.calculatedSizes = {};\n        }\n\n        if (!this.calculatedSizes[themeFamily]) {\n            this.calculatedSizes[themeFamily] = {};\n        }\n\n        const size = this.calculatedSizes[themeFamily][key];\n\n        if (size != null) {\n            return size;\n        }\n\n        this.calculatedSizes[themeFamily][key] = this.calculateValueForSassProperty(key, themeFamily, el);\n\n        return this.calculatedSizes[themeFamily][key];\n    }\n\n    private calculateValueForSassProperty(property: SASS_PROPERTIES, theme: string, themeElement?: HTMLElement): number | undefined {\n        const useTheme = 'ag-theme-' + (theme.match('material') ? 'material' : theme.match('balham') ? 'balham' : theme.match('alpine') ? 'alpine' : 'custom');\n        const defaultValue = HARD_CODED_SIZES[useTheme][property];\n        const eDocument = this.gridOptionsService.getDocument();\n\n        if (!themeElement) {\n            themeElement = this.eGridDiv;\n        }\n\n        if (!SASS_PROPERTY_BUILDER[property]) { return defaultValue; }\n\n        const classList = SASS_PROPERTY_BUILDER[property];\n        const div = eDocument.createElement('div');\n        \n        // this will apply SASS variables that were manually added to the current theme\n        const classesFromThemeElement = Array.from(themeElement.classList)\n        div.classList.add(theme,...classesFromThemeElement);\n\n        div.style.position = 'absolute';\n\n        const el: HTMLDivElement = classList.reduce((prevEl: HTMLDivElement, currentClass: string) => {\n            const currentDiv = eDocument.createElement('div');\n            currentDiv.style.position = 'static';\n            currentDiv.classList.add(currentClass);\n            prevEl.appendChild(currentDiv);\n\n            return currentDiv;\n        }, div);\n\n        let calculatedValue = 0;\n\n        if (eDocument.body) {\n            eDocument.body.appendChild(div);\n            const sizeName = property.toLowerCase().indexOf('height') !== -1 ? 'height' : 'width';\n            calculatedValue = parseInt(window.getComputedStyle(el)[sizeName]!, 10);\n            eDocument.body.removeChild(div);\n        }\n\n        return calculatedValue || defaultValue;\n    }\n\n    public isThemeDark(): boolean {\n        const { theme } = this.getTheme();\n        return !!theme && theme.indexOf('dark') >= 0;\n    }\n\n    public chartMenuPanelWidth(): number | undefined {\n        return this.getSassVariable('chartMenuPanelWidth');\n    }\n\n    public getTheme(): { theme?: string; el?: HTMLElement; themeFamily?: string; allThemes: string[] } {\n        const reg = /\\bag-(material|(?:theme-([\\w\\-]*)))\\b/g;\n        let el: HTMLElement | undefined = this.eGridDiv;\n        let themeMatch: RegExpMatchArray | null = null;\n        let allThemes: string[] = [];\n\n        while (el) {\n            themeMatch = reg.exec(el.className);\n            if (!themeMatch) {\n                el = el.parentElement || undefined;\n            } else {\n                const matched = el.className.match(reg);\n                if (matched) {\n                    allThemes = matched;\n                }\n                break;\n            }\n        }\n\n        if (!themeMatch) { return { allThemes }; }\n\n        const theme = themeMatch[0];\n\n        return { theme, el, themeFamily: theme.replace(/-dark$/, ''), allThemes };\n    }\n\n    // Material data table has strict guidelines about whitespace, and these values are different than the ones\n    // ag-grid uses by default. We override the default ones for the sake of making it better out of the box\n    public getFromTheme(defaultValue: number, sassVariableName: SASS_PROPERTIES): number;\n    public getFromTheme(defaultValue: null, sassVariableName: SASS_PROPERTIES): number | null | undefined;\n    public getFromTheme(defaultValue: any, sassVariableName: SASS_PROPERTIES): any {\n        return this.getSassVariable(sassVariableName) ?? defaultValue;\n    }\n\n    public getDefaultRowHeight(): number {\n        return this.getFromTheme(DEFAULT_ROW_HEIGHT, 'rowHeight');\n    }\n\n    public getListItemHeight() {\n        return this.getFromTheme(20, 'listItemHeight');\n    }\n\n    public refreshRowHeightVariable(): number {\n        const oldRowHeight = this.eGridDiv.style.getPropertyValue('--ag-line-height').trim();\n        const height = this.gridOptionsService.get('rowHeight');\n\n        if (height == null || isNaN(height) || !isFinite(height)) {\n            if (oldRowHeight !== null) {\n                this.eGridDiv.style.setProperty('--ag-line-height', null);\n            }\n            return -1;\n        }\n\n        const newRowHeight = `${height}px`;\n\n        if (oldRowHeight != newRowHeight) {\n            this.eGridDiv.style.setProperty('--ag-line-height', newRowHeight);\n            return height;\n        }\n\n        return oldRowHeight != '' ? parseFloat(oldRowHeight) : -1;\n    }\n\n    public getMinColWidth(): number {\n        const measuredMin = this.getFromTheme(null, 'headerCellMinWidth');\n        return exists(measuredMin) ? Math.max(measuredMin, MIN_COL_WIDTH) : MIN_COL_WIDTH;\n    }\n\n    protected destroy(): void {\n        this.calculatedSizes = null;\n\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n\n        super.destroy();\n    }\n}", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct, Qualifier } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { getMaxDivHeight } from \"../utils/browser\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Logger, LoggerFactory } from \"../logger\";\n\n/**\n * This class solves the 'max height' problem, where the user might want to show more data than\n * the max div height actually allows.\n */\n\n@Bean('rowContainerHeightService')\nexport class RowContainerHeightService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private maxDivHeight: number;\n\n    // if false, then stretching is not active, logic in this class is not used,\n    // the pixel height of the row container matches what is actually needed,\n    // no scaling applied.\n    private stretching: boolean;\n\n    private modelHeight: number | null; // how many pixels the model needs\n    private uiContainerHeight: number | null; // how many pixels we actually have\n    private pixelsToShave: number; // the number of pixels we need to shave\n\n    // the number of pixels we add to each rowTop - depends on the scroll position\n    private divStretchOffset: number;\n\n    // the scrollY position\n    private scrollY = 0;\n    // how tall the body is\n    private uiBodyHeight = 0;\n\n    // the max scroll position\n    private maxScrollY: number;\n\n    private logger: Logger;\n\n    public agWire(@Qualifier(\"loggerFactory\") loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create(\"RowContainerHeightService\");\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));\n        this.maxDivHeight = getMaxDivHeight();\n        this.logger.log('maxDivHeight = ' + this.maxDivHeight);\n    }\n\n    public isStretching(): boolean {\n        return this.stretching;\n    }\n\n    public getDivStretchOffset(): number {\n        return this.divStretchOffset;\n    }\n\n    public updateOffset(): void {\n        if (!this.stretching) { return; }\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;\n        const newBodyHeight = this.getUiBodyHeight();\n\n        const atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\n        if (atLeastOneChanged) {\n            this.scrollY = newScrollY;\n            this.uiBodyHeight = newBodyHeight;\n            this.calculateOffset();\n        }\n    }\n\n    private calculateOffset(): void {\n        this.setUiContainerHeight(this.maxDivHeight);\n        this.pixelsToShave = this.modelHeight! - this.uiContainerHeight!;\n\n        this.maxScrollY = this.uiContainerHeight! - this.uiBodyHeight;\n        const scrollPercent = this.scrollY / this.maxScrollY;\n\n        const divStretchOffset = scrollPercent * this.pixelsToShave;\n\n        this.logger.log(`Div Stretch Offset = ${divStretchOffset} (${this.pixelsToShave} * ${scrollPercent})`);\n\n        this.setDivStretchOffset(divStretchOffset);\n    }\n\n    private setUiContainerHeight(height: number | null): void {\n        if (height !== this.uiContainerHeight) {\n            this.uiContainerHeight = height;\n            this.eventService.dispatchEvent({type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED});\n        }\n    }\n\n    private clearOffset(): void {\n        this.setUiContainerHeight(this.modelHeight);\n        this.pixelsToShave = 0;\n        this.setDivStretchOffset(0);\n    }\n\n    private setDivStretchOffset(newOffset: number): void {\n        // because we are talking pixels, no point in confusing things with half numbers\n        const newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\n        if (this.divStretchOffset === newOffsetFloor) { return; }\n\n        this.divStretchOffset = newOffsetFloor!;\n        this.eventService.dispatchEvent({type: Events.EVENT_HEIGHT_SCALE_CHANGED});\n    }\n\n    public setModelHeight(modelHeight: number | null): void {\n        this.modelHeight = modelHeight;\n        this.stretching = modelHeight != null // null happens when in print layout\n                        && this.maxDivHeight > 0\n                        && modelHeight! > this.maxDivHeight;\n        if (this.stretching) {\n            this.calculateOffset();\n        } else {\n            this.clearOffset();\n        }\n    }\n\n    public getUiContainerHeight(): number | null {\n        return this.uiContainerHeight;\n    }\n\n    public getRealPixelPosition(modelPixel: number): number {\n        return modelPixel - this.divStretchOffset;\n    }\n\n    private getUiBodyHeight(): number {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const pos = gridBodyCon.getScrollFeature().getVScrollPosition();\n        return pos.bottom - pos.top;\n    }\n\n    public getScrollPositionForPixel(rowTop: number): number {\n        if (this.pixelsToShave <= 0) { return rowTop; }\n\n        const modelMaxScroll = this.modelHeight! - this.getUiBodyHeight();\n        const scrollPercent = rowTop / modelMaxScroll;\n        const scrollPixel = this.maxScrollY * scrollPercent;\n        return scrollPixel;\n    }\n}\n", "import { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { ISelectionService } from \"../interfaces/iSelectionService\";\nimport { SelectionService } from \"../selectionService\";\nimport { ChangedPath } from \"../utils/changedPath\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\n@Bean('selectableService')\nexport class SelectableService extends BeanStub {\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n    \n    @PostConstruct\n    private init() {\n        this.addManagedPropertyListener('isRowSelectable', () => this.updateSelectable());\n    }\n\n    /**\n     * Used by CSRM only, to update selectable state after group state changes.\n     */\n    public updateSelectableAfterGrouping(): void {\n        this.updateSelectable(true);\n    }\n\n    private updateSelectable(skipLeafNodes = false) {\n        const isRowSelecting = !!this.gridOptionsService.get('rowSelection');\n        const isRowSelectable = this.gridOptionsService.get('isRowSelectable');\n\n        if (!isRowSelecting || !isRowSelectable) { return; }\n\n        const isGroupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n\n        const isCsrmGroupSelectsChildren = this.rowModel.getType() === 'clientSide' && isGroupSelectsChildren;\n\n        const nodesToDeselect: RowNode[] = [];\n\n        const nodeCallback = (node: RowNode) => {\n            if (skipLeafNodes && !node.group) { return; }\n\n            // Only in the CSRM, we allow group node selection if a child has a selectable=true when using groupSelectsChildren\n            if (isCsrmGroupSelectsChildren && node.group) {\n                const hasSelectableChild = node.childrenAfterGroup!.some(rowNode => rowNode.selectable === true);\n                node.setRowSelectable(hasSelectableChild, true);\n                return;\n            }\n\n            const rowSelectable = isRowSelectable ? isRowSelectable(node) : true;\n            node.setRowSelectable(rowSelectable, true);\n\n            if (!rowSelectable && node.isSelected()) {\n                nodesToDeselect.push(node);\n            }\n        };\n        \n        // Needs to be depth first in this case, so that parents can be updated based on child.\n        if (isCsrmGroupSelectsChildren) {\n            const csrm = this.rowModel as IClientSideRowModel;\n            const changedPath = new ChangedPath(false, csrm.getRootNode());\n            changedPath.forEachChangedNodeDepthFirst(nodeCallback, true, true);\n        } else {\n            // Normal case, update all rows\n            this.rowModel.forEachNode(nodeCallback);\n        }\n\n        if (nodesToDeselect.length) {\n            this.selectionService.setNodesSelected({ nodes: nodesToDeselect, newValue: false, source: 'selectableChanged' });\n        }\n\n        // if csrm and group selects children, update the groups after deselecting leaf nodes.\n        if (isCsrmGroupSelectsChildren && this.selectionService instanceof SelectionService) {\n            this.selectionService.updateGroupsFromChildrenSelections('selectableChanged');\n        }\n    }\n\n}\n", "import { Component } from \"../widgets/component\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport {Events, PaginationChangedEvent} from \"../events\";\nimport { PaginationProxy } from \"./paginationProxy\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { formatNumberCommas } from \"../utils/number\";\nimport { setAriaDisabled } from \"../utils/aria\";\nimport { KeyCode } from '../constants/keyCode';\nimport { RowNodeBlockLoader } from \"../rowNodeCache/rowNodeBlockLoader\";\nimport { PaginationNumberFormatterParams } from \"../interfaces/iCallbackParams\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { PageSizeSelectorComp } from \"./pageSizeSelector/pageSizeSelectorComp\";\n\nexport class PaginationComp extends Component {\n\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n\n    @RefSelector('btFirst') private btFirst: HTMLElement;\n    @RefSelector('btPrevious') private btPrevious: HTMLElement;\n    @RefSelector('btNext') private btNext: HTMLElement;\n    @RefSelector('btLast') private btLast: HTMLElement;\n\n    @RefSelector('lbRecordCount') private lbRecordCount: any;\n    @RefSelector('lbFirstRowOnPage') private lbFirstRowOnPage: any;\n    @RefSelector('lbLastRowOnPage') private lbLastRowOnPage: any;\n    @RefSelector('lbCurrent') private lbCurrent: any;\n    @RefSelector('lbTotal') private lbTotal: any;\n\n    @RefSelector('pageSizeComp') private pageSizeComp: PageSizeSelectorComp;\n\n    private previousAndFirstButtonsDisabled = false;\n    private nextButtonDisabled = false;\n    private lastButtonDisabled = false;\n    private areListenersSetup = false;\n\n    constructor() {\n        super();\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        this.setTemplate(this.getTemplate());\n\n        const { btFirst, btPrevious, btNext, btLast, pageSizeComp } = this;\n        this.activateTabIndex([btFirst, btPrevious, btNext, btLast])\n\n        btFirst.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'last' : 'first', this.gridOptionsService)!);\n        btPrevious.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'next' : 'previous', this.gridOptionsService)!);\n        btNext.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'previous' : 'next', this.gridOptionsService)!);\n        btLast.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'first' : 'last', this.gridOptionsService)!);\n\n        this.addManagedPropertyListener('pagination', this.onPaginationChanged.bind(this));\n        this.addManagedPropertyListener('suppressPaginationPanel', this.onPaginationChanged.bind(this));\n        this.addManagedPropertyListeners(['paginationPageSizeSelector', 'paginationAutoPageSize', 'suppressPaginationPanel'],\n            () => this.onPageSizeRelatedOptionsChange(),\n        );\n\n        this.pageSizeComp.toggleSelectDisplay(\n            this.pageSizeComp.shouldShowPageSizeSelector()\n        );\n\n        this.onPaginationChanged();\n    }\n\n    private onPaginationChanged(): void {\n        const isPaging = this.gridOptionsService.get('pagination');\n        const paginationPanelEnabled = isPaging && !this.gridOptionsService.get('suppressPaginationPanel');\n\n        this.setDisplayed(paginationPanelEnabled);\n        if (!paginationPanelEnabled) {\n            return;\n        }\n\n        this.setupListeners();\n\n        this.enableOrDisableButtons();\n        this.updateRowLabels();\n        this.setCurrentPageLabel();\n        this.setTotalLabels();\n        this.onPageSizeRelatedOptionsChange();\n    }\n\n    private onPageSizeRelatedOptionsChange(): void {\n        this.pageSizeComp.toggleSelectDisplay(\n            this.pageSizeComp.shouldShowPageSizeSelector()\n        );\n    }\n\n    private setupListeners() {\n        if (!this.areListenersSetup) {\n            this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));\n\n            [\n                { el: this.btFirst, fn: this.onBtFirst.bind(this) },\n                { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },\n                { el: this.btNext, fn: this.onBtNext.bind(this) },\n                { el: this.btLast, fn: this.onBtLast.bind(this) }\n            ].forEach(item => {\n                const { el, fn } = item;\n                this.addManagedListener(el, 'click', fn);\n                this.addManagedListener(el, 'keydown', (e: KeyboardEvent) => {\n                    if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                        e.preventDefault();\n                        fn();\n                    }\n                });\n            });\n            this.areListenersSetup = true;\n        }\n    }\n\n    private onBtFirst() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationProxy.goToFirstPage();\n        }\n    }\n\n    private setCurrentPageLabel(): void {\n        const pagesExist = this.paginationProxy.getTotalPages() > 0;\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const toDisplay = pagesExist ? currentPage + 1 : 0;\n\n        this.lbCurrent.textContent = this.formatNumber(toDisplay);\n    }\n\n    private formatNumber(value: number): string {\n        const userFunc = this.gridOptionsService.getCallback('paginationNumberFormatter');\n\n        if (userFunc) {\n            const params: WithoutGridCommon<PaginationNumberFormatterParams> = { value: value };\n            return userFunc(params);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        return formatNumberCommas(value, thousandSeparator, decimalSeparator);\n    }\n\n    private getTemplate(): string {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        const strPage = localeTextFunc('page', 'Page');\n        const strTo = localeTextFunc('to', 'to');\n        const strOf = localeTextFunc('of', 'of');\n        const strFirst = localeTextFunc('firstPage', 'First Page');\n        const strPrevious = localeTextFunc('previousPage', 'Previous Page');\n        const strNext = localeTextFunc('nextPage', 'Next Page');\n        const strLast = localeTextFunc('lastPage', 'Last Page');\n        const compId = this.getCompId();\n\n        return /* html */`<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-${compId}\">\n                <ag-page-size-selector ref=\"pageSizeComp\"></ag-page-size-selector>\n                <span class=\"ag-paging-row-summary-panel\" role=\"status\">\n                    <span id=\"ag-${compId}-first-row\" ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-to\">${strTo}</span>\n                    <span id=\"ag-${compId}-last-row\" ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-of\">${strOf}</span>\n                    <span id=\"ag-${compId}-row-count\" ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\n                    <div ref=\"btFirst\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strFirst}\"></div>\n                    <div ref=\"btPrevious\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strPrevious}\"></div>\n                    <span class=\"ag-paging-description\" role=\"status\">\n                        <span id=\"ag-${compId}-start-page\">${strPage}</span>\n                        <span id=\"ag-${compId}-start-page-number\" ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\n                        <span id=\"ag-${compId}-of-page\">${strOf}</span>\n                        <span id=\"ag-${compId}-of-page-number\" ref=\"lbTotal\" class=\"ag-paging-number\"></span>\n                    </span>\n                    <div ref=\"btNext\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strNext}\"></div>\n                    <div ref=\"btLast\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strLast}\"></div>\n                </span>\n            </div>`;\n    }\n\n    private onBtNext() {\n        if (!this.nextButtonDisabled) {\n            this.paginationProxy.goToNextPage();\n        }\n    }\n\n    private onBtPrevious() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationProxy.goToPreviousPage();\n        }\n    }\n\n    private onBtLast() {\n        if (!this.lastButtonDisabled) {\n            this.paginationProxy.goToLastPage();\n        }\n    }\n\n    private enableOrDisableButtons() {\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n\n        this.previousAndFirstButtonsDisabled = currentPage === 0;\n        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);\n        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);\n\n        const zeroPagesToDisplay = this.isZeroPagesToDisplay();\n        const onLastPage = currentPage === (totalPages - 1);\n\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\n        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === (totalPages - 1);\n\n        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);\n        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);\n    }\n\n    private toggleButtonDisabled(button: HTMLElement, disabled: boolean) {\n        setAriaDisabled(button, disabled);\n        button.classList.toggle('ag-disabled', disabled);\n    }\n\n    private updateRowLabels() {\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const pageSize = this.paginationProxy.getPageSize();\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const rowCount = this.paginationProxy.isLastPageFound() ?\n            this.paginationProxy.getMasterRowCount() : null;\n\n        let startRow: any;\n        let endRow: any;\n\n        if (this.isZeroPagesToDisplay()) {\n            startRow = endRow = 0;\n        } else {\n            startRow = (pageSize * currentPage) + 1;\n            endRow = startRow + pageSize - 1;\n            if (maxRowFound && endRow > rowCount!) {\n                endRow = rowCount;\n            }\n        }\n\n        this.lbFirstRowOnPage.textContent = this.formatNumber(startRow);\n        if (this.rowNodeBlockLoader.isLoading()) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.lbLastRowOnPage.innerHTML = translate('pageLastRowUnknown', '?');\n        } else {\n            this.lbLastRowOnPage.textContent = this.formatNumber(endRow);\n        }\n    }\n\n    private isZeroPagesToDisplay() {\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        return maxRowFound && totalPages === 0;\n    }\n\n    private setTotalLabels() {\n        const lastPageFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        const rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;\n\n        // When `pivotMode=true` and no grouping or value columns exist, a single 'hidden' group row (root node) is in\n        // the grid and the pagination totals will correctly display total = 1. However this is confusing to users as\n        // they can't see it. To address this UX issue we simply set the totals to zero in the pagination panel.\n        if (rowCount === 1) {\n            const firstRow = this.paginationProxy.getRow(0);\n\n            // a group node with no group or agg data will not be visible to users\n            const hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);\n            if (hiddenGroupRow) {\n                this.setTotalLabelsToZero();\n                return;\n            }\n        }\n\n        if (lastPageFound) {\n            this.lbTotal.textContent = this.formatNumber(totalPages);\n            this.lbRecordCount.textContent = this.formatNumber(rowCount!);\n        } else {\n            const moreText = this.localeService.getLocaleTextFunc()('more', 'more');\n            this.lbTotal.innerHTML = moreText;\n            this.lbRecordCount.innerHTML = moreText;\n        }\n    }\n\n    private setTotalLabelsToZero() {\n        this.lbFirstRowOnPage.textContent = this.formatNumber(0);\n        this.lbCurrent.textContent = this.formatNumber(0);\n        this.lbLastRowOnPage.textContent = this.formatNumber(0);\n        this.lbTotal.textContent = this.formatNumber(0);\n        this.lbRecordCount.textContent = this.formatNumber(0);\n    }\n}\n", "import { Autowired, PostConstruct } from '../../context/context';\nimport { Component } from '../../widgets/component';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { AgPromise } from '../../utils';\nimport { clearElement } from '../../utils/dom';\nimport { LayoutCssClasses, LayoutFeature, LayoutView, UpdateLayoutClassesParams } from \"../../styling/layoutFeature\";\n\nimport { OverlayService } from './overlayService';\n\nexport class OverlayWrapperComponent extends Component implements LayoutView {\n\n    // wrapping in outer div, and wrapper, is needed to center the loading icon\n    private static TEMPLATE = /* html */`\n        <div class=\"ag-overlay\" role=\"presentation\">\n            <div class=\"ag-overlay-panel\" role=\"presentation\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\" role=\"presentation\"></div>\n            </div>\n        </div>`;\n\n    @Autowired('overlayService') private readonly overlayService: OverlayService;\n\n    @RefSelector('eOverlayWrapper') eOverlayWrapper: HTMLElement;\n\n    private activeOverlay: Component;\n    private inProgress = false;\n    private destroyRequested = false;\n    private activeOverlayWrapperCssClass: string;\n    private updateListenerDestroyFunc?: () => null;\n\n    constructor() {\n        super(OverlayWrapperComponent.TEMPLATE);\n    }\n\n    public updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createManagedBean(new LayoutFeature(this));\n        this.setDisplayed(false, { skipAriaHidden: true });\n\n        this.overlayService.registerOverlayWrapperComp(this);\n    }\n\n    private setWrapperTypeClass(overlayWrapperCssClass: string): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        if (this.activeOverlayWrapperCssClass) {\n            overlayWrapperClassList.toggle(this.activeOverlayWrapperCssClass, false);\n        }\n        this.activeOverlayWrapperCssClass = overlayWrapperCssClass;\n        overlayWrapperClassList.toggle(overlayWrapperCssClass, true);\n    }\n\n    public showOverlay(overlayComp: AgPromise<Component> | null, overlayWrapperCssClass: string, updateListenerDestroyFunc: () => null): void {\n        if (this.inProgress) {\n            return;\n        }\n\n        this.setWrapperTypeClass(overlayWrapperCssClass);\n        this.destroyActiveOverlay();\n\n        this.inProgress = true;\n\n        if (overlayComp) {\n            overlayComp.then(comp => {\n                this.inProgress = false;\n\n                this.eOverlayWrapper.appendChild(comp!.getGui());\n                this.activeOverlay = comp!;\n                this.updateListenerDestroyFunc = updateListenerDestroyFunc;\n\n                if (this.destroyRequested) {\n                    this.destroyRequested = false;\n                    this.destroyActiveOverlay();\n                }\n            });\n        }\n\n        this.setDisplayed(true, { skipAriaHidden: true });\n    }\n\n    private destroyActiveOverlay(): void {\n        if (this.inProgress) {\n            this.destroyRequested = true;\n            return;\n        }\n\n        if (!this.activeOverlay) {\n            return;\n        }\n\n        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay)!;\n        this.updateListenerDestroyFunc?.();\n\n        clearElement(this.eOverlayWrapper);\n    }\n\n    public hideOverlay(): void {\n        this.destroyActiveOverlay();\n        this.setDisplayed(false, { skipAriaHidden: true });\n    }\n\n    public destroy(): void {\n        this.destroyActiveOverlay();\n        super.destroy();\n    }\n}\n", "import { Autowired, Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowNode } from \"./rowNode\";\nimport { RowPinnedType } from \"../interfaces/iRowNode\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { exists } from \"../utils/generic\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\n\nexport interface RowPosition {\n    /** A positive number from 0 to n, where n is the last row the grid is rendering\n    * or -1 if you want to navigate to the grid header */\n    rowIndex: number;\n\n    /** Either 'top', 'bottom' or null/undefined (for not pinned) */\n    rowPinned: RowPinnedType;\n}\n\n@Bean('rowPositionUtils')\nexport class RowPositionUtils extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    public getFirstRow(): RowPosition | null {\n        let rowIndex = 0;\n        let rowPinned: RowPinnedType;\n\n        if (this.pinnedRowModel.getPinnedTopRowCount()) {\n            rowPinned = 'top';\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.paginationProxy.getPageFirstRow();\n        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {\n            rowPinned = 'bottom';\n        }\n\n        return rowPinned === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getLastRow(): RowPosition | null {\n        let rowIndex;\n        let rowPinned: RowPinnedType = null;\n\n        const pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();\n\n        if (pinnedBottomCount) {\n            rowPinned = 'bottom';\n            rowIndex = pinnedBottomCount - 1;\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.paginationProxy.getPageLastRow();\n        } else if (pinnedTopCount) {\n            rowPinned = 'top';\n            rowIndex = pinnedTopCount - 1;\n        }\n\n        return rowIndex === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n\n    public sameRow(rowA: RowPosition | undefined, rowB: RowPosition | undefined): boolean {\n        // if both missing\n        if (!rowA && !rowB) { return true; }\n        // if only one missing\n        if ((rowA && !rowB) || (!rowA && rowB)) { return false; }\n        // otherwise compare (use == to compare rowPinned because it can be null or undefined)\n        return rowA!.rowIndex === rowB!.rowIndex && rowA!.rowPinned == rowB!.rowPinned;\n    }\n\n    // tests if this row selection is before the other row selection\n    public before(rowA: RowPosition, rowB: RowPosition): boolean {\n        switch (rowA.rowPinned) {\n            case 'top':\n                // we we are floating top, and other isn't, then we are always before\n                if (rowB.rowPinned !== 'top') { return true; }\n                break;\n            case 'bottom':\n                // if we are floating bottom, and the other isn't, then we are never before\n                if (rowB.rowPinned !== 'bottom') { return false; }\n                break;\n            default:\n                // if we are not floating, but the other one is floating...\n                if (exists(rowB.rowPinned)) {\n                    return rowB.rowPinned !== 'top';\n                }\n                break;\n        }\n        return rowA.rowIndex < rowB.rowIndex;\n    }\n\n    public rowMax(rows: RowPosition[]): RowPosition | undefined {\n        let max: RowPosition | undefined;\n\n        rows.forEach((row) => {\n            if (max === undefined || this.before(max, row)) {\n                max = row;\n            }\n        });\n\n        return max;\n    }\n\n    public rowMin(rows: RowPosition[]): RowPosition | undefined {\n        let min: RowPosition | undefined;\n\n        rows.forEach((row) => {\n            if (min === undefined || this.before(row, min)) {\n                min = row;\n            }\n        });\n\n        return min;\n    }\n}\n", "import { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"./column\";\nimport { RowPosition } from \"./rowPositionUtils\";\n\n// this is what gets pass into and out of the api, as JavaScript users\nexport interface CellPosition extends RowPosition {\n/** The grid column */\n    column: Column;\n}\n\n@Bean('cellPositionUtils')\nexport class CellPositionUtils extends BeanStub {\n\n    public createId(cellPosition: CellPosition): string {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return this.createIdFromValues({ rowIndex, column, rowPinned });\n    }\n\n    public createIdFromValues(cellPosition: CellPosition): string {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return `${rowIndex}.${rowPinned == null ? 'null' : rowPinned}.${column.getId()}`;\n    }\n\n    public equals(cellA: CellPosition, cellB: CellPosition): boolean {\n        const colsMatch = cellA.column === cellB.column;\n        const floatingMatch = cellA.rowPinned === cellB.rowPinned;\n        const indexMatch = cellA.rowIndex === cellB.rowIndex;\n        return colsMatch && floatingMatch && indexMatch;\n    }\n\n}\n", "import { RowPinnedType } from \"../interfaces/iRowNode\";\nimport { CellRange } from \"../interfaces/IRangeService\";\n\nexport interface CellValueChange {\n    rowPinned: RowPinnedType;\n    rowIndex: number;\n    columnId: string;\n    oldValue: any;\n    newValue: any;\n}\n\nexport interface LastFocusedCell {\n    rowPinned: RowPinnedType;\n    rowIndex: number;\n    columnId: string;\n}\n\nexport class UndoRedoAction {\n    cellValueChanges: CellValueChange[];\n\n    constructor(cellValueChanges: CellValueChange[]) {\n        this.cellValueChanges = cellValueChanges;\n    }\n}\n\nexport class RangeUndoRedoAction extends UndoRedoAction {\n\n    constructor(\n        cellValueChanges: CellValueChange[],\n        public readonly initialRange?: CellRange,\n        public readonly finalRange?: CellRange,\n        public readonly ranges?: CellRange[]\n    ) {\n        super(cellValueChanges);\n    }\n}\n\nexport class UndoRedoStack {\n    private static DEFAULT_STACK_SIZE = 10;\n\n    private readonly maxStackSize: number;\n\n    private actionStack: UndoRedoAction[] = [];\n\n    constructor(maxStackSize?: number) {\n        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack.DEFAULT_STACK_SIZE;\n        this.actionStack = new Array<UndoRedoAction>(this.maxStackSize);\n    }\n\n    public pop(): UndoRedoAction | undefined {\n        return this.actionStack.pop();\n    }\n\n    public push(item: UndoRedoAction): void {\n        const shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;\n\n        if (!shouldAddActions) { return; }\n\n        if (this.actionStack.length === this.maxStackSize) {\n            this.actionStack.shift();\n        }\n\n        this.actionStack.push(item);\n    }\n\n    public clear(): void {\n        this.actionStack = [];\n    }\n\n    public getCurrentStackSize(): number {\n        return this.actionStack.length;\n    }\n}\n", "import { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport {\n    CellEditingStartedEvent,\n    CellEditingStoppedEvent,\n    CellValueChangedEvent,\n    FillEndEvent,\n    RedoEndedEvent,\n    RedoStartedEvent,\n    RowEditingStartedEvent,\n    UndoEndedEvent,\n    UndoStartedEvent,\n} from '../events';\nimport { FocusService } from \"../focusService\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { CellValueChange, RangeUndoRedoAction, LastFocusedCell, UndoRedoAction, UndoRedoStack } from \"./undoRedoStack\";\nimport { RowPosition, RowPositionUtils } from \"../entities/rowPositionUtils\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { CellRange, CellRangeParams, IRangeService } from \"../interfaces/IRangeService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CellPosition, CellPositionUtils } from \"../entities/cellPositionUtils\";\nimport { Column } from '../entities/column';\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { GridBodyCtrl } from \"../gridBodyComp/gridBodyCtrl\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\n@Bean('undoRedoService')\nexport class UndoRedoService extends BeanStub {\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('cellPositionUtils') private cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') private rowPositionUtils: RowPositionUtils;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Optional('rangeService') private readonly rangeService: IRangeService;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private cellValueChanges: CellValueChange[] = [];\n\n    private undoStack: UndoRedoStack;\n    private redoStack: UndoRedoStack;\n\n    private activeCellEdit: CellPosition | null = null;\n    private activeRowEdit: RowPosition | null = null;\n\n    private isPasting = false;\n    private isRangeInAction = false;\n\n    @PostConstruct\n    public init(): void {\n        if (!this.gridOptionsService.get('undoRedoCellEditing')) { return; }\n\n        const undoRedoLimit = this.gridOptionsService.get('undoRedoCellEditingLimit');\n\n        if (undoRedoLimit <= 0) { return; }\n\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\n\n        this.addRowEditingListeners();\n        this.addCellEditingListeners();\n        this.addPasteListeners();\n        this.addFillListeners();\n        this.addCellKeyListeners();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);\n        // undo / redo is restricted to actual editing so we clear the stacks when other operations are\n        // performed that change the order of the row / cols.\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, e => {\n            if (!e.keepUndoRedoStack) {\n                this.clearStacks();\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);\n\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n\n    private onCellValueChanged = (event: CellValueChangedEvent): void => {\n        const eventCell: CellPosition = { column: event.column, rowIndex: event.rowIndex!, rowPinned: event.rowPinned };\n        const isCellEditing = this.activeCellEdit !== null && this.cellPositionUtils.equals(this.activeCellEdit, eventCell);\n        const isRowEditing = this.activeRowEdit !== null && this.rowPositionUtils.sameRow(this.activeRowEdit, eventCell);\n\n        const shouldCaptureAction = isCellEditing || isRowEditing || this.isPasting || this.isRangeInAction;\n\n        if (!shouldCaptureAction) { return; }\n\n        const { rowPinned, rowIndex, column, oldValue, value } = event;\n\n        const cellValueChange: CellValueChange = {\n            rowPinned,\n            rowIndex: rowIndex!,\n            columnId: column.getColId(),\n            newValue: value,\n            oldValue\n        };\n\n        this.cellValueChanges.push(cellValueChange);\n    }\n\n    private clearStacks = () => {\n        this.undoStack.clear();\n        this.redoStack.clear();\n    }\n\n    public getCurrentUndoStackSize(): number {\n        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;\n    }\n\n    public getCurrentRedoStackSize(): number {\n        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;\n    }\n\n    public undo(source: 'api' | 'ui'): void {\n        const startEvent: WithoutGridCommon<UndoStartedEvent> = {\n            type: Events.EVENT_UNDO_STARTED,\n            source\n        }\n        this.eventService.dispatchEvent(startEvent);\n\n        const operationPerformed = this.undoRedo(this.undoStack, this.redoStack, 'initialRange', 'oldValue', 'undo');\n\n        const endEvent: WithoutGridCommon<UndoEndedEvent> = {\n            type: Events.EVENT_UNDO_ENDED,\n            source,\n            operationPerformed\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n\n    public redo(source: 'api' | 'ui'): void {\n        const startEvent: WithoutGridCommon<RedoStartedEvent> = {\n            type: Events.EVENT_REDO_STARTED,\n            source\n        }\n        this.eventService.dispatchEvent(startEvent);\n\n        const operationPerformed = this.undoRedo(this.redoStack, this.undoStack, 'finalRange', 'newValue', 'redo');\n\n        const endEvent: WithoutGridCommon<RedoEndedEvent> = {\n            type: Events.EVENT_REDO_ENDED,\n            source,\n            operationPerformed\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n\n    private undoRedo(\n        undoRedoStack: UndoRedoStack,\n        opposingUndoRedoStack: UndoRedoStack,\n        rangeProperty: 'initialRange' | 'finalRange',\n        cellValueChangeProperty: 'oldValue' | 'newValue',\n        source: 'undo' | 'redo'\n    ): boolean {\n        if (!undoRedoStack) { return false; }\n\n        const undoRedoAction: UndoRedoAction | undefined = undoRedoStack.pop();\n\n        if (!undoRedoAction || !undoRedoAction.cellValueChanges) { return false; }\n\n        this.processAction(undoRedoAction, (cellValueChange: CellValueChange) => cellValueChange[cellValueChangeProperty], source);\n\n        if (undoRedoAction instanceof RangeUndoRedoAction) {\n            this.processRange(undoRedoAction.ranges || [undoRedoAction[rangeProperty]]);\n        } else {\n            this.processCell(undoRedoAction.cellValueChanges);\n        }\n\n        opposingUndoRedoStack.push(undoRedoAction);\n\n        return true;\n    }\n\n    private processAction(action: UndoRedoAction, valueExtractor: (cellValueChange: CellValueChange) => any, source: string) {\n        action.cellValueChanges.forEach(cellValueChange => {\n            const { rowIndex, rowPinned, columnId } = cellValueChange;\n            const rowPosition: RowPosition = { rowIndex, rowPinned };\n            const currentRow = this.getRowNode(rowPosition);\n\n            // checks if the row has been filtered out\n            if (!currentRow!.displayed) { return; }\n\n            currentRow!.setDataValue(columnId, valueExtractor(cellValueChange), source);\n        });\n    }\n\n    private processRange(ranges: (CellRange | undefined)[]) {\n        let lastFocusedCell: LastFocusedCell;\n\n        this.rangeService.removeAllCellRanges(true);\n        ranges.forEach((range, idx) => {\n            if (!range) { return; }\n\n            const startRow = range.startRow;\n            const endRow = range.endRow;\n\n            if (idx === ranges.length - 1) {\n                lastFocusedCell = {\n                    rowPinned: startRow!.rowPinned,\n                    rowIndex: startRow!.rowIndex,\n                    columnId: range.startColumn.getColId()\n                };\n\n                this.setLastFocusedCell(lastFocusedCell);\n            }\n\n            const cellRangeParams: CellRangeParams = {\n                rowStartIndex: startRow!.rowIndex,\n                rowStartPinned: startRow!.rowPinned,\n                rowEndIndex: endRow!.rowIndex,\n                rowEndPinned: endRow!.rowPinned,\n                columnStart: range.startColumn,\n                columns: range.columns\n            };\n\n            this.rangeService.addCellRange(cellRangeParams);\n        });\n    }\n\n    private processCell(cellValueChanges: CellValueChange[]) {\n        const cellValueChange = cellValueChanges[0];\n        const { rowIndex, rowPinned } = cellValueChange;\n        const rowPosition: RowPosition = { rowIndex, rowPinned };\n        const row = this.getRowNode(rowPosition);\n\n        const lastFocusedCell: LastFocusedCell = {\n            rowPinned: cellValueChange.rowPinned,\n            rowIndex: row!.rowIndex!,\n            columnId: cellValueChange.columnId\n        };\n\n        // when single cells are being processed, they should be considered\n        // as ranges when the rangeService is present (singleCellRanges).\n        // otherwise focus will be restore but the range will not.\n        this.setLastFocusedCell(lastFocusedCell, !!this.rangeService);\n    }\n\n    private setLastFocusedCell(lastFocusedCell: LastFocusedCell, setRangeToCell?: boolean) {\n        const { rowIndex, columnId, rowPinned } = lastFocusedCell;\n        const scrollFeature = this.gridBodyCtrl.getScrollFeature();\n\n        const column: Column | null = this.columnModel.getGridColumn(columnId);\n\n        if (!column) { return; }\n\n        scrollFeature.ensureIndexVisible(rowIndex);\n        scrollFeature.ensureColumnVisible(column);\n\n        const cellPosition: CellPosition = { rowIndex, column, rowPinned };\n        this.focusService.setFocusedCell({ ...cellPosition, forceBrowserFocus: true });\n\n\n        if (setRangeToCell) {\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n\n    private addRowEditingListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, (e: RowEditingStartedEvent) => {\n            this.activeRowEdit = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned};\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.activeRowEdit = null;\n        });\n    }\n\n    private addCellEditingListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, (e: CellEditingStartedEvent) => {\n            this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, (e: CellEditingStoppedEvent) => {\n            this.activeCellEdit = null;\n\n            const shouldPushAction = e.valueChanged && !this.activeRowEdit && !this.isPasting && !this.isRangeInAction;\n\n            if (shouldPushAction) {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n            }\n        });\n    }\n\n    private addPasteListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, () => {\n            this.isPasting = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.isPasting = false;\n        });\n    }\n\n    private addFillListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, () => {\n            this.isRangeInAction = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, (event: FillEndEvent) => {\n            const action = new RangeUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\n            this.pushActionsToUndoStack(action);\n            this.isRangeInAction = false;\n        });\n    }\n\n    private addCellKeyListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START, () => {\n            this.isRangeInAction = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END, () => {\n            let action: UndoRedoAction;\n            if (this.rangeService && this.gridOptionsService.get('enableRangeSelection')) {\n                action = new RangeUndoRedoAction(this.cellValueChanges, undefined, undefined, [...this.rangeService.getCellRanges()]);\n            } else {\n                action = new UndoRedoAction(this.cellValueChanges);\n            }\n            this.pushActionsToUndoStack(action);\n            this.isRangeInAction = false;\n        });\n    }\n\n    private pushActionsToUndoStack(action: UndoRedoAction) {\n        this.undoStack.push(action);\n\n        this.cellValueChanges = [];\n        this.redoStack.clear();\n    }\n\n    private getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n}\n", "import { Autowired, Bean } from \"../../context/context\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { HeaderRowType } from \"../row/headerRowComp\";\nimport { last } from \"../../utils/array\";\n\nexport interface HeaderPosition {\n/** A number from 0 to n, where n is the last header row the grid is rendering */\n    headerRowIndex: number;\n/** The grid column or column group */\n    column: Column | ColumnGroup;\n}\n\nexport interface HeaderFuturePosition extends HeaderPosition {\n    headerRowIndexWithoutSpan?: number;\n}\n\n@Bean('headerPositionUtils')\nexport class HeaderPositionUtils extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    public findHeader(focusedHeader: HeaderPosition, direction: 'Before' | 'After'): HeaderPosition | undefined {\n        let nextColumn: Column | ColumnGroup;\n        let getGroupMethod: 'getDisplayedGroupBefore' | 'getDisplayedGroupAfter';\n        let getColMethod: 'getDisplayedColBefore' | 'getDisplayedColAfter';\n\n        if (focusedHeader.column instanceof ColumnGroup) {\n            getGroupMethod = `getDisplayedGroup${direction}` as any;\n            nextColumn = this.columnModel[getGroupMethod](focusedHeader.column)!;\n        } else {\n            getColMethod = `getDisplayedCol${direction}` as any;\n            nextColumn = this.columnModel[getColMethod](focusedHeader.column)!;\n        }\n\n        if (!nextColumn) { return; }\n\n        let { headerRowIndex } = focusedHeader;\n\n        if (this.getHeaderRowType(headerRowIndex) !== HeaderRowType.FLOATING_FILTER) {\n            const columnsInPath: (Column | ColumnGroup)[] = [nextColumn];\n\n            while (nextColumn.getParent()) {\n                nextColumn = nextColumn.getParent();\n                columnsInPath.push(nextColumn);\n            }\n    \n            nextColumn = columnsInPath[columnsInPath.length - 1 - headerRowIndex];\n        }\n\n        const { column, headerRowIndex: indexToFocus } = this.getHeaderIndexToFocus(nextColumn, headerRowIndex)\n\n        return {\n            column,\n            headerRowIndex: indexToFocus\n        };\n    }\n\n    public getHeaderIndexToFocus(column: Column | ColumnGroup, currentIndex: number,): HeaderPosition {\n        let nextColumn: Column | undefined;\n\n        if (column instanceof ColumnGroup && this.isAnyChildSpanningHeaderHeight(column) && column.isPadding()) {\n            const targetColumn: ColumnGroup = column;\n            nextColumn = targetColumn.getLeafColumns()[0];\n            let col: Column | ColumnGroup = nextColumn;\n            while (col !== targetColumn) {\n                currentIndex++;\n                col = col.getParent();\n            }\n        }\n\n        return {\n            column: nextColumn || column,\n            headerRowIndex: currentIndex\n        }\n    }\n\n    private isAnyChildSpanningHeaderHeight(columnGroup: ColumnGroup): boolean {\n        if (!columnGroup) { return false; }\n        return columnGroup.getLeafColumns().some(col => col.isSpanHeaderHeight());\n    }\n\n    public getColumnVisibleParent(currentColumn: Column | ColumnGroup, currentIndex: number): HeaderFuturePosition {\n        const currentRowType = this.getHeaderRowType(currentIndex);\n        const isFloatingFilter = currentRowType === HeaderRowType.FLOATING_FILTER;\n        const isColumn = currentRowType === HeaderRowType.COLUMN;\n\n        let nextFocusColumn: Column | ColumnGroup = isFloatingFilter ? currentColumn : currentColumn.getParent();\n        let nextRow = currentIndex - 1;\n        let headerRowIndexWithoutSpan: number | undefined = nextRow;\n\n        if (isColumn && this.isAnyChildSpanningHeaderHeight((currentColumn as Column).getParent())) {\n            while (nextFocusColumn && (nextFocusColumn as ColumnGroup).isPadding()) {\n                nextFocusColumn = nextFocusColumn.getParent();\n                nextRow--;\n            }\n\n            headerRowIndexWithoutSpan = nextRow;\n            if (nextRow < 0) {\n                nextFocusColumn = currentColumn;\n                nextRow = currentIndex;\n                headerRowIndexWithoutSpan = undefined;\n            }\n        }\n\n        return { column: nextFocusColumn, headerRowIndex: nextRow, headerRowIndexWithoutSpan };\n    }\n\n    public getColumnVisibleChild(column: Column | ColumnGroup, currentIndex: number, direction: 'Before' | 'After' = 'After'): HeaderFuturePosition {\n        const currentRowType = this.getHeaderRowType(currentIndex);\n        let nextFocusColumn: Column | ColumnGroup | null = column;\n        let nextRow = currentIndex + 1;\n        let headerRowIndexWithoutSpan = nextRow;\n\n        if (currentRowType === HeaderRowType.COLUMN_GROUP) {\n            const leafColumns = (column as ColumnGroup).getDisplayedLeafColumns();\n            const leafColumn = direction === 'After' ? leafColumns[0] : last(leafColumns);\n            const columnsInTheWay: ColumnGroup[] = [];\n\n            let currentColumn: Column | ColumnGroup = leafColumn;\n            while (currentColumn.getParent() !== column) {\n                currentColumn = currentColumn.getParent();\n                columnsInTheWay.push(currentColumn);\n            }\n\n            nextFocusColumn = leafColumn;\n            if (leafColumn.isSpanHeaderHeight()) {\n                for (let i = columnsInTheWay.length - 1; i >= 0; i--) {\n                    const colToFocus = columnsInTheWay[i];\n                    if (!colToFocus.isPadding()) {\n                        nextFocusColumn = colToFocus;\n                        break;\n                    }\n                    nextRow++;\n                }\n            } else {\n                nextFocusColumn = last(columnsInTheWay);\n                if (!nextFocusColumn) {\n                    nextFocusColumn = leafColumn;\n                }\n            }\n        }\n\n        return { column: nextFocusColumn, headerRowIndex: nextRow, headerRowIndexWithoutSpan };\n    }\n\n    private getHeaderRowType(rowIndex: number): HeaderRowType | undefined {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        if (centerHeaderContainer) {\n            return centerHeaderContainer.getRowType(rowIndex);\n        }\n    }\n\n    public findColAtEdgeForHeaderRow(level: number, position: 'start' | 'end'): HeaderPosition | undefined {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        const column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];\n\n        if (!column) { return; }\n\n        const childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());\n        const type = childContainer.getRowType(level);\n\n        if (type == HeaderRowType.COLUMN_GROUP) {\n            const columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);\n            return {\n                headerRowIndex: level,\n                column: columnGroup!\n            };\n        }\n\n        return {\n            // if type==null, means the header level didn't exist\n            headerRowIndex: type == null ? -1 : level,\n            column\n        };\n    }\n}\n", "import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { Column } from \"../entities/column\";\nimport { Bean } from \"../context/context\";\nimport { deepCloneDefinition } from \"../utils/object\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\n\n@Bean('columnDefFactory')\nexport class ColumnDefFactory {\n\n    public buildColumnDefs(cols: Column[], rowGroupColumns: Column[], pivotColumns: Column[]): (ColDef | ColGroupDef)[] {\n\n        const res: (ColDef | ColGroupDef)[] = [];\n\n        const colGroupDefs: {[id: string]: ColGroupDef} = {};\n\n        cols.forEach(col => {\n            const colDef = this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n\n            let addToResult = true;\n\n            let childDef: ColDef | ColGroupDef = colDef;\n\n            let pointer = col.getOriginalParent();\n            let lastPointer: ProvidedColumnGroup | null = null;\n            while (pointer) {\n\n                let parentDef: ColGroupDef | null | undefined = null;\n\n                // we don't include padding groups, as the column groups provided\n                // by application didn't have these. the whole point of padding groups\n                // is to balance the column tree that the user provided.\n                if (pointer.isPadding()) {\n                    pointer = pointer.getOriginalParent();\n                    continue;\n                }\n\n                // if colDef for this group already exists, use it\n                const existingParentDef = colGroupDefs[pointer.getGroupId()];\n                if (existingParentDef) {\n                    existingParentDef.children.push(childDef);\n                    // if we added to result, it would be the second time we did it\n                    addToResult = false;\n                    // we don't want to continue up the tree, as it has already been\n                    // done for this group\n                    break;\n                }\n\n                parentDef = this.createDefFromGroup(pointer);\n\n                if (parentDef) {\n                    parentDef.children = [childDef];\n                    colGroupDefs[parentDef.groupId!] = parentDef;\n                    childDef = parentDef;\n                    pointer = pointer.getOriginalParent();\n                }\n\n                if (pointer != null && lastPointer === pointer) {\n                    addToResult = false;\n                    break;\n                }\n                // Ensure we don't get stuck in an infinite loop\n                lastPointer = pointer;\n            }\n\n            if (addToResult) {\n                res.push(childDef);\n            }\n        });\n\n        return res;\n    }\n\n    private createDefFromGroup(group: ProvidedColumnGroup): ColGroupDef | null | undefined {\n        const defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);\n\n        if (defCloned) {\n            defCloned.groupId = group.getGroupId();\n        }\n\n        return defCloned;\n    }\n\n    private createDefFromColumn(col: Column, rowGroupColumns: Column[], pivotColumns: Column[]): ColDef {\n        const colDefCloned = deepCloneDefinition(col.getColDef())!;\n\n        colDefCloned.colId = col.getColId();\n\n        colDefCloned.width = col.getActualWidth();\n        colDefCloned.rowGroup = col.isRowGroupActive();\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n        colDefCloned.pivot = col.isPivotActive();\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n        colDefCloned.hide = col.isVisible() ? undefined : true;\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n\n        return colDefCloned;\n    }\n\n}", "import { exists } from \"../../utils/generic\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { pushAll } from \"../../utils/array\";\nimport { GridOptionsService } from \"../../gridOptionsService\";\nimport { Autowired, Bean } from \"../../context/context\";\nimport { StylingService } from \"../../styling/stylingService\";\nimport { RowClassParams } from \"../../entities/gridOptions\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { ColumnPinnedType } from \"../../entities/column\";\n\nexport interface RowCssClassCalculatorParams {\n    rowNode: RowNode;\n    rowIsEven: boolean;\n    rowLevel: number;\n    fullWidthRow?: boolean;\n    firstRowOnPage: boolean;\n    lastRowOnPage: boolean;\n    printLayout: boolean;\n    expandable: boolean;\n\n    pinned: ColumnPinnedType;\n    extraCssClass?: string;\n    rowFocused?: boolean;\n    fadeRowIn?: boolean;\n}\n\n@Bean('rowCssClassCalculator')\nexport class RowCssClassCalculator {\n\n    @Autowired('stylingService') public stylingService: StylingService;\n    @Autowired('gridOptionsService') gridOptionsService: GridOptionsService;\n\n    public getInitialRowClasses(params: RowCssClassCalculatorParams): string[] {\n\n        const classes: string[] = [];\n\n        if (exists(params.extraCssClass)) {\n            classes.push(params.extraCssClass);\n        }\n\n        classes.push('ag-row');\n        classes.push(params.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');\n\n        if (params.fadeRowIn) {\n            classes.push('ag-opacity-zero');\n        }\n\n        classes.push(params.rowIsEven ? 'ag-row-even' : 'ag-row-odd');\n\n        if (params.rowNode.isRowPinned()) {\n            classes.push('ag-row-pinned');\n        }\n\n        if (params.rowNode.isSelected()) {\n            classes.push('ag-row-selected');\n        }\n\n        if (params.rowNode.footer) {\n            classes.push('ag-row-footer');\n        }\n\n        classes.push('ag-row-level-' + params.rowLevel);\n\n        if (params.rowNode.stub) {\n            classes.push('ag-row-loading');\n        }\n\n        if (params.fullWidthRow) {\n            classes.push('ag-full-width-row');\n        }\n\n        if (params.expandable) {\n            classes.push('ag-row-group');\n            classes.push(params.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');\n        }\n\n        if (params.rowNode.dragging) {\n            classes.push('ag-row-dragging');\n        }\n\n        pushAll(classes, this.processClassesFromGridOptions(params.rowNode));\n        pushAll(classes, this.preProcessRowClassRules(params.rowNode));\n\n        // we use absolute position unless we are doing print layout\n        classes.push(params.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');\n\n        if (params.firstRowOnPage) {\n            classes.push('ag-row-first');\n        }\n\n        if (params.lastRowOnPage) {\n            classes.push('ag-row-last');\n        }\n\n        if (params.fullWidthRow) {\n            if (params.pinned === 'left') {\n                classes.push('ag-cell-last-left-pinned');\n            }\n            if (params.pinned === 'right') {\n                classes.push('ag-cell-first-right-pinned');\n            }\n        }\n\n        return classes;\n    }\n\n    public processClassesFromGridOptions(rowNode: RowNode): string[] {\n        const res: string[] = [];\n\n        const process = (rowCls: string | string[] | undefined) => {\n            if (typeof rowCls === 'string') {\n                res.push(rowCls);\n            } else if (Array.isArray(rowCls)) {\n                rowCls.forEach(e => res.push(e));\n            }\n        };\n\n        // part 1 - rowClass\n        const rowClass = this.gridOptionsService.get('rowClass');\n        if (rowClass) {\n            if (typeof rowClass === 'function') {\n                console.warn('AG Grid: rowClass should not be a function, please use getRowClass instead');\n                return [];\n            }\n            process(rowClass);\n        }\n\n        // part 2 - rowClassFunc\n        const rowClassFunc = this.gridOptionsService.getCallback('getRowClass');\n\n        if (rowClassFunc) {\n            const params: WithoutGridCommon<RowClassParams> = {\n                data: rowNode.data,\n                node: rowNode,\n                rowIndex: rowNode.rowIndex!\n            };\n            const rowClassFuncResult = rowClassFunc(params);\n            process(rowClassFuncResult);\n        }\n\n        return res;\n    }\n\n    private preProcessRowClassRules(rowNode: RowNode): string[] {\n        const res: string[] = [];\n\n        this.processRowClassRules(rowNode, (className: string) => {\n                res.push(className);\n            },\n            (className: string) => {\n                // not catered for, if creating, no need\n                // to remove class as it was never there\n            }\n        );\n\n        return res;\n    }\n\n    public processRowClassRules(rowNode: RowNode, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void {\n        const rowClassParams: RowClassParams = this.gridOptionsService.addGridCommonParams({\n            data: rowNode.data,\n            node: rowNode,\n            rowIndex: rowNode.rowIndex!\n        });\n\n        this.stylingService.processClassRules(\n            undefined,\n            this.gridOptionsService.get('rowClassRules'),\n            rowClassParams,\n            onApplicableClass,\n            onNotApplicableClass\n        );\n    }\n\n    public calculateRowLevel(rowNode: RowNode): number {\n        if (rowNode.group) {\n            return rowNode.level;\n        }\n\n        // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item\n        return rowNode.parent ? (rowNode.parent.level + 1) : 0;\n    }\n\n}\n", "import { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ValueService } from \"../valueService/valueService\";\nimport { _ } from \"../utils\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { BeanStub } from \"../context/beanStub\";\n\nexport interface SortOption {\n    sort: 'asc' | 'desc';\n    column: Column;\n}\n\nexport interface SortedRowNode {\n    currentPos: number;\n    rowNode: RowNode;\n}\n\n// this logic is used by both SSRM and CSRM\n\n@Bean('rowNodeSorter')\nexport class RowNodeSorter extends BeanStub {\n\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private isAccentedSort: boolean;\n    private primaryColumnsSortGroups: boolean;\n\n    @PostConstruct\n    public init(): void {\n        this.isAccentedSort = this.gridOptionsService.get('accentedSort');\n        this.primaryColumnsSortGroups = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n\n        this.addManagedPropertyListener('accentedSort', (propChange) => this.isAccentedSort = propChange.currentValue);\n        this.addManagedPropertyListener('autoGroupColumnDef', () => this.primaryColumnsSortGroups = this.gridOptionsService.isColumnsSortingCoupledToGroup());\n    }\n\n    public doFullSort(rowNodes: RowNode[], sortOptions: SortOption[]): RowNode[] {\n\n        const mapper = (rowNode: RowNode, pos: number) => ({ currentPos: pos, rowNode: rowNode });\n        const sortedRowNodes: SortedRowNode[] = rowNodes.map(mapper);\n\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n\n        return sortedRowNodes.map(item => item.rowNode);\n    }\n\n    public compareRowNodes(sortOptions: SortOption[], sortedNodeA: SortedRowNode, sortedNodeB: SortedRowNode): number {\n        const nodeA: RowNode = sortedNodeA.rowNode;\n        const nodeB: RowNode = sortedNodeB.rowNode;\n\n        // Iterate columns, return the first that doesn't match\n        for (let i = 0, len = sortOptions.length; i < len; i++) {\n            const sortOption = sortOptions[i];\n            const isDescending = sortOption.sort === 'desc';\n\n            const valueA: any = this.getValue(nodeA, sortOption.column);\n            const valueB: any = this.getValue(nodeB, sortOption.column);\n\n            let comparatorResult: number;\n            const providedComparator = this.getComparator(sortOption, nodeA);\n            if (providedComparator) {\n                //if comparator provided, use it\n                comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);\n            } else {\n                //otherwise do our own comparison\n                comparatorResult = _.defaultComparator(valueA, valueB, this.isAccentedSort);\n            }\n\n            // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\n            // typically occurs when the comparator is used on a group row\n            const validResult = !isNaN(comparatorResult);\n\n            if (validResult && comparatorResult !== 0) {\n                return sortOption.sort === 'asc' ? comparatorResult : comparatorResult * -1;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    }\n\n    private getComparator(sortOption: SortOption, rowNode: RowNode):\n        ((valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isDescending: boolean) => number) | undefined {\n\n        const column = sortOption.column;\n\n        // comparator on col get preference over everything else\n        const comparatorOnCol = column.getColDef().comparator;\n        if (comparatorOnCol != null) {\n            return comparatorOnCol;\n        }\n\n        if (!column.getColDef().showRowGroup) { return; }\n\n        // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\n        const groupLeafField = !rowNode.group && column.getColDef().field;\n        if (!groupLeafField) { return; }\n\n        const primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);\n        if (!primaryColumn) { return; }\n\n        return primaryColumn.getColDef().comparator;\n    }\n\n    private getValue(node: RowNode, column: Column): any {\n        if (!this.primaryColumnsSortGroups) {\n            return this.valueService.getValue(column, node, false, false);\n        }\n\n        const isNodeGroupedAtLevel = node.rowGroupColumn === column;\n        if (isNodeGroupedAtLevel) {\n            const isGroupRows = this.gridOptionsService.isGroupUseEntireRow(this.columnModel.isPivotActive());\n            // because they're group rows, no display cols exist, so groupData never populated.\n            // instead delegate to getting value from leaf child.\n            if (isGroupRows) {\n                const leafChild = node.allLeafChildren?.[0];\n                if (leafChild) {\n                    return this.valueService.getValue(column, leafChild, false, false);\n                }\n                return undefined;\n            }\n\n            const displayCol = this.columnModel.getGroupDisplayColumnForGroup(column.getId());\n            if (!displayCol) {\n                return undefined;\n            }\n            return node.groupData?.[displayCol.getId()];\n        }\n\n        if (node.group && column.getColDef().showRowGroup) {\n            return undefined;\n        }\n\n        return this.valueService.getValue(column, node, false, false);\n    }\n}", "import { GridCtrl } from \"./gridComp/gridCtrl\";\nimport { Bean } from \"./context/context\";\nimport { GridBodyCtrl } from \"./gridBodyComp/gridBodyCtrl\";\nimport { RowContainerCtrl } from \"./gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { GridHeaderCtrl } from \"./headerRendering/gridHeaderCtrl\";\nimport { HeaderRowContainerCtrl } from \"./headerRendering/rowContainer/headerRowContainerCtrl\";\nimport { ColumnPinnedType } from \"./entities/column\";\nimport { FakeHScrollComp } from \"./gridBodyComp/fakeHScrollComp\";\nimport { FakeVScrollComp } from \"./gridBodyComp/fakeVScrollComp\";\n\n// for all controllers that are singletons, they can register here so other parts\n// of the application can access them.\n\ninterface ReadyParams {\n    gridCtrl: GridCtrl;\n    gridBodyCtrl: GridBodyCtrl;\n\n    centerRowContainerCtrl: RowContainerCtrl;\n    leftRowContainerCtrl: RowContainerCtrl;\n    rightRowContainerCtrl: RowContainerCtrl;\n\n    bottomCenterRowContainerCtrl: RowContainerCtrl;\n    bottomLeftRowContainerCtrl: RowContainerCtrl;\n    bottomRightRowContainerCtrl: RowContainerCtrl;\n\n    topCenterRowContainerCtrl: RowContainerCtrl;\n    topLeftRowContainerCtrl: RowContainerCtrl;\n    topRightRowContainerCtrl: RowContainerCtrl;\n\n    stickyTopCenterRowContainerCtrl: RowContainerCtrl;\n    stickyTopLeftRowContainerCtrl: RowContainerCtrl;\n    stickyTopRightRowContainerCtrl: RowContainerCtrl;\n\n    fakeHScrollComp: FakeHScrollComp;\n    fakeVScrollComp: FakeVScrollComp;\n    gridHeaderCtrl: GridHeaderCtrl;\n\n    centerHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    leftHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    rightHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n}\n\n@Bean(CtrlsService.NAME)\nexport class CtrlsService extends BeanStub {\n\n    public static readonly NAME = 'ctrlsService';\n\n    private gridCtrl: GridCtrl;\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n    private leftRowContainerCtrl: RowContainerCtrl;\n    private rightRowContainerCtrl: RowContainerCtrl;\n\n    private bottomCenterRowContainerCtrl: RowContainerCtrl;\n    private bottomLeftRowContainerCtrl: RowContainerCtrl;\n    private bottomRightRowContainerCtrl: RowContainerCtrl;\n\n    private topCenterRowContainerCtrl: RowContainerCtrl;\n    private topLeftRowContainerCtrl: RowContainerCtrl;\n    private topRightRowContainerCtrl: RowContainerCtrl;\n\n    private stickyTopCenterRowContainerCtrl: RowContainerCtrl;\n    private stickyTopLeftRowContainerCtrl: RowContainerCtrl;\n    private stickyTopRightRowContainerCtrl: RowContainerCtrl;\n\n    private centerHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    private leftHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    private rightHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n\n    private fakeHScrollComp: FakeHScrollComp;\n    private fakeVScrollComp: FakeVScrollComp;\n\n    private gridHeaderCtrl: GridHeaderCtrl;\n\n    private ready = false;\n    private readyCallbacks: ((p: ReadyParams) => void)[] = [];\n\n    private checkReady(): void {\n        this.ready =\n            this.gridCtrl != null\n            && this.gridBodyCtrl != null\n\n            && this.centerRowContainerCtrl != null\n            && this.leftRowContainerCtrl != null\n            && this.rightRowContainerCtrl != null\n\n            && this.bottomCenterRowContainerCtrl != null\n            && this.bottomLeftRowContainerCtrl != null\n            && this.bottomRightRowContainerCtrl != null\n\n            && this.topCenterRowContainerCtrl != null\n            && this.topLeftRowContainerCtrl != null\n            && this.topRightRowContainerCtrl != null\n\n            && this.stickyTopCenterRowContainerCtrl != null\n            && this.stickyTopLeftRowContainerCtrl != null\n            && this.stickyTopRightRowContainerCtrl != null\n\n            && this.centerHeaderRowContainerCtrl != null\n            && this.leftHeaderRowContainerCtrl != null\n            && this.rightHeaderRowContainerCtrl != null\n\n            && this.fakeHScrollComp != null\n            && this.fakeVScrollComp != null\n            && this.gridHeaderCtrl != null;\n\n        if (this.ready) {\n            const p = this.createReadyParams();\n            this.readyCallbacks.forEach(c => c(p));\n            this.readyCallbacks.length = 0;\n        }\n    }\n\n    public whenReady(callback: (p: ReadyParams) => void): void {\n        if (this.ready) {\n            callback(this.createReadyParams());\n        } else {\n            this.readyCallbacks.push(callback);\n        }\n    }\n\n    private createReadyParams(): ReadyParams {\n        return {\n            centerRowContainerCtrl: this.centerRowContainerCtrl,\n            leftRowContainerCtrl: this.leftRowContainerCtrl,\n            rightRowContainerCtrl: this.rightRowContainerCtrl,\n\n            bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,\n            bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,\n            bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,\n\n            topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,\n            topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,\n            topRightRowContainerCtrl: this.topRightRowContainerCtrl,\n\n            stickyTopCenterRowContainerCtrl: this.stickyTopCenterRowContainerCtrl,\n            stickyTopLeftRowContainerCtrl: this.stickyTopLeftRowContainerCtrl,\n            stickyTopRightRowContainerCtrl: this.stickyTopRightRowContainerCtrl,\n\n            centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,\n            leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,\n            rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,\n\n            fakeHScrollComp: this.fakeHScrollComp,\n            fakeVScrollComp: this.fakeVScrollComp,\n            gridBodyCtrl: this.gridBodyCtrl,\n            gridCtrl: this.gridCtrl,\n            gridHeaderCtrl: this.gridHeaderCtrl,\n        };\n    }\n\n    public registerFakeHScrollComp(comp: FakeHScrollComp): void {\n        this.fakeHScrollComp = comp;\n        this.checkReady();\n    }\n\n    public registerFakeVScrollComp(comp: FakeVScrollComp): void {\n        this.fakeVScrollComp = comp;\n        this.checkReady();\n    }\n\n    public registerGridHeaderCtrl(gridHeaderCtrl: GridHeaderCtrl): void {\n        this.gridHeaderCtrl = gridHeaderCtrl;\n        this.checkReady();\n    }\n\n    public registerCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.centerRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerLeftRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.leftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.rightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerTopCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.topCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerTopLeftRowContainerCon(ctrl: RowContainerCtrl): void {\n        this.topLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerTopRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.topRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerStickyTopCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.stickyTopCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerStickyTopLeftRowContainerCon(ctrl: RowContainerCtrl): void {\n        this.stickyTopLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerStickyTopRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.stickyTopRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerBottomCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.bottomCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerBottomLeftRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.bottomLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerBottomRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.bottomRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerHeaderContainer(ctrl: HeaderRowContainerCtrl, pinned: ColumnPinnedType): void {\n        switch (pinned) {\n            case 'left':\n                this.leftHeaderRowContainerCtrl = ctrl;\n                break;\n            case 'right':\n                this.rightHeaderRowContainerCtrl = ctrl;\n                break;\n            default: this.centerHeaderRowContainerCtrl = ctrl;\n                break;\n        }\n        this.checkReady();\n    }\n\n    public registerGridBodyCtrl(ctrl: GridBodyCtrl): void {\n        this.gridBodyCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerGridCtrl(ctrl: GridCtrl): void {\n        this.gridCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public getFakeHScrollComp(): FakeHScrollComp {\n        return this.fakeHScrollComp;\n    }\n\n    public getFakeVScrollComp(): FakeVScrollComp {\n        return this.fakeVScrollComp;\n    }\n\n    public getGridHeaderCtrl(): GridHeaderCtrl {\n        return this.gridHeaderCtrl;\n    }\n\n    public getGridCtrl(): GridCtrl {\n        return this.gridCtrl;\n    }\n\n    public getCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.centerRowContainerCtrl;\n    }\n\n    public getTopCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.topCenterRowContainerCtrl;\n    }\n\n    public getBottomCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.bottomCenterRowContainerCtrl;\n    }\n\n    public getStickyTopCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.stickyTopCenterRowContainerCtrl;\n    }\n\n    public getGridBodyCtrl(): GridBodyCtrl {\n        return this.gridBodyCtrl;\n    }\n\n    public getHeaderRowContainerCtrls(): HeaderRowContainerCtrl[] {\n        return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];\n    }\n\n    public getHeaderRowContainerCtrl(pinned?: ColumnPinnedType): HeaderRowContainerCtrl {\n        switch (pinned) {\n            case 'left': return this.leftHeaderRowContainerCtrl;\n            case 'right': return this.rightHeaderRowContainerCtrl;\n            default: return this.centerHeaderRowContainerCtrl;\n        }\n    }\n}", "import { BeanStub } from \"./context/beanStub\";\nimport { Bean, ControllerMeta } from \"./context/context\";\n\n@Bean('ctrlsFactory')\nexport class CtrlsFactory extends BeanStub {\n\n    private registry: {[name: string]: new () => Object} = {};\n\n    public register(meta: ControllerMeta): void {\n        this.registry[meta.controllerName] = meta.controllerClass;\n    }\n\n    public getInstance(name: string): any {\n        const ControllerClass = this.registry[name];\n\n        if (ControllerClass == null) { return undefined; }\n\n        return new ControllerClass();\n    }\n\n}", "import { Autowired } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Events } from \"../eventKeys\";\nimport { BodyScrollEvent } from \"../events\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { isInvisibleScrollbar, isIOSUserAgent, isMacOsUserAgent } from \"../utils/browser\";\nimport { isVisible } from \"../utils/dom\";\nimport { waitUntil } from \"../utils/function\";\nimport { Component } from \"../widgets/component\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\n\nexport abstract class AbstractFakeScrollComp extends Component {\n\n    @RefSelector('eViewport') protected readonly eViewport: HTMLElement;\n    @RefSelector('eContainer') protected readonly eContainer: HTMLElement;\n    @Autowired('scrollVisibleService') protected readonly scrollVisibleService: ScrollVisibleService;\n    @Autowired('ctrlsService') protected readonly ctrlsService: CtrlsService;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n\n    protected invisibleScrollbar: boolean;\n    protected hideTimeout: number | null = null;\n\n    protected abstract setScrollVisible(): void;\n    public abstract getScrollPosition(): number;\n    public abstract setScrollPosition(value: number): void;\n\n    constructor(template: string, private readonly direction: 'horizontal' | 'vertical') {\n        super(template);\n    }\n\n    protected postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.onScrollVisibilityChanged();\n        this.addOrRemoveCssClass('ag-apple-scrollbar', isMacOsUserAgent() || isIOSUserAgent());\n    }\n\n    protected initialiseInvisibleScrollbar(): void {\n        if (this.invisibleScrollbar !== undefined) { return; }\n\n        this.invisibleScrollbar = isInvisibleScrollbar();\n\n        if (this.invisibleScrollbar) {\n            this.hideAndShowInvisibleScrollAsNeeded();\n            this.addActiveListenerToggles();\n        }\n    }\n\n    protected addActiveListenerToggles(): void {\n        const activateEvents = ['mouseenter', 'mousedown', 'touchstart'];\n        const deactivateEvents = ['mouseleave', 'touchend'];\n        const eGui = this.getGui();\n\n        activateEvents.forEach(\n            eventName => this.addManagedListener(\n                eGui, eventName, () => this.addOrRemoveCssClass('ag-scrollbar-active', true)\n            )\n        );\n        deactivateEvents.forEach(\n            eventName => this.addManagedListener(\n                eGui, eventName, () => this.addOrRemoveCssClass('ag-scrollbar-active', false)\n            )\n        );\n    }\n\n    protected onScrollVisibilityChanged(): void {\n        // initialiseInvisibleScrollbar should only be called once, but the reason\n        // this can't be inside `setComp` or `PostConstruct` is the DOM might not\n        // be ready, so we call it until eventually, it gets calculated.\n        if (this.invisibleScrollbar === undefined) {\n            this.initialiseInvisibleScrollbar();\n        }\n\n        this.animationFrameService.requestAnimationFrame(() => this.setScrollVisible());\n    }\n\n    protected hideAndShowInvisibleScrollAsNeeded(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, (params: BodyScrollEvent) => {\n            if (params.direction === this.direction) {\n                if (this.hideTimeout !== null) {\n                    window.clearTimeout(this.hideTimeout);\n                    this.hideTimeout = null;\n                }\n                this.addOrRemoveCssClass('ag-scrollbar-scrolling', true);\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, () => {\n            this.hideTimeout = window.setTimeout(() => {\n                this.addOrRemoveCssClass('ag-scrollbar-scrolling', false);\n                this.hideTimeout = null;\n            }, 400);\n        });\n    }\n\n    protected  attemptSettingScrollPosition(value: number) {\n        const viewport = this.getViewport();\n        waitUntil(() => isVisible(viewport), () => this.setScrollPosition(value), 100);\n    }\n\n    protected getViewport(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public onScrollCallback(fn: () => void): void {\n        this.addManagedListener(this.getViewport(), 'scroll', fn);\n    }\n\n}", "import { Autowired, PostConstruct } from \"../context/context\";\nimport { AbstractFakeScrollComp } from \"./abstractFakeScrollComp\";\nimport { getScrollLeft, isVisible, setFixedHeight, setFixedWidth, setScrollLeft } from \"../utils/dom\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { Events } from \"../eventKeys\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport { CenterWidthFeature } from \"./centerWidthFeature\";\n\nexport class FakeHScrollComp extends AbstractFakeScrollComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-horizontal-left-spacer\" ref=\"eLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" ref=\"eRightSpacer\"></div>\n        </div>`;\n\n    @RefSelector('eLeftSpacer') private eLeftSpacer: HTMLElement;\n    @RefSelector('eRightSpacer') private eRightSpacer: HTMLElement;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n\n    private enableRtl: boolean;\n\n    constructor() {\n        super(FakeHScrollComp.TEMPLATE, 'horizontal');\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        // When doing printing, this changes whether cols are pinned or not\n        const spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedPropertyListener('domLayout', spacerWidthsListener);\n\n        this.ctrlsService.registerFakeHScrollComp(this);\n        this.createManagedBean(new CenterWidthFeature(width => this.eContainer.style.width = `${width}px`));\n\n        this.addManagedPropertyListeners(['suppressHorizontalScroll'], this.onScrollVisibilityChanged.bind(this));\n    }\n\n    protected initialiseInvisibleScrollbar(): void {\n        if (this.invisibleScrollbar !== undefined) { return; }\n\n        this.enableRtl = this.gridOptionsService.get('enableRtl');\n        super.initialiseInvisibleScrollbar();\n\n        if (this.invisibleScrollbar) {\n            this.refreshCompBottom();\n        }\n    }\n\n    private onPinnedRowDataChanged(): void {\n        this.refreshCompBottom();\n    }\n\n    private refreshCompBottom(): void {\n        if (!this.invisibleScrollbar) { return; }\n        const bottomPinnedHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();\n\n        this.getGui().style.bottom = `${bottomPinnedHeight}px`\n    }\n\n    protected onScrollVisibilityChanged(): void {\n        super.onScrollVisibilityChanged();\n        this.setFakeHScrollSpacerWidths();\n    }\n\n    private setFakeHScrollSpacerWidths(): void {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n\n        // we pad the right based on a) if cols are pinned to the right and\n        // b) if v scroll is showing on the right (normal position of scroll)\n        let rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();\n        const scrollOnRight = !this.enableRtl && vScrollShowing;\n        const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n\n        if (scrollOnRight) {\n            rightSpacing += scrollbarWidth;\n        }\n        setFixedWidth(this.eRightSpacer, rightSpacing);\n        this.eRightSpacer.classList.toggle('ag-scroller-corner', rightSpacing <= scrollbarWidth);\n\n        // we pad the left based on a) if cols are pinned to the left and\n        // b) if v scroll is showing on the left (happens in LTR layout only)\n        let leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();\n        const scrollOnLeft = this.enableRtl && vScrollShowing;\n\n        if (scrollOnLeft) {\n            leftSpacing += scrollbarWidth;\n        }\n\n        setFixedWidth(this.eLeftSpacer, leftSpacing);\n        this.eLeftSpacer.classList.toggle('ag-scroller-corner', leftSpacing <= scrollbarWidth);\n    }\n\n    protected setScrollVisible(): void {\n        const hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n        const isSuppressHorizontalScroll = this.gridOptionsService.get('suppressHorizontalScroll');\n        const scrollbarWidth = hScrollShowing ? (this.gridOptionsService.getScrollbarWidth() || 0) : 0;\n        const adjustedScrollbarWidth = (scrollbarWidth === 0 && invisibleScrollbar) ? 16 : scrollbarWidth;\n        const scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;\n\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        setFixedHeight(this.getGui(), scrollContainerSize);\n        setFixedHeight(this.eViewport, scrollContainerSize);\n        setFixedHeight(this.eContainer, scrollContainerSize);\n        this.setDisplayed(hScrollShowing, { skipAriaHidden: true });\n    }\n\n    public getScrollPosition(): number {\n        return getScrollLeft(this.getViewport(), this.enableRtl);\n    }\n\n    public setScrollPosition(value: number): void {\n        if (!isVisible(this.getViewport())) { this.attemptSettingScrollPosition(value); }\n        setScrollLeft(this.getViewport(), value, this.enableRtl);\n    }\n}", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\n\nimport { Events } from \"../eventKeys\";\nimport { ColumnModel } from \"../columns/columnModel\";\n\n@Bean('pinnedWidthService')\nexport class PinnedWidthService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private leftWidth: number;\n    private rightWidth: number;\n\n    @PostConstruct\n    private postConstruct(): void {\n        const listener = this.checkContainerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);\n        this.addManagedPropertyListener('domLayout', listener);\n    }\n\n    private checkContainerWidths() {\n\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n\n        const newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();\n        const newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();\n\n        if (newLeftWidth != this.leftWidth) {\n            this.leftWidth = newLeftWidth;\n            this.eventService.dispatchEvent({type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED});\n        }\n\n        if (newRightWidth != this.rightWidth) {\n            this.rightWidth = newRightWidth;\n            this.eventService.dispatchEvent({type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED});\n        }\n    }\n\n    public getPinnedRightWidth(): number {\n        return this.rightWidth;\n    }\n\n    public getPinnedLeftWidth(): number {\n        return this.leftWidth;\n    }\n}", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { RowGroupOpenedEvent } from \"../events\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\n\n@Bean('rowNodeEventThrottle')\nexport class RowNodeEventThrottle extends BeanStub {\n\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    private events: RowGroupOpenedEvent[] = [];\n\n    private dispatchExpandedDebounced: () => void;\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.rowModel.getType() == 'clientSide') {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n    }\n\n    // because the user can call rowNode.setExpanded() many times in one VM turn,\n    // we throttle the calls to ClientSideRowModel using animationFrameService. this means for 100\n    // row nodes getting expanded, we only update the CSRM once, and then we fire all events after\n    // CSRM has updated.\n    //\n    // if we did not do this, then the user could call setExpanded on 100+ rows, causing the grid\n    // to re-render 100+ times, which would be a performance lag.\n    //\n    // we use animationFrameService\n    // rather than _.debounce() so this will get done if anyone flushes the animationFrameService\n    // (eg user calls api.ensureRowVisible(), which in turn flushes ).\n    public dispatchExpanded(event: RowGroupOpenedEvent): void {\n\n        // if not using CSRM, we don't debounce. otherwise this breaks the SSRM.\n        if (this.clientSideRowModel == null) {\n            this.eventService.dispatchEvent(event);\n            return;\n        }\n\n        this.events.push(event);\n\n        const func = () => {\n            if (this.clientSideRowModel) {\n                this.clientSideRowModel.onRowGroupOpened();\n            }\n            this.events.forEach(e => this.eventService.dispatchEvent(e));\n            this.events = [];\n        };\n\n        if (this.dispatchExpandedDebounced == null) {\n            this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);\n        }\n\n        this.dispatchExpandedDebounced();\n    }\n}", "import { ColDef, ColGroupDef, ColumnMenuTab } from '../../entities/colDef';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { Deprecations, OptionsValidator, Validations } from \"../validationTypes\";\nimport { ColDefUtil } from '../../components/colDefUtil';\nimport { GridOptions } from '../../entities/gridOptions';\n\nconst COLUMN_DEFINITION_DEPRECATIONS: Deprecations<ColDef | ColGroupDef> = {\n    columnsMenuParams: { version: '31.1', message: 'Use `columnChooserParams` instead.' },\n    suppressMenu: { version: '31.1', message: 'Use `suppressHeaderMenuButton` instead.' },\n    suppressCellFlash: { version: '31.2', message: 'Use `enableCellChangeFlash={false}` in the ColDef' },\n    dndSource: { version: '31.2', message: 'This feature has been replaced by `Row Dragging to an External DropZone`.' },\n    dndSourceOnRowDrag: { version: '31.2', message: 'This feature has been replaced by `Row Dragging to an External DropZone`.' },\n};\n\nconst CSRM_REQUIRES_ROW_GROUP_MODULE = (_options: never, gridOptions: GridOptions) => {\n    if ((gridOptions.rowModelType ?? 'clientSide') === 'clientSide') {\n        return { module: ModuleNames.RowGroupingModule };\n    }\n    return null;\n};\n\nconst COLUMN_DEFINITION_VALIDATIONS: Validations<ColDef | ColGroupDef> = {\n    // supported on all row models, but need module for client side.\n    enableRowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    rowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    rowGroupIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    enablePivot: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    enableValue: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    pivot: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    pivotIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    aggFunc: CSRM_REQUIRES_ROW_GROUP_MODULE,\n\n    cellEditor: (options) => {\n        if (options.cellEditor === 'agRichSelect' || options.cellEditor === 'agRichSelectCellEditor') {\n            return { module: ModuleNames.RichSelectModule };\n        }\n        return null;\n    },\n\n    menuTabs: (options) => {\n        const enterpriseMenuTabs: ColumnMenuTab[] = ['columnsMenuTab', 'generalMenuTab'];\n        if (options.menuTabs?.some(tab => enterpriseMenuTabs.includes(tab))) {\n            return {\n                module: ModuleNames.MenuModule,\n            };\n        }\n        return null;\n    },\n    columnsMenuParams: {\n        module: [ModuleNames.MenuModule, ModuleNames.ColumnsToolPanelModule],\n    },\n    columnChooserParams: {\n        module: [ModuleNames.MenuModule, ModuleNames.ColumnsToolPanelModule],\n    },\n    \n    headerCheckboxSelection: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        dependencies: (_options, { rowSelection }) => (\n            rowSelection === 'multiple' ? null : 'headerCheckboxSelection is only supported with rowSelection=multiple'\n        )\n    },\n    headerCheckboxSelectionFilteredOnly: {\n        supportedRowModels: ['clientSide'],\n        dependencies: (_options, { rowSelection }) => (\n            rowSelection === 'multiple' ? null : 'headerCheckboxSelectionFilteredOnly is only supported with rowSelection=multiple'\n        ),\n    },\n    headerCheckboxSelectionCurrentPageOnly: {\n        supportedRowModels: ['clientSide'],\n        dependencies: (_options, { rowSelection }) => (\n            rowSelection === 'multiple' ? null : 'headerCheckboxSelectionCurrentPageOnly is only supported with rowSelection=multiple'\n        ),\n    },\n\n    children: () => COL_DEF_VALIDATORS,\n};\n\nexport const COL_DEF_VALIDATORS: OptionsValidator<ColDef | ColGroupDef> = {\n    objectName: 'colDef',\n    allProperties: ColDefUtil.ALL_PROPERTIES,\n    docsUrl: 'column-properties/',\n    deprecations: COLUMN_DEFINITION_DEPRECATIONS,\n    validations: COLUMN_DEFINITION_VALIDATIONS,\n};\n", "import { GridOptions } from \"../../entities/gridOptions\";\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { Deprecations, OptionsValidator, Validations } from \"../validationTypes\";\nimport { COL_DEF_VALIDATORS } from \"./colDefValidations\";\nimport { PropertyKeys } from \"../../propertyKeys\";\nimport { ComponentUtil } from \"../../components/componentUtil\";\n\n/**\n * Deprecations have been kept separately for ease of removing them in the future.\n * \n * If the property was simply renamed, use the `renamed` property. The value will be implicitly copied to the new property.\n */\nconst GRID_OPTION_DEPRECATIONS: Deprecations<GridOptions> = {\n\n    enableChartToolPanelsButton: { version: '29' },\n    functionsPassive: { version: '29.2' },\n    onColumnRowGroupChangeRequest: { version: '29.2' },\n    onColumnPivotChangeRequest: { version: '29.2' },\n    onColumnValueChangeRequest: { version: '29.2' },\n    onColumnAggFuncChangeRequest: { version: '29.2' },\n    \n    serverSideFilterAllLevels: { version: '30', message: 'All server-side group levels are now filtered by default. This can be toggled using `serverSideOnlyRefreshFilteredGroups`.' },\n    suppressAggAtRootLevel: { version: '30', message: 'The root level aggregation is now suppressed by default. This can be toggled using  `alwaysAggregateAtRootLevel`.' },\n    excludeHiddenColumnsFromQuickFilter: { version: '30', message: 'Hidden columns are now excluded from the Quick Filter by default. This can be toggled using `includeHiddenColumnsInQuickFilter`.' },\n    enterMovesDown: { version: '30', renamed: 'enterNavigatesVertically' },\n    enterMovesDownAfterEdit: { version: '30', renamed: 'enterNavigatesVerticallyAfterEdit' },\n    suppressParentsInRowNodes: { version: '30.2', message: 'Using suppressParentsInRowNodes is no longer recommended. To serialize nodes it is now recommended to instead remove the parent node reference before serialization.'},\n\n    advancedFilterModel: { version: '31', message: 'Use `initialState.filter.advancedFilterModel` instead.'},\n    suppressAsyncEvents: { version: '31', message: 'Events should be handled asynchronously.'},\n\n    cellFadeDelay: { version: '31.1', renamed: 'cellFadeDuration' },\n    cellFlashDelay: { version: '31.1', renamed: 'cellFlashDuration' },\n\n    suppressServerSideInfiniteScroll: { version: '31.1' },\n    serverSideSortOnServer: { version: '31.1' },\n    serverSideFilterOnServer: { version: '31.1' },\n\n    enableCellChangeFlash: { version: '31.2', message: 'Use `enableCellChangeFlash` in the `ColDef` or `defaultColDef` for all columns.'},\n};\n\n// Leave untyped. so it can be inferred.\nexport const GRID_OPTION_DEFAULTS = {\n    suppressContextMenu: false,\n    preventDefaultOnContextMenu: false,\n    allowContextMenuWithControlKey: false,\n    suppressMenuHide: false,\n    enableBrowserTooltips: false,\n    tooltipTrigger: 'hover',\n    tooltipShowDelay: 2000,\n    tooltipHideDelay: 10000,\n    tooltipMouseTrack: false,\n    tooltipShowMode: 'standard',\n    tooltipInteraction: false,\n    copyHeadersToClipboard: false,\n    copyGroupHeadersToClipboard: false,\n    clipboardDelimiter: '\\t',\n    suppressCopyRowsToClipboard: false,\n    suppressCopySingleCellRanges: false,\n    suppressLastEmptyLineOnPaste: false,\n    suppressClipboardPaste: false,\n    suppressClipboardApi: false,\n    suppressCutToClipboard: false,\n    maintainColumnOrder: false,\n    suppressFieldDotNotation: false,\n    allowDragFromColumnsToolPanel: false,\n    suppressMovableColumns: false,\n    suppressColumnMoveAnimation: false,\n    suppressDragLeaveHidesColumns: false,\n    suppressRowGroupHidesColumns: false,\n    suppressAutoSize: false,\n    autoSizePadding: 20,\n    skipHeaderOnAutoSize: false,\n    singleClickEdit: false,\n    suppressClickEdit: false,\n    readOnlyEdit: false,\n    stopEditingWhenCellsLoseFocus: false,\n    enterNavigatesVertically: false,\n    enterNavigatesVerticallyAfterEdit: false,\n    enableCellEditingOnBackspace: false,\n    undoRedoCellEditing: false,\n    undoRedoCellEditingLimit: 10,\n    suppressCsvExport: false,\n    suppressExcelExport: false,\n    cacheQuickFilter: false,\n    includeHiddenColumnsInQuickFilter: false,\n    excludeChildrenWhenTreeDataFiltering: false,\n    enableAdvancedFilter: false,\n    includeHiddenColumnsInAdvancedFilter: false,\n    enableCharts: false,\n    suppressChartToolPanelsButton: false,\n    masterDetail: false,\n    keepDetailRows: false,\n    keepDetailRowsCount: 10,\n    detailRowAutoHeight: false,\n    tabIndex: 0,\n    rowBuffer: 10,\n    valueCache: false,\n    valueCacheNeverExpires: false,\n    enableCellExpressions: false,\n    suppressTouch: false,\n    suppressFocusAfterRefresh: false,\n    suppressAsyncEvents: false,\n    suppressBrowserResizeObserver: false,\n    suppressPropertyNamesCheck: false,\n    suppressChangeDetection: false,\n    debug: false,\n    suppressLoadingOverlay: false,\n    suppressNoRowsOverlay: false,\n    pagination: false,\n    paginationPageSize: 100,\n    paginationPageSizeSelector: true,\n    paginationAutoPageSize: false,\n    paginateChildRows: false,\n    suppressPaginationPanel: false,\n    pivotMode: false,\n    pivotPanelShow: 'never',\n    pivotDefaultExpanded: 0,\n    pivotSuppressAutoColumn: false,\n    suppressExpandablePivotGroups: false,\n    functionsReadOnly: false,\n    suppressAggFuncInHeader: false,\n    alwaysAggregateAtRootLevel: false,\n    aggregateOnlyChangedColumns: false,\n    suppressAggFilteredOnly: false,\n    removePivotHeaderRowWhenSingleValueColumn: false,\n    animateRows: true,\n    enableCellChangeFlash: false,\n    cellFlashDelay: 500,\n    cellFlashDuration: 500,\n    cellFadeDelay: 1000,\n    cellFadeDuration: 1000,\n    allowShowChangeAfterFilter: false,\n    domLayout: 'normal',\n    ensureDomOrder: false,\n    enableRtl: false,\n    suppressColumnVirtualisation: false,\n    suppressMaxRenderedRowRestriction: false,\n    suppressRowVirtualisation: false,\n    rowDragManaged: false,\n    suppressRowDrag: false,\n    suppressMoveWhenRowDragging: false,\n    rowDragEntireRow: false,\n    rowDragMultiRow: false,\n    embedFullWidthRows: false,\n    groupDisplayType: 'singleColumn',\n    groupDefaultExpanded: 0,\n    groupMaintainOrder: false,\n    groupSelectsChildren: false,\n    groupIncludeTotalFooter: false,\n    groupSuppressBlankHeader: false,\n    groupSelectsFiltered: false,\n    showOpenedGroup: false,\n    groupRemoveSingleChildren: false,\n    groupRemoveLowestSingleChildren: false,\n    groupHideOpenParents: false,\n    groupAllowUnbalanced: false,\n    rowGroupPanelShow: 'never',\n    suppressMakeColumnVisibleAfterUnGroup: false,\n    treeData: false,\n    rowGroupPanelSuppressSort: false,\n    suppressGroupRowsSticky: false,\n    rowModelType: 'clientSide',\n    asyncTransactionWaitMillis: 50,\n    suppressModelUpdateAfterUpdateTransaction: false,\n    cacheOverflowSize: 1,\n    infiniteInitialRowCount: 1,\n    serverSideInitialRowCount: 1,\n    suppressServerSideInfiniteScroll: false,\n    cacheBlockSize: 100,\n    maxBlocksInCache: -1,\n    maxConcurrentDatasourceRequests: 2,\n    blockLoadDebounceMillis: 0,\n    purgeClosedRowNodes: false,\n    serverSideSortAllLevels: false,\n    serverSideOnlyRefreshFilteredGroups: false,\n    serverSideSortOnServer: false,\n    serverSideFilterOnServer: false,\n    serverSidePivotResultFieldSeparator: '_',\n    viewportRowModelPageSize: 5,\n    viewportRowModelBufferSize: 5,\n    alwaysShowHorizontalScroll: false,\n    alwaysShowVerticalScroll: false,\n    debounceVerticalScrollbar: false,\n    suppressHorizontalScroll: false,\n    suppressScrollOnNewData: false,\n    suppressScrollWhenPopupsAreOpen: false,\n    suppressAnimationFrame: false,\n    suppressMiddleClickScrolls: false,\n    suppressPreventDefaultOnMouseWheel: false,\n    rowMultiSelectWithClick: false,\n    suppressRowDeselection: false,\n    suppressRowClickSelection: false,\n    suppressCellFocus: false,\n    suppressHeaderFocus: false,\n    suppressMultiRangeSelection: false,\n    enableCellTextSelection: false,\n    enableRangeSelection: false,\n    enableRangeHandle: false,\n    enableFillHandle: false,\n    fillHandleDirection: 'xy',\n    suppressClearOnFillReduction: false,\n    accentedSort: false,\n    unSortIcon: false,\n    suppressMultiSort: false,\n    alwaysMultiSort: false,\n    suppressMaintainUnsortedOrder: false,\n    suppressRowHoverHighlight: false,\n    suppressRowTransform: false,\n    columnHoverHighlight: false,\n    deltaSort: false,\n    enableGroupEdit: false,\n    suppressGroupMaintainValueType: false,\n    functionsPassive: false,\n    groupLockGroupColumns: 0,\n    serverSideEnableClientSideSort: false,\n    pivotMaxGeneratedColumns: -1,\n} as const;\n/**\n * Used simply to type check the default grid options.\n * Done here to allow inference of the above type, for gridOptionsService.get to infer where defaults exist.\n */\nconst GRID_OPTIONS_DEFAULT_ASSERTION: GridOptions = GRID_OPTION_DEFAULTS;\n\n/**\n * Validation rules for gridOptions\n */\nconst GRID_OPTION_VALIDATIONS: Validations<GridOptions> = {\n    sideBar: { module: ModuleNames.SideBarModule },\n    statusBar: { module: ModuleNames.StatusBarModule },\n    enableCharts: { module: ModuleNames.GridChartsModule },\n    getMainMenuItems: { module: ModuleNames.MenuModule },\n    getContextMenuItems: { module: ModuleNames.MenuModule },\n    allowContextMenuWithControlKey: { module: ModuleNames.MenuModule },\n    enableAdvancedFilter: { module: ModuleNames.AdvancedFilterModule },\n    treeData: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        module: ModuleNames.RowGroupingModule,\n        dependencies: (options) => {\n            const rowModel = options.rowModelType ?? 'clientSide';\n            switch (rowModel) {\n                case 'clientSide':\n                    const csrmWarning = `treeData requires 'getDataPath' in the ${rowModel} row model.`;\n                    return options.getDataPath ? null : csrmWarning;\n                case 'serverSide':\n                    const ssrmWarning = `treeData requires 'isServerSideGroup' and 'getServerSideGroupKey' in the ${rowModel} row model.`;\n                    return options.isServerSideGroup && options.getServerSideGroupKey ? null : ssrmWarning;\n            }\n            return null;\n        },\n    },\n    masterDetail: { module: ModuleNames.MasterDetailModule },\n\n    enableRangeSelection: { module: ModuleNames.RangeSelectionModule },\n    enableRangeHandle: {\n        dependencies: {\n            enableRangeSelection: [true],\n        }\n    },\n    enableFillHandle: {\n        dependencies: {\n            enableRangeSelection: [true],\n        }\n    },\n\n    groupDefaultExpanded: {\n        supportedRowModels: ['clientSide'],\n    },\n    groupIncludeFooter: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        dependencies: (options) => {\n            const rowModel = options.rowModelType ?? 'clientSide';\n            switch (rowModel) {\n                case 'clientSide':\n                    return null;\n                case 'serverSide':\n                    const warning = 'groupIncludeFooter is not supported alongside suppressServerSideInfiniteScroll';\n                    return options.suppressServerSideInfiniteScroll ? warning : null;\n            }\n            return null;\n        },\n    },\n    groupIncludeTotalFooter: {\n        supportedRowModels: ['clientSide'],\n    },\n    groupRemoveSingleChildren: {\n        dependencies: {\n            groupHideOpenParents: [undefined, false],\n            groupRemoveLowestSingleChildren: [undefined, false],\n        }\n    },\n    groupRemoveLowestSingleChildren: {\n        dependencies: {\n            groupHideOpenParents: [undefined, false],\n            groupRemoveSingleChildren: [undefined, false],\n        }\n    },\n    groupSelectsChildren: {\n        dependencies: {\n            rowSelection: ['multiple'],\n        }\n    },\n    suppressParentsInRowNodes: {\n        dependencies: {\n            groupSelectsChildren: [undefined, false],\n        },\n    },\n\n    viewportDatasource: {\n        supportedRowModels: ['viewport'],\n        module: ModuleNames.ViewportRowModelModule,\n    },\n    serverSideDatasource: {\n        supportedRowModels: ['serverSide'],\n        module: ModuleNames.ServerSideRowModelModule,\n    },\n    cacheBlockSize: {\n        supportedRowModels: ['serverSide', 'infinite'],\n    },\n    datasource: {\n        supportedRowModels: ['infinite'],\n        module: ModuleNames.InfiniteRowModelModule,\n    },\n    rowData: {\n        supportedRowModels: ['clientSide'],\n        module: ModuleNames.ClientSideRowModelModule,\n    },\n\n    columnDefs: () => COL_DEF_VALIDATORS,\n    defaultColDef: () => COL_DEF_VALIDATORS,\n    defaultColGroupDef: () => COL_DEF_VALIDATORS,\n    autoGroupColumnDef: () => COL_DEF_VALIDATORS,\n};\n\nexport const GRID_OPTIONS_VALIDATORS: OptionsValidator<GridOptions> = {\n    objectName: 'gridOptions',\n    allProperties: [\n        ...PropertyKeys.ALL_PROPERTIES,\n        ...ComponentUtil.EVENT_CALLBACKS,\n    ],\n    propertyExceptions: ['api', 'columnApi'],\n    docsUrl: 'grid-options/',\n    deprecations: GRID_OPTION_DEPRECATIONS,\n    validations: GRID_OPTION_VALIDATIONS,\n};\n", "import { ColumnApi } from \"./columns/columnApi\";\nimport { ComponentUtil } from \"./components/componentUtil\";\nimport { Autowired, Bean, PostConstruct, PreDestroy } from \"./context/context\";\nimport { DomLayoutType, GridOptions } from \"./entities/gridOptions\";\nimport { GetGroupAggFilteringParams, GetGroupIncludeFooterParams, RowHeightParams } from \"./interfaces/iCallbackParams\";\nimport { Environment } from \"./environment\";\nimport { AgEvent, ALWAYS_SYNC_GLOBAL_EVENTS, Events } from \"./events\";\nimport { EventService } from \"./eventService\";\nimport { GridApi } from \"./gridApi\";\nimport { AgGridCommon, WithoutGridCommon } from \"./interfaces/iCommon\";\nimport { RowModelType } from \"./interfaces/iRowModel\";\nimport { AnyGridOptions, INITIAL_GRID_OPTION_KEYS, PropertyKeys } from \"./propertyKeys\";\nimport { warnOnce } from \"./utils/function\";\nimport { exists, missing } from \"./utils/generic\";\nimport { getScrollbarWidth } from './utils/browser';\nimport { IRowNode } from \"./interfaces/iRowNode\";\nimport { GRID_OPTION_DEFAULTS } from \"./validation/rules/gridOptionsValidations\";\nimport { ValidationService } from \"./validation/validationService\";\nimport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\n\ntype GetKeys<T, U> = {\n    [K in keyof T]: T[K] extends U | undefined ? K : never\n}[keyof T];\n\n/**\n * Get all the GridOption properties that strictly contain the provided type.\n * Does not include `any` properties.\n */\nexport type KeysOfType<U> = Exclude<GetKeys<GridOptions, U>, AnyGridOptions>;\n\ntype BooleanProps = Exclude<KeysOfType<boolean>, AnyGridOptions>;\ntype NoArgFuncs = KeysOfType<() => any>;\ntype AnyArgFuncs = KeysOfType<(arg: 'NO_MATCH') => any>;\ntype CallbackProps = Exclude<KeysOfType<(params: AgGridCommon<any, any>) => any>, NoArgFuncs | AnyArgFuncs>;\n\n\ntype ExtractParamsFromCallback<TCallback> = TCallback extends (params: infer PA) => any ? PA : never;\ntype ExtractReturnTypeFromCallback<TCallback> = TCallback extends (params: AgGridCommon<any, any>) => infer RT ? RT : never;\ntype WrappedCallback<K extends CallbackProps, OriginalCallback extends GridOptions[K]> = undefined | ((params: WithoutGridCommon<ExtractParamsFromCallback<OriginalCallback>>) => ExtractReturnTypeFromCallback<OriginalCallback>)\nexport interface PropertyChangeSet {\n    /** Unique id which can be used to link changes of multiple properties that were updated together.\n     * i.e a user updated multiple properties at the same time.\n     */\n    id: number;\n    /** All the properties that have been updated in this change set */\n    properties: (keyof GridOptions)[];\n}\nexport type PropertyChangedSource = 'api' | 'gridOptionsUpdated';\nexport interface PropertyChangedEvent extends AgEvent {\n    type: 'gridPropertyChanged',\n    changeSet: PropertyChangeSet | undefined;\n    source: PropertyChangedSource\n}\n\n/**\n * For boolean properties the changed value will have been coerced to a boolean, so we do not want the type to include the undefined value.\n */\ntype GridOptionsOrBooleanCoercedValue<K extends keyof GridOptions> = K extends BooleanProps ? boolean : GridOptions[K];\n\nexport interface PropertyValueChangedEvent<K extends keyof GridOptions> extends AgEvent {\n    type: K;\n    changeSet: PropertyChangeSet | undefined;\n    currentValue: GridOptionsOrBooleanCoercedValue<K>;\n    previousValue: GridOptionsOrBooleanCoercedValue<K>;\n    source: PropertyChangedSource\n}\n\nexport type PropertyChangedListener = (event: PropertyChangedEvent) => void\nexport type PropertyValueChangedListener<K extends keyof GridOptions> = (event: PropertyValueChangedEvent<K>) => void\n\n@Bean('gridOptionsService')\nexport class GridOptionsService {\n\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('eventService') private readonly eventService: EventService;\n    @Autowired('environment') private readonly environment: Environment;\n    @Autowired('frameworkOverrides') frameworkOverrides: IFrameworkOverrides;\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n    @Autowired('validationService') private validationService: ValidationService;\n\n    private destroyed = false;\n    // we store this locally, so we are not calling getScrollWidth() multiple times as it's an expensive operation\n    private scrollbarWidth: number;\n    private domDataKey = '__AG_' + Math.random().toString();\n\n    // Store locally to avoid retrieving many times as these are requested for every callback\n    @Autowired('gridApi') private readonly api: GridApi;\n    /** @deprecated v31 ColumnApi has been deprecated and all methods moved to the api. */\n    private columnApi: ColumnApi;\n    // This is quicker then having code call gridOptionsService.get('context')\n    private get context() {\n        return this.gridOptions['context'];\n    }\n\n    private propertyEventService: EventService = new EventService();\n\n\n    @PostConstruct\n    public init(): void {\n        this.columnApi = new ColumnApi(this.api);\n        const async = !this.get('suppressAsyncEvents');\n        this.eventService.addGlobalListener(this.globalEventHandlerFactory().bind(this), async);\n        this.eventService.addGlobalListener(this.globalEventHandlerFactory(true).bind(this), false);\n\n        // Ensure the propertyEventService has framework overrides set so that it can fire events outside of angular\n        this.propertyEventService.setFrameworkOverrides(this.frameworkOverrides);\n        // sets an initial calculation for the scrollbar width\n        this.getScrollbarWidth();\n\n    }\n    @PreDestroy\n    private destroy(): void {\n        this.destroyed = true;\n        this.columnApi = undefined as any;\n    }\n\n    /**\n     * Get the raw value of the GridOptions property provided.\n     * @param property\n     */\n    public get<K extends keyof GridOptions>(property: K): K extends keyof typeof GRID_OPTION_DEFAULTS ? NonNullable<GridOptions[K]> : GridOptions[K] {\n        return this.gridOptions[property] ?? (GRID_OPTION_DEFAULTS[property as keyof typeof GRID_OPTION_DEFAULTS] as GridOptions[K]);\n    }\n\n    /**\n     * Get the GridOption callback but wrapped so that the common params of api,columnApi and context are automatically applied to the params.\n     * @param property GridOption callback properties based on the fact that this property has a callback with params extending AgGridCommon\n     */\n    public getCallback<K extends CallbackProps>(property: K): WrappedCallback<K, GridOptions[K]> {\n        return this.mergeGridCommonParams(this.gridOptions[property]);\n    }\n\n    /**\n     * Returns `true` if a value has been specified for this GridOption.\n     * @param property GridOption property\n     */\n    public exists(property: keyof GridOptions): boolean {\n        return exists(this.gridOptions[property]);\n    }\n\n    /**\n    * Wrap the user callback and attach the api, columnApi and context to the params object on the way through.\n    * @param callback User provided callback\n    * @returns Wrapped callback where the params object not require api, columnApi and context\n    */\n    private mergeGridCommonParams<P extends AgGridCommon<any, any>, T>(callback: ((params: P) => T) | undefined):\n        ((params: WithoutGridCommon<P>) => T) | undefined {\n        if (callback) {\n            const wrapped = (callbackParams: WithoutGridCommon<P>): T => {\n                const mergedParams = callbackParams as P;\n                mergedParams.api = this.api;\n                mergedParams.columnApi = this.columnApi;\n                mergedParams.context = this.context;\n\n                return callback(mergedParams);\n            };\n            return wrapped;\n        }\n        return callback;\n    }\n    \n    /**\n     * Handles value coercion including validation of ranges etc. If value is invalid, undefined is set, allowing default to be used.\n     */\n    private static PROPERTY_COERCIONS: Map<keyof GridOptions, ((value: any) => GridOptions[keyof GridOptions])> = new Map([\n        ...PropertyKeys.BOOLEAN_PROPERTIES.map(key => [key as keyof GridOptions, GridOptionsService.toBoolean]),\n        ...PropertyKeys.NUMBER_PROPERTIES.map(key => [key as keyof GridOptions, GridOptionsService.toNumber]),\n        ['groupAggFiltering', (val: any) => typeof val === 'function' ? val : GridOptionsService.toBoolean(val)],\n        ['pageSize', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['autoSizePadding', GridOptionsService.toConstrainedNum(0, Number.MAX_VALUE)],\n        ['keepDetailRowsCount', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['rowBuffer', GridOptionsService.toConstrainedNum(0, Number.MAX_VALUE)],\n        ['infiniteInitialRowCount', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['cacheOverflowSize', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['cacheBlockSize', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['serverSideInitialRowCount', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['viewportRowModelPageSize', GridOptionsService.toConstrainedNum(1, Number.MAX_VALUE)],\n        ['viewportRowModelBufferSize', GridOptionsService.toConstrainedNum(0, Number.MAX_VALUE)],\n    ] as [keyof GridOptions, ((value: any) => GridOptions[keyof GridOptions])][]);\n\n    private static toBoolean(value: any): boolean {\n        if (typeof value === 'boolean') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            // for boolean, compare to empty String to allow attributes appearing with\n            // no value to be treated as 'true'\n            return value.toUpperCase() === 'TRUE' || value == '';\n        }\n\n        return false;\n    }\n\n    private static toNumber(value: any): number | undefined {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            const parsed = parseInt(value);\n            if (isNaN(parsed)) {\n                return undefined;\n            }\n            return parsed;\n        }\n        return undefined;\n    }\n\n    private static toConstrainedNum(min: number, max: number): (value: any) => number | undefined {\n        return (value: any) => {\n            const num = GridOptionsService.toNumber(value);\n            if (num == null || num < min || num > max) {\n                return undefined; // return undefined if outside bounds, this will then be coerced to the default value.\n            }\n            return num;\n        }\n    }\n\n    private static getCoercedValue<K extends keyof GridOptions>(key: K, value: GridOptions[K]): GridOptions[K] {\n        const coerceFunc = GridOptionsService.PROPERTY_COERCIONS.get(key);\n\n        if (!coerceFunc) {\n            return value;\n        }\n        \n        return coerceFunc(value);\n    }\n\n    public static getCoercedGridOptions(gridOptions: GridOptions): GridOptions {\n        const newGo: GridOptions = {};\n        Object.entries(gridOptions).forEach(([key, value]: [keyof GridOptions, any]) => {\n            const coercedValue = GridOptionsService.getCoercedValue(key, value);\n            newGo[key] = coercedValue;\n        });\n        return newGo;\n    }\n\n    private static changeSetId = 0;\n    public updateGridOptions({ options, source = 'api' }: { options: Partial<GridOptions>, source?: PropertyChangedSource }): void {\n        const changeSet: PropertyChangeSet = { id: GridOptionsService.changeSetId++, properties: [] };\n        // all events are fired after grid options has finished updating.\n        const events: PropertyValueChangedEvent<keyof GridOptions>[] = [];\n        Object.entries(options).forEach(([key, value]) => {\n            if (source === 'api' && (INITIAL_GRID_OPTION_KEYS as any)[key]) {\n                warnOnce(`${key} is an initial property and cannot be updated.`)\n            }\n            const coercedValue = GridOptionsService.getCoercedValue(key as keyof GridOptions, value);\n            const shouldForce = (typeof coercedValue) === 'object' && source === 'api'; // force objects as they could have been mutated.\n\n            const previousValue = this.gridOptions[key as keyof GridOptions];\n            if (shouldForce || previousValue !== coercedValue) {\n                this.gridOptions[key as keyof GridOptions] = coercedValue;\n                const event: PropertyValueChangedEvent<keyof GridOptions> = {\n                    type: key as keyof GridOptions,\n                    currentValue: coercedValue,\n                    previousValue,\n                    changeSet,\n                    source\n                };\n                events.push(event);\n            }\n        });\n\n        this.validationService.processGridOptions(this.gridOptions);\n\n        // changeSet should just include the properties that have changed.\n        changeSet.properties = events.map(event => event.type);\n\n        events.forEach(event => {\n            if (this.gridOptions.debug) {\n                console.log(`AG Grid: Updated property ${event.type} from `, event.previousValue, ' to  ', event.currentValue);\n            }\n            this.propertyEventService.dispatchEvent(event);\n        });\n    }\n\n    addEventListener<K extends keyof GridOptions>(key: K, listener: PropertyValueChangedListener<K>): void {\n        this.propertyEventService.addEventListener(key, listener as any);\n    }\n    removeEventListener<K extends keyof GridOptions>(key: K, listener: PropertyValueChangedListener<K>): void {\n        this.propertyEventService.removeEventListener(key, listener as any);\n    }\n\n    // responsible for calling the onXXX functions on gridOptions\n    // It forces events defined in GridOptionsService.alwaysSyncGlobalEvents to be fired synchronously.\n    // This is required for events such as GridPreDestroyed.\n    // Other events can be fired asynchronously or synchronously depending on config.\n    globalEventHandlerFactory = (restrictToSyncOnly?: boolean) => {\n        return (eventName: string, event?: any) => {\n            // prevent events from being fired _after_ the grid has been destroyed\n            if (this.destroyed) {\n                return;\n            }\n\n            const alwaysSync = ALWAYS_SYNC_GLOBAL_EVENTS.has(eventName);\n            if ((alwaysSync && !restrictToSyncOnly) || (!alwaysSync && restrictToSyncOnly)) {\n                return;\n            }\n\n            const eventHandlerName = ComponentUtil.getCallbackForEvent(eventName);\n            const eventHandler = (this.gridOptions as any)[eventHandlerName];\n            if (typeof eventHandler === 'function') {\n                this.frameworkOverrides.wrapOutgoing(() => {\n                    eventHandler(event);\n                })\n            }\n        }\n    };\n\n    // *************** Helper methods ************************** //\n    // Methods to share common GridOptions related logic that goes above accessing a single property\n\n\n    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero\n    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we\n    // allow the user to provide the scroll width before we work it out.\n    public getScrollbarWidth() {\n        if (this.scrollbarWidth == null) {\n            const useGridOptions = typeof this.gridOptions.scrollbarWidth === 'number' && this.gridOptions.scrollbarWidth >= 0;\n            const scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();\n\n            if (scrollbarWidth != null) {\n                this.scrollbarWidth = scrollbarWidth;\n\n                this.eventService.dispatchEvent({\n                    type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED\n                });\n            }\n        }\n\n        return this.scrollbarWidth;\n    }\n\n    public isRowModelType(rowModelType: RowModelType): boolean {\n        return this.gridOptions.rowModelType === rowModelType ||\n            (rowModelType === 'clientSide' && missing(this.gridOptions.rowModelType));\n    }\n\n    public isDomLayout(domLayout: DomLayoutType) {\n        const gridLayout = this.gridOptions.domLayout ?? 'normal';\n        return gridLayout === domLayout;\n    }\n\n    public isRowSelection() {\n        return this.gridOptions.rowSelection === 'single' || this.gridOptions.rowSelection === 'multiple';\n    }\n\n    public useAsyncEvents() {\n        return !this.get('suppressAsyncEvents');\n    }\n\n    public isGetRowHeightFunction(): boolean {\n        return typeof this.gridOptions.getRowHeight === 'function';\n    }\n\n    public getRowHeightForNode(rowNode: IRowNode, allowEstimate = false, defaultRowHeight?: number): { height: number; estimated: boolean; } {\n        if (defaultRowHeight == null) {\n            defaultRowHeight = this.environment.getDefaultRowHeight();\n        }\n\n        // check the function first, in case use set both function and\n        // number, when using virtual pagination then function can be\n        // used for pinned rows and the number for the body rows.\n\n        if (this.isGetRowHeightFunction()) {\n            if (allowEstimate) {\n                return { height: defaultRowHeight, estimated: true };\n            }\n\n            const params: WithoutGridCommon<RowHeightParams> = {\n                node: rowNode,\n                data: rowNode.data\n            };\n\n            const height = this.getCallback('getRowHeight')!(params);\n\n            if (this.isNumeric(height)) {\n                if (height === 0) {\n                    warnOnce('The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.');\n                }\n                return { height: Math.max(1, height), estimated: false };\n            }\n        }\n\n        if (rowNode.detail && this.get('masterDetail')) {\n            return this.getMasterDetailRowHeight();\n        }\n\n        const rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;\n\n        return { height: rowHeight, estimated: false };\n    }\n\n    private getMasterDetailRowHeight(): { height: number, estimated: boolean } {\n        // if autoHeight, we want the height to grow to the new height starting at 1, as otherwise a flicker would happen,\n        // as the detail goes to the default (eg 200px) and then immediately shrink up/down to the new measured height\n        // (due to auto height) which looks bad, especially if doing row animation.\n        if (this.get('detailRowAutoHeight')) {\n            return { height: 1, estimated: false };\n        }\n\n        if (this.isNumeric(this.gridOptions.detailRowHeight)) {\n            return { height: this.gridOptions.detailRowHeight, estimated: false };\n        }\n\n        return { height: 300, estimated: false };\n    }\n\n    // we don't allow dynamic row height for virtual paging\n    public getRowHeightAsNumber(): number {\n        if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {\n            return this.environment.getDefaultRowHeight();\n        }\n\n        const rowHeight = this.environment.refreshRowHeightVariable();\n\n        if (rowHeight !== -1) {\n            return rowHeight;\n        }\n\n        console.warn('AG Grid row height must be a number if not using standard row model');\n        return this.environment.getDefaultRowHeight();\n    }\n\n    private isNumeric(value: any): value is number {\n        return !isNaN(value) && typeof value === 'number' && isFinite(value);\n    }\n\n    public getDomDataKey(): string {\n        return this.domDataKey;\n    }\n\n    // returns the dom data, or undefined if not found\n    public getDomData(element: Node | null, key: string): any {\n        const domData = (element as any)[this.getDomDataKey()];\n\n        return domData ? domData[key] : undefined;\n    }\n\n    public setDomData(element: Element, key: string, value: any): any {\n        const domDataKey = this.getDomDataKey();\n        let domData = (element as any)[domDataKey];\n\n        if (missing(domData)) {\n            domData = {};\n            (element as any)[domDataKey] = domData;\n        }\n        domData[key] = value;\n    }\n\n    public getDocument(): Document {\n        // if user is providing document, we use the users one,\n        // otherwise we use the document on the global namespace.\n        let result: Document | null = null;\n        if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {\n            result = this.gridOptions.getDocument();\n        } else if (this.eGridDiv) {\n            result = this.eGridDiv.ownerDocument;\n        }\n\n        if (result && exists(result)) {\n            return result;\n        }\n\n        return document;\n    }\n\n    public getWindow() {\n        const eDocument = this.getDocument();\n        return eDocument.defaultView || window;\n    }\n\n    public getRootNode(): Document | ShadowRoot {\n        return this.eGridDiv.getRootNode() as Document | ShadowRoot;\n    }\n\n    public getAsyncTransactionWaitMillis(): number | undefined {\n        return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : 50;\n    }\n\n    public isAnimateRows() {\n        // never allow animating if enforcing the row order\n        if (this.get('ensureDomOrder')) { return false; }\n\n        return this.get('animateRows');\n    }\n\n    public isGroupRowsSticky(): boolean {\n        if (\n            this.get('suppressGroupRowsSticky') ||\n            this.get('paginateChildRows') ||\n            this.get('groupHideOpenParents') ||\n            this.isDomLayout('print')\n        ) { return false; }\n\n        return true;\n    }\n\n    public isColumnsSortingCoupledToGroup(): boolean {\n        const autoGroupColumnDef = this.gridOptions.autoGroupColumnDef;\n        return !autoGroupColumnDef?.comparator && !this.get('treeData');\n    }\n\n    public getGroupAggFiltering(): ((params: WithoutGridCommon<GetGroupAggFilteringParams>) => boolean) | undefined {\n        const userValue = this.gridOptions.groupAggFiltering;\n\n        if (typeof userValue === 'function') {\n            return this.getCallback('groupAggFiltering' as any) as any;\n        }\n\n        if (userValue === true) {\n            return () => true;\n        }\n\n        return undefined;\n    }\n\n    public isGroupIncludeFooterTrueOrCallback(): boolean{\n        const userValue = this.gridOptions.groupIncludeFooter;\n        return userValue === true || typeof userValue === 'function';\n    }\n\n    public getGroupIncludeFooter(): (params: WithoutGridCommon<GetGroupIncludeFooterParams>) => boolean{\n        const userValue = this.gridOptions.groupIncludeFooter;\n\n        if (typeof userValue === 'function') {\n            return this.getCallback('groupIncludeFooter' as any) as any;\n        }\n\n        if (userValue === true) {\n            return () => true; \n        }\n\n        return () => false;\n    }\n\n    public isGroupMultiAutoColumn() {\n        if (this.gridOptions.groupDisplayType) {\n            return this.gridOptions.groupDisplayType === 'multipleColumns';\n        }\n        // if we are doing hideOpenParents we also show multiple columns, otherwise hideOpenParents would not work\n        return this.get('groupHideOpenParents');\n    }\n\n    public isGroupUseEntireRow(pivotMode: boolean): boolean {\n        // we never allow groupDisplayType = 'groupRows' if in pivot mode, otherwise we won't see the pivot values.\n        if (pivotMode) { return false; }\n\n        return this.gridOptions.groupDisplayType === 'groupRows';\n    }\n\n    public getGridCommonParams<TData = any, TContext = any>(): AgGridCommon<TData, TContext> {\n        return {\n            api: this.api,\n            columnApi: this.columnApi,\n            context: this.context\n        };\n    }\n\n    public addGridCommonParams<T extends AgGridCommon<TData, TContext>, TData = any, TContext = any>(params: WithoutGridCommon<T>): T {\n        const updatedParams = params as T;\n        updatedParams.api = this.api;\n        updatedParams.columnApi = this.columnApi;\n        updatedParams.context = this.context;\n        return updatedParams;\n    }\n}", "import { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { GetLocaleTextParams } from \"./interfaces/iCallbackParams\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\n\n@Bean('localeService')\nexport class LocaleService extends BeanStub {\n    public getLocaleTextFunc(): (key: string, defaultValue: string, variableValues?: string[]) => string {\n\n        const getLocaleText = this.gridOptionsService.getCallback('getLocaleText');\n        if (getLocaleText) {\n            //key: string, defaultValue: string, variableValues?: string[]\n            return (key: string, defaultValue: string, variableValues?: string[]) => {\n                const params: WithoutGridCommon<GetLocaleTextParams> = {\n                    key,\n                    defaultValue,\n                    variableValues\n                };\n                return getLocaleText(params);\n            };\n        }\n\n        const localeText = this.gridOptionsService.get('localeText');\n        return (key: string, defaultValue: string, variableValues?: string[]) => {\n            let localisedText = localeText && localeText[key];\n\n            if (localisedText && variableValues && variableValues.length) {\n                let found = 0;\n                while (true) {\n                    if (found >= variableValues.length) { break; }\n                    const idx = localisedText.indexOf('${variable}');\n                    if (idx === -1) { break; }\n\n                    localisedText = localisedText.replace('${variable}', variableValues[found++]);\n                }\n            }\n\n            return localisedText ?? defaultValue;\n        };\n    }\n}", "import { PostConstruct } from \"../context/context\";\nimport { AbstractFakeScrollComp } from \"./abstractFakeScrollComp\";\nimport { isVisible, setFixedWidth } from \"../utils/dom\";\nimport { SetHeightFeature } from \"./rowContainer/setHeightFeature\";\nimport { Events } from \"../eventKeys\";\n\nexport class FakeVScrollComp extends AbstractFakeScrollComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-body-vertical-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-body-vertical-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-vertical-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n        </div>`;\n\n    constructor() {\n        super(FakeVScrollComp.TEMPLATE, 'vertical');\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        this.createManagedBean(new SetHeightFeature(this.eContainer));\n        this.ctrlsService.registerFakeVScrollComp(this);\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onRowContainerHeightChanged.bind(this));\n    }\n\n    protected setScrollVisible(): void {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n\n        const scrollbarWidth = vScrollShowing ? (this.gridOptionsService.getScrollbarWidth() || 0) : 0;\n        const adjustedScrollbarWidth = (scrollbarWidth === 0 && invisibleScrollbar) ? 16 : scrollbarWidth;\n\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        setFixedWidth(this.getGui(), adjustedScrollbarWidth);\n        setFixedWidth(this.eViewport, adjustedScrollbarWidth);\n        setFixedWidth(this.eContainer, adjustedScrollbarWidth);\n        this.setDisplayed(vScrollShowing, { skipAriaHidden: true });\n    }\n\n    private onRowContainerHeightChanged(): void {\n        const { ctrlsService } = this;\n        const gridBodyCtrl = ctrlsService.getGridBodyCtrl();\n        const gridBodyViewportEl = gridBodyCtrl.getBodyViewportElement();\n\n        const eViewportScrollTop = this.getScrollPosition();\n        const gridBodyViewportScrollTop = gridBodyViewportEl.scrollTop;\n\n        if (eViewportScrollTop != gridBodyViewportScrollTop) {\n            this.setScrollPosition(gridBodyViewportScrollTop, true);\n        }\n    }\n\n    public getScrollPosition(): number {\n        return this.getViewport().scrollTop;\n    }\n\n    public setScrollPosition(value: number, force?: boolean): void {\n        if (!force && !isVisible(this.getViewport())) { this.attemptSettingScrollPosition(value); }\n        this.getViewport().scrollTop = value;\n    }\n}", "import { Autowired, Bean, PostConstruct } from '../context/context';\nimport { BeanStub } from '../context/beanStub';\nimport {\n    ColDef,\n    KeyCreatorParams,\n    SuppressKeyboardEventParams,\n    ValueFormatterFunc,\n    ValueFormatterParams,\n    ValueGetterParams,\n} from '../entities/colDef';\nimport {\n    BaseCellDataType,\n    CoreDataTypeDefinition,\n    DataTypeDefinition,\n    DateStringDataTypeDefinition,\n    ValueFormatterLiteParams,\n    ValueParserLiteParams,\n} from '../entities/dataType';\nimport { IRowModel } from '../interfaces/iRowModel';\nimport { IClientSideRowModel } from '../interfaces/iClientSideRowModel';\nimport { Events } from '../eventKeys';\nimport { ColumnModel, ColumnState, ColumnStateParams, convertSourceType } from './columnModel';\nimport { getValueUsingField } from '../utils/object';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ValueService } from '../valueService/valueService';\nimport { Column } from '../entities/column';\nimport { warnOnce } from '../utils/function';\nimport { KeyCode } from '../constants/keyCode';\nimport { exists, toStringOrNull } from '../utils/generic';\nimport { ValueFormatterService } from '../rendering/valueFormatterService';\nimport { IRowNode } from '../interfaces/iRowNode';\nimport { parseDateTimeFromString, serialiseDate } from '../utils/date';\nimport { AgEventListener, AgGridEvent, DataTypesInferredEvent, RowDataUpdateStartedEvent } from '../events';\nimport { ColumnUtils } from './columnUtils';\nimport { WithoutGridCommon } from '../interfaces/iCommon';\n\ninterface GroupSafeValueFormatter {\n    groupSafeValueFormatter?: ValueFormatterFunc;\n}\n\nconst MONTH_LOCALE_TEXT = {\n    january: 'January',\n    february: 'February',\n    march: 'March',\n    april: 'April',\n    may: 'May',\n    june: 'June',\n    july: 'July',\n    august: 'August',\n    september: 'September',\n    october: 'October',\n    november: 'November',\n    december: 'December'\n};\nconst MONTH_KEYS: (keyof typeof MONTH_LOCALE_TEXT)[] = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n\n@Bean('dataTypeService')\nexport class DataTypeService extends BeanStub {\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnUtils') private columnUtils: ColumnUtils;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n\n    private dataTypeDefinitions: { [cellDataType: string]: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter } = {};\n    private dataTypeMatchers: { [cellDataType: string]: ((value: any) => boolean) | undefined };\n    private isWaitingForRowData: boolean = false;\n    private hasObjectValueParser: boolean;\n    private hasObjectValueFormatter: boolean;\n    private groupHideOpenParents: boolean;\n    private initialData: any | null | undefined;\n    private isColumnTypeOverrideInDataTypeDefinitions: boolean = false;\n    // keep track of any column state updates whilst waiting for data types to be inferred\n    private columnStateUpdatesPendingInference: { [colId: string]: Set<keyof ColumnStateParams> } = {};\n    private columnStateUpdateListenerDestroyFuncs: (() => void)[] = [];\n\n    @PostConstruct\n    public init(): void {\n        this.groupHideOpenParents = this.gridOptionsService.get('groupHideOpenParents');\n        this.addManagedPropertyListener('groupHideOpenParents', () => {\n            this.groupHideOpenParents = this.gridOptionsService.get('groupHideOpenParents');\n        });\n        this.processDataTypeDefinitions();\n\n        this.addManagedPropertyListener('dataTypeDefinitions', (event) => {\n            this.processDataTypeDefinitions();\n            this.columnModel.recreateColumnDefs(convertSourceType(event.source));\n        });\n    }\n\n    private processDataTypeDefinitions(): void {\n        const defaultDataTypes = this.getDefaultDataTypes();\n        this.dataTypeDefinitions = {};\n        Object.entries(defaultDataTypes).forEach(([cellDataType, dataTypeDefinition]) => {\n            this.dataTypeDefinitions[cellDataType] = {\n                ...dataTypeDefinition,\n                groupSafeValueFormatter: this.createGroupSafeValueFormatter(dataTypeDefinition)\n            };\n        });\n        const dataTypeDefinitions = this.gridOptionsService.get('dataTypeDefinitions') ?? {};\n        this.dataTypeMatchers = {};\n\n        Object.entries(dataTypeDefinitions).forEach(([cellDataType, dataTypeDefinition]) => {\n            const mergedDataTypeDefinition = this.processDataTypeDefinition(dataTypeDefinition, dataTypeDefinitions, [cellDataType], defaultDataTypes);\n            if (mergedDataTypeDefinition) {\n                this.dataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;\n                if (dataTypeDefinition.dataTypeMatcher) {\n                    this.dataTypeMatchers[cellDataType] = dataTypeDefinition.dataTypeMatcher;\n                }\n            }\n        });\n        this.checkObjectValueHandlers(defaultDataTypes);\n\n        ['dateString', 'text', 'number', 'boolean', 'date'].forEach((cellDataType) => {\n            const overriddenDataTypeMatcher = this.dataTypeMatchers[cellDataType];\n            if (overriddenDataTypeMatcher) {\n                // remove to maintain correct ordering\n                delete this.dataTypeMatchers[cellDataType];\n            }\n            this.dataTypeMatchers[cellDataType] = overriddenDataTypeMatcher ?? defaultDataTypes[cellDataType].dataTypeMatcher;\n        });\n    }\n\n    private mergeDataTypeDefinitions(\n        parentDataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\n        childDataTypeDefinition: DataTypeDefinition\n    ): DataTypeDefinition {\n        const mergedDataTypeDefinition = {\n            ...parentDataTypeDefinition,\n            ...childDataTypeDefinition,\n        } as DataTypeDefinition;\n        if (\n            parentDataTypeDefinition.columnTypes &&\n            childDataTypeDefinition.columnTypes &&\n            (childDataTypeDefinition as any).appendColumnTypes\n        ) {\n            mergedDataTypeDefinition.columnTypes = [\n                ...this.convertColumnTypes(parentDataTypeDefinition.columnTypes),\n                ...this.convertColumnTypes(childDataTypeDefinition.columnTypes),\n            ];\n        }\n        return mergedDataTypeDefinition;\n    }\n\n    private processDataTypeDefinition(\n        dataTypeDefinition: DataTypeDefinition,\n        dataTypeDefinitions: { [key: string]: DataTypeDefinition },\n        alreadyProcessedDataTypes: string[],\n        defaultDataTypes: { [key: string]: CoreDataTypeDefinition }\n    ): DataTypeDefinition & GroupSafeValueFormatter | undefined {\n        let mergedDataTypeDefinition: DataTypeDefinition;\n        const extendsCellDataType = dataTypeDefinition.extendsDataType;\n\n        if (dataTypeDefinition.columnTypes) {\n            this.isColumnTypeOverrideInDataTypeDefinitions = true;\n        }\n\n        if (dataTypeDefinition.extendsDataType === dataTypeDefinition.baseDataType) {\n            let baseDataTypeDefinition = defaultDataTypes[extendsCellDataType];\n            const overriddenBaseDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\n            if (baseDataTypeDefinition && overriddenBaseDataTypeDefinition) {\n                // only if it's valid do we override with a provided one\n                baseDataTypeDefinition = overriddenBaseDataTypeDefinition;\n            }\n            if (!this.validateDataTypeDefinition(dataTypeDefinition, baseDataTypeDefinition, extendsCellDataType)) {\n                return undefined;\n            }\n            mergedDataTypeDefinition = this.mergeDataTypeDefinitions(\n                baseDataTypeDefinition,\n                dataTypeDefinition\n            );\n        } else {\n            if (alreadyProcessedDataTypes.includes(extendsCellDataType)) {\n                warnOnce('Data type definition hierarchies (via the \"extendsDataType\" property) cannot contain circular references.');\n                return undefined;\n            }\n            const extendedDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\n            if (!this.validateDataTypeDefinition(dataTypeDefinition, extendedDataTypeDefinition, extendsCellDataType)) {\n                return undefined;\n            }\n            const mergedExtendedDataTypeDefinition = this.processDataTypeDefinition(\n                extendedDataTypeDefinition,\n                dataTypeDefinitions,\n                [...alreadyProcessedDataTypes, extendsCellDataType],\n                defaultDataTypes\n            );\n            if (!mergedExtendedDataTypeDefinition) {\n                return undefined;\n            }\n            mergedDataTypeDefinition = this.mergeDataTypeDefinitions(\n                mergedExtendedDataTypeDefinition,\n                dataTypeDefinition\n            );\n        }\n\n        return {\n            ...mergedDataTypeDefinition,\n            groupSafeValueFormatter: this.createGroupSafeValueFormatter(mergedDataTypeDefinition)\n        };\n    }\n\n    private validateDataTypeDefinition(\n        dataTypeDefinition: DataTypeDefinition,\n        parentDataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition,\n        parentCellDataType: string\n    ): boolean {\n        if (!parentDataTypeDefinition) {\n            warnOnce(`The data type definition ${parentCellDataType} does not exist.`);\n            return false;\n        }\n        if (parentDataTypeDefinition.baseDataType !== dataTypeDefinition.baseDataType) {\n            warnOnce('The \"baseDataType\" property of a data type definition must match that of its parent.');\n            return false;\n        }\n        return true;\n    }\n\n    private createGroupSafeValueFormatter(dataTypeDefinition: DataTypeDefinition | CoreDataTypeDefinition): ValueFormatterFunc | undefined {\n        if (!dataTypeDefinition.valueFormatter) {\n            return undefined;\n        }\n        return (params: ValueFormatterParams) => {\n            if (params.node?.group) {\n                const aggFunc = params.column.getAggFunc();\n                if (aggFunc) {\n                    // the resulting type of these will be the same, so we call valueFormatter anyway\n                    if (aggFunc === 'first' || aggFunc === 'last') {\n                        return dataTypeDefinition.valueFormatter!(params);\n                    }\n\n                    if (dataTypeDefinition.baseDataType === 'number' && aggFunc !== 'count') {\n                        if (typeof params.value === 'number') {\n                            return dataTypeDefinition.valueFormatter!(params);\n                        }\n\n                        if (typeof params.value === 'object') {\n                            if (!params.value) {\n                                return undefined;\n                            }\n                \n                            if ('toNumber' in params.value) {\n                                return dataTypeDefinition.valueFormatter!({\n                                    ...params,\n                                    value: params.value.toNumber(),\n                                });\n                            }\n\n                            if ('value' in params.value) {\n                                return dataTypeDefinition.valueFormatter!({\n                                    ...params,\n                                    value: params.value.value,\n                                });\n                            }\n                        }\n                    }\n                }\n\n                // we don't want to double format the value\n                // as this is already formatted by using the valueFormatter as the keyCreator\n                if (!this.gridOptionsService.get('suppressGroupMaintainValueType')) {\n                    return undefined as any;\n                }\n            } else if (this.groupHideOpenParents && params.column.isRowGroupActive()) {\n                // `groupHideOpenParents` passes leaf values in the group column, so need to format still.\n                // If it's not a string, we know it hasn't been formatted. Otherwise check the data type matcher.\n                if (typeof params.value !== 'string' || dataTypeDefinition.dataTypeMatcher?.(params.value)) {\n                    return dataTypeDefinition.valueFormatter!(params);\n                }\n\n                // we don't want to double format the value\n                // as this is already formatted by using the valueFormatter as the keyCreator\n                if (!this.gridOptionsService.get('suppressGroupMaintainValueType')) {\n                    return undefined as any;\n                }\n            }\n            return dataTypeDefinition.valueFormatter!(params);\n        };\n    }\n\n    private updateColDefAndGetDataTypeDefinitionColumnType(\n        colDef: ColDef,\n        userColDef: ColDef,\n        colId: string\n    ): string | string[] | undefined {\n        let { cellDataType } = userColDef;\n        const { field } = userColDef;\n        if (cellDataType === undefined) {\n            cellDataType = colDef.cellDataType;\n        }\n        if ((cellDataType == null || cellDataType === true)) {\n            cellDataType = this.canInferCellDataType(colDef, userColDef) ? this.inferCellDataType(field, colId) : false;\n        }\n        if (!cellDataType) {\n            colDef.cellDataType = false;\n            return undefined;\n        }\n        const dataTypeDefinition = this.dataTypeDefinitions[cellDataType as string];\n        if (!dataTypeDefinition) {\n            warnOnce(`Missing data type definition - \"${cellDataType}\"`);\n            return undefined;\n        }\n        colDef.cellDataType = cellDataType;\n        if (dataTypeDefinition.groupSafeValueFormatter) {\n            colDef.valueFormatter = dataTypeDefinition.groupSafeValueFormatter;\n        }\n        if (dataTypeDefinition.valueParser) {\n            colDef.valueParser = dataTypeDefinition.valueParser;\n        }\n        if (!dataTypeDefinition.suppressDefaultProperties) {\n            this.setColDefPropertiesForBaseDataType(colDef, dataTypeDefinition, colId);\n        }\n        return dataTypeDefinition.columnTypes;\n    }\n\n    public updateColDefAndGetColumnType(\n        colDef: ColDef,\n        userColDef: ColDef,\n        colId: string\n    ): string[] | undefined {\n        const dataTypeDefinitionColumnType = this.updateColDefAndGetDataTypeDefinitionColumnType(colDef, userColDef, colId);\n        const columnTypes = userColDef.type ?? dataTypeDefinitionColumnType ?? colDef.type;\n        colDef.type = columnTypes;\n        return columnTypes ? this.convertColumnTypes(columnTypes) : undefined;\n    }\n\n    public addColumnListeners(column: Column): void {\n        if (!this.isWaitingForRowData) { return; }\n        const columnStateUpdates = this.columnStateUpdatesPendingInference[column.getColId()];\n        if (!columnStateUpdates) { return; }\n        const columnListener: AgEventListener = (event: AgGridEvent & { key: keyof ColumnStateParams }) => {\n            columnStateUpdates.add(event.key);\n        };\n        column.addEventListener(Column.EVENT_STATE_UPDATED, columnListener);\n        this.columnStateUpdateListenerDestroyFuncs.push(() => column.removeEventListener(Column.EVENT_STATE_UPDATED, columnListener));\n    }\n\n    private canInferCellDataType(colDef: ColDef, userColDef: ColDef): boolean {\n        if (this.rowModel.getType() !== 'clientSide') {\n            return false;\n        }\n        const propsToCheckForInference = { cellRenderer: true, valueGetter: true, valueParser: true, refData: true };\n        if (this.doColDefPropsPreventInference(userColDef, propsToCheckForInference)) {\n            return false;\n        }\n        const columnTypes = userColDef.type === null ? colDef.type : userColDef.type;\n        if (columnTypes) {\n            const columnTypeDefs = this.gridOptionsService.get('columnTypes') ?? {};\n            const hasPropsPreventingInference = this.convertColumnTypes(columnTypes).some(columnType => {\n                const columnTypeDef = columnTypeDefs[columnType.trim()];\n                return columnTypeDef && this.doColDefPropsPreventInference(columnTypeDef, propsToCheckForInference);\n            });\n            if (hasPropsPreventingInference) {\n                return false;\n            }\n        }\n        return !this.doColDefPropsPreventInference(colDef, propsToCheckForInference)\n    }\n\n    private doColDefPropsPreventInference(colDef: ColDef, propsToCheckForInference: { [key in keyof ColDef]: boolean }): boolean {\n        return [\n            ['cellRenderer', 'agSparklineCellRenderer'], ['valueGetter', undefined], ['valueParser', undefined], ['refData', undefined]\n        ].some(([prop, comparisonValue]: [keyof ColDef, any]) => \n            this.doesColDefPropPreventInference(colDef, propsToCheckForInference, prop, comparisonValue));\n    }\n\n    private doesColDefPropPreventInference(\n        colDef: ColDef,\n        checkProps: { [key in keyof ColDef]: boolean },\n        prop: keyof ColDef,\n        comparisonValue?: any\n    ): boolean {\n        if (!checkProps[prop]) {\n            return false;\n        }\n        const value = colDef[prop];\n        if (value === null) {\n            checkProps[prop] = false;\n            return false;\n        } else {\n            return comparisonValue === undefined ? !!value : value === comparisonValue;\n        }\n    }\n\n    private inferCellDataType(field: string | undefined, colId: string): string | undefined {\n        if (!field) {\n            return undefined;\n        }\n        let value: any;\n        const initialData = this.getInitialData();\n        if (initialData) {\n            const fieldContainsDots = field.indexOf('.') >= 0 && !this.gridOptionsService.get('suppressFieldDotNotation');\n            value = getValueUsingField(initialData, field, fieldContainsDots);\n        } else {\n            this.initWaitForRowData(colId);\n        }\n        if (value == null) {\n            return undefined;\n        }\n        const [cellDataType] = Object.entries(this.dataTypeMatchers).find(([_cellDataType, dataTypeMatcher]) => dataTypeMatcher!(value)) ?? ['object'];\n        return cellDataType;\n    }\n\n    private getInitialData(): any {\n        const rowData = this.gridOptionsService.get('rowData');\n        if (rowData?.length) {\n            return rowData[0];\n        } else if (this.initialData) {\n            return this.initialData;\n        } else {\n            const rowNodes = (this.rowModel as IClientSideRowModel)\n                .getRootNode()\n                .allLeafChildren;\n            if (rowNodes?.length) {\n                return rowNodes[0].data;\n            }\n        }\n        return null;\n    }\n\n    private initWaitForRowData(colId: string): void {\n        this.columnStateUpdatesPendingInference[colId] = new Set();\n        if (this.isWaitingForRowData) {\n            return;\n        }\n        this.isWaitingForRowData = true;\n        const columnTypeOverridesExist = this.isColumnTypeOverrideInDataTypeDefinitions;\n        if (columnTypeOverridesExist) {\n            this.columnModel.queueResizeOperations();\n        }\n        const destroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATE_STARTED, (event: RowDataUpdateStartedEvent) => {\n            const { firstRowData } = event;\n            if (!firstRowData) {\n                return;\n            }\n            destroyFunc?.();\n            this.isWaitingForRowData = false;\n            this.processColumnsPendingInference(firstRowData, columnTypeOverridesExist);\n            this.columnStateUpdatesPendingInference = {};\n            if (columnTypeOverridesExist) {\n                this.columnModel.processResizeOperations();\n            }\n            const dataTypesInferredEvent: WithoutGridCommon<DataTypesInferredEvent> = {\n                type: Events.EVENT_DATA_TYPES_INFERRED\n            }\n            this.eventService.dispatchEvent(dataTypesInferredEvent);\n        });\n    }\n\n    public isPendingInference(): boolean {\n        return this.isWaitingForRowData;\n    }\n\n    private processColumnsPendingInference(firstRowData: any, columnTypeOverridesExist: boolean): void {\n        this.initialData = firstRowData;\n        const state: ColumnState[] = [];\n        this.columnStateUpdateListenerDestroyFuncs.forEach(destroyFunc => destroyFunc());\n        this.columnStateUpdateListenerDestroyFuncs = [];\n        const newRowGroupColumnStateWithoutIndex: { [colId: string]: ColumnState } = {};\n        const newPivotColumnStateWithoutIndex: { [colId: string]: ColumnState } = {};\n        Object.entries(this.columnStateUpdatesPendingInference).forEach(([colId, columnStateUpdates]) => {\n            const column = this.columnModel.getGridColumn(colId);\n            if (!column) { return; }\n            const oldColDef = column.getColDef();\n            if (!this.columnModel.resetColumnDefIntoColumn(column, 'cellDataTypeInferred')) { return; }\n            const newColDef = column.getColDef();\n            if (columnTypeOverridesExist && newColDef.type && newColDef.type !== oldColDef.type) {\n                const updatedColumnState = this.getUpdatedColumnState(column, columnStateUpdates);\n                if (updatedColumnState.rowGroup && updatedColumnState.rowGroupIndex == null) {\n                    newRowGroupColumnStateWithoutIndex[colId] = updatedColumnState;\n                }\n                if (updatedColumnState.pivot && updatedColumnState.pivotIndex == null) {\n                    newPivotColumnStateWithoutIndex[colId] = updatedColumnState;\n                }\n                state.push(updatedColumnState);\n            }\n        });\n        if (columnTypeOverridesExist) {\n            state.push(...this.columnModel.generateColumnStateForRowGroupAndPivotIndexes(newRowGroupColumnStateWithoutIndex, newPivotColumnStateWithoutIndex));\n        }\n        if (state.length) {\n            this.columnModel.applyColumnState({ state }, 'cellDataTypeInferred');\n        }\n        this.initialData = null;\n    }\n\n    private getUpdatedColumnState(column: Column, columnStateUpdates: Set<keyof ColumnStateParams>): ColumnState {\n        const columnState = this.columnModel.getColumnStateFromColDef(column);\n        columnStateUpdates.forEach(key => {\n            // if the column state has been updated, don't update again\n            delete columnState[key];\n            if (key === 'rowGroup') {\n                delete columnState.rowGroupIndex;\n            } else if (key === 'pivot') {\n                delete columnState.pivotIndex;\n            }\n        });\n        return columnState;\n    }\n\n    private checkObjectValueHandlers(defaultDataTypes: { [key: string]: CoreDataTypeDefinition }): void {\n        const resolvedObjectDataTypeDefinition = this.dataTypeDefinitions.object;\n        const defaultObjectDataTypeDefinition = defaultDataTypes.object;\n        this.hasObjectValueParser = resolvedObjectDataTypeDefinition.valueParser !== defaultObjectDataTypeDefinition.valueParser;\n        this.hasObjectValueFormatter = resolvedObjectDataTypeDefinition.valueFormatter !== defaultObjectDataTypeDefinition.valueFormatter;\n    }\n\n    public convertColumnTypes(type: string | string[]): string[] {\n        let typeKeys: string[] = [];\n\n        if (type instanceof Array) {\n            const invalidArray = type.some((a) => typeof a !== 'string');\n            if (invalidArray) {\n                console.warn(\"if colDef.type is supplied an array it should be of type 'string[]'\");\n            } else {\n                typeKeys = type;\n            }\n        } else if (typeof type === 'string') {\n            typeKeys = type.split(',');\n        } else {\n            console.warn(\"colDef.type should be of type 'string' | 'string[]'\");\n        }\n        return typeKeys;\n    }\n\n    private getDateStringTypeDefinition(column?: Column | null): DateStringDataTypeDefinition {\n        if (!column) {\n            return this.dataTypeDefinitions.dateString as DateStringDataTypeDefinition;\n        }\n        return (this.getDataTypeDefinition(column) ?? this.dataTypeDefinitions.dateString) as DateStringDataTypeDefinition;\n    }\n\n    public getDateParserFunction(column?: Column | null): (value: string | undefined) => Date | undefined {\n        return this.getDateStringTypeDefinition(column).dateParser!;\n    }\n\n    public getDateFormatterFunction(column?: Column | null): (value: Date | undefined) => string | undefined {\n        return this.getDateStringTypeDefinition(column).dateFormatter!;\n    }\n\n    public getDataTypeDefinition(column: Column): DataTypeDefinition | CoreDataTypeDefinition | undefined {\n        const colDef = column.getColDef();\n        if (!colDef.cellDataType) { return undefined; }\n        return this.dataTypeDefinitions[colDef.cellDataType as string];\n    }\n\n    public getBaseDataType(column: Column): BaseCellDataType | undefined {\n        return this.getDataTypeDefinition(column)?.baseDataType;\n    }\n\n    public checkType(column: Column, value: any): boolean {\n        if (value == null) {\n            return true;\n        }\n        const dataTypeMatcher = this.getDataTypeDefinition(column)?.dataTypeMatcher;\n        if (!dataTypeMatcher) {\n            return true;\n        }\n        return dataTypeMatcher(value);\n    }\n\n    public validateColDef(colDef: ColDef): void {\n        if (colDef.cellDataType === 'object') {\n            if (colDef.valueFormatter === this.dataTypeDefinitions.object.groupSafeValueFormatter && !this.hasObjectValueFormatter) {\n                warnOnce('Cell data type is \"object\" but no value formatter has been provided. Please either provide an object data type definition with a value formatter, or set \"colDef.valueFormatter\"');\n            }\n            if (colDef.editable && colDef.valueParser === this.dataTypeDefinitions.object.valueParser && !this.hasObjectValueParser) {\n                warnOnce('Cell data type is \"object\" but no value parser has been provided. Please either provide an object data type definition with a value parser, or set \"colDef.valueParser\"');\n            }\n        }\n    }\n\n    private setColDefPropertiesForBaseDataType(\n        colDef: ColDef,\n        dataTypeDefinition: (DataTypeDefinition | CoreDataTypeDefinition) & GroupSafeValueFormatter,\n        colId: string\n    ): void {\n        const formatValue = (column: Column, node: IRowNode | null, value: any) => {\n            let valueFormatter = column.getColDef().valueFormatter;\n            if (valueFormatter === dataTypeDefinition.groupSafeValueFormatter) {\n                valueFormatter = dataTypeDefinition.valueFormatter;\n            }\n            return this.valueFormatterService.formatValue(column, node, value, valueFormatter as any);\n        }\n        const usingSetFilter = ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId());\n        const translate = this.localeService.getLocaleTextFunc();\n        const mergeFilterParams = (params: any) => {\n            const { filterParams } = colDef;\n            colDef.filterParams = typeof filterParams === 'object' ? {\n                ...filterParams,\n                ...params\n            } : params;\n        }\n        switch (dataTypeDefinition.baseDataType) {\n            case 'number': {\n                colDef.cellEditor = 'agNumberCellEditor';\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        comparator: (a: string, b: string) => {\n                            const valA = a == null ? 0 : parseInt(a);\n                            const valB = b == null ? 0 : parseInt(b);\n                            if (valA === valB) return 0;\n                            return valA > valB ? 1 : -1;\n                        },\n                    });\n                }\n                break;\n            }\n            case 'boolean': {\n                colDef.cellEditor = 'agCheckboxCellEditor';\n                colDef.cellRenderer = 'agCheckboxCellRenderer';\n                colDef.suppressKeyboardEvent = (params: SuppressKeyboardEventParams<any, boolean>) => !!params.colDef.editable && params.event.key === KeyCode.SPACE;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            if (!exists(params.value)) {\n                                return translate('blanks', '(Blanks)');\n                            }\n                            return translate(String(params.value), params.value ? 'True' : 'False');\n                        }\n                    });\n                } else {\n                    mergeFilterParams({\n                        maxNumConditions: 1,\n                        debounceMs: 0,\n                        filterOptions: [\n                            'empty',\n                            {\n                                displayKey: 'true',\n                                displayName: 'True',\n                                predicate: (_filterValues: any[], cellValue: any) => cellValue,\n                                numberOfInputs: 0,\n                            },\n                            {\n                                displayKey: 'false',\n                                displayName: 'False',\n                                predicate: (_filterValues: any[], cellValue: any) => cellValue === false,\n                                numberOfInputs: 0,\n                            },\n                        ]\n                    });\n                }\n                break;\n            }\n            case 'date': {\n                colDef.cellEditor = 'agDateCellEditor';\n                colDef.keyCreator = (params: KeyCreatorParams) => formatValue(params.column, params.node, params.value)!;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            const valueFormatted = formatValue(params.column, params.node, params.value);\n                            return exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                        treeList: true,\n                        treeListFormatter: (pathKey: string | null, level: number) => {\n                            if (level === 1 && pathKey != null) {\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\n                            }\n                            return pathKey ?? translate('blanks', '(Blanks)');\n                        }\n                    });\n                }\n                break;\n            }\n            case 'dateString': {\n                colDef.cellEditor = 'agDateStringCellEditor';\n                colDef.keyCreator = (params: KeyCreatorParams) => formatValue(params.column, params.node, params.value)!;\n                const convertToDate = (dataTypeDefinition as DateStringDataTypeDefinition).dateParser!;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            const valueFormatted = formatValue(params.column, params.node, params.value);\n                            return exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                        treeList: true,\n                        treeListPathGetter: (value: string | null) => {\n                            const date = convertToDate(value ?? undefined);\n                            return date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;\n                        },\n                        treeListFormatter: (pathKey: string | null, level: number) => {\n                            if (level === 1 && pathKey != null) {\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\n                            }\n                            return pathKey ?? translate('blanks', '(Blanks)');\n                        }\n                    });\n                } else {\n                    mergeFilterParams({\n                        comparator: (filterDate: Date, cellValue: string | undefined) => {\n                            const cellAsDate = convertToDate(cellValue)!;\n                            if (cellValue == null || cellAsDate < filterDate) { return -1; }\n                            if (cellAsDate > filterDate) { return 1; }\n                            return 0;\n                        }\n                    });\n                }\n                break;\n            }\n            case 'object': {\n                colDef.cellEditorParams = {\n                    useFormatter: true,\n                };\n                colDef.comparator = (a: any, b: any) => {\n                    const column = this.columnModel.getPrimaryColumn(colId);\n                    const colDef = column?.getColDef();\n                    if (!column || !colDef) {\n                        return 0;\n                    }\n                    const valA = a == null ? '' : formatValue(column, null, a)!;\n                    const valB = b == null ? '' : formatValue(column, null, b)!;\n                    if (valA === valB) return 0;\n                    return valA > valB ? 1 : -1;\n                };\n                colDef.keyCreator = (params: KeyCreatorParams) => formatValue(params.column, params.node, params.value)!;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params: ValueFormatterParams) => {\n                            const valueFormatted = formatValue(params.column, params.node, params.value);\n                            return exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        }\n                    });\n                } else {\n                    colDef.filterValueGetter = (params: ValueGetterParams) => formatValue(\n                        params.column,\n                        params.node,\n                        this.valueService.getValue(params.column, params.node)\n                    );\n                }\n                break;\n            }\n        }\n    }\n\n    private getDefaultDataTypes(): { [key: string]: CoreDataTypeDefinition } {\n        const defaultDateFormatMatcher = (value: string) => !!value.match('^\\\\d{4}-\\\\d{2}-\\\\d{2}$');\n        const translate = this.localeService.getLocaleTextFunc();\n        return {\n            number: {\n                baseDataType: 'number',\n                // can be empty space with legacy copy\n                valueParser: (params: ValueParserLiteParams<any, number>) => params.newValue?.trim?.() === ''\n                    ? null\n                    : Number(params.newValue),\n                valueFormatter: (params: ValueFormatterLiteParams<any, number>) => {\n                    if (params.value == null) { return ''; }\n                    if (typeof params.value !== 'number' || isNaN(params.value)) {\n                        return translate('invalidNumber', 'Invalid Number');\n                    }\n                    return String(params.value);\n                },\n                dataTypeMatcher: (value: any) => typeof value === 'number',\n            },\n            text: {\n                baseDataType: 'text',\n                valueParser: (params: ValueParserLiteParams<any, string>) => params.newValue === '' ? null : toStringOrNull(params.newValue),\n                dataTypeMatcher: (value: any) => typeof value === 'string',\n            },\n            boolean: {\n                baseDataType: 'boolean',\n                valueParser: (params: ValueParserLiteParams<any, boolean>) => {\n                    if (params.newValue == null) {\n                        return params.newValue;\n                    }\n                    // can be empty space with legacy copy\n                    return params.newValue?.trim?.() === ''\n                        ? null\n                        : String(params.newValue).toLowerCase() === 'true'\n                },\n                valueFormatter: (params: ValueFormatterLiteParams<any, boolean>) => params.value == null ? '' : String(params.value),\n                dataTypeMatcher: (value: any) => typeof value === 'boolean',\n            },\n            date: {\n                baseDataType: 'date',\n                valueParser: (params: ValueParserLiteParams<any, Date>) => parseDateTimeFromString(params.newValue == null ? null : String(params.newValue)),\n                valueFormatter: (params: ValueFormatterLiteParams<any, Date>) => {\n                    if (params.value == null) { return ''; }\n                    if (!(params.value instanceof Date) || isNaN(params.value.getTime())) {\n                        return translate('invalidDate', 'Invalid Date');\n                    }\n                    return serialiseDate(params.value, false) ?? '';\n                },\n                dataTypeMatcher: (value: any) => value instanceof Date,\n            },\n            dateString: {\n                baseDataType: 'dateString',\n                dateParser: (value: string | undefined) => parseDateTimeFromString(value) ?? undefined,\n                dateFormatter: (value: Date | undefined) => serialiseDate(value ?? null, false) ?? undefined,\n                valueParser: (params: ValueParserLiteParams<any, string>) => defaultDateFormatMatcher(String(params.newValue)) ? params.newValue : null,\n                valueFormatter: (params: ValueFormatterLiteParams<any, string>) => defaultDateFormatMatcher(String(params.value)) ? params.value! : '',\n                dataTypeMatcher: (value: any) => typeof value === 'string' && defaultDateFormatMatcher(value),\n            },\n            object: {\n                baseDataType: 'object',\n                valueParser: () => null,\n                valueFormatter: (params: ValueFormatterLiteParams<any, any>) => toStringOrNull(params.value) ?? '',\n            }\n        }\n    }\n}\n", "import { Bean, Autowired } from '../context/context';\nimport { BeanStub } from '../context/beanStub';\nimport { ExpressionService } from './expressionService';\nimport { Column } from '../entities/column';\nimport { IRowNode } from '../interfaces/iRowNode';\nimport { ValueParserParams } from '../entities/colDef';\nimport { exists } from '../utils/generic';\n\n@Bean('valueParserService')\nexport class ValueParserService extends BeanStub {\n    @Autowired('expressionService') private expressionService: ExpressionService;\n\n    public parseValue(column: Column, rowNode: IRowNode | null, newValue: any, oldValue: any): any {\n        const colDef = column.getColDef();\n        const params: ValueParserParams = this.gridOptionsService.addGridCommonParams({\n            node: rowNode,\n            data: rowNode?.data,\n            oldValue,\n            newValue,\n            colDef,\n            column\n        });\n\n        const valueParser = colDef.valueParser;\n\n        if (exists(valueParser)) {\n            if (typeof valueParser === 'function') {\n                return valueParser(params);\n            }\n            return this.expressionService.evaluate(valueParser, params);\n        }\n        return newValue;\n    }\n}", "import { BeanStub } from \"./context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"./context/context\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { Logger } from \"./logger\";\nimport { ColumnModel, convertSourceType } from \"./columns/columnModel\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\nimport { GridReadyEvent } from \"./events\";\nimport { Events } from \"./eventKeys\";\nimport { PropertyValueChangedEvent } from \"./gridOptionsService\";\nimport { ColDef, ColGroupDef } from \"./entities/colDef\";\n\n@Bean('syncService')\nexport class SyncService extends BeanStub {\n    @Autowired('ctrlsService') private readonly ctrlsService: CtrlsService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('rowModel') private readonly rowModel: IRowModel;\n\n    private waitingForColumns: boolean = false;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedPropertyListener('columnDefs', (event) => this.setColumnDefs(event));\n    }\n\n    public start(): void {\n        // we wait until the UI has finished initialising before setting in columns and rows\n        this.ctrlsService.whenReady(() => {\n            const columnDefs = this.gridOptionsService.get('columnDefs');\n            if (columnDefs) {\n                this.setColumnsAndData(columnDefs);\n            } else {\n                this.waitingForColumns = true;\n            }\n            this.gridReady();\n        });\n    }\n\n    private setColumnsAndData(columnDefs:  (ColDef | ColGroupDef)[]): void {\n        this.columnModel.setColumnDefs(columnDefs ?? [], \"gridInitializing\");\n        this.rowModel.start();\n    }\n    \n    private gridReady(): void {\n        this.dispatchGridReadyEvent();\n        const isEnterprise = ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());\n        const logger = new Logger('AG Grid', () => this.gridOptionsService.get('debug'));\n        logger.log(`initialised successfully, enterprise = ${isEnterprise}`);\n    }\n\n    private dispatchGridReadyEvent(): void {\n        const readyEvent: WithoutGridCommon<GridReadyEvent> = {\n            type: Events.EVENT_GRID_READY,\n        };\n        this.eventService.dispatchEvent(readyEvent);\n    }\n\n    private setColumnDefs(event: PropertyValueChangedEvent<'columnDefs'>): void {\n        const columnDefs = this.gridOptionsService.get('columnDefs');\n        if (!columnDefs) { return; }\n\n        if (this.waitingForColumns) {\n            this.waitingForColumns = false;\n            this.setColumnsAndData(columnDefs);\n            return;\n        }\n\n        this.columnModel.setColumnDefs(columnDefs, convertSourceType(event.source));\n    }\n}\n", "import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { UserCompDetails, UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { OverlayWrapperComponent } from \"./overlayWrapperComponent\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Events } from \"../../eventKeys\";\nimport { ILoadingOverlayParams } from \"./loadingOverlayComponent\";\nimport { INoRowsOverlayParams } from \"./noRowsOverlayComponent\";\nimport { GridOptions } from \"../../entities/gridOptions\";\n\n@Bean('overlayService')\nexport class OverlayService extends BeanStub {\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n    @Autowired('paginationProxy') private readonly paginationProxy: PaginationProxy;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    private overlayWrapperComp: OverlayWrapperComponent;\n    private manuallyDisplayed: boolean = false;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, () => this.onRowDataUpdated());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onNewColumnsLoaded());\n    }\n\n    public registerOverlayWrapperComp(overlayWrapperComp: OverlayWrapperComponent): void {\n        this.overlayWrapperComp = overlayWrapperComp;\n\n        if (\n            !this.gridOptionsService.get('columnDefs') ||\n            (this.gridOptionsService.isRowModelType('clientSide') && !this.gridOptionsService.get('rowData'))\n        ) {\n            this.showLoadingOverlay();\n        }\n    }\n\n    public showLoadingOverlay(): void {\n        if (this.gridOptionsService.get('suppressLoadingOverlay')) { return; }\n\n        const params: WithoutGridCommon<ILoadingOverlayParams> = {};\n\n        const compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);\n        this.showOverlay(compDetails, 'ag-overlay-loading-wrapper', 'loadingOverlayComponentParams');\n    }\n\n    public showNoRowsOverlay(): void {\n        if (this.gridOptionsService.get('suppressNoRowsOverlay')) { return; }\n\n        const params: WithoutGridCommon<INoRowsOverlayParams> = {};\n\n        const compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);\n        this.showOverlay(compDetails, 'ag-overlay-no-rows-wrapper', 'noRowsOverlayComponentParams');\n    }\n\n    private showOverlay(compDetails: UserCompDetails, wrapperCssClass: string, gridOption: keyof GridOptions): void {\n        const promise = compDetails.newAgStackInstance();\n        const listenerDestroyFunc = this.addManagedPropertyListener(gridOption, ({ currentValue }) => {\n            promise.then(comp => {\n                if (comp!.refresh) {\n                    comp.refresh(this.gridOptionsService.addGridCommonParams({\n                        ...(currentValue ?? {})\n                    }));\n                }\n            });\n        });\n\n        this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();\n        this.overlayWrapperComp.showOverlay(promise, wrapperCssClass, listenerDestroyFunc);\n    }\n\n    public hideOverlay(): void {\n        this.manuallyDisplayed = false;\n        this.overlayWrapperComp.hideOverlay();\n    }\n\n    private showOrHideOverlay(): void {\n        const isEmpty = this.paginationProxy.isEmpty();\n        const isSuppressNoRowsOverlay = this.gridOptionsService.get('suppressNoRowsOverlay');\n        if (isEmpty && !isSuppressNoRowsOverlay) {\n            this.showNoRowsOverlay();\n        } else {\n            this.hideOverlay();\n        }\n    }\n\n    private onRowDataUpdated(): void {\n        this.showOrHideOverlay();\n    }\n\n    private onNewColumnsLoaded(): void {\n        // hide overlay if columns and rows exist, this can happen if columns are loaded after data.\n        // this problem exists before of the race condition between the services (column controller in this case)\n        // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,\n        // this race condition would not happen.\n        if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {\n            this.hideOverlay();\n        }\n    }\n}", "import { ColumnModel, ColumnState, ColumnStateParams } from \"../columns/columnModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Events } from \"../eventKeys\";\nimport { NewColumnsLoadedEvent, PaginationChangedEvent, RangeSelectionChangedEvent, StateUpdatedEvent } from \"../events\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { FocusService } from \"../focusService\";\nimport {\n    AggregationColumnState,\n    AggregationState,\n    ColumnOrderState,\n    ColumnPinningState,\n    ColumnSizeState,\n    ColumnSizingState,\n    ColumnVisibilityState,\n    FilterState,\n    FocusedCellState,\n    GridState,\n    RowGroupState,\n    PaginationState,\n    PivotState,\n    RangeSelectionState,\n    ScrollState,\n    SideBarState,\n    SortState,\n    ColumnGroupState,\n    RowGroupExpansionState\n} from \"../interfaces/gridState\";\nimport { IRangeService } from \"../interfaces/IRangeService\";\nimport { ISideBarService } from \"../interfaces/iSideBar\";\nimport { FilterModel } from \"../interfaces/iFilter\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { ISelectionService } from \"../interfaces/iSelectionService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { SortModelItem } from \"../sortController\";\nimport { ServerSideRowGroupSelectionState, ServerSideRowSelectionState } from \"../interfaces/selectionState\";\nimport { IExpansionService } from \"../interfaces/iExpansionService\";\nimport { jsonEquals } from \"../utils/generic\";\nimport { AdvancedFilterModel } from \"../interfaces/advancedFilterModel\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { debounce } from \"../utils/function\";\nimport { ColumnAnimationService } from \"../rendering/columnAnimationService\";\n\n@Bean('stateService')\nexport class StateService extends BeanStub {\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Optional('rangeService') private readonly rangeService?: IRangeService;\n    @Autowired('ctrlsService') private readonly ctrlsService: CtrlsService;\n    @Optional('sideBarService') private readonly sideBarService?: ISideBarService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('paginationProxy') private readonly paginationProxy: PaginationProxy;\n    @Autowired('rowModel') private readonly rowModel: IRowModel;\n    @Autowired('selectionService') private readonly selectionService: ISelectionService;\n    @Autowired('expansionService') private readonly expansionService: IExpansionService;\n    @Autowired('columnAnimationService') private readonly columnAnimationService: ColumnAnimationService;\n\n    private isClientSideRowModel: boolean;\n    private cachedState: GridState;\n    private suppressEvents = true;\n    private queuedUpdateSources: Set<(keyof GridState | 'gridInitializing')> = new Set();\n    private dispatchStateUpdateEventDebounced = debounce(() => this.dispatchQueuedStateUpdateEvents(), 0);\n    // If user is doing a manual expand all node by node, we don't want to process one at a time.\n    // EVENT_ROW_GROUP_OPENED is already async, so no impact of making the state async here.\n    private onRowGroupOpenedDebounced = debounce(() => this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState()), 0);\n    // similar to row expansion, want to debounce. However, selection is synchronous, so need to mark as stale in case `getState` is called.\n    private onRowSelectedDebounced = debounce(() => {\n        this.staleStateKeys.delete('rowSelection');\n        this.updateCachedState('rowSelection', this.getRowSelectionState());\n    }, 0);\n    private columnStates?: ColumnState[];\n    private columnGroupStates?: { groupId: string, open: boolean | undefined }[];\n    private staleStateKeys: Set<keyof GridState> = new Set();\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.isClientSideRowModel = this.rowModel.getType() === 'clientSide';\n\n        this.cachedState = this.gridOptionsService.get('initialState') ?? {};\n\n        this.ctrlsService.whenReady(() => this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnGridReady()));\n\n        const newColumnsLoadedDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, ({ source }: NewColumnsLoadedEvent) => {\n            if (source === 'gridInitializing') {\n                newColumnsLoadedDestroyFunc?.();\n                this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnColumnsInitialised());\n            }\n        });\n        const rowCountReadyDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_COUNT_READY, () => {\n            rowCountReadyDestroyFunc?.();\n            this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnRowCountReady());\n        });\n        const firstDataRenderedDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_FIRST_DATA_RENDERED, () => {\n            firstDataRenderedDestroyFunc?.();\n            this.suppressEventsAndDispatchInitEvent(() => this.setupStateOnFirstDataRendered());\n        });\n    }\n\n    public getState(): GridState {\n        if (this.staleStateKeys.size) {\n            this.refreshStaleState();\n        }\n        return this.cachedState;\n    }\n\n    private setupStateOnGridReady(): void {\n        // sidebar reads the initial state itself, so don't need to set\n\n        this.updateCachedState('sideBar', this.getSideBarState());\n\n        this.addManagedListener(this.eventService, Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED, () => this.updateCachedState('sideBar', this.getSideBarState()));\n        this.addManagedListener(this.eventService, Events.EVENT_SIDE_BAR_UPDATED, () => this.updateCachedState('sideBar', this.getSideBarState()));\n    }\n\n    private setupStateOnColumnsInitialised(): void {\n        const initialState = this.gridOptionsService.get('initialState') ?? {};\n        this.setColumnState(initialState);\n        this.setColumnGroupState(initialState);\n\n        this.updateColumnState([\n            'aggregation', 'columnOrder', 'columnPinning', 'columnSizing', 'columnVisibility', 'pivot', 'pivot', 'rowGroup', 'sort'\n        ]);\n        this.updateCachedState('columnGroup', this.getColumnGroupState());\n\n        // aggregation\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, () => this.updateColumnState(['aggregation']));\n        // columnOrder\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, () => this.updateColumnState(['columnOrder']));\n        // columnPinning\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, () => this.updateColumnState(['columnPinning']));\n        // columnSizing\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, () => this.updateColumnState(['columnSizing']));\n        // columnVisibility\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => this.updateColumnState(['columnVisibility']));\n        // pivot\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.updateColumnState(['pivot']));\n        // pivot\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.updateColumnState(['pivot']));\n        // rowGroup\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.updateColumnState(['rowGroup']));\n        // sort\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, () => this.updateColumnState(['sort']));\n        // any column\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.updateColumnState([\n            'aggregation', 'columnOrder', 'columnPinning', 'columnSizing', 'columnVisibility', 'pivot', 'pivot', 'rowGroup', 'sort'\n        ]));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, () => this.updateCachedState('columnGroup', this.getColumnGroupState()));\n    }\n\n    private setupStateOnRowCountReady(): void {\n        const {\n            filter: filterState,\n            rowGroupExpansion: rowGroupExpansionState,\n            rowSelection: rowSelectionState,\n            pagination: paginationState\n        } = this.gridOptionsService.get('initialState') ?? {};\n        const advancedFilterModel = this.gridOptionsService.get('advancedFilterModel');\n        if (filterState || advancedFilterModel) {\n            this.setFilterState(filterState, advancedFilterModel);\n        }\n        if (rowGroupExpansionState) {\n            this.setRowGroupExpansionState(rowGroupExpansionState);\n        }\n        if (rowSelectionState) {\n            this.setRowSelectionState(rowSelectionState);\n        }\n        if (paginationState) {\n            this.setPaginationState(paginationState);\n        }\n\n        this.updateCachedState('filter', this.getFilterState());\n        this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState());\n        this.updateCachedState('rowSelection', this.getRowSelectionState());\n        this.updateCachedState('pagination', this.getPaginationState());\n\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, () => this.updateCachedState('filter', this.getFilterState()));\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, () => this.onRowGroupOpenedDebounced());\n        this.addManagedListener(this.eventService, Events.EVENT_EXPAND_COLLAPSE_ALL, () => this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState()));\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, () => {\n            this.staleStateKeys.add('rowSelection');\n            this.onRowSelectedDebounced();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, (event: PaginationChangedEvent) => {\n            if (event.newPage || event.newPageSize) {\n                this.updateCachedState('pagination', this.getPaginationState());\n            }\n        });\n    }\n\n    private setupStateOnFirstDataRendered(): void {\n        const {\n            scroll: scrollState,\n            rangeSelection: rangeSelectionState,\n            focusedCell: focusedCellState,\n            columnOrder: columnOrderState,\n        } = this.gridOptionsService.get('initialState') ?? {};\n        if (focusedCellState) {\n            this.setFocusedCellState(focusedCellState);\n        }\n        if (rangeSelectionState) {\n            this.setRangeSelectionState(rangeSelectionState);\n        }\n        if (scrollState) {\n            this.setScrollState(scrollState);\n        }\n        this.setColumnPivotState(!!columnOrderState?.orderedColIds);\n\n        // reset sidebar as it could have updated when columns changed\n        this.updateCachedState('sideBar', this.getSideBarState());\n        this.updateCachedState('focusedCell', this.getFocusedCellState())\n        this.updateCachedState('rangeSelection', this.getRangeSelectionState());\n        this.updateCachedState('scroll', this.getScrollState());\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, () => this.updateCachedState('focusedCell', this.getFocusedCellState()));\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, (event: RangeSelectionChangedEvent) => {\n            if (event.finished) {\n                this.updateCachedState('rangeSelection', this.getRangeSelectionState());\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, () => this.updateCachedState('scroll', this.getScrollState()));\n    }\n\n    private getColumnState(): {\n        sort?: SortState;\n        rowGroup?: RowGroupState;\n        aggregation?: AggregationState;\n        pivot?: PivotState;\n        columnPinning?: ColumnPinningState;\n        columnVisibility?: ColumnVisibilityState;\n        columnSizing?: ColumnSizingState;\n        columnOrder?: ColumnOrderState;\n    } {\n        const pivotMode = this.columnModel.isPivotMode();\n        const sortColumns: SortModelItem[] = [];\n        const groupColIds: string[] = [];\n        const aggregationColumns: AggregationColumnState[] = [];\n        const pivotColIds: string[] = [];\n        const leftColIds: string[] = [];\n        const rightColIds: string[] = [];\n        const hiddenColIds: string[] = [];\n        const columnSizes: ColumnSizeState[] = [];\n        const columns: string[] = [];\n\n        const columnState = this.columnModel.getColumnState();\n        for (let i = 0; i < columnState.length; i++) {\n            const {\n                colId,\n                sort,\n                sortIndex,\n                rowGroup,\n                rowGroupIndex,\n                aggFunc,\n                pivot,\n                pivotIndex,\n                pinned,\n                hide,\n                width,\n                flex\n            } = columnState[i];\n            columns.push(colId);\n            if (sort) {\n                sortColumns[sortIndex ?? 0] = { colId, sort };\n            }\n            if (rowGroup) {\n                groupColIds[rowGroupIndex ?? 0] = colId;\n            }\n            if (typeof aggFunc === 'string') {\n                aggregationColumns.push({ colId, aggFunc });\n            }\n            if (pivot) {\n                pivotColIds[pivotIndex ?? 0] = colId;\n            }\n            if (pinned) {\n                (pinned === 'right' ? rightColIds : leftColIds).push(colId);\n            }\n            if (hide) {\n                hiddenColIds.push(colId);\n            }\n            if (flex || width) {\n                columnSizes.push({ colId, flex: flex ?? undefined, width });\n            }\n        }\n        \n        return {\n            sort: sortColumns.length ? { sortModel: sortColumns } : undefined,\n            rowGroup: groupColIds.length ? { groupColIds } : undefined,\n            aggregation: aggregationColumns.length ? { aggregationModel: aggregationColumns } : undefined,\n            pivot: pivotColIds.length || pivotMode ? { pivotMode, pivotColIds } : undefined,\n            columnPinning: leftColIds.length || rightColIds.length ? { leftColIds, rightColIds } : undefined,\n            columnVisibility: hiddenColIds.length ? { hiddenColIds } : undefined,\n            columnSizing: columnSizes.length ? { columnSizingModel: columnSizes } : undefined,\n            columnOrder: columns.length ? { orderedColIds: columns } : undefined\n        };\n    }\n\n    private setColumnState(initialState: GridState): void {\n        const {\n            sort: sortState,\n            rowGroup: groupState,\n            aggregation: aggregationState,\n            pivot: pivotState,\n            columnPinning: columnPinningState,\n            columnVisibility: columnVisibilityState,\n            columnSizing: columnSizingState,\n            columnOrder: columnOrderState\n        } = initialState;\n        const columnStateMap: { [colId: string]: ColumnState } = {};\n        const getColumnState = (colId: string) => {\n            let columnState = columnStateMap[colId];\n            if (columnState) {\n                return columnState;\n            }\n            columnState = { colId };\n            columnStateMap[colId] = columnState;\n            return columnState;\n        }\n        if (sortState) {\n            sortState.sortModel.forEach(({ colId, sort }, sortIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.sort = sort;\n                columnState.sortIndex = sortIndex;\n            });\n        }\n        if (groupState) {\n            groupState.groupColIds.forEach((colId, rowGroupIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.rowGroup = true;\n                columnState.rowGroupIndex = rowGroupIndex;\n            });\n        }\n        if (aggregationState) {\n            aggregationState.aggregationModel.forEach(({ colId, aggFunc }) => {\n                getColumnState(colId).aggFunc = aggFunc;\n            });\n        }\n        if (pivotState) {\n            pivotState.pivotColIds.forEach((colId, pivotIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.pivot = true;\n                columnState.pivotIndex = pivotIndex;\n            });\n            this.gridOptionsService.updateGridOptions({ options: { pivotMode: pivotState.pivotMode }, source: 'gridInitializing' as any });\n        }\n        if (columnPinningState) {\n            columnPinningState.leftColIds.forEach(colId => {\n                getColumnState(colId).pinned = 'left';\n            });\n            columnPinningState.rightColIds.forEach(colId => {\n                getColumnState(colId).pinned = 'right';\n            });\n        }\n        if (columnVisibilityState) {\n            columnVisibilityState.hiddenColIds.forEach(colId => {\n                getColumnState(colId).hide = true;\n            });\n        }\n        if (columnSizingState) {\n            columnSizingState.columnSizingModel.forEach(({ colId, flex, width }) => {\n                const columnState = getColumnState(colId);\n                columnState.flex = flex ?? null;\n                columnState.width = width;\n            });\n        }\n        const columns = columnOrderState?.orderedColIds;\n        const applyOrder = !!columns?.length;\n        const columnStates = applyOrder ? columns.map(colId => getColumnState(colId)) : Object.values(columnStateMap);\n\n        if (columnStates.length) {\n            this.columnStates = columnStates;\n            const defaultState: ColumnStateParams = {\n                sort: null,\n                sortIndex: null,\n                rowGroup: null,\n                rowGroupIndex: null,\n                aggFunc: null,\n                pivot: null,\n                pivotIndex: null,\n                pinned: null,\n                hide: null,\n                flex: null,\n            };\n            this.columnModel.applyColumnState({\n                state: columnStates,\n                applyOrder,\n                defaultState\n            }, 'gridInitializing');\n        }\n    }\n\n    private setColumnPivotState(applyOrder: boolean): void {\n        const columnStates = this.columnStates;\n        this.columnStates = undefined;\n        const columnGroupStates = this.columnGroupStates;\n        this.columnGroupStates = undefined;\n\n        if (!this.columnModel.isSecondaryColumnsPresent()) { return; }\n\n        if (columnStates) {\n            let secondaryColumnStates: ColumnState[] = [];\n            for (const columnState of columnStates) {\n                if (this.columnModel.getSecondaryColumn(columnState.colId)) {\n                    secondaryColumnStates.push(columnState);\n                }\n            }\n\n            this.columnModel.applyColumnState({\n                state: secondaryColumnStates,\n                applyOrder\n            }, 'gridInitializing');\n        }\n\n        if (columnGroupStates) {\n            // no easy/performant way of knowing which column groups are pivot column groups\n            this.columnModel.setColumnGroupState(columnGroupStates, 'gridInitializing');\n        }\n    }\n\n    private getColumnGroupState(): ColumnGroupState | undefined {\n        const columnGroupState = this.columnModel.getColumnGroupState();\n        const openColumnGroups: string[] = [];\n        columnGroupState.forEach(({ groupId, open }) => {\n            if (open) {\n                openColumnGroups.push(groupId);\n            }\n        });\n        return openColumnGroups.length ? { openColumnGroupIds: openColumnGroups } : undefined;\n    }\n\n    private setColumnGroupState(initialState: GridState): void {\n        if (!initialState.hasOwnProperty('columnGroup')) { return; }\n\n        const openColumnGroups =  new Set(initialState.columnGroup?.openColumnGroupIds);\n        const existingColumnGroupState = this.columnModel.getColumnGroupState();\n        const stateItems = existingColumnGroupState.map(({ groupId }) => {\n            const open = openColumnGroups.has(groupId);\n            if (open) {\n                openColumnGroups.delete(groupId);\n            }\n            return {\n                groupId,\n                open\n            }\n        });\n        // probably pivot cols\n        openColumnGroups.forEach(groupId => {\n            stateItems.push({\n                groupId,\n                open: true\n            })\n        });\n        if (stateItems.length) {\n            this.columnGroupStates = stateItems;\n        }\n        this.columnModel.setColumnGroupState(stateItems, 'gridInitializing');\n    }\n\n    private getFilterState(): FilterState | undefined {\n        let filterModel: FilterModel | undefined = this.filterManager.getFilterModel();\n        if (filterModel && Object.keys(filterModel).length === 0) {\n            filterModel = undefined;\n        }\n        const advancedFilterModel = this.filterManager.getAdvancedFilterModel() ?? undefined;\n        return filterModel || advancedFilterModel ? { filterModel, advancedFilterModel } : undefined;\n    }\n\n    private setFilterState(filterState?: FilterState, gridOptionAdvancedFilterModel?: AdvancedFilterModel | null): void {\n        const { filterModel, advancedFilterModel } = filterState ?? { advancedFilterModel: gridOptionAdvancedFilterModel };\n        if (filterModel) {\n            this.filterManager.setFilterModel(filterModel, 'columnFilter');\n        }\n        if (advancedFilterModel) {\n            this.filterManager.setAdvancedFilterModel(advancedFilterModel);\n        }\n    }\n\n    private getRangeSelectionState(): RangeSelectionState | undefined {\n        const cellRanges = this.rangeService?.getCellRanges().map(cellRange => {\n            const { id, type, startRow, endRow, columns, startColumn } = cellRange;\n            return {\n                id,\n                type,\n                startRow,\n                endRow,\n                colIds: columns.map(column => column.getColId()),\n                startColId: startColumn.getColId()\n            }\n        });\n        return cellRanges?.length ? { cellRanges } : undefined;\n    }\n\n    private setRangeSelectionState(rangeSelectionState: RangeSelectionState): void {\n        if (!this.gridOptionsService.get('enableRangeSelection')) { return; }\n        const cellRanges = rangeSelectionState.cellRanges.map(cellRange => ({\n            ...cellRange,\n            columns: cellRange.colIds.map(colId => this.columnModel.getGridColumn(colId)!),\n            startColumn: this.columnModel.getGridColumn(cellRange.startColId)!\n        }));\n        this.rangeService?.setCellRanges(cellRanges);\n    }\n\n    private getScrollState(): ScrollState | undefined {\n        if (!this.isClientSideRowModel) {\n            // can't restore, so don't provide\n            return undefined;\n        }\n        const scrollFeature = this.ctrlsService.getGridBodyCtrl()?.getScrollFeature();\n        const { left } = scrollFeature?.getHScrollPosition() ?? { left: 0 };\n        const { top } = scrollFeature?.getVScrollPosition() ?? { top: 0 };\n        return top || left ? {\n            top,\n            left\n        } : undefined;\n    }\n\n    private setScrollState(scrollState: ScrollState): void {\n        if (!this.isClientSideRowModel) { return; }\n        const { top, left } = scrollState;\n        this.ctrlsService.getGridBodyCtrl()?.getScrollFeature().setScrollPosition(top, left);\n    }\n\n    private getSideBarState(): SideBarState | undefined {\n        return this.sideBarService?.getSideBarComp()?.getState();\n    }\n\n    private getFocusedCellState(): FocusedCellState | undefined {\n        if (!this.isClientSideRowModel) {\n            // can't restore, so don't provide\n            return undefined;\n        }\n        const focusedCell = this.focusService.getFocusedCell();\n        if (focusedCell) {\n            const { column, rowIndex, rowPinned } = focusedCell;\n            return {\n                colId: column.getColId(),\n                rowIndex,\n                rowPinned\n            };\n        }\n        return undefined;\n    }\n\n    private setFocusedCellState(focusedCellState: FocusedCellState): void {\n        if (!this.isClientSideRowModel) { return; }\n        const { colId, rowIndex, rowPinned } = focusedCellState;\n        this.focusService.setFocusedCell({\n            column: this.columnModel.getGridColumn(colId),\n            rowIndex,\n            rowPinned,\n            forceBrowserFocus: true,\n            preventScrollOnBrowserFocus: true\n        });\n    }\n\n    private getPaginationState(): PaginationState | undefined {\n        const page = this.paginationProxy.getCurrentPage();\n        const pageSize = !this.gridOptionsService.get('paginationAutoPageSize')\n            ? this.paginationProxy.getPageSize() : undefined;\n\n        if (!page && !pageSize) { return; }\n        return { page, pageSize }\n    }\n\n    private setPaginationState(paginationState: PaginationState): void {\n        if (paginationState.pageSize && !this.gridOptionsService.get('paginationAutoPageSize')) {\n            this.paginationProxy.setPageSize(paginationState.pageSize, 'initialState');\n        }\n\n        if (typeof paginationState.page === 'number') {\n            this.paginationProxy.setPage(paginationState.page);\n        }\n    }\n\n    private getRowSelectionState(): string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState | undefined {\n        const selectionState = this.selectionService.getSelectionState();\n        const noSelections = !selectionState || (\n            !Array.isArray(selectionState) &&\n            (\n                (selectionState as ServerSideRowSelectionState).selectAll === false ||\n                    (selectionState as ServerSideRowGroupSelectionState).selectAllChildren === false\n            ) && !selectionState?.toggledNodes?.length\n        );\n        return noSelections ? undefined : selectionState;\n    }\n\n    private setRowSelectionState(rowSelectionState: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState): void {\n        this.selectionService.setSelectionState(rowSelectionState, 'gridInitializing');\n    }\n\n    private getRowGroupExpansionState(): RowGroupExpansionState | undefined {\n        const expandedRowGroups = this.expansionService.getExpandedRows();\n        return expandedRowGroups.length ? {\n            expandedRowGroupIds: expandedRowGroups\n        } : undefined;\n    }\n\n    private setRowGroupExpansionState(rowGroupExpansionState: RowGroupExpansionState): void {\n        this.expansionService.expandRows(rowGroupExpansionState.expandedRowGroupIds);\n    }\n\n    private updateColumnState(features: (keyof GridState)[]): void {\n        const newColumnState = this.getColumnState();\n        let hasChanged = false;\n        Object.entries(newColumnState).forEach(([key, value]: [keyof GridState, any]) => {\n            if (!jsonEquals(value, this.cachedState[key])) {\n                hasChanged = true;\n            }\n        });\n        this.cachedState = {\n            ...this.cachedState,\n            ...newColumnState\n        }\n        if (hasChanged) {\n            this.dispatchStateUpdateEvent(features);\n        }\n    }\n\n    private updateCachedState<K extends keyof GridState>(key: K, value: GridState[K]): void {\n        const existingValue = this.cachedState[key];\n        this.setCachedStateValue(key, value);\n        if (!jsonEquals(value, existingValue)) {\n            this.dispatchStateUpdateEvent([key]);\n        }\n    }\n\n    private setCachedStateValue<K extends keyof GridState>(key: K, value: GridState[K]): void {\n        this.cachedState = {\n            ...this.cachedState,\n            [key]: value\n        };\n    }\n\n    private refreshStaleState(): void {\n        this.staleStateKeys.forEach(key => {\n            switch (key) {\n                // only row selection supported for now\n                case 'rowSelection':\n                    this.setCachedStateValue(key, this.getRowSelectionState());\n                    break;\n            }\n        });\n        this.staleStateKeys.clear();\n    }\n\n    private dispatchStateUpdateEvent(sources: (keyof GridState | 'gridInitializing')[]): void {\n        if (this.suppressEvents) { return; }\n        sources.forEach(source => this.queuedUpdateSources.add(source));\n        this.dispatchStateUpdateEventDebounced();\n    }\n\n    private dispatchQueuedStateUpdateEvents(): void {\n        const sources = Array.from(this.queuedUpdateSources);\n        this.queuedUpdateSources.clear();\n        const event: WithoutGridCommon<StateUpdatedEvent> = {\n            type: Events.EVENT_STATE_UPDATED,\n            sources,\n            state: this.cachedState\n        }\n        this.eventService.dispatchEvent(event);\n    }\n\n    private suppressEventsAndDispatchInitEvent(updateFunc: () => void): void {\n        this.suppressEvents = true;\n        this.columnAnimationService.setSuppressAnimation(true);\n        updateFunc();\n        // We want to suppress any grid events, but not user events.\n        // Using a timeout here captures things like column resizing and emits a single grid initializing event.\n        setTimeout(() => {\n            this.suppressEvents = false;\n            // We only want the grid initializing source.\n            this.queuedUpdateSources.clear();\n            if(!this.isAlive()){\n                // Ensure the grid is still alive before dispatching the event.\n                return;\n            }\n            this.columnAnimationService.setSuppressAnimation(false);\n            this.dispatchStateUpdateEvent(['gridInitializing']);\n        });\n    }\n}\n", "import { GridOptions } from \"../entities/gridOptions\";\nimport { fuzzyCheckStrings } from \"../utils/fuzzyMatch\";\nimport { iterateObject } from \"../utils/object\";\nimport { warnOnce } from \"../utils/function\";\nimport { DependencyValidator, OptionsValidation, OptionsValidator } from \"./validationTypes\";\nimport { GRID_OPTIONS_VALIDATORS, GRID_OPTION_DEFAULTS } from \"./rules/gridOptionsValidations\";\nimport { COL_DEF_VALIDATORS } from \"./rules/colDefValidations\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\n\n@Bean('validationService')\nexport class ValidationService extends BeanStub {\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n\n    @PostConstruct\n    public init(): void {\n        this.processGridOptions(this.gridOptions);\n    }\n\n    public processGridOptions(options: GridOptions): void {\n        this.processOptions(options, GRID_OPTIONS_VALIDATORS);\n    }\n\n    public processColumnDefs(options: ColDef | ColGroupDef): void {\n        this.processOptions(options, COL_DEF_VALIDATORS);\n    }\n\n    private processOptions<T extends {}>(options: T, validator: OptionsValidator<T>): void {\n        const { validations, deprecations, allProperties, propertyExceptions, objectName, docsUrl } = validator;\n        \n        if (allProperties && this.gridOptions.suppressPropertyNamesCheck !== true) {\n            this.checkProperties(\n                options,\n                [...propertyExceptions ?? [], ...Object.keys(deprecations)],\n                allProperties,\n                objectName,\n                docsUrl,\n            );\n        }\n\n        const warnings: Set<string> = new Set();\n\n        const optionKeys = Object.keys(options) as (keyof T)[];\n        optionKeys.forEach((key: keyof T) => {\n            const deprecation = deprecations[key] as any;\n            if (deprecation) {\n                if ('renamed' in deprecation) {\n                    const { renamed, version } = deprecation;\n                    warnings.add(`As of v${version}, ${String(key)} is deprecated. Please use ${String(renamed)} instead.`);\n                    (options as any)[renamed] = options[key];\n                } else {\n                    const { message, version } = deprecation;\n                    warnings.add(`As of v${version}, ${String(key)} is deprecated. ${message ?? ''}`);\n                }\n            }\n\n            const value = options[key];\n            if (value == null || (value as any) === false) {\n                // false implies feature is disabled, don't validate.\n                return;\n            }\n\n            const rulesOrGetter = validations[key];\n            let rules: OptionsValidation<T>;\n            if (!rulesOrGetter) {\n                return;\n            } else if (typeof rulesOrGetter === 'function') {\n                const fromGetter = rulesOrGetter(options, this.gridOptions);\n                if (!fromGetter) {\n                    return;\n                }\n\n                // this is a sub validator.\n                if ('objectName' in fromGetter) {\n                    const value = options[key];\n                    if (Array.isArray(value)) {\n                        value.forEach(item => {\n                            this.processOptions(item, fromGetter);\n                        });\n                        return;\n                    }\n                    this.processOptions(options[key] as any, fromGetter);\n                    return;\n                }\n\n                rules = fromGetter;\n            } else {\n                rules = rulesOrGetter;\n            }\n            \n            const { module, dependencies, supportedRowModels } = rules;\n            if (supportedRowModels) {\n                const rowModel = this.gridOptions.rowModelType ?? 'clientSide';\n                if (!supportedRowModels.includes(rowModel)) {\n                    warnings.add(`${String(key)} is not supported with the '${rowModel}' row model.`);\n                    return;\n                }\n            }\n\n            if (module) {\n                const modules = Array.isArray(module) ? module : [module];\n\n                let allRegistered = true;\n                modules.forEach(m => {\n                    if (!ModuleRegistry.__assertRegistered(m, String(key), this.context.getGridId())) {\n                        allRegistered = false;\n                        warnings.add(`${String(key)} is only available when ${m} is loaded.`);\n                    }\n                });\n\n                if (!allRegistered) {\n                    return;\n                }\n            }\n\n            if (dependencies) {                \n                const warning = this.checkForWarning(key, dependencies, options);\n                if (warning) {\n                    warnings.add(warning);\n                    return;\n                }\n            }\n        });\n        if (warnings.size > 0) {\n            warnings.forEach(warning => {\n                warnOnce(warning);\n            });\n        }\n    };\n\n    private checkForWarning<T extends {}>(key: keyof T, validator: DependencyValidator<T>, options: T): string | null {\n        if (typeof validator === 'function') {\n            return validator(options, this.gridOptions);    \n        }\n\n        const optionEntries = Object.entries(validator) as [string, any][];\n        const failed = optionEntries.find(([key, value]) => {\n            const gridOptionValue = options[key as keyof T];\n            return !value.includes(gridOptionValue);\n        });\n    \n        if (!failed) {\n            return null;\n        }\n\n        const [failedKey, possibleOptions] = failed;\n        if (possibleOptions.length > 1) {\n            return `'${String(key)}' requires '${failedKey}' to be one of [${possibleOptions.join(', ')}].`;\n        }\n\n        return `'${String(key)}' requires '${failedKey}' to be ${possibleOptions[0]}.`;\n    }\n\n    private checkProperties<T extends {}>(\n        object: T,\n        exceptions: string[], // deprecated properties generally\n        validProperties: string[], // properties to recommend\n        containerName: string,\n        docsUrl?: string\n    ): void {\n        // Vue adds these properties to all objects, so we ignore them when checking for invalid properties\n        const VUE_FRAMEWORK_PROPS = ['__ob__', '__v_skip', '__metadata__'];\n\n        const invalidProperties: { [p: string]: string[]; } = fuzzyCheckStrings(\n            Object.getOwnPropertyNames(object),\n            [...VUE_FRAMEWORK_PROPS, ...exceptions, ...validProperties],\n            validProperties\n        );\n\n        iterateObject<any>(invalidProperties, (key, value) => {\n            warnOnce(`invalid ${containerName} property '${key}' did you mean any of these: ${value.slice(0, 8).join(', ')}`);\n        });\n\n        if (Object.keys(invalidProperties).length > 0 && docsUrl) {\n            const url = this.getFrameworkOverrides().getDocLink(docsUrl);            \n            warnOnce(`to see all the valid ${containerName} properties please check: ${url}`);\n        }\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\"\nimport { Bean, PostConstruct } from \"../context/context\";\nimport { AgEventListener, AgGlobalEventListener, ALWAYS_SYNC_GLOBAL_EVENTS } from \"../events\";\nimport { FrameworkEventListenerService } from \"./frameworkEventListenerService\";\n\n@Bean('apiEventService')\nexport class ApiEventService extends BeanStub {\n    private syncEventListeners: Map<string, Set<AgEventListener>> = new Map();\n    private asyncEventListeners: Map<string, Set<AgEventListener>> = new Map();\n    private syncGlobalEventListeners: Set<AgGlobalEventListener> = new Set();\n    private globalEventListenerPairs = new Map<AgGlobalEventListener, { syncListener: AgGlobalEventListener, asyncListener: AgGlobalEventListener }>();\n    private frameworkEventWrappingService: FrameworkEventListenerService;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.frameworkEventWrappingService = new FrameworkEventListenerService(this.getFrameworkOverrides());\n    }\n\n    public addEventListener(eventType: string, userListener: AgEventListener): void {\n        const listener = this.frameworkEventWrappingService.wrap(userListener);\n\n        const async = this.gridOptionsService.useAsyncEvents() && !ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType);;\n        const listeners = async ? this.asyncEventListeners : this.syncEventListeners;\n        if (!listeners.has(eventType)) {\n            listeners.set(eventType, new Set());\n        }\n        listeners.get(eventType)!.add(listener);\n        this.eventService.addEventListener(eventType, listener, async);\n    }\n    public removeEventListener(eventType: string, userListener: AgEventListener): void {\n        const listener = this.frameworkEventWrappingService.unwrap(userListener);        \n        const asyncListeners = this.asyncEventListeners.get(eventType);\n        const hasAsync = !!asyncListeners?.delete(listener);\n        if (!hasAsync) {\n            this.syncEventListeners.get(eventType)?.delete(listener);\n        }\n        this.eventService.removeEventListener(eventType, listener, hasAsync);\n    }\n\n\n    public addGlobalListener(userListener: AgGlobalEventListener): void {\n        const listener = this.frameworkEventWrappingService.wrapGlobal(userListener);\n\n        const async = this.gridOptionsService.useAsyncEvents();\n\n        if(async){\n            // if async then need to setup the global listener for sync to handle alwaysSyncGlobalEvents\n            const syncListener: AgGlobalEventListener = (eventType: string, event: any) => {\n                if(ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType)){\n                    listener(eventType, event);\n                }\n            };\n            const asyncListener: AgGlobalEventListener = (eventType: string, event: any) => {\n                if(!ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType)){\n                    listener(eventType, event);\n                }\n            };\n            this.globalEventListenerPairs.set(userListener, {syncListener, asyncListener});\n            this.eventService.addGlobalListener(syncListener, false);\n            this.eventService.addGlobalListener(asyncListener, true);\n        }else{\n            this.syncGlobalEventListeners.add(listener);\n            this.eventService.addGlobalListener(listener, false);\n        }        \n    }\n\n    public removeGlobalListener(userListener: AgGlobalEventListener): void {\n        const listener = this.frameworkEventWrappingService.unwrapGlobal(userListener);\n        \n        const hasAsync = this.globalEventListenerPairs.has(listener);        \n        if(hasAsync){\n            // If it was async also remove the always sync listener we added\n            const { syncListener, asyncListener } = this.globalEventListenerPairs.get(listener)!;\n            this.eventService.removeGlobalListener(syncListener, false);\n            this.eventService.removeGlobalListener(asyncListener, true);\n            this.globalEventListenerPairs.delete(userListener);\n        }else{\n            this.syncGlobalEventListeners.delete(listener);\n            this.eventService.removeGlobalListener(listener, false);\n        }\n    }\n\n    private destroyEventListeners(map: Map<string, Set<AgEventListener>>, async: boolean): void {\n        map.forEach((listeners, eventType) => {\n            listeners.forEach(listener => this.eventService.removeEventListener(eventType, listener, async));\n            listeners.clear();\n        });\n        map.clear();\n    }\n\n    private destroyGlobalListeners(set: Set<AgGlobalEventListener>, async: boolean): void {\n        set.forEach(listener => this.eventService.removeGlobalListener(listener, async));\n        set.clear();\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        this.destroyEventListeners(this.syncEventListeners, false);\n        this.destroyEventListeners(this.asyncEventListeners, true);\n        this.destroyGlobalListeners(this.syncGlobalEventListeners, false);\n        this.globalEventListenerPairs.forEach(({syncListener, asyncListener}) => {\n            this.eventService.removeGlobalListener(syncListener, false);\n            this.eventService.removeGlobalListener(asyncListener, true);\n        });\n        this.globalEventListenerPairs.clear();\n    }\n}", "import { Component } from \"../../widgets/component\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { LocaleService } from \"../../localeService\";\nimport { GridOptionsService } from \"../../gridOptionsService\";\nimport { AgSelect } from \"../../widgets/agSelect\";\nimport { Events } from \"../../eventKeys\";\nimport { PaginationChangedEvent } from \"../../events\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { clearElement } from \"../../utils/dom\";\nimport { warnOnce } from \"../../utils/function\";\n\nexport class PageSizeSelectorComp extends Component {\n\n    @Autowired('localeService') protected readonly localeService: LocaleService;\n    @Autowired('gridOptionsService') protected readonly gridOptionsService: GridOptionsService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    private selectPageSizeComp: AgSelect | undefined;\n    private hasEmptyOption = false;\n\n    constructor() {\n        super(/* html */`<span class=\"ag-paging-page-size\"></span>`);\n    }\n\n    @PostConstruct\n    private init() {\n        this.addManagedPropertyListener('paginationPageSizeSelector', () => {\n            this.onPageSizeSelectorValuesChange();\n        });\n\n        this.addManagedListener(\n            this.eventService,\n            Events.EVENT_PAGINATION_CHANGED,\n            (event) => this.handlePaginationChanged(event),\n        );\n    }\n\n    private handlePageSizeItemSelected = (): void => {\n        if (!this.selectPageSizeComp) { return; }\n\n        const newValue = this.selectPageSizeComp.getValue();\n\n        if (!newValue) { return; }\n\n        const paginationPageSize = Number(newValue);\n\n        if (\n            isNaN(paginationPageSize) ||\n            paginationPageSize < 1 ||\n            paginationPageSize === this.paginationProxy.getPageSize()\n        ) { return; }\n\n        this.paginationProxy.setPageSize(paginationPageSize, 'pageSizeSelector');\n\n        if (this.hasEmptyOption) {\n            // Toggle the selector to force a refresh of the options and hide the empty option,\n            // as it's no longer needed.\n            this.toggleSelectDisplay(true);\n        }\n\n        this.selectPageSizeComp.getFocusableElement().focus();\n    };\n\n    private handlePaginationChanged(paginationChangedEvent?: WithoutGridCommon<PaginationChangedEvent>): void {\n        if (!this.selectPageSizeComp || !paginationChangedEvent?.newPageSize) { return; }\n\n        const paginationPageSize = this.paginationProxy.getPageSize();\n        if (this.getPageSizeSelectorValues().includes(paginationPageSize)) {\n            this.selectPageSizeComp.setValue(paginationPageSize.toString());\n        } else {\n            if (this.hasEmptyOption) {\n                this.selectPageSizeComp.setValue('');\n            } else {\n                this.toggleSelectDisplay(true);\n            }\n        }\n    }\n\n    public toggleSelectDisplay(show: boolean) {\n        if (this.selectPageSizeComp) {\n            this.reset();\n        }\n\n        if (!show) { return; }\n\n        this.reloadPageSizesSelector();\n\n        if (!this.selectPageSizeComp) { return; }\n\n        this.appendChild(this.selectPageSizeComp);\n    }\n\n    private reset(): void {\n        clearElement(this.getGui());\n\n        if (!this.selectPageSizeComp) { return; }\n\n        this.destroyBean(this.selectPageSizeComp);\n        this.selectPageSizeComp = undefined;\n    }\n\n    private onPageSizeSelectorValuesChange(): void {\n        if (!this.selectPageSizeComp) { return; }\n\n        if (this.shouldShowPageSizeSelector()) {\n            this.reloadPageSizesSelector();\n        }\n    }\n\n    public shouldShowPageSizeSelector(): boolean {\n        return (\n            this.gridOptionsService.get('pagination') &&\n            !this.gridOptionsService.get('suppressPaginationPanel') &&\n            !this.gridOptionsService.get('paginationAutoPageSize') &&\n            this.gridOptionsService.get('paginationPageSizeSelector') !== false\n        );\n    }\n\n    private reloadPageSizesSelector(): void {\n        const pageSizeOptions: (number | string)[] = this.getPageSizeSelectorValues();\n        const paginationPageSizeOption: number = this.paginationProxy.getPageSize();\n        const shouldAddAndSelectEmptyOption = !paginationPageSizeOption || !pageSizeOptions.includes(paginationPageSizeOption)\n        if (shouldAddAndSelectEmptyOption) {\n            // When the paginationPageSize option is set to a value that is\n            // not in the list of page size options.\n            pageSizeOptions.unshift('');\n\n            warnOnce(\n                `The paginationPageSize grid option is set to a value that is not in the list of page size options.\n                Please make sure that the paginationPageSize grid option is set to one of the values in the \n                paginationPageSizeSelector array, or set the paginationPageSizeSelector to false to hide the page size selector.`\n            );\n        }\n\n        if (this.selectPageSizeComp) {\n            this.destroyBean(this.selectPageSizeComp);\n            this.selectPageSizeComp = undefined;\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const localisedLabel = localeTextFunc('pageSizeSelectorLabel', 'Page Size:');\n\n        const options = pageSizeOptions.map(value => ({\n            value: String(value),\n            text: String(value)\n        }));\n\n        const localisedAriaLabel = localeTextFunc('ariaPageSizeSelectorLabel', 'Page Size');\n\n        this.selectPageSizeComp = this.createManagedBean(new AgSelect())\n            .addOptions(options)\n            .setValue(String(shouldAddAndSelectEmptyOption ? '' : paginationPageSizeOption))\n            .setAriaLabel(localisedAriaLabel)\n            .setLabel(localisedLabel)\n            .onValueChange(() => this.handlePageSizeItemSelected());\n\n        this.hasEmptyOption = shouldAddAndSelectEmptyOption;\n    }\n\n    private getPageSizeSelectorValues(): number[] {\n        const defaultValues = [20, 50, 100];\n        const paginationPageSizeSelectorValues = this.gridOptionsService.get('paginationPageSizeSelector');\n\n        if (\n            !Array.isArray(paginationPageSizeSelectorValues) ||\n            !this.validateValues(paginationPageSizeSelectorValues)\n        ) {\n            return defaultValues;\n        }\n\n        return [...paginationPageSizeSelectorValues].sort((a, b) => a - b);\n    }\n\n    private validateValues(values: number[]): boolean {\n        if (!values.length) {\n            warnOnce(\n                `The paginationPageSizeSelector grid option is an empty array. This is most likely a mistake.\n                If you want to hide the page size selector, please set the paginationPageSizeSelector to false.`\n            );\n\n            return false;\n        }\n\n        for (let i = 0; i < values.length; i++) {\n            const value = values[i];\n            const isNumber = typeof value === 'number';\n            const isPositive = value > 0;\n\n            if (!isNumber) {\n                warnOnce(\n                    `The paginationPageSizeSelector grid option contains a non-numeric value.\n                    Please make sure that all values in the paginationPageSizeSelector array are numbers.`\n                );\n                return false;\n            }\n\n            if (!isPositive) {\n                warnOnce(\n                    `The paginationPageSizeSelector grid option contains a negative number or zero.\n                    Please make sure that all values in the paginationPageSizeSelector array are positive.`\n                );\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public destroy() {\n        this.toggleSelectDisplay(false);\n        super.destroy();\n    }\n}\n", "import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { setAriaAtomic, setAriaLive, setAriaRelevant } from \"../utils/aria\";\nimport { clearElement } from \"../utils/dom\";\nimport { debounce } from \"../utils/function\";\n\n@Bean('ariaAnnouncementService')\nexport class AriaAnnouncementService extends BeanStub {\n\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n\n    private descriptionContainer: HTMLElement | null = null;\n\n    constructor() {\n        super();\n\n        this.announceValue = debounce(this.announceValue.bind(this), 200);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        const div = this.descriptionContainer = eDocument.createElement('div');\n        div.classList.add('ag-aria-description-container');\n\n        setAriaLive(div, 'polite');\n        setAriaRelevant(div, 'additions text');\n        setAriaAtomic(div, true);\n\n        this.eGridDiv.appendChild(div);\n    }\n\n    public announceValue(value: string): void {\n        if (!this.descriptionContainer) { return; }\n        // screen readers announce a change in content, so we set it to an empty value\n        // and then use a setTimeout to force the Screen Reader announcement \n        this.descriptionContainer!.textContent = '';\n        setTimeout(() => {\n            if (this.isAlive() && this.descriptionContainer) {\n                this.descriptionContainer.textContent = value;\n            }\n        }, 50);\n    }\n\n    public destroy(): void {\n        super.destroy();\n\n        const { descriptionContainer } = this;\n\n        if (descriptionContainer) {\n            clearElement(descriptionContainer);\n            if (descriptionContainer.parentElement) {\n                descriptionContainer.parentElement.removeChild(descriptionContainer);\n            }\n        }\n        this.descriptionContainer = null;\n        (this.eGridDiv as any) = null;\n    }\n}", "import { GridOptions } from \"./entities/gridOptions\";\nimport { SelectionService } from \"./selectionService\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { GridHeaderComp } from \"./headerRendering/gridHeaderComp\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { GridBodyComp } from \"./gridBodyComp/gridBodyComp\";\nimport { GridApi } from \"./gridApi\";\nimport { ColumnFactory } from \"./columns/columnFactory\";\nimport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator\";\nimport { ExpressionService } from \"./valueService/expressionService\";\nimport { TemplateService } from \"./templateService\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { ColumnUtils } from \"./columns/columnUtils\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService\";\nimport { ComponentMeta, Context, ContextParams } from \"./context/context\";\nimport { GridComp } from \"./gridComp/gridComp\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { DragService } from \"./dragAndDrop/dragService\";\nimport { SortController } from \"./sortController\";\nimport { FocusService } from \"./focusService\";\nimport { MouseEventService } from \"./gridBodyComp/mouseEventService\";\nimport { CellNavigationService } from \"./cellNavigationService\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nimport { AgCheckbox } from \"./widgets/agCheckbox\";\nimport { AgRadioButton } from \"./widgets/agRadioButton\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nimport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nimport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService\";\nimport { StylingService } from \"./styling/stylingService\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService\";\nimport { AutoGroupColService } from \"./columns/autoGroupColService\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService\";\nimport { RowModelType } from \"./interfaces/iRowModel\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider\";\nimport { Beans } from \"./rendering/beans\";\nimport { Environment } from \"./environment\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowContainerHeightService } from \"./rendering/rowContainerHeightService\";\nimport { SelectableService } from \"./rowNodes/selectableService\";\nimport { PaginationComp } from \"./pagination/paginationComp\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { Module } from \"./interfaces/iModule\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent\";\nimport { AgDialog } from \"./widgets/agDialog\";\nimport { AgPanel } from \"./widgets/agPanel\";\nimport { AgInputTextField } from \"./widgets/agInputTextField\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nimport { AgSlider } from \"./widgets/agSlider\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nimport { AgInputRange } from \"./widgets/agInputRange\";\nimport { AgSelect } from \"./widgets/agSelect\";\nimport { AgRichSelect } from \"./widgets/agRichSelect\";\nimport { AgToggleButton } from \"./widgets/agToggleButton\";\nimport { RowPositionUtils } from \"./entities/rowPositionUtils\";\nimport { CellPositionUtils } from \"./entities/cellPositionUtils\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\nimport { HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { missing } from \"./utils/generic\";\nimport { ColumnDefFactory } from \"./columns/columnDefFactory\";\nimport { RowCssClassCalculator } from \"./rendering/row/rowCssClassCalculator\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nimport { RowNodeSorter } from \"./rowNodes/rowNodeSorter\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { CtrlsFactory } from \"./ctrlsFactory\";\nimport { FakeHScrollComp } from \"./gridBodyComp/fakeHScrollComp\";\nimport { PinnedWidthService } from \"./gridBodyComp/pinnedWidthService\";\nimport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp\";\nimport { RowNodeEventThrottle } from \"./entities/rowNodeEventThrottle\";\nimport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu\";\nimport { SortIndicatorComp } from \"./headerRendering/cells/column/sortIndicatorComp\";\nimport { GridOptionsService } from \"./gridOptionsService\";\nimport { LocaleService } from \"./localeService\";\nimport { FakeVScrollComp } from \"./gridBodyComp/fakeVScrollComp\";\nimport { DataTypeService } from \"./columns/dataTypeService\";\nimport { AgInputDateField } from \"./widgets/agInputDateField\";\nimport { ValueParserService } from \"./valueService/valueParserService\";\nimport { AgAutocomplete } from \"./widgets/agAutocomplete\";\nimport { QuickFilterService } from \"./filter/quickFilterService\";\nimport { warnOnce, errorOnce } from \"./utils/function\";\nimport { SyncService } from \"./syncService\";\nimport { OverlayService } from \"./rendering/overlays/overlayService\";\nimport { StateService } from \"./misc/stateService\";\nimport { ExpansionService } from \"./misc/expansionService\";\nimport { ValidationService } from \"./validation/validationService\";\nimport { ApiEventService } from \"./misc/apiEventService\";\nimport { PageSizeSelectorComp } from \"./pagination/pageSizeSelector/pageSizeSelectorComp\";\nimport { AriaAnnouncementService } from \"./rendering/ariaAnnouncementService\";\nimport { MenuService } from \"./misc/menuService\";\n\nexport interface GridParams {\n    // INTERNAL - used by Web Components\n    globalEventListener?: Function;\n    // INTERNAL - Always sync - for events such as gridPreDestroyed\n    globalSyncEventListener?: Function;    \n    // INTERNAL - this allows the base frameworks (React, Angular, etc) to provide alternative cellRenderers and cellEditors\n    frameworkOverrides?: IFrameworkOverrides;\n    // INTERNAL - bean instances to add to the context\n    providedBeanInstances?: { [key: string]: any; };\n\n    /**\n     * Modules to be registered directly with this grid instance.\n     */\n    modules?: Module[];\n}\n\nexport interface Params {\n    /**\n     * Modules to be registered directly with this grid instance.\n     */\n    modules?: Module[];\n}\n\n/**\n * Creates a grid inside the provided HTML element.\n * @param eGridDiv Parent element to contain the grid.\n * @param gridOptions Configuration for the grid.\n * @param params Individually register AG Grid Modules to this grid.\n * @returns api to be used to interact with the grid.\n */\nexport function createGrid<TData>(eGridDiv: HTMLElement, gridOptions: GridOptions<TData>, params?: Params): GridApi<TData>{\n\n    if (!gridOptions) {\n        errorOnce('No gridOptions provided to createGrid');\n        return {} as GridApi;\n    }   \n    // Ensure we do not mutate the provided gridOptions\n    const shallowCopy = GridOptionsService.getCoercedGridOptions(gridOptions);\n    const api = new GridCoreCreator().create(eGridDiv, shallowCopy, context => {\n        const gridComp = new GridComp(eGridDiv);\n        context.createBean(gridComp);\n    }, undefined, params);\n\n    // @deprecated v31 api / columnApi no longer mutated onto the provided gridOptions\n    // Instead we place a getter that will log an error when accessed and direct users to the docs\n    // Only apply for direct usages of createGrid, not for frameworks\n    if (!Object.isFrozen(gridOptions) && !(params as GridParams)?.frameworkOverrides) {\n        const apiUrl = 'https://ag-grid.com/javascript-data-grid/grid-interface/#grid-api';\n        Object.defineProperty(gridOptions, 'api', {\n            get: () => {\n                errorOnce(`gridOptions.api is no longer supported. See ${apiUrl}.`);\n                return undefined;\n            },\n            configurable: true,\n        },);\n        Object.defineProperty(gridOptions, 'columnApi', {\n            get: () => {\n                errorOnce(`gridOptions.columnApi is no longer supported and all methods moved to the grid api. See ${apiUrl}.`);\n                return undefined;\n            },\n            configurable: true,\n        });\n    }\n    \n    return api;\n}\n/**\n * @deprecated v31 use createGrid() instead\n */\nexport class Grid {\n    protected logger: Logger;\n\n    private readonly gridOptions: any; // Not typed to enable setting api / columnApi for backwards compatibility\n\n    constructor(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams) {\n      warnOnce('Since v31 new Grid(...) is deprecated. Use createGrid instead: `const gridApi = createGrid(...)`. The grid api is returned from createGrid and will not be available on gridOptions.');\n\n        if (!gridOptions) {\n            errorOnce('No gridOptions provided to the grid');\n            return;\n        }\n\n        this.gridOptions = gridOptions as any;\n\n        const api = new GridCoreCreator().create(\n            eGridDiv,\n            gridOptions,\n            (context) => {\n                const gridComp = new GridComp(eGridDiv);\n                const bean = context.createBean(gridComp);\n                bean.addDestroyFunc(() => {\n                    this.destroy()\n                });\n            },\n            undefined,\n            params\n        );\n        \n        // Maintain existing behaviour by mutating gridOptions with the apis for deprecated new Grid()\n        this.gridOptions.api = api;\n        this.gridOptions.columnApi = new ColumnApi(api);\n    }\n\n    public destroy(): void {\n        if (this.gridOptions) {\n            this.gridOptions.api?.destroy();\n            // need to remove these, as we don't own the lifecycle of the gridOptions, we need to\n            // remove the references in case the user keeps the grid options, we want the rest\n            // of the grid to be picked up by the garbage collector\n            delete this.gridOptions.api;\n            delete this.gridOptions.columnApi;\n        }\n    }\n}\n\nlet nextGridId = 1;\n\n// creates services of grid only, no UI, so frameworks can use this if providing\n// their own UI\nexport class GridCoreCreator {\n\n    public create(eGridDiv: HTMLElement, gridOptions: GridOptions, createUi: (context: Context) => void, acceptChanges?: (context: Context) => void, params?: GridParams): GridApi {\n\n        // Shallow copy to prevent user provided gridOptions from being mutated.\n        const debug = !!gridOptions.debug;\n        const gridId = gridOptions.gridId ?? String(nextGridId++);\n\n        const registeredModules = this.getRegisteredModules(params, gridId);\n\n        const beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules, gridId);\n        const providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\n\n        if (!beanClasses) { \n            // Detailed error message will have been printed by createBeansList\n            errorOnce('Failed to create grid.');\n            // Break typing so that the normal return type does not have to handle undefined.\n            return undefined as any; \n        } \n\n        const contextParams: ContextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            debug: debug,\n            gridId: gridId,\n        };\n\n        const contextLogger = new Logger('Context', () => contextParams.debug);\n        const context = new Context(contextParams, contextLogger);\n        const beans = context.getBean('beans') as Beans;\n\n        this.registerModuleUserComponents(beans, registeredModules);\n        this.registerStackComponents(beans, registeredModules);\n        this.registerControllers(beans, registeredModules);\n\n        createUi(context);\n\n        beans.syncService.start();\n\n        if (acceptChanges) { acceptChanges(context); }\n\n\n        return beans.gridApi;\n    }\n\n    private registerControllers(beans: Beans, registeredModules: Module[]): void {\n        registeredModules.forEach(module => {\n            if (module.controllers) {\n                module.controllers.forEach(meta => beans.ctrlsFactory.register(meta));\n            }\n        });\n    }\n\n    private registerStackComponents(beans: Beans, registeredModules: Module[]): void {\n        const agStackComponents = this.createAgStackComponentsList(registeredModules);\n        beans.agStackComponentsRegistry.setupComponents(agStackComponents);\n    }\n\n    private getRegisteredModules(params: GridParams | undefined, gridId: string): Module[] {\n        const passedViaConstructor: Module[] | undefined | null = params ? params.modules : null;\n        const registered = ModuleRegistry.__getRegisteredModules(gridId);\n\n        const allModules: Module[] = [];\n        const mapNames: { [name: string]: boolean; } = {};\n\n        // adds to list and removes duplicates\n        const addModule = (moduleBased: boolean, mod: Module, gridId: string | undefined) => {\n            const addIndividualModule = (currentModule: Module) => {\n                if (!mapNames[currentModule.moduleName]) {\n                    mapNames[currentModule.moduleName] = true;\n                    allModules.push(currentModule);\n                    ModuleRegistry.__register(currentModule, moduleBased, gridId);\n                }\n            }\n\n            addIndividualModule(mod);\n            if (mod.dependantModules) {\n                mod.dependantModules.forEach(m => addModule(moduleBased, m, gridId));\n            }\n        }\n\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach(m => addModule(true, m, gridId));\n        }\n\n        if (registered) {\n            registered.forEach(m => addModule(!ModuleRegistry.__isPackageBased(), m, undefined));\n        }\n\n        return allModules;\n    }\n\n    private registerModuleUserComponents(beans: Beans, registeredModules: Module[]): void {\n        const moduleUserComps: { componentName: string, componentClass: any; }[]\n            = this.extractModuleEntity(registeredModules,\n                (module) => module.userComponents ? module.userComponents : []);\n\n        moduleUserComps.forEach(compMeta => {\n            beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n        });\n    }\n\n    private createProvidedBeans(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams): any {\n        let frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n\n        const seed = {\n            gridOptions: gridOptions,\n            eGridDiv: eGridDiv,\n            globalEventListener: params ? params.globalEventListener : null,\n            globalSyncEventListener: params ? params.globalSyncEventListener : null,\n            frameworkOverrides: frameworkOverrides\n        };\n        if (params && params.providedBeanInstances) {\n            Object.assign(seed, params.providedBeanInstances);\n        }\n\n        return seed;\n    }\n\n    private createAgStackComponentsList(registeredModules: Module[]): any[] {\n        let components: ComponentMeta[] = [\n            { componentName: 'AgCheckbox', componentClass: AgCheckbox },\n            { componentName: 'AgRadioButton', componentClass: AgRadioButton },\n            { componentName: 'AgToggleButton', componentClass: AgToggleButton },\n            { componentName: 'AgInputTextField', componentClass: AgInputTextField },\n            { componentName: 'AgInputTextArea', componentClass: AgInputTextArea },\n            { componentName: 'AgInputNumberField', componentClass: AgInputNumberField },\n            { componentName: 'AgInputDateField', componentClass: AgInputDateField },\n            { componentName: 'AgInputRange', componentClass: AgInputRange },\n            { componentName: 'AgRichSelect', componentClass: AgRichSelect },\n            { componentName: 'AgSelect', componentClass: AgSelect },\n            { componentName: 'AgSlider', componentClass: AgSlider },\n            { componentName: 'AgGridBody', componentClass: GridBodyComp },\n            { componentName: 'AgHeaderRoot', componentClass: GridHeaderComp },\n            { componentName: 'AgSortIndicator', componentClass: SortIndicatorComp },\n            { componentName: 'AgPagination', componentClass: PaginationComp },\n            { componentName: 'AgPageSizeSelector', componentClass: PageSizeSelectorComp },\n            { componentName: 'AgOverlayWrapper', componentClass: OverlayWrapperComponent },\n            { componentName: 'AgGroupComponent', componentClass: AgGroupComponent },\n            { componentName: 'AgRowContainer', componentClass: RowContainerComp },\n            { componentName: 'AgFakeHorizontalScroll', componentClass: FakeHScrollComp },\n            { componentName: 'AgFakeVerticalScroll', componentClass: FakeVScrollComp },\n            { componentName: 'AgAutocomplete', componentClass: AgAutocomplete },\n        ];\n\n        const moduleAgStackComps = this.extractModuleEntity(registeredModules,\n            (module) => module.agStackComponents ? module.agStackComponents : []);\n\n        components = components.concat(moduleAgStackComps);\n\n        return components;\n    }\n\n    private createBeansList(rowModelType: RowModelType | undefined = 'clientSide', registeredModules: Module[], gridId: string): any[] | undefined {\n        // only load beans matching the required row model\n        const rowModelModules = registeredModules.filter(module => !module.rowModel || module.rowModel === rowModelType);\n\n\n        // assert that the relevant module has been loaded\n        const rowModelModuleNames: Record<RowModelType, ModuleNames> = {\n            clientSide: ModuleNames.ClientSideRowModelModule,\n            infinite: ModuleNames.InfiniteRowModelModule,\n            serverSide: ModuleNames.ServerSideRowModelModule,\n            viewport: ModuleNames.ViewportRowModelModule\n        };\n\n        if (!rowModelModuleNames[rowModelType]) {\n            errorOnce('Could not find row model for rowModelType = ' + rowModelType);\n            return;\n        }\n\n        if (!ModuleRegistry.__assertRegistered(rowModelModuleNames[rowModelType], `rowModelType = '${rowModelType}'`, gridId)) {\n            return;\n        }\n\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n        const beans = [\n            Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils,\n            PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils,\n            ComponentMetadataProvider, ResizeObserverService, UserComponentFactory,\n            RowContainerHeightService, HorizontalResizeService, LocaleService, ValidationService,\n            PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsService,\n            PopupService, SelectionService, FilterManager, ColumnModel, HeaderNavigationService,\n            PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService,\n            AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory,\n            ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi,\n            FocusService, MouseEventService, Environment, CellNavigationService, ValueFormatterService,\n            StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService,\n            SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService,\n            UndoRedoService, AgStackComponentsRegistry, ColumnDefFactory,\n            RowCssClassCalculator, RowNodeBlockLoader, RowNodeSorter, CtrlsService,\n            PinnedWidthService, RowNodeEventThrottle, CtrlsFactory, DataTypeService, ValueParserService,\n            QuickFilterService, SyncService, OverlayService, StateService, ExpansionService,\n            ApiEventService, AriaAnnouncementService, MenuService\n        ];\n\n        const moduleBeans = this.extractModuleEntity(rowModelModules, (module) => module.beans ? module.beans : []);\n        beans.push(...moduleBeans);\n\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        const beansNoDuplicates: any[] = [];\n        beans.forEach(bean => {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n\n        return beansNoDuplicates;\n    }\n\n    private extractModuleEntity(moduleEntities: any[], extractor: (module: any) => any) {\n        return [].concat(...moduleEntities.map(extractor));\n    }\n}\n", "import { IComponent } from \"../../interfaces/iComponent\";\nimport { ComponentType } from \"./componentTypes\";\n\n/**\n * B the business interface (ie IHeader)\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n */\nexport interface FrameworkComponentWrapper {\n    wrap<A extends IComponent<any>>(frameworkComponent: { new(): any } | null,\n                                    methodList: string[],\n                                    optionalMethodList: string[],\n                                    componentType: ComponentType\n    ): A;\n}\n\nexport interface WrappableInterface {\n    hasMethod(name: string): boolean;\n\n    callMethod(name: string, args: IArguments): void;\n\n    addMethod(name: string, callback: Function): void;\n}\n\nexport abstract class BaseComponentWrapper<F extends WrappableInterface> implements FrameworkComponentWrapper {\n    public wrap<A extends IComponent<any>>(OriginalConstructor: { new(): any },\n                                    mandatoryMethodList: string[],\n                                    optionalMethodList: string[] = [],\n                                    componentType: ComponentType): A {\n        const wrapper: F = this.createWrapper(OriginalConstructor, componentType);\n\n        mandatoryMethodList.forEach((methodName => {\n            this.createMethod(wrapper, methodName, true);\n        }));\n\n        optionalMethodList.forEach((methodName => {\n            this.createMethod(wrapper, methodName, false);\n        }));\n\n        return wrapper as any as A;\n\n    }\n\n    public unwrap(comp: any): any {\n        return comp;\n    }\n\n    abstract createWrapper(OriginalConstructor: { new(): any }, componentType: ComponentType): F;\n\n    private createMethod(wrapper: F, methodName: string, mandatory: boolean): void {\n        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));\n    }\n\n    protected createMethodProxy(wrapper: F, methodName: string, mandatory: boolean): Function {\n        return function() {\n            if (wrapper.hasMethod(methodName)) {\n                return wrapper.callMethod(methodName, arguments);\n            }\n\n            if (mandatory) {\n                console.warn('AG Grid: Framework component is missing the method ' + methodName + '()');\n            }\n            // multiple features rely on this returning `null` rather than `undefined`,\n            // so that they can differentiate whether the underlying component has implemented a void method or not\n            return null;\n        };\n    }\n}\n", "export interface AgChartThemeOverrides {}\nexport interface AgChartThemePalette {}\nexport interface AgChartThemeDefinition {}\nexport type AgChartTheme = string | AgChartThemeDefinition;\n\n/**\n * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7\n */\n export const __FORCE_MODULE_DETECTION = 0;\n", "import { ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\n\nexport interface ISparklineCellRendererParams<TData = any, TContext = any> extends ICellRendererParams<TData, TContext> {\n    sparklineOptions?: SparklineOptions;\n}\n\nexport type SparklineOptions = LineSparklineOptions | AreaSparklineOptions | ColumnSparklineOptions | BarSparklineOptions;\n\nexport interface BaseSparklineOptions {\n    /** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * @default 'x'\n     */\n    xKey?: string;\n    /** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * @default 'y'\n     */\n    yKey?: string;\n    /** Configuration for the padding in pixels shown around the sparklines. */\n    padding?: PaddingOptions;\n    /** The options for the axis line in the sparklines. */\n    axis?: SparklineAxisOptions;\n    /** The configuration for the highlighting used when the items are hovered over. */\n    highlightStyle?: HighlightStyleOptions;\n    /** Configuration for the tooltips. */\n    tooltip?: SparklineTooltipOptions;\n}\n\nexport interface LineSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'line'`. */\n    type?: 'line';\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n    /** The configuration for the crosshairs. */\n    crosshairs?: SparklineCrosshairsOptions;\n}\n\nexport interface AreaSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'area'`. */\n    type?: 'area';\n    /** The CSS colour value for the fill of the area.\n     * @default 'rgba(124, 181, 236, 0.25)'\n     */\n    fill?: string;\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n    /** The configuration for the crosshairs. */\n    crosshairs?: SparklineCrosshairsOptions;\n}\n\nexport interface ColumnSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'column'`. */\n    type?: 'column';\n    /** The CSS colour value for the fill of the columns.\n     * @default 'rgb(124, 181, 236)'\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the columns.\n     * @default 'silver'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the columns.\n     * @default 0\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the columns as a proportion, between 0 and 1. This value is a fraction of the \u201Cstep\u201D, which is the interval between the start of a band and the start of the next band.\n     * @default 0.1\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last columns, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * @default 0.2\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type ColumnFormat, based on the data represented by individual columns. */\n    formatter?: SparklineColumnFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface BarSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'bar'`. */\n    type?: 'bar';\n    /** The CSS colour value for the fill of the bars.\n     * @default 'rgb(124, 181, 236)'\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the bars.\n     * Default `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the bars.\n     * @default 0\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the bars as a proportion, between 0 and 1. This value is a fraction of the \u201Cstep\u201D, which is the interval between the start of a band and the start of the next band.\n     * @default 0.1\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last bars, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * @default 0.2\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type BarFormat, based on the data represented by individual bars. */\n    formatter?: SparklineBarFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface SparklineLabelOptions {\n    /**\n     * Set to true to enable labels.\n     * @default false\n     */\n    enabled?: boolean;\n    /**\n     * Set size of the font.\n     * @default 8\n     */\n    fontSize?: number;\n    /**\n     * Specify the font for the label text.\n     * @default Verdana, sans-serif\n     */\n    fontFamily?: string;\n    /** Specify the font style for the label text. */\n    fontStyle?: 'normal' | 'italic' | 'oblique';\n    /** Set how thick or thin characters in label text should be displayed. */\n    fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    /**\n     * Set the color of the label text. The color can be specified by a color name, a HEX or an RGB value.\n     * @default rgba(70, 70, 70, 1)\n     */\n    color?: string;\n    /**\n     * A callback function to return the text to be displayed as the label, based on the value represented by the column or bar.\n     * By default the values are simply stringified. */\n    formatter?: (params: LabelFormatterParams) => string;\n    /**\n     * Where to render labels relative to the segments.\n     * @default insideEnd\n     */\n    placement?: BarColumnLabelPlacement;\n}\n\nexport interface LabelFormatterParams {\n    /** The Y value of the data point. */\n    value: number | undefined;\n}\n\nexport enum BarColumnLabelPlacement {\n    InsideBase = 'insideBase',\n    InsideEnd = 'insideEnd',\n    Center = 'center',\n    OutsideEnd = 'outsideEnd',\n}\n\nexport interface PaddingOptions {\n    /** The number of pixels of padding at the top of the sparkline area.\n     * @default 3\n     */\n    top?: number;\n    /** The number of pixels of padding at the right of the sparkline area.\n     * @default 3\n     */\n    right?: number;\n    /** The number of pixels of padding at the bottom of the sparkline area.\n     * @default 3\n     */\n    bottom?: number;\n    /** The number of pixels of padding at the left of the sparkline area.\n     * @default 3\n     */\n    left?: number;\n}\n\nexport interface SparklineAxisOptions {\n    /** The type of axis used to plot the data.\n     * @default 'category'\n     */\n    type?: AxisType;\n    /** The CSS colour value for the outline of the axis line.\n     * @default 'rgb(204, 214, 235)'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the axis line.\n     * @default 1\n     */\n    strokeWidth?: number;\n}\n\nexport type AxisType = 'number' | 'category' | 'time';\n\nexport interface SparklineTooltipOptions {\n    /** Set to false to disable tooltips. */\n    enabled?: boolean;\n    /** The element to place the tooltip into. This can be used to confine the tooltip to a specific area which may be outside of the sparkline grid cell. */\n    container?: HTMLElement;\n    /**\n     * The horizontal distance in pixels between the cursor and the top left corner of the tooltip.\n     * @default 10\n     */\n    xOffset?: number;\n    /**\n     * The vertical distance in pixels between the cursor and the top left corner of the tooltip.\n     * @default 0\n     */\n    yOffset?: number;\n    /** A callback function used to create the content for the tooltips. This function should return an object or a HTML string used to render the tooltip. */\n    renderer?: SparklineTooltipRenderer;\n}\n\nexport type SparklineTooltipRenderer = (params: TooltipRendererParams) => TooltipRendererResult;\nexport interface TooltipRendererResult {\n    /** Set to false to disable individual tooltip. */\n    enabled?: boolean;\n    /** The content to display in each tooltip. */\n    content?: string;\n    /** The title of the tooltip. */\n    title?: string;\n    /** The CSS color for the title text. */\n    color?: string;\n    /** The CSS color for the background of the tooltip title. */\n    backgroundColor?: string;\n    /** The opacity of the background for the tooltip title. */\n    opacity?: number;\n}\nexport interface TooltipRendererParams {\n    /** The grid context, includes row data, giving access to data from other columns in the same row. */\n    context?: any;\n    /** The raw datum associated with the point. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n}\n\nexport interface SparklineLineOptions {\n    /** The CSS colour value for the line.\n     *  @default 'rgb(124, 181, 236)'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the line.\n     * @default 1\n     */\n    strokeWidth?: number;\n}\n\nexport interface HighlightStyleOptions {\n    /**\n     * The width in pixels of the markers when hovered over. This is only for the Line and Area sparklines as Column and Bar sparklines do not have markers.\n     * @default 6\n     */\n    size?: number;\n    /**\n     * The fill colour of the markers, columns or bars when hovered over. Use `undefined` for no highlight fill.\n     * @default 'yellow'\n     */\n    fill?: string;\n    /**\n     * The CSS colour value for the outline of the markers, columns or bars when hovered over. Use `undefined` for no highlight stroke.\n     * @default 'silver'\n     */\n    stroke?: string;\n    /**\n     * The thickness in pixels for the stroke of the markers, columns or bars when hovered over.\n     * @default 1\n     */\n    strokeWidth?: number;\n}\nexport interface SparklineCrosshairsOptions {\n    xLine?: CrosshairLineOptions;\n    yLine?: CrosshairLineOptions;\n}\nexport interface CrosshairLineOptions {\n    /**\n     * Set to true to show crosshair line.\n     * @default false\n     */\n    enabled?: boolean;\n    /**\n     * The CSS colour value for the crosshair line.\n     * @default rgba(0,0,0, 0.54)\n     */\n    stroke?: string;\n    /**\n     * The thickness in pixels for the crosshair line.\n     * @default 1\n     */\n    strokeWidth?: number;\n    /**\n     * Defines how the crosshair stroke is rendered. This can be one of the lineDash style options.\n     * The default is `solid`, this renders a solid stroke with no gaps.\n     * @default 'solid'\n     */\n    lineDash?: 'dash' | 'dashDot' | 'dashDotDot' | 'dot' | 'longDash' | 'longDashDot' | 'longDashDotDot' | 'shortDash' | 'shortDashDot' | 'shortDashDotDot' | 'shortDot' | 'solid';\n    /**\n     * The shape used to draw the end points of the crosshair line.\n     * The options include `butt` (the ends of the line are squared off at the endpoints), `round` (the ends of the line are rounded) and `square` (the ends of the line are squared off by adding a box with width equal to the line's strokeWidth and height equal to half the line's strokeWidth).\n     * @default butt\n     */\n    lineCap?: 'round' | 'square' | 'butt';\n}\n\nexport type SparklineColumnFormatter = (params: ColumnFormatterParams) => ColumnFormat;\nexport type SparklineBarFormatter = (params: BarFormatterParams) => BarFormat;\nexport interface ColumnFormatterParams {\n    /** The raw data associated with the specific column. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the column in pixels. */\n    width: number;\n    /** The height of the column in pixels. */\n    height: number;\n    /** Whether or not the column is a minimum point. */\n    min?: boolean;\n    /** Whether or not the column is a maximum point. */\n    max?: boolean;\n    /** Whether or not the column represents the first data point. */\n    first?: boolean;\n    /** Whether or not the column represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column. */\n    strokeWidth: number;\n    /** Whether or not the column is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface ColumnFormat {\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column.*/\n    strokeWidth?: number;\n}\n\nexport interface BarFormatterParams {\n    /** The raw data associated with the specific bar. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the bar in pixels. */\n    width: number;\n    /** The height of the bar in pixels. */\n    height: number;\n    /** Whether or not the bar is a minimum point. */\n    min?: boolean;\n    /** Whether or not the bar is a maximum point. */\n    max?: boolean;\n    /** Whether or not the bar represents the first data point. */\n    first?: boolean;\n    /** Whether or not the bar represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar. */\n    strokeWidth: number;\n    /** Whether or not the bar is highlighted. */\n    highlighted: boolean;\n}\nexport interface BarFormat {\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar.*/\n    strokeWidth?: number;\n}\n\nexport interface SparklineMarkerOptions {\n    /** By default this is set to `true` whilst marker size is set to `0`, which means the markers are present but not visible.\n     * @default true\n     */\n    enabled?: boolean;\n    /** The shape of the markers.\n     * @default 'circle'\n     */\n    shape?: string;\n    /** The width in pixels of markers. By default this is `0`, increase the size to make markers visible.\n     * @default 0\n     */\n    size?: number;\n    /** The CSS colour value for the fill of the markers.\n     * @default 'rgb(124, 181, 236)'\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the markers.\n     * @default 'rgb(124, 181, 236)'\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the markers.\n     * @default 1\n     */\n    strokeWidth?: number;\n    /** A callback function to return format styles for individual markers. */\n    formatter?: SparklineMarkerFormatter;\n}\n\nexport type SparklineMarkerFormatter = (params: MarkerFormatterParams) => MarkerFormat;\nexport interface MarkerFormatterParams {\n    /** The raw data associated with the specific marker. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** Whether or not the marker is a minimum point. */\n    min?: boolean;\n    /** Whether or not the marker is a maximum point. */\n    max?: boolean;\n    /** Whether or not the marker represents the first data point. */\n    first?: boolean;\n    /** Whether or not the marker represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker. */\n    strokeWidth: number;\n    /** The width in pixels of the individual marker. */\n    size: number;\n    /** Whether or not the marker is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface MarkerFormat {\n    /** Set to false to make marker invisible. */\n    enabled?: boolean;\n    /** The width in pixels of the individual marker. */\n    size?: number;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker.*/\n    strokeWidth?: number;\n}"],
  "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",
  "names": ["keys", "keys", "func", "ModuleNames", "module", "listeners", "originalListeners", "_", "keys", "unmatchedAndAutoStates", "unmatchedCount", "changedColumns", "_a", "keys", "last", "values", "values", "AgPromiseStatus", "childComp", "getOrCreateProps", "keys", "values", "_", "values", "values", "values", "values", "_a", "values", "keys", "isVisible", "VerticalDirection", "HorizontalDirection", "DragSourceType", "_a", "LoadingOverlayComponent", "NoRowsOverlayComponent", "TooltipComponent", "LoadingOverlayComponent", "NoRowsOverlayComponent", "TooltipComponent", "ExcelFactoryMode", "RowHighlightPosition", "keys", "unwrapped", "LayoutCssClasses", "RowAnimationCssClasses", "SelectionHandleType", "CellRangeType", "instanceIdSequence", "instanceIdSequence", "_a", "column", "gui", "RowContainerName", "RowContainerType", "HeaderRowType", "instanceIdSequence", "_a", "keys", "instanceIdSequence", "ctrl", "HeaderNavigationDirection", "_a", "TabGuardClassNames", "_a", "_b", "ClientSideRowModelSteps", "ServerSideTransactionResultStatus", "value", "_", "TEMPLATE", "values", "_a", "_b", "alignSide", "_a", "PASSIVE_EVENTS", "_a", "isVerticalScrollShowing", "event", "keys", "params", "rowNode", "invisibleScrollbar", "invisibleScrollbar", "colDef", "value", "module", "key", "values", "module", "gridId", "BarColumnLabelPlacement"]
}
