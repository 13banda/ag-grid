{"version":3,"sources":["../../src/ts/gridBodyComp/rowContainer/rowContainerController.ts"],"names":[],"mappings":"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","file":"rowContainerController.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { ScrollVisibleService } from \"../../gridBodyComp/scrollVisibleService\";\nimport { Events } from \"../../eventKeys\";\nimport { RowContainerNames } from \"./rowContainerComp\";\nimport { RowContainerEventsFeature } from \"./rowContainerEventsFeature\";\nimport { DragService } from \"../../dragAndDrop/dragService\";\nimport { ControllersService } from \"../../controllersService\";\nimport { getInnerWidth, getScrollLeft, isHorizontalScrollShowing, isVisible, setScrollLeft } from \"../../utils/dom\";\nimport { ColumnController } from \"../../columnController/columnController\";\nimport { ResizeObserverService } from \"../../misc/resizeObserverService\";\nimport { ViewportSizeFeature } from \"../viewportSizeFeature\";\n\nexport interface RowContainerView {\n    setViewportHeight(height: string): void;\n}\n\nexport class RowContainerController extends BeanStub {\n\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('controllersService') private controllersService: ControllersService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n\n    private view: RowContainerView;\n    private name: RowContainerNames;\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement;\n    private enableRtl: boolean;\n\n    private viewportSizeFeature: ViewportSizeFeature; // only center has this\n\n    constructor(name: RowContainerNames) {\n        super();\n        this.name = name;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n\n        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();\n\n        this.forContainers([RowContainerNames.CENTER],\n            () => this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this)))\n\n        this.registerWithControllersService();\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n    }\n\n    private registerWithControllersService(): void {\n        switch (this.name) {\n            case RowContainerNames.CENTER: this.controllersService.registerCenterRowContainerCon(this); break;\n            case RowContainerNames.LEFT: this.controllersService.registerLeftRowContainerCon(this); break;\n            case RowContainerNames.RIGHT: this.controllersService.registerRightRowContainerCon(this); break;\n            case RowContainerNames.TOP_CENTER: this.controllersService.registerTopCenterRowContainerCon(this); break;\n            case RowContainerNames.TOP_LEFT: this.controllersService.registerTopLeftRowContainerCon(this); break;\n            case RowContainerNames.TOP_RIGHT: this.controllersService.registerTopRightRowContainerCon(this); break;\n            case RowContainerNames.BOTTOM_CENTER: this.controllersService.registerBottomCenterRowContainerCon(this); break;\n            case RowContainerNames.BOTTOM_LEFT: this.controllersService.registerBottomLeftRowContainerCon(this); break;\n            case RowContainerNames.BOTTOM_RIGHT: this.controllersService.registerBottomRightRowContainerCon(this); break;\n        }\n    }\n\n    private forContainers(names: RowContainerNames[], callback: (() => void)): void {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n\n    public getContainerElement(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public getViewportSizeFeature(): ViewportSizeFeature {\n        return this.viewportSizeFeature;\n    }\n\n    public setView(view: RowContainerView, eContainer: HTMLElement, eViewport: HTMLElement): void {\n        this.view = view;\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\n        this.addPreventScrollWhileDragging();\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.forContainers([RowContainerNames.CENTER], () => this.onHorizontalViewportChanged())\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.forContainers([RowContainerNames.CENTER], () => this.onHorizontalViewportChanged())\n    }\n\n    private onScrollVisibilityChanged(): void {\n        if (this.name !== RowContainerNames.CENTER) { return; }\n\n        const visible = this.scrollVisibleService.isHorizontalScrollShowing();\n        const scrollbarWidth = visible ? (this.gridOptionsWrapper.getScrollbarWidth() || 0) : 0;\n        const height = scrollbarWidth == 0 ? '100%' : `calc(100% + ${scrollbarWidth}px)`;\n        this.view.setViewportHeight(height);\n    }\n\n    // this methods prevents the grid views from being scrolled while the dragService is being used\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\n    private addPreventScrollWhileDragging(): void {\n        const preventScroll = (e: TouchEvent) => {\n            if (this.dragService.isDragging()) {\n                if (e.cancelable) {\n                    e.preventDefault();\n                }\n            }\n        };\n\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n    public onHorizontalViewportChanged(): void {\n        const scrollWidth = this.getCenterWidth();\n        const scrollPosition = this.getCenterViewportScrollLeft();\n\n        this.columnController.setViewportPosition(scrollWidth, scrollPosition);\n    }\n\n    public getCenterWidth(): number {\n        return getInnerWidth(this.eViewport);\n    }\n\n    public getCenterViewportScrollLeft(): number {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public registerViewportResizeListener(listener: (() => void)) {\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public isViewportVisible(): boolean {\n        return isVisible(this.eViewport);\n    }\n\n    public isViewportHScrollShowing(): boolean {\n        return isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportScrollLeft(): number {\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportElement(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public setContainerTranslateX(amount: number): void {\n        this.eContainer.style.transform = `translateX(${amount}px)`\n    }\n\n    public getHScrollPosition(): { left: number, right: number; } {\n        const res = {\n            left: this.eViewport.scrollLeft,\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth\n        };\n        return res;\n    }\n\n    public setCenterViewportScrollLeft(value: number): void {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        setScrollLeft(this.eViewport, value, this.enableRtl);\n    }\n}"]}