{"version":3,"sources":["../../../src/ts/headerRendering/cells/column/sortIndicatorComp.ts"],"names":[],"mappings":"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","file":"sortIndicatorComp.js","sourcesContent":["import { Events } from \"../../../eventKeys\";\nimport { SortController } from \"../../../sortController\";\nimport { setDisplayed, clearElement } from \"../../../utils/dom\";\nimport { Autowired } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { Component } from \"../../../widgets/component\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\n\nexport class SortIndicatorComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<span class=\"ag-sort-indicator-container\">\n            <span ref=\"eSortOrder\" class=\"ag-sort-indicator-icon ag-sort-order ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortAsc\" class=\"ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortDesc\" class=\"ag-sort-indicator-icon ag-sort-descending-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortMixed\" class=\"ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortNone\" class=\"ag-sort-indicator-icon ag-sort-none-icon ag-hidden\" aria-hidden=\"true\"></span>\n        </span>`;\n\n    @RefSelector('eSortOrder') private eSortOrder: HTMLElement;\n    @RefSelector('eSortAsc') private eSortAsc: HTMLElement;\n    @RefSelector('eSortDesc') private eSortDesc: HTMLElement;\n    @RefSelector('eSortMixed') private eSortMixed: HTMLElement;\n    @RefSelector('eSortNone') private eSortNone: HTMLElement;\n\n    @Autowired('columnModel')  private readonly columnModel: ColumnModel;\n    @Autowired('sortController')  private readonly sortController: SortController;\n\n    private column: Column;\n    private suppressOrder: boolean;\n\n    constructor() {\n        super();\n\n        this.setTemplate(SortIndicatorComp.TEMPLATE);\n    }\n\n    public setupSort(column: Column, suppressOrder: boolean = false): void {\n        this.column = column;\n        this.suppressOrder = suppressOrder;\n        \n        this.setupMultiSortIndicator();\n\n        const canSort = !!this.column.getColDef().sortable;\n        if (!canSort) {\n            return;\n        }\n\n        this.addInIcon('sortAscending', this.eSortAsc, column);\n        this.addInIcon('sortDescending', this.eSortDesc, column);\n        this.addInIcon('sortUnSort', this.eSortNone, column);\n\n        // Watch global events, as row group columns can effect their display column.\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED,  () => this.onSortChanged());\n        // when grouping changes so can sort indexes and icons\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED,  () => this.onSortChanged());\n\n        this.onSortChanged();\n    }\n\n    private addInIcon(iconName: string, eParent: HTMLElement, column: Column): void {\n        if (eParent == null) { return; }\n\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n\n    private onSortChanged(): void {\n        this.updateIcons();\n        if (!this.suppressOrder) {\n            this.updateSortOrder();\n        }\n    }\n\n    private updateIcons(): void {\n        const sortDirection = this.sortController.getDisplaySortForColumn(this.column);\n\n        if (this.eSortAsc) {\n            const isAscending = sortDirection === 'asc';\n            this.eSortAsc.classList.toggle('ag-hidden', !isAscending);\n        }\n\n        if (this.eSortDesc) {\n            const isDescending = sortDirection === 'desc';\n            this.eSortDesc.classList.toggle('ag-hidden', !isDescending);\n        }\n\n        if (this.eSortNone) {\n            const alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();\n            const isNone = sortDirection === null || sortDirection === undefined;\n            this.eSortNone.classList.toggle('ag-hidden', (alwaysHideNoSort || !isNone));\n        }\n    }\n\n    private setupMultiSortIndicator() {\n        this.addInIcon('sortUnSort', this.eSortMixed, this.column);\n    \n        const isColumnShowingRowGroup = this.column.getColDef().showRowGroup;\n        const areGroupsCoupled = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();\n        if (areGroupsCoupled && isColumnShowingRowGroup) {\n            // Watch global events, as row group columns can effect their display column.\n            this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, () => this.updateMultiSortIndicator());\n            // when grouping changes so can sort indexes and icons\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED,  () => this.updateMultiSortIndicator());\n            this.updateMultiSortIndicator();\n        }\n    }\n\n    private updateMultiSortIndicator() {\n        if (this.eSortMixed) {\n            const isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === 'mixed';\n            this.eSortMixed.classList.toggle('ag-hidden', !isMixedSort);\n        }\n    }\n\n    // we listen here for global sort events, NOT column sort events, as we want to do this\n    // when sorting has been set on all column (if we listened just for our col (where we\n    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.\n    private updateSortOrder(): void {\n        if (!this.eSortOrder) { return; }\n\n        const allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();\n\n        const indexThisCol = this.sortController.getDisplaySortIndexForColumn(this.column) ?? -1;\n        const moreThanOneColSorting = allColumnsWithSorting.some(col => this.sortController.getDisplaySortIndexForColumn(col) ?? -1 >= 1);\n        const showIndex = indexThisCol >= 0 && moreThanOneColSorting;\n        setDisplayed(this.eSortOrder, showIndex);\n\n        if (indexThisCol >= 0) {\n            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();\n        } else {\n            clearElement(this.eSortOrder);\n        }\n    }\n\n}\n"]}