{"version":3,"sources":["../../../src/ts/events.ts"],"names":[],"mappings":";;;;;;;;AAaA,yCAAqC;AAA5B,6BAAA,MAAM,CAAA","file":"events.js","sourcesContent":["import { RowNode } from './entities/rowNode';\nimport { Column } from './entities/column';\nimport { ColDef } from './entities/colDef';\nimport { GridApi } from './gridApi';\nimport { ColumnApi } from './columns/columnApi';\nimport { ProvidedColumnGroup } from './entities/providedColumnGroup';\nimport { FilterRequestSource } from './filter/filterManager';\nimport { ChartType } from './interfaces/iChartOptions';\nimport { IFilterComp } from './interfaces/iFilter';\nimport { CellRange, CellRangeParams } from './interfaces/IRangeService';\nimport { ServerSideTransactionResult } from \"./interfaces/serverSideTransaction\";\nimport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nimport { AgChartThemeOverrides } from \"./interfaces/iAgChartOptions\";\nexport { Events } from './eventKeys';\n\nexport interface ModelUpdatedEvent<TData = any> extends AgGridEvent<TData> {\n    /** If true, the grid will try and animate the rows to the new positions */\n    animate: boolean | undefined;\n    /** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n     * it's the same data but sorted or filtered, in which case this is true, and rows\n     * can animate around (eg rowNode id 24 is the same row node as last time). */\n    keepRenderedRows: boolean | undefined;\n    /** If true, then this update was a result of setRowData() getting called. This\n     * gets the grid to scroll to the top again. */\n    newData: boolean | undefined;\n    /** True when pagination and a new page is navigated to. */\n    newPage: boolean;\n}\n\nexport interface PaginationChangedEvent<TData = any> extends AgGridEvent<TData> {\n    /** True if rows were animated to new position */\n    animate?: boolean;\n    /** True if rows were kept (otherwise complete redraw) */\n    keepRenderedRows?: boolean;\n    /** True if data was new (i.e user set new data) */\n    newData?: boolean;\n    /** True if user went to a new page */\n    newPage: boolean;\n}\n\nexport interface AgEvent {\n    /** Event identifier */\n    type: string;\n}\n\nexport interface AgGridEvent<TData> extends AgEvent {\n    api: GridApi<TData>;\n    columnApi: ColumnApi;\n}\n\nexport interface ToolPanelVisibleChangedEvent<TData = any> extends AgGridEvent<TData> {\n    source: string | undefined;\n}\n\nexport interface ColumnPivotModeChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface VirtualColumnsChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface ColumnEverythingChangedEvent<TData = any> extends AgGridEvent<TData> {\n    source: string;\n}\n\nexport interface NewColumnsLoadedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface GridColumnsChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface DisplayedColumnsChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\n/** @deprecated use RowDataUpdatedEvent instead */\nexport interface RowDataChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface RowDataUpdatedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface PinnedRowDataChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface SelectionChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface FilterChangedEvent<TData = any> extends AgGridEvent<TData> {\n    /** True if the filter was changed as a result of data changing */\n    afterDataChange?: boolean;\n    /** True if filter was changed via floating filter */\n    afterFloatingFilter?: boolean;\n    /**\n     * Columns affected by the filter change. Array contents depend on the source of the event.\n     *\n     * - Expect 1 element for UI-driven column filter changes.\n     * - Expect 0-N elements (all affected columns) for calls to `gridOptions.api.setFilterModel()`.\n     * - Expect 0-N elements (removed columns) for calls to `gridOptions.api.setColumnDefs()`.\n     * - Expect 0 elements for quick-filters and calls to `gridOptions.api.onFilterChanged()`.\n     */\n    columns: Column[];\n}\n\nexport interface FilterModifiedEvent<TData = any> extends AgGridEvent<TData> {\n    filterInstance: IFilterComp;\n    column: Column;\n}\n\nexport interface FilterOpenedEvent<TData = any> extends AgGridEvent<TData> {\n    /** Column / OriginalColumnGroup that contains the filter */\n    column: Column | ProvidedColumnGroup;\n    /** Source of the open request */\n    source: FilterRequestSource;\n    /** Parent element of the filter */\n    eGui: HTMLElement;\n}\n\nexport interface SortChangedEvent<TData = any> extends AgGridEvent<TData> {\n    /** Source of the sort change. */\n    source: string;\n}\n\nexport interface GridReadyEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface DisplayedColumnsWidthChangedEvent<TData = any> extends AgGridEvent<TData> { } // not documented\nexport interface ColumnHoverChangedEvent<TData = any> extends AgGridEvent<TData> { } // not documented\nexport interface BodyHeightChangedEvent<TData = any> extends AgGridEvent<TData> { } // not documented\n\n// this event is 'odd one out' as it should have properties for all the properties\n// in gridOptions that can be bound by the framework. for example, the gridOptions\n// has 'rowData', so this property should have 'rowData' also, so that when the row\n// data changes via the framework bound property, this event has that attribute set.\nexport interface ComponentStateChangedEvent<TData = any> extends AgGridEvent<TData> { }\n\nexport interface ColumnPanelItemDragStartEvent extends AgEvent {\n    column: Column | ProvidedColumnGroup;\n}\n\nexport interface ColumnPanelItemDragEndEvent extends AgEvent { }\n\nexport interface DragEvent<TData = any> extends AgGridEvent<TData> {\n    /** One of {'cell','row','headerCell','toolPanel'} */\n    type: string;\n    /** The DOM element that started the event. */\n    target: HTMLElement;\n}\n\nexport interface DragStartedEvent<TData = any> extends DragEvent<TData> { }\n\nexport interface DragStoppedEvent<TData = any> extends DragEvent<TData> { }\n\n// For internal use only.\n// This event allows us to detect when other inputs in the same named group are changed, so for example we can ensure\n// that only one radio button in the same group is selected at any given time.\nexport interface CheckboxChangedEvent extends AgEvent {\n    id: string;\n    name: string;\n    selected?: boolean;\n    previousValue: boolean | undefined;\n}\n\nexport interface GridSizeChangedEvent<TData = any> extends AgGridEvent<TData> {\n    /** The grid's DIV's clientWidth */\n    clientWidth: number;\n    /** The grid's DIV's clientHeight */\n    clientHeight: number;\n}\n\nexport interface RowDragEvent<TData = any> extends AgGridEvent<TData> {\n    /** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */\n    type: string;\n    /** The row node getting dragged. Also the node that started the drag when multi-row dragging. */\n    node: RowNode<TData>;\n    /** The list of nodes being dragged. */\n    nodes: RowNode<TData>[];\n    /** The underlying mouse move event associated with the drag. */\n    event: MouseEvent;\n    /** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */\n    vDirection: string;\n    /** The row index the mouse is dragging over or -1 if over no row. */\n    overIndex: number;\n    /** The row node the mouse is dragging over or undefined if over no row. */\n    overNode?: RowNode<TData>;\n    /** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n     * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n     * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n     * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?'\n     */\n    y: number;\n}\n\nexport interface RowDragEnterEvent<TData = any> extends RowDragEvent<TData> { }\n\nexport interface RowDragEndEvent<TData = any> extends RowDragEvent<TData> { }\n\nexport interface RowDragMoveEvent<TData = any> extends RowDragEvent<TData> { }\n\nexport interface RowDragLeaveEvent<TData = any> extends RowDragEvent<TData> { }\n\nexport interface PasteStartEvent<TData = any> extends AgGridEvent<TData> {\n    source: string;\n}\n\nexport interface PasteEndEvent<TData = any> extends AgGridEvent<TData> {\n    source: string;\n}\n\nexport interface FillStartEvent<TData = any> extends AgGridEvent<TData> {\n}\n\nexport interface FillEndEvent<TData = any> extends AgGridEvent<TData> {\n    initialRange: CellRange;\n    finalRange: CellRange;\n}\n\nexport interface ViewportChangedEvent<TData = any> extends AgGridEvent<TData> {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface FirstDataRenderedEvent<TData = any> extends AgGridEvent<TData> {\n    /** Index of the first rendered row */\n    firstRow: number;\n    /** Index of the last rendered row */\n    lastRow: number;\n}\n\nexport interface RangeSelectionChangedEvent<TData = any> extends AgGridEvent<TData> {\n    id?: string;\n    /** True for the first change event, otherwise false */\n    started: boolean;\n    /** True for the last change event, otherwise false */\n    finished: boolean;\n}\n\nexport interface ChartCreated<TData = any> extends AgGridEvent<TData> {\n    /** Will always be `chartCreated`. */\n    type: string;\n    /** Id of the created chart. This can later be used to reference the chart via api methods. */\n    chartId: string;\n}\n\nexport interface ChartRangeSelectionChanged<TData = any> extends AgGridEvent<TData> {\n    /** Will always be `chartRangeSelectionChanged`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n    /** Same as `chartId`. */\n    id: string;\n    /** New cellRange selected. */\n    cellRange: CellRangeParams;\n}\n\nexport interface ChartOptionsChanged<TData = any> extends AgGridEvent<TData> {\n    /** Will always be `chartOptionsChanged`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n    /** ChartType */\n    chartType: ChartType;\n    /** Chart theme name of currently selected theme. */\n    chartThemeName: string;\n    /** Chart options.  */\n    chartOptions: AgChartThemeOverrides;\n}\n\nexport interface ChartDestroyed<TData = any> extends AgGridEvent<TData> {\n    /** Will always be `chartDestroyed`. */\n    type: string;\n    /** Id of the effected chart. */\n    chartId: string;\n}\n\nexport interface ColumnGroupOpenedEvent<TData = any> extends AgGridEvent<TData> {\n    columnGroup: ProvidedColumnGroup;\n}\n\nexport interface ItemsAddedEvent<TData = any> extends AgGridEvent<TData> {\n    items: RowNode<TData>[];\n}\n\nexport type ScrollDirection = 'horizontal' | 'vertical';\n\nexport interface BodyScrollEvent<TData = any> extends AgGridEvent<TData> {\n    direction: ScrollDirection;\n    left: number;\n    top: number;\n}\n\nexport interface BodyScrollEndEvent<TData = any> extends BodyScrollEvent<TData> { }\n\n// not documented\nexport interface FlashCellsEvent<TData = any> extends AgGridEvent<TData> {\n    cells: any;\n}\n\nexport interface PaginationPixelOffsetChangedEvent<TData = any> extends AgGridEvent<TData> {\n}\n\nexport interface CellFocusedParams {\n    /** Row index of the focused cell */\n    rowIndex: number | null;\n    /** Column of the focused cell */\n    column: Column | string | null;\n    /** either 'top', 'bottom' or null / undefined (if not pinned) */\n    rowPinned?: string | null;\n    /** Whether the cell a full width cell or a regular cell */\n    isFullWidthCell?: boolean;\n    /** Whether browser focus is also set (false when editing) */\n    forceBrowserFocus?: boolean;\n    /** When `forceBrowserFocus` is `true`, should scroll be prevented */\n    preventScrollOnBrowserFocus?: boolean;\n    // floating is for backwards compatibility, this is the same as rowPinned.\n    // this is because the focus service doesn't keep references to rowNodes\n    // as focused cell is identified by rowIndex - thus when the user re-orders\n    // or filters, the focused cell stays with the index, but the node can change.\n    floating?: string | null;\n}\n\n// this does not extent CellEvent as the focus service doesn't keep a reference to\n// the rowNode.\nexport interface CellFocusedEvent<TData = any> extends AgGridEvent<TData>, CellFocusedParams {}\n\nexport interface FullWidthRowFocusedEvent<TData = any> extends CellFocusedEvent<TData> {\n    fromBelow: boolean;\n}\n\nexport interface ExpandCollapseAllEvent<TData = any> extends AgGridEvent<TData> {\n    source: string;\n}\n\n/**---------------*/\n/** COLUMN EVENTS */\n/**---------------*/\n\nexport type ColumnEventType =\n    \"sizeColumnsToFit\" |\n    \"autosizeColumns\" |\n    \"autosizeColumnHeaderHeight\" |\n    \"alignedGridChanged\" |\n    \"filterChanged\" |\n    \"filterDestroyed\" |\n    \"gridOptionsChanged\" |\n    \"gridInitializing\" |\n    \"toolPanelDragAndDrop\" |\n    \"toolPanelUi\" |\n    \"uiColumnMoved\" |\n    \"uiColumnResized\" |\n    \"uiColumnDragged\" |\n    \"uiColumnExpanded\" |\n    \"uiColumnSorted\" |\n    \"contextMenu\" |\n    \"columnMenu\" |\n    \"rowModelUpdated\" |\n    \"rowDataUpdated\" |\n    \"api\" |\n    \"flex\" |\n    \"pivotChart\";\n\nexport interface ColumnEvent<TData = any> extends AgGridEvent<TData> {\n    /** The impacted column, only set if action was on one column */\n    column: Column | null;\n    /** List of all impacted columns */\n    columns: Column[] | null;\n    /** String describing where the event is coming from */\n    source: ColumnEventType;\n}\n\nexport interface ColumnResizedEvent<TData = any> extends ColumnEvent<TData> {\n    /** Set to true for last event in a sequence of move events */\n    finished: boolean;\n    /** Any columns resized due to flex */\n    flexColumns: Column[] | null;\n}\n\nexport interface ColumnPivotChangedEvent<TData = any> extends ColumnEvent<TData> { }\n\nexport interface ColumnRowGroupChangedEvent<TData = any> extends ColumnEvent<TData> { }\n\nexport interface ColumnValueChangedEvent<TData = any> extends ColumnEvent<TData> { }\n\nexport interface ColumnMovedEvent<TData = any> extends ColumnEvent<TData> {\n    /** The position the column was moved to */\n    toIndex?: number;\n}\n\nexport interface ColumnVisibleEvent<TData = any> extends ColumnEvent<TData> {\n    /** True if column was set to visible, false if set to hide */\n    visible?: boolean;\n}\n\nexport interface ColumnPinnedEvent<TData = any> extends ColumnEvent<TData> {\n    /** Either 'left', 'right', or null (it not pinned) */\n    pinned: string | null;\n}\n\n/**------------*/\n\n/** ROW EVENTS */\n/**------------*/\ninterface BaseRowEvent<TData> extends AgGridEvent<TData> {\n    /** The row node. */\n    node: RowNode<TData>;\n    /** The visible row index for the row */\n    rowIndex: number | null;\n    /** Either 'top', 'bottom' or null / undefined (if not set) */\n    rowPinned: string | null;\n    /** The context as provided on `gridOptions.context` */\n    context: any;\n    /** If event was due to browser event (eg click), this is the browser event */\n    event?: Event | null;\n}\n\nexport interface RowEvent<TData = any> extends BaseRowEvent<TData> {\n    /** The user provided data for the row. Data is `undefined` for row groups. */\n    data: TData | undefined;\n}\n\n/** Base interface for row events that always have data set. */\ninterface RowWithDataEvent<TData = any> extends BaseRowEvent<TData> {\n    /** The user provided data for the row. */\n    data: TData;\n}\n\nexport interface RowGroupOpenedEvent<TData = any> extends RowEvent<TData> {\n    /** True if the group is expanded. */\n    expanded: boolean;\n}\n\nexport interface RowValueChangedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface RowSelectedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface VirtualRowRemovedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface RowClickedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface RowDoubleClickedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface RowEditingStartedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface RowEditingStoppedEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface FullWidthCellKeyDownEvent<TData = any> extends RowEvent<TData> { }\n\nexport interface FullWidthCellKeyPressEvent<TData = any> extends RowEvent<TData> { }\n\n/**------------*/\n\n/** CELL EVENTS */\n/**------------*/\nexport interface CellEvent<TData = any, TValue = any> extends RowEvent<TData> {\n    column: Column;\n    colDef: ColDef<TData>;\n    /** The value for the cell if available otherwise undefined. */\n    value: TValue | undefined;\n}\n\n/** Use for cell events that will always have a value and data property. */\ninterface CellWithDataEvent<TData = any, TValue = any> extends RowWithDataEvent<TData> {\n    column: Column;\n    colDef: ColDef<TData>;\n    /** The value for the cell */\n    value: TValue;\n}\n\nexport interface CellKeyDownEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellKeyPressEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellClickedEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellMouseDownEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellDoubleClickedEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellMouseOverEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellMouseOutEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellContextMenuEvent<TData = any, TValue = any> extends CellEvent<TData, TValue> { }\n\nexport interface CellEditingStartedEvent<TData = any, TValue = any> extends CellWithDataEvent<TData, TValue> { }\n\nexport interface CellEditingStoppedEvent<TData = any, TValue = any> extends CellWithDataEvent<TData, TValue> {\n    /** The old value before editing */\n    oldValue: any;\n    /** The new value after editing */\n    newValue: any;\n}\n\nexport interface CellValueChangedEvent<TData = any, TValue = any> extends CellWithDataEvent<TData, TValue> {\n    oldValue: any;\n    newValue: any;\n    source: string | undefined;\n}\n\nexport interface CellEditRequestEvent<TData = any, TValue = any> extends CellWithDataEvent<TData, TValue> {\n    oldValue: any;\n    newValue: any;\n    source: string | undefined;\n}\n\nexport interface AsyncTransactionsFlushed<TData = any> extends AgGridEvent<TData> {\n    /**\n     * Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\n     * For Client-Side Row Model it's a list of `RowNodeTransaction`.\n     */\n    results: (RowNodeTransaction<TData> | ServerSideTransactionResult)[];\n}\n\n// not documented, was put in for CS - more thought needed of how server side grouping / pivoting\n// is done and how these should be used before we fully document and share with the world.\nexport interface ColumnRequestEvent<TData = any> extends AgGridEvent<TData> {\n    columns: Column[];\n}\n\nexport interface ColumnRowGroupChangeRequestEvent<TData = any> extends ColumnRequestEvent<TData> { }\n\nexport interface ColumnPivotChangeRequestEvent<TData = any> extends ColumnRequestEvent<TData> { }\n\nexport interface ColumnValueChangeRequestEvent<TData = any> extends ColumnRequestEvent<TData> { }\n\nexport interface ColumnAggFuncChangeRequestEvent<TData = any> extends ColumnRequestEvent<TData> {\n    aggFunc: any;\n}\n\nexport interface ScrollVisibilityChangedEvent<TData = any> extends AgGridEvent<TData> { } // not documented\n\nexport interface StoreUpdatedEvent extends AgEvent { } // not documented\n\nexport interface LeftPinnedWidthChangedEvent extends AgEvent { } // not documented\nexport interface RightPinnedWidthChangedEvent extends AgEvent { } // not documented\n\nexport interface RowContainerHeightChanged extends AgEvent { } // not documented\n\nexport interface DisplayedRowsChangedEvent extends AgEvent { } // not documented\n"]}