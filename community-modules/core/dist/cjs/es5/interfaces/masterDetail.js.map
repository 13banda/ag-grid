{"version":3,"sources":["../../../src/ts/interfaces/masterDetail.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"masterDetail.js","sourcesContent":["import { GridOptions } from \"../entities/gridOptions\";\nimport { ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { GridApi } from \"../gridApi\";\nimport { ColumnApi } from \"../columns/columnApi\";\n\nexport interface IDetailCellRenderer<TData = any> {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    addOrRemoveDetailGridCssClass(cssClassName: string, on: boolean): void;\n    setDetailGrid(gridOptions: GridOptions<TData>): void;\n    setRowData(rowData: TData[]): void;\n    getGui(): HTMLElement;\n}\n\nexport interface IDetailCellRendererParams<TData = any, TDetail = any> extends ICellRendererParams<TData> {\n    /**\n     * Provide Grid Options to use for the Detail Grid.\n     */\n    detailGridOptions: GridOptions<TDetail>;\n    /** A function that provides what rows to display in the Detail Grid. */\n    getDetailRowData: GetDetailRowData<TData, TDetail>;\n    /** Defines how to refresh the Detail Grids as data is changing in the Master Grid. */\n    refreshStrategy: 'rows' | 'everything' | 'nothing';\n    /** Allows changing the template used around the Detail Grid. */\n    template: string | TemplateFunc<TData>;\n\n    agGridReact: any;\n    frameworkComponentWrapper: any;\n    pinned: \"left\" | \"right\" | null | undefined;\n    /** @deprecated */\n    autoHeight: boolean;\n    /** @deprecated */\n    suppressRefresh: boolean;\n}\n\nexport interface GetDetailRowData<TData = any, TDetail = any> {\n    (params: GetDetailRowDataParams<TData, TDetail>): void;\n}\n\nexport interface GetDetailRowDataParams<TData = any, TDetail = any> {\n    /** Row node for the details request. */\n    node: RowNode<TData>;\n    /** Data for the current row. */\n    data: TData;\n    /** Success callback: pass the rows back for the grid request.  */\n    successCallback(rowData: TDetail[]): void;\n}\n\ninterface TemplateFunc<TData = any> {\n    (params: ICellRendererParams<TData>): string;\n}\n\nexport interface IDetailCellRendererCtrl {\n    init(comp: IDetailCellRenderer, params: IDetailCellRendererParams): void;\n    registerDetailWithMaster(api: GridApi, columnApi: ColumnApi): void;\n    refresh(): boolean;\n}\n"]}