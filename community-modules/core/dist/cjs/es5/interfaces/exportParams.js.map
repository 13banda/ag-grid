{"version":3,"sources":["../../../src/ts/interfaces/exportParams.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"exportParams.js","sourcesContent":["import { Column } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { RowPosition } from \"../entities/rowPosition\";\nimport { AgGridCommon } from \"./iCommon\";\n\nexport interface BaseExportParams {\n    /**\n     * If `true`, all columns will be exported in the order they appear in the columnDefs.\n     * When `false` only the columns currently being displayed will be exported.\n     * Default: `false`\n     */\n    allColumns?: boolean;\n    /**\n     * Provide a list (an array) of column keys or Column objects if you want to export specific columns.\n     */\n    columnKeys?: (string | Column)[];\n    /** Row node positions. */\n    rowNodes?: RowPosition[];\n    /**\n     * String to use as the file name.\n     */\n    fileName?: string;\n    /**\n     * Export only selected rows.\n     * Default: `false`\n     */\n    onlySelected?: boolean;\n    /**\n     * Only export selected rows including other pages (only makes sense when using pagination).\n     * Default: `false`\n     */\n    onlySelectedAllPages?: boolean;\n\n    /**\n     * Set to `true` to exclude header column groups.\n     * Default: `false`\n     */\n    skipColumnGroupHeaders?: boolean;\n    /**\n     * Set to `true` if you don't want to export column headers.\n     * Default: `false`\n     */\n    skipColumnHeaders?: boolean;\n    /**\n     * Set to `true` to skip row group headers if grouping rows. Only relevant when grouping rows.\n     * Default: `false`\n     */\n    skipRowGroups?: boolean;\n    /**\n     * Set to `true` to suppress exporting rows pinned to the top of the grid.\n     * Default: `false`\n     */\n    skipPinnedTop?: boolean;\n    /**\n     * Set to `true` to suppress exporting rows pinned to the bottom of the grid.\n     * Default: `false`\n     */\n    skipPinnedBottom?: boolean;\n\n    /**\n     * A callback function that will be invoked once per row in the grid. Return true to omit the row from the export.\n     */\n    shouldRowBeSkipped?(params: ShouldRowBeSkippedParams): boolean;\n    /**\n     * A callback function invoked once per cell in the grid. Return a string value to be displayed in the export. For example this is useful for formatting date values.\n     */\n    processCellCallback?(params: ProcessCellForExportParams): string;\n    /**\n     * A callback function invoked once per column. Return a string to be displayed in the column header.\n     */\n    processHeaderCallback?(params: ProcessHeaderForExportParams): string;\n    /**\n     * A callback function invoked once per column group. Return a `string` to be displayed in the column group header.\n     * Note that column groups are exported by default, this option will not work with `skipColumnGroupHeaders=true`.\n     */\n    processGroupHeaderCallback?(params: ProcessGroupHeaderForExportParams): string;\n    /**\n     * A callback function invoked once per row group. Return a `string` to be displayed in the group cell.\n     */\n    processRowGroupCallback?(params: ProcessRowGroupForExportParams): string;\n\n    /** @deprecated */\n    columnGroups?: boolean;\n    /** @deprecated */\n    skipGroups?: boolean;\n    /** @deprecated */\n    skipHeader?: boolean;\n}\n\nexport interface ExportParams<T> extends BaseExportParams {\n    /**\n     * Content to put at the top of the exported sheet.\n     */\n    prependContent?: T;\n    /**\n     * Content to put at the bottom of the exported sheet.\n     */\n    appendContent?: T;\n    /**\n     * @deprecated Use prependContent\n     */\n    customHeader?: T;\n    /**\n     * @deprecated Use appendContent\n     */\n    customFooter?: T;\n    /** A callback function to return content to be inserted below a row in the export. */\n    getCustomContentBelowRow?: (params: ProcessRowGroupForExportParams) => T | undefined;\n}\n\nexport type PackageFileParams<T> = T & {\n    data: string[];\n};\n\nexport interface CsvCell {\n    /** The data that will be added to the cell. */\n    data: CsvCellData;\n    /**\n     * The number of cells to span across (1 means span 2 columns).\n     * Default: `0`\n     */\n    mergeAcross?: number;\n}\n\nexport interface CsvCellData {\n    /** The value of the cell. */\n    value: string | null;\n}\n\nexport type CsvCustomContent = CsvCell[][] | string;\n\nexport interface CsvExportParams extends ExportParams<CsvCustomContent> {\n    /**\n     * Delimiter to insert between cell values.\n     * Default: `,`\n     */\n    columnSeparator?: string;\n    /**\n     * By default cell values are encoded according to CSV format rules: values are wrapped in double quotes, and any double quotes within the values are escaped, so my value becomes \\\"my\\\"\\\"value\\\". Pass `true` to insert the value into the CSV file without escaping.\n     * In this case it is your responsibility to ensure that no cells contain the columnSeparator character.\n     * Default: `false`\n     */\n    suppressQuotes?: boolean;\n}\n\nexport interface ShouldRowBeSkippedParams<TData = any> extends AgGridCommon<TData> {\n    /** Row node. */\n    node: RowNode<TData>;\n}\n\nexport interface ProcessCellForExportParams<TData = any> extends AgGridCommon<TData> {\n    value: any;\n    accumulatedRowIndex?: number;\n    node?: RowNode<TData> | null;\n    column: Column;\n    type: string; // clipboard, dragCopy (ctrl+D), export\n}\n\nexport interface ProcessHeaderForExportParams<TData = any> extends AgGridCommon<TData> {\n    column: Column;\n}\n\nexport interface ProcessGroupHeaderForExportParams<TData = any> extends AgGridCommon<TData> {\n    columnGroup: ColumnGroup;\n}\n\nexport interface ProcessRowGroupForExportParams<TData = any> extends AgGridCommon<TData> {\n    /** Row node. */\n    node: RowNode<TData>;\n}"]}