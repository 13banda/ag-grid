{"version":3,"sources":["../../../src/ts/interfaces/iExcelCreator.ts"],"names":[],"mappings":";;;;;;;;AAyVA,eAAe;AACf,IAAY,gBAA8C;AAA1D,WAAY,gBAAgB;IAAG,uEAAY,CAAA;IAAE,qEAAW,CAAA;AAAC,CAAC,EAA9C,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAA8B","file":"iExcelCreator.js","sourcesContent":["import { Column } from \"../entities/column\";\nimport { ExportParams } from \"./exportParams\";\nimport { XmlElement } from \"./iXmlFactory\";\n\n// Excel Styles\nexport interface ExcelStyle {\n    /** The id of the Excel Style, this should match a CSS cell class. */\n    id: string;\n    /** Use this property to customise cell alignment properties. */\n    alignment?: ExcelAlignment;\n    /** Use this property to customise cell borders. */\n    borders?: ExcelBorders;\n    /** Use this property to specify the type of data being exported. */\n    dataType?: ExcelDataType;\n    /** Use this property to customise the font used in the cell. */\n    font?: ExcelFont;\n    /** Use this property to customise the cell background. */\n    interior?: ExcelInterior;\n    /** Use this property to customise the cell value as a formatted number. */\n    numberFormat?: ExcelNumberFormat;\n    /** Use this property to setup cell protection. */\n    protection?: ExcelProtection;\n    /**\n     * @deprecated Legacy property\n     */\n    name?: string;\n}\n\nexport interface ExcelAlignment {\n    /**\n     * Use this property to change the cell horizontal alignment.\n     * Default: `Automatic`\n     */\n    horizontal?: 'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed';\n    /**\n     * Use this property to change the level of indentation in the cell.\n     * Default: 0\n     */\n    indent?: number;\n    /**\n     * Use this property to change the cell reading order.\n     * Default: `LeftToRight`\n     */\n    readingOrder?: 'RightToLeft' | 'LeftToRight' | 'Context';\n    /**\n     * The number of degrees between 0 and 359 to rotate the text.\n     * Default: `0`\n     */\n    rotate?: number;\n    /**\n     * If set to `true`, the font size of the cell will automatically change to force the text to fit within the cell.\n     * Default: `false`\n     */\n    shrinkToFit?: boolean;\n    /**\n     * Use this property to change the cell vertical alignment.\n     * Default: `Automatic`\n     */\n    vertical?: 'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed';\n    /**\n     * If set to `true`, multiline text will be displayed as multiline by Excel.\n     * Default: `false`\n     */\n    wrapText?: boolean;\n    /**\n     * @deprecated Legacy property\n     */\n    verticalText?: boolean;\n}\n\nexport interface ExcelBorders {\n    /** Use to set the cell's bottom border. */\n    borderBottom?: ExcelBorder;\n    /** Use to set the cell's left border. */\n    borderLeft?: ExcelBorder;\n    /** Use to set the cell's right border. */\n    borderRight?: ExcelBorder;\n    /** Use to set the cell's top border. */\n    borderTop?: ExcelBorder;\n}\n\nexport interface ExcelBorder {\n    /**\n     * The color or the border.\n     * Default: `black`\n     */\n    color?: string;\n    /**\n     * The style of the border.\n     * Default: `None`\n     */\n    lineStyle?: 'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double';\n    /**\n     * The thickness of the border from 0 (thin) to 3 (thick).\n     * Default: `0`\n     */\n    weight?: 0 | 1 | 2 | 3;\n}\n\nexport interface ExcelFont {\n    /**\n     * Set to `true` to set the cell text to bold.\n     * Default: `false`\n     */\n    bold?: boolean;\n    /**\n     * The color of the cell font.\n     * Default: `#000000`\n     */\n    color?: string;\n    /**\n     * The family of the font to used in the cell.\n     * Options: `Automatic`,`Roman`,`Swiss`,`Modern`,`Script`,`Decorative`,\n     * Default: `Automatic`\n     */\n    family?: string;\n    /**\n     * The name of the font to be used in the cell.\n     * Default: `Calibri`\n     */\n    fontName?: string;\n    /**\n     * Set to `true` to display the cell font as italic.\n     * Default: `false`\n     */\n    italic?: boolean;\n    /**\n     * Set to `true` to add a text outline.\n     * Default: `false`\n     */\n    outline?: boolean;\n    /**\n     * Set to `true` to add text shadow.\n     * Default: `false`\n     */\n    shadow?: boolean;\n    /**\n     * Set this property to used a different font size other than the default.\n     */\n    size?: number;\n    /**\n     * Set to `true` to add a strikeThrough line.\n     * Default: `false`\n     */\n    strikeThrough?: boolean;\n    /**\n     * Use this property to underline the cell text.     \n     */\n    underline?: 'Single' | 'Double';\n    /** Use this property to change the default font alignment. Note: This is different than setting cell vertical alignment. */\n    verticalAlign?: 'Superscript' | 'Subscript';\n    /**\n     * @deprecated Legacy property\n     */\n    charSet?: number;\n}\n\nexport interface ExcelInterior {\n    /** Use this property to set background color patterns. */\n    pattern: 'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross';\n    /** The colour to be used as a secondary colour combined with patterns. */\n    color?: string;\n    /** The pattern color. */\n    patternColor?: string;\n}\n\nexport interface ExcelNumberFormat {\n    /** Use this property to provide a pattern to format a number. (eg. 10000 could become $10,000.00). */\n    format: string;\n}\n\nexport interface ExcelProtection {\n    /**\n     * Set to `false` to disable cell protection (locking)\n     * Default: `true`\n     */\n    protected: boolean;\n    /**\n     * Set to `true` to hide formulas within protected cells.\n     * Default: `false`\n     */\n    hideFormula: boolean;\n}\n\n// Excel Structure\nexport interface ExcelWorksheet {\n    name: string;\n    table: ExcelTable;\n}\n\nexport interface ExcelTable {\n    columns: ExcelColumn[];\n    rows: ExcelRow[];\n}\n\nexport interface ExcelColumn {\n    min?: number;\n    max?: number;\n    outlineLevel?: number;\n    width?: number;\n    s?: number;\n    hidden?: boolean;\n    bestFit?: boolean;\n}\n\nexport interface ExcelRow {\n    /** Row index. */\n    index?: number;\n    /** Collapsed state. */\n    collapsed?: boolean;\n    /** Hidden state. */\n    hidden?: boolean;\n    /** The height of the row. */\n    height?: number;\n    /** The indentation level if the current row is part of a row group. */\n    outlineLevel?: number;\n    /** An array of ExcelCells. */\n    cells: ExcelCell[];\n}\n\nexport interface ExcelCell {\n    /** Cell reference. */\n    ref?: string;\n    /** The ExcelStyle id to be associated with the cell. */\n    styleId?: string;\n    /** The data that will be added to the cell. */\n    data?: ExcelData;\n    /**\n     * The number of cells to span across (1 means span 2 columns).\n     * Default: `0`\n     */\n    mergeAcross?: number;\n    /** Collapsible ranges. */\n    collapsibleRanges?: number[][];\n}\n\nexport interface ExcelImagePosition {\n    /** The row containing this image. This property is set automatically, don't change it unless you know what you are doing. */\n    row?: number;\n    /**\n     * The amount of rows this image will cover.\n     * Default: `1`\n     *  */\n    rowSpan?: number;\n    /** The column containing this image. This property is set automatically, don't change it unless you know what you are doing. */\n    column?: number;\n    /**\n     * The amount of columns this image will cover.\n     * Default: `1`\n     */\n    colSpan?: number;\n    /**\n     * The amount in pixels the image should be offset horizontally.\n     * Default: `0`\n     */\n    offsetX?: number;\n    /**\n     * The amount in pixels the image should be offset vertically.\n     * Default: `0`\n     */\n    offsetY?: number;\n}\n\nexport interface ExcelImage {\n    /**\n     * The image `id`. This field is required so the same image doesn't get imported multiple times.\n     */\n    id: string;\n    /**\n     * A base64 string that represents the image being imported.\n     */\n    base64: string;\n    /** The type of image being exported. */\n    imageType: 'jpg' | 'png' | 'gif';\n    /** Alt Text for the image. */\n    altText?: string;\n    /**\n     * If set to `true`, the image will cover the whole cell that is being imported to.\n     * Default: `false`\n     */\n    fitCell?: boolean;\n    /**\n     * Set a value between 0 - 100 that will indicate the percentage of transparency of the image.\n     * Default: `0`\n     */\n    transparency?: number;\n    /**\n     * Set a value between 0 - 359 that will indicate the number of degrees to rotate the image clockwise.\n     * Default: `0`\n     */\n    rotation?: number;\n    /** Set this property to select a preset that changes the appearance of the image. */\n    recolor?: 'Grayscale' | 'Sepia' | 'Washout';\n    /** The width of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */\n    width?: number;\n    /** The height of the image in pixels. If this value is not selected, `fitCell` will be automatically set to true. */\n    height?: number;\n    /** Position of the image. */\n    position?: ExcelImagePosition;\n}\n\n/*\n * OOXML Data Types\n * (str): String\n * (s): Shared String\n * (f): Formula\n * (inlineStr): Inline string\n * Note: Inline strings are placed in a `is` element instead of `v`\n * (n) Number\n * (b) Boolean\n * (d) DateTime\n * (e) Error\n*/\nexport type ExcelDataType = 'String' | 'Formula' | 'Number' | 'Boolean' | 'DateTime' | 'Error';\nexport type ExcelOOXMLDataType = 'str' | 's' | 'f' | 'inlineStr' | 'n' | 'b' | 'd' | 'e' | 'empty';\n\nexport interface ExcelData {\n    /** The type of data being in the cell. */\n    type: ExcelDataType | ExcelOOXMLDataType;\n    /** The value of the cell. */\n    value: string | null;\n}\n\nexport interface ExcelRelationship {\n    Id: string;\n    Type: string;\n    Target: string;\n}\n\nexport interface ExcelContentType {\n    name: 'Default' | 'Override';\n    ContentType: string;\n    Extension?: string;\n    PartName?: string;\n}\n\nexport interface ExcelXMLTemplate {\n    getTemplate(styleProperties?: ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell): XmlElement;\n}\n\nexport interface ExcelOOXMLTemplate {\n    getTemplate(config?: any, idx?: number, currentSheet?: number): XmlElement;\n    convertType?(type: string): string;\n}\n\n// Excel Export\nexport enum ExcelFactoryMode { SINGLE_SHEET, MULTI_SHEET }\n\nexport interface ColumnWidthCallbackParams {\n    column: Column | null;\n    index: number;\n}\n\nexport interface RowHeightCallbackParams {\n    rowIndex: number;\n}\n\nexport interface ExcelExportParams extends ExportParams<ExcelRow[]> {\n    /** The author of the exported file. Default: `\"AG Grid\"` */\n    author?: string;\n    /**\n     * If set to `true`, this will try to convert any cell that starts with `=` to a formula, instead of setting the cell value as regular string that starts with `=`.\n     * Default: `false`\n     */\n    autoConvertFormulas?: boolean;\n    /**\n     * Defines the default column width. If no value is present, each column will have value currently set in the application with a min value of 75px. This property can also be supplied a callback function that returns a number.\n     */\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    /**\n     * For backwards compatibility, this property could be set to `xml`, which will export an Excel Spreadsheet compatible with old Office versions (prior to Office 2007). Setting this to `xml` is not recommended as some features will not work in legacy mode.\n     * Default: `xlsx`\n     */\n    exportMode?: 'xlsx' | 'xml';\n    /**\n     * The default value for the font size of the Excel document.\n     * Default: `11`\n     */\n    fontSize?: number;\n    /**\n     * The height in pixels of header rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    /**\n     * The height in pixels of all rows. Defaults to Excel default value. This property can also be supplied a callback function that returns a number.\n     */\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    /**\n     * The name of the sheet in Excel where the grid will be exported. There is a max limit of 31 characters.\n     * Default: `ag-grid`\n     */\n    sheetName?: string;\n    /** The Excel document page margins. Relevant for printing. */\n    margins?: ExcelSheetMargin;\n    /** Allows you to setup the page orientation and size. */\n    pageSetup?: ExcelSheetPageSetup;\n    /** The configuration for header and footers. */\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    /**\n     * If `true`, text content will be encoded with XML character entities like `&amp;lt;` and `&amp;gt;`. This is only relevant when `exportMode='xml'`.\n     * Default: `false`\n     */\n    suppressTextAsCDATA?: boolean;\n    /**\n     * The mimeType of the Excel file. Note that this defaults to `application/vnd.ms-excel` if exportMode is `xml`.\n     * Default: `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`\n     */\n    mimeType?: string;\n    /** Use to export an image for the gridCell in question. */\n    addImageToCell?: (rowIndex: number, column: Column, value: string) => { image: ExcelImage, value?: string } | undefined;\n}\n\nexport interface ExcelExportMultipleSheetParams {\n    /**\n     * The author of the exported file.\n     * Default: `AG Grid`\n     */\n    author?: string;\n    /**\n     * Array of strings containing the raw data for Excel workbook sheets.\n     * This property is only used when exporting to multiple sheets using `api.exportMultipleSheetsAsExcel()` and the data for each sheet is obtained by calling `api.getSheetDataForExcel()`.\n     */\n    data: string[];\n    /**\n     * String to use as the file name.\n     * Default: `export.xlsx`\n     */\n    fileName?: string;\n    /**\n     * The default value for the font size of the Excel document.\n     * Default: `11`\n     */\n    fontSize?: number;\n    /**\n     * The mimeType of the Excel file.\n     * Default: `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`\n     */\n    mimeType?: string;\n}\n\nexport interface ExcelHeaderFooterConfig {\n    /** The configuration for header and footer on every page. */\n    all?: ExcelHeaderFooter;\n    /** The configuration for header and footer on the first page only. */\n    first?: ExcelHeaderFooter;\n    /** The configuration for header and footer on even numbered pages only. */\n    even?: ExcelHeaderFooter;\n}\nexport interface ExcelHeaderFooter {\n    /** An array of maximum 3 items (`Left`, `Center`, `Right`), containing header configurations. */\n    header?: ExcelHeaderFooterContent[];\n    /** An array of maximum 3 items (`Left`, `Center`, `Right`), containing footer configurations. */\n    footer?: ExcelHeaderFooterContent[];\n}\n\nexport interface ExcelHeaderFooterContent {\n    /** The value of the text to be included in the header. */\n    value: string;\n    /**\n     * Configures where the text should be added: `Left`, `Center` or `Right`.\n     * Default: `Left`\n     */\n    position?: 'Left' | 'Center' | 'Right';\n    /** The font style of the header/footer value. */\n    font?: ExcelFont;\n}\n\nexport interface IExcelCreator {\n    exportDataAsExcel(params?: ExcelExportParams): void;\n    getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined;\n    getSheetDataForExcel(params?: ExcelExportParams): string;\n\n    getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined;\n    exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void;\n\n    /** private methods */\n    setFactoryMode(factoryMode: ExcelFactoryMode, exportMode: 'xml' | 'xlsx'): void;\n    getFactoryMode(exportMode: 'xml' | 'xlsx'): ExcelFactoryMode;\n}\n\nexport interface ExcelSheetMargin {\n    /**\n     * The sheet top margin.\n     * Default: `0.75`\n     */\n    top?: number;\n    /**\n     * The sheet right margin.\n     * Default: `0.7`\n     */\n    right?: number;\n    /**\n     * The sheet bottom margin.\n     * Default: `0.75`\n     */\n    bottom?: number;\n    /**\n     * The sheet left margin.\n     * Default: `0.7`\n     */\n    left?: number;\n    /**\n     * The sheet header margin.\n     * Default: `0.3`\n     */\n    header?: number;\n    /**\n     * The sheet footer margin.\n     * Default: `0.3`\n     */\n    footer?: number;\n}\n\nexport interface ExcelSheetPageSetup {\n    /**\n     * Use this property to change the print orientation.\n     * Default: `Portrait`\n     */\n    orientation?: 'Portrait' | 'Landscape';\n    /**\n     * Use this property to set the sheet size.\n     * Default: `Letter`\n     */\n    pageSize?: 'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard';\n}\n"]}