{"version":3,"sources":["../../../src/ts/sortController.ts"],"names":[],"mappings":"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","file":"sortController.js","sourcesContent":["import { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { Constants } from \"./constants/constants\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { ColumnEventType, Events, SortChangedEvent } from \"./events\";\nimport { GridApi } from \"./gridApi\";\nimport { SortOption } from \"./rowNodes/rowNodeSorter\";\nimport { last } from \"./utils/array\";\n\nexport interface SortModelItem {\n    /** Column Id to apply the sort to. */\n    colId: string;\n    /** Sort direction */\n    sort: 'asc' | 'desc';\n}\n\n@Bean('sortController')\nexport class SortController extends BeanStub {\n\n    private static DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    public progressSort(column: Column, multiSort: boolean, source: ColumnEventType): void {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n\n    public setSortForColumn(column: Column, sort: 'asc' | 'desc' | null, multiSort: boolean, source: ColumnEventType): void {\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n            sort = null;\n        }\n\n        const isColumnsSortingCoupledToGroup = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();\n        let columnsToUpdate = [column];\n        if (isColumnsSortingCoupledToGroup) {\n            if (column.getColDef().showRowGroup) {\n                const rowGroupColumns = this.columnModel.getSourceColumnsForGroupColumn(column);\n                const sortableRowGroupColumns = rowGroupColumns?.filter(col => col.getColDef().sortable);\n                \n                if (sortableRowGroupColumns) {\n                    columnsToUpdate = [column, ...sortableRowGroupColumns];\n                } \n            }\n        }\n\n        columnsToUpdate.forEach(col => col.setSort(sort, source));\n\n        const doingMultiSort = (multiSort || this.gridOptionsWrapper.isAlwaysMultiSort()) && !this.gridOptionsWrapper.isSuppressMultiSort();\n\n        // clear sort on all columns except those changed, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarTheseColumns(columnsToUpdate, source);\n        } \n\n        // sortIndex used for knowing order of cols when multi-col sort\n        this.updateSortIndex(column);\n\n        this.dispatchSortChangedEvents(source);\n    }\n\n    private updateSortIndex(lastColToChange: Column) {\n        const isCoupled = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();\n        const groupParent = this.columnModel.getGroupDisplayColumnForGroup(lastColToChange.getId());\n        const lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;\n\n        const allSortedCols = this.getIndexableColumnsOrdered();\n\n        // reset sort index on everything\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(col => col.setSortIndex(null));\n        const allSortedColsWithoutChanges = allSortedCols.filter(col => col !== lastColToChange);\n        [...allSortedColsWithoutChanges, lastSortIndexCol].forEach((col, idx) => (\n            col.setSortIndex(idx)\n        ));\n    }\n\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    public onSortChanged(source: string): void {\n        this.dispatchSortChangedEvents(source);\n    }\n\n    public isSortActive(): boolean {\n        // pull out all the columns that have sorting set\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const sortedCols = allCols.filter(column => !!column.getSort());\n        return sortedCols && sortedCols.length > 0;\n    }\n\n    public dispatchSortChangedEvents(source: string): void {\n        const event: SortChangedEvent = {\n            type: Events.EVENT_SORT_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private clearSortBarTheseColumns(columnsToSkip: Column[], source: ColumnEventType): void {\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach((columnToClear: Column) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!columnsToSkip.includes(columnToClear)) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    }\n\n    private getNextSortDirection(column: Column): 'asc' | 'desc' | null {\n        let sortingOrder: ('asc' | 'desc' | null)[] | null | undefined;\n\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        } else if (this.gridOptionsWrapper.getSortingOrder()) {\n            sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n        } else {\n            sortingOrder = SortController.DEFAULT_SORTING_ORDER;\n        }\n\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(`AG Grid: sortingOrder must be an array with at least one element, currently it\\'s ${sortingOrder}`);\n            return null;\n        }\n\n        const currentIndex = sortingOrder.indexOf(column.getSort()!);\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result: 'asc' | 'desc' | null;\n\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        } else {\n            result = sortingOrder[currentIndex + 1];\n        }\n\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('AG Grid: invalid sort type ' + result);\n            return null;\n        }\n\n        return result;\n    }\n\n    private getColumnsOrderedForSort(): Column[] {\n        // pull out all the columns that have sorting set\n        const allColumnsIncludingAuto = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\n        // cols is sorted by first.\n        const allColsIndexes: { [id: string]: number } = {};\n        allColumnsIncludingAuto.forEach((col: Column, index: number) => allColsIndexes[col.getId()] = index);\n\n        // put the columns in order of which one got sorted first\n        allColumnsIncludingAuto.sort((a: Column, b: Column) => {\n            const iA = a.getSortIndex();\n            const iB = b.getSortIndex();\n            if (iA != null && iB != null) {\n                return iA - iB; // both present, normal comparison\n            } else if (iA == null && iB == null) {\n                // both missing, compare using column positions\n                const posA = allColsIndexes[a.getId()];\n                const posB = allColsIndexes[b.getId()];\n                return posA > posB ? 1 : -1;\n            } else if (iB == null) {\n                return -1; // iB missing\n            } else {\n                return 1; // iA missing\n            }\n        });\n\n        return allColumnsIncludingAuto;\n    }\n\n    private getIndexableColumnsOrdered(): Column[] {{}\n        if (!this.gridOptionsWrapper.isColumnsSortingCoupledToGroup()) {\n            return this.getColumnsWithSortingOrdered();\n        }\n\n        return this.getColumnsOrderedForSort()\n            .filter(col => {\n                if (!!col.getColDef().showRowGroup) {\n                    if (col.getColDef().field && col.getSort()) {\n                        return true;\n                    }\n    \n                    const sourceCols = this.columnModel.getSourceColumnsForGroupColumn(col);\n                    return sourceCols?.some(col => !!col.getSort());\n                }\n\n                return !!col.getSort();\n            });\n    }\n\n    public getColumnsWithSortingOrdered(): Column[] {\n        // pull out all the columns that have sorting set\n        const orderedColumns = this.getColumnsOrderedForSort();\n        return orderedColumns.filter(column => !!column.getSort());\n    }\n\n    // used by server side row models, to sent sort to server\n    public getSortModel(): SortModelItem[] {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            sort: column.getSort()!,\n            colId: column.getId()\n        }));\n    }\n\n    public getSortOptions(): SortOption[] {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            sort: column.getSort()!,\n            column\n        }));\n    }\n\n    public canColumnDisplayMixedSort(column: Column): boolean {\n        const isColumnSortCouplingActive = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();\n        const isGroupDisplayColumn = !!column.getColDef().showRowGroup;\n        return isColumnSortCouplingActive && isGroupDisplayColumn;\n    }\n\n    public getDisplaySortForColumn(column: Column): 'asc' | 'desc' | 'mixed' | null | undefined {\n        const linkedColumns = this.columnModel.getSourceColumnsForGroupColumn(column);\n        if (!this.canColumnDisplayMixedSort(column) || !linkedColumns?.length) {\n            return column.getSort();\n        }\n\n        // if column has unique data, its sorting is independent - but can still be mixed\n        const columnHasUniqueData = !!column.getColDef().field;\n        const sortableColumns = columnHasUniqueData ? [column, ...linkedColumns] : linkedColumns;\n\n        const firstSort = sortableColumns[0].getSort();\n        // the == is intentional, as null and undefined both represent no sort, which means they are equivalent\n        const allMatch = sortableColumns.every(col => col.getSort() == firstSort);\n        if (!allMatch) {\n            return 'mixed';\n        }\n        return firstSort;\n    }\n\n    public getDisplaySortIndexForColumn(column: Column): number | null | undefined {\n        const isColumnSortCouplingActive = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();\n        if (!isColumnSortCouplingActive) {\n            return this.getColumnsWithSortingOrdered().indexOf(column);\n        }\n\n        const displayColumn = this.columnModel.getGroupDisplayColumnForGroup(column.getId());\n        if (displayColumn) {\n            if (!!column.getSort()) {\n                return this.getDisplaySortIndexForColumn(displayColumn);\n            }\n            return null;\n        }\n\n        const allSortedCols = this.getIndexableColumnsOrdered()\n            .filter(col => !this.columnModel.getGroupDisplayColumnForGroup(col.getId()));\n        return allSortedCols.indexOf(column);\n    }\n}\n"]}