{"version":3,"sources":["../../src/ts/interfaces/IServerSideStore.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"IServerSideStore.js","sourcesContent":["import {NumberSequence} from \"../utils\";\nimport {RowNode} from \"../entities/rowNode\";\nimport {RowBounds} from \"./iRowModel\";\nimport {ServerSideTransaction, ServerSideTransactionResult} from \"./serverSideTransaction\";\nimport {SortModelItem} from \"../sortController\";\n\nexport interface IServerSideStore {\n\n    clearDisplayIndexes(): void;\n    getDisplayIndexEnd(): number | undefined;\n    isDisplayIndexInStore(displayIndex: number): boolean;\n    setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void;\n\n    forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence?: NumberSequence): void;\n\n    getRowUsingDisplayIndex(displayRowIndex: number, dontCreateBlock?: boolean): RowNode | null;\n    getRowBounds(index: number): RowBounds | null;\n    isPixelInRange(pixel: number): boolean;\n    getRowIndexAtPixel(pixel: number): number | undefined;\n    getChildStore(keys: string[]): IServerSideStore | null;\n    refreshAfterSort(params: RefreshSortParams): void;\n    refreshAfterFilter(): void;\n    applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult;\n    purgeStore(): void;\n    getRowCount(): number;\n    getTopLevelRowDisplayedIndex(topLevelIndex: number): number;\n    isLastRowIndexKnown(): boolean;\n    getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[];\n}\n\nexport interface RefreshSortParams {\n    oldSortModel: SortModelItem[];\n    newSortModel: SortModelItem[];\n    valueColSortChanged: boolean;\n    secondaryColSortChanged: boolean;\n    sortAlwaysResets: boolean;\n    changedColumnsInSort: string[];\n}\n"]}