{"version":3,"sources":["../../src/ts/rowNodeCache/rowNodeBlock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,gDAA+C;AAa/C;IAA2C,gCAAQ;IAqB/C,sBAAsB,EAAU;QAAhC,YACI,iBAAO,SAEV;QAbO,WAAK,GAAG,YAAY,CAAC,qBAAqB,CAAC;QAE3C,aAAO,GAAG,CAAC,CAAC;QAUhB,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC;;IACjB,CAAC;IAEM,4BAAK,GAAZ;QACI,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAEM,2BAAI,GAAX;QACI,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,iCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,4CAAqB,GAA5B;QACI,8EAA8E;QAC9E,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,qBAAqB,CAAC;IACpD,CAAC;IAEM,+BAAQ,GAAf;QACI,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAES,qCAAc,GAAxB;QACI,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,YAAY,CAAC;QACvC,IAAM,KAAK,GAAsB;YAC7B,IAAI,EAAE,YAAY,CAAC,mBAAmB;YACtC,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,IAAI;SACd,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAES,8BAAO,GAAjB,UAAkB,OAAe,EAAE,MAAyB;QACxD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAES,iCAAU,GAApB,UAAqB,OAAe,EAAE,IAAW,EAAE,OAAe;QAC9D,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAC,CAAC,CAAC;IACtE,CAAC;IAES,oCAAa,GAAvB,UAAwB,OAAe,EAAE,MAAyB;QAE9D,iEAAiE;QACjE,+DAA+D;QAC/D,sDAAsD;QACtD,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;YAC1B,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;SACpC;QAED,sCAAsC;QACtC,IAAM,KAAK,GAAsB;YAC7B,IAAI,EAAE,YAAY,CAAC,mBAAmB;YACtC,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,IAAI;SACd,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAnFa,gCAAmB,GAAG,cAAc,CAAC;IAErC,kCAAqB,GAAG,cAAc,CAAC;IACvC,0BAAa,GAAG,SAAS,CAAC;IAC1B,yBAAY,GAAG,QAAQ,CAAC;IACxB,yBAAY,GAAG,QAAQ,CAAC;IAgF1C,mBAAC;CAvFD,AAuFC,CAvF0C,mBAAQ,GAuFlD;AAvFqB,oCAAY","file":"rowNodeBlock.js","sourcesContent":["import { AgEvent } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\n\nexport interface LoadCompleteEvent extends AgEvent {\n    success: boolean;\n    block: RowNodeBlock;\n}\n\nexport interface LoadSuccessParams {\n    data: any[];\n    finalRowCount?: number;\n    info?: any;\n}\n\nexport abstract class RowNodeBlock extends BeanStub {\n\n    public static EVENT_LOAD_COMPLETE = 'loadComplete';\n\n    public static STATE_WAITING_TO_LOAD = 'needsLoading';\n    public static STATE_LOADING = 'loading';\n    public static STATE_LOADED = 'loaded';\n    public static STATE_FAILED = 'failed';\n\n    private readonly id: number;\n\n    private state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n\n    private version = 0;\n\n    public abstract getBlockStateJson(): { id: string, state: any };\n\n    protected abstract loadFromDatasource(): void;\n\n    protected abstract processServerResult(params: LoadSuccessParams): void;\n\n    protected constructor(id: number) {\n        super();\n        this.id = id;\n    }\n\n    public getId(): number {\n        return this.id;\n    }\n\n    public load(): void {\n        this.state = RowNodeBlock.STATE_LOADING;\n        this.loadFromDatasource();\n    }\n\n    public getVersion(): number {\n        return this.version;\n    }\n\n    public setStateWaitingToLoad(): void {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n    }\n\n    public getState(): string {\n        return this.state;\n    }\n\n    protected pageLoadFailed() {\n        this.state = RowNodeBlock.STATE_FAILED;\n        const event: LoadCompleteEvent = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: false,\n            block: this\n        };\n        this.dispatchEvent(event);\n    }\n\n    protected success(version: number, params: LoadSuccessParams): void {\n        this.successCommon(version, params);\n    }\n\n    protected pageLoaded(version: number, rows: any[], lastRow: number) {\n        this.successCommon(version, {data: rows, finalRowCount: lastRow});\n    }\n\n    protected successCommon(version: number, params: LoadSuccessParams) {\n\n        // we need to check the version, in case there was an old request\n        // from the server that was sent before we refreshed the cache,\n        // if the load was done as a result of a cache refresh\n        if (version === this.version) {\n            this.state = RowNodeBlock.STATE_LOADED;\n            this.processServerResult(params);\n        }\n\n        // check here if lastRow should be set\n        const event: LoadCompleteEvent = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: true,\n            block: this\n        };\n\n        this.dispatchEvent(event);\n    }\n\n}\n"]}