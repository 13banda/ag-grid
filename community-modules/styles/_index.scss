
//
// This file defines the public Sass API to ag-Grid's styles.
// https://ag-grid.com/javascript-data-grid/styling-sass/
//

@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:string";
@use "sass:color";
@use "sass:math";

@use "./dist/css-content";

// Emit styles for the grid. This mixin validates the parameters passed to it,
// converts the parameters to CSS variables, and combines all the necessary CSS
// files for the grid and selected theme.
@mixin grid-styles($params) {
    $themes: -get-themes($params);
    $params: map.remove($params, "theme", "themes");

    $no-native-widgets: map.get($params, "suppress-native-widget-styling");
    $params: map.remove($params, "suppress-native-widget-styling");

    @if $no-native-widgets {
        @include -load-css-file("ag-grid-no-native-widgets.css");
    } @else {
        @include -load-css-file("ag-grid.css");
    }

    @each $theme-name, $extra-params in $themes {
        @include -validate-theme($theme-name);
        $css-file: map.get($-theme-css-files, $theme-name);
        @include -load-css-file($css-file);
    }

    @each $theme-name, $extra-params in $themes {
        $theme-params: map.merge($params, $extra-params);
        .ag-theme-#{$theme-name} {
            @include -grid-variables($theme-params, $theme-name);
        }
    }
}

// Apply styles to all text fields. Usage:
// @include ag.text-input {
//     border: solid dashed red;
// }
@mixin text-input {
    input[class^='ag-']:not([type]),
    input[class^='ag-'][type='text'],
    input[class^='ag-'][type='number'],
    input[class^='ag-'][type='tel'],
    input[class^='ag-'][type='date'],
    input[class^='ag-'][type='datetime-local'],
    textarea[class^='ag-'] {
        @content;
    }
}

//
// PRIVATE IMPLEMENTATION
//

$-loaded-css-files: ();

// Fulfils the same role as meta.load-css, which we can't use due to this issue:
// https://github.com/sass/dart-sass/issues/1627
@mixin -load-css-file($file) {
    @if not map.get($-loaded-css-files, $file) {
        $-loaded-css-files: map.set($-loaded-css-files, $file, true);
        @include css-content.output-css-file($file);
    }
}

// Emit CSS variable declarations for a st of params, converting (foo: bar) to `--ag-foo: bar`
@mixin -grid-variables($params, $theme) {
    @include -validate-params($params, $theme);
    
    @if $theme {
        $theme-color-blends: meta.get-function("-theme-#{$theme}-color-blends");
        @if $theme-color-blends {
            $params: meta.call($theme-color-blends, $params);
        }
    }
    $params: -base-color-blends($params);

    @each $name, $value in $params {
        // @if map.has-key($-variable-param-types, $name) {
            --ag-#{$name}: #{$value};
        // }
    }
}

$-theme-variables: (
    alpine: (alpine-active-color: "color"),
    alpine-dark: (alpine-active-color: "color"),
    balham: (balham-active-color: "color"),
    balham-dark: (balham-active-color: "color"),
    material: (material-primary-color: "color", material-accent-color: "color"),
    classic: (),
);

$-theme-css-files: (
    alpine: "ag-theme-alpine.css",
    alpine-dark: "ag-theme-alpine.css",
    balham: "ag-theme-balham.css",
    balham-dark: "ag-theme-balham.css",
    material: "ag-theme-material.css",
    classic: "ag-theme-classic.css",
);

$-themes: map.keys($-theme-variables);

@mixin -validate-theme($theme) {
    @if not list.index($-themes, $theme) {
        @error "Invalid theme #{$theme}, expected one of #{$-themes}";
    }
}

@function -get-themes($params) {
    $themes: map.get($params, "themes");
    $themes: () !default;
    
    @if meta.type-of($themes) == string {
        $themes: ($themes,) // comma makes this a single element list
    }
    
    // treat ("alpine", "balham") as (alpine: (), "balham": ())
    @if meta.type-of($themes) == list {
        $themes-list: $themes;
        $themes: ();
        @each $theme in $themes-list {
            $themes: map.set($themes, $theme, ());
        }
    }
    
    @if map.has-key($params, "theme") {
        $theme: map.get($params, "theme");
        @if meta.type-of($theme) != string {
            @error "Expected theme to be a string, got #{meta.inspect($theme)}";
        }
        $themes: map.set($themes, $theme, ());
    }
    
    @if list.length($themes) == 0 {
        @return ("alpine": true);
    }
    
    @return $themes;
}

// Return a version of $params with colour blending applied
@function -base-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending below
    $params: -param-default($params, foreground-color, #000);
    $params: -param-default($params, background-color, #fff);
    $params: -param-default($params, range-selection-border-color, foreground-color);

    // Blended defaults.
    $params: -param-default($params, disabled-foreground-color,          foreground-color,                 $opacity: 0.5);
    $params: -param-default($params, modal-overlay-background-color,     background-color,                 $opacity: 0.66);
    $params: -param-default($params, range-selection-background-color,   range-selection-border-color,     $opacity: 0.2);
    $params: -param-default($params, range-selection-background-color-2, range-selection-background-color, $self-overlay: 2);
    $params: -param-default($params, range-selection-background-color-3, range-selection-background-color, $self-overlay: 3);
    $params: -param-default($params, range-selection-background-color-4, range-selection-background-color, $self-overlay: 4);
    $params: -param-default($params, border-color,                       foreground-color,                 $opacity: 0.25);
    $params: -param-default($params, header-column-separator-color,      border-color,                     $opacity: 0.5);
    $params: -param-default($params, header-column-resize-handle-color,  border-color,                     $opacity: 0.5);
    $params: -param-default($params, input-disabled-border-color,        input-border-color,               $opacity: 0.3);
    @return $params;
}

@function -theme-alpine-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending either below or in the base color blends
    $params: -param-default($params, background-color, #fff);
    $params: -param-default($params, foreground-color, #181d1f);
    $params: -param-default($params, subheader-background-color, #fff);
    $params: -param-default($params, alpine-active-color, #2196f3);
    $params: -param-default($params, range-selection-border-color, alpine-active-color);

    // Blended defaults
    $params: -param-default($params, subheader-toolbar-background-color, subheader-background-color, $opacity: 0.5);
    $params: -param-default($params, selected-row-background-color, alpine-active-color, $opacity: 0.1);
    $params: -param-default($params, row-hover-color, alpine-active-color, $opacity: 0.1);
    $params: -param-default($params, column-hover-color, alpine-active-color, $opacity: 0.1);
    $params: -param-default($params, chip-background-color, foreground-color, $opacity: 0.07);
    $params: -param-default($params, input-disabled-background-color, border-color, $opacity: 0.2);
    $params: -param-default($params, disabled-foreground-color, foreground-color, $opacity: 0.5);
    $params: -param-default($params, input-focus-border-color, alpine-active-color, $opacity: 0.4);
    @return $params;
}

@function -theme-alpine-dark-color-blends($params) {
    $params: -param-default($params, background-color, #181d1f);
    $params: -param-default($params, foreground-color, #fff);
    $params: -param-default($params, subheader-background-color, #000);

    @return  -theme-alpine-color-blends($params);
}

@function -theme-material-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending either below or in the base color blends
    $params: -param-default($params, background-color, #fff);
    $params: -param-default($params, foreground-color, color.change(#000, $alpha: 0.87));
    $params: -param-default($params, subheader-background-color, #eee);
    $params: -param-default($params, material-primary-color, #3f51b5);
    $params: -param-default($params, range-selection-border-color, material-primary-color);
    $params: -param-default($params, range-selection-background-color, rgba(122, 134, 203, 0.1));
    $params: -param-default($params, border-color, #e2e2e2);

    // Blended defaults
    $params: -param-default($params, secondary-foreground-color, foreground-color, $opacity: 0.54);
    $params: -param-default($params, disabled-foreground-color, foreground-color, $opacity: 0.38);
    @return $params;
}

// Apply a default value to a parameter
//  $params: -param-default($params, x, #f08) - default x to a specific color value
//  $params: -param-default($params, x, y) - default x to the value of y (if y is set)
//  $params: -param-default($params, x, y, $opacity: 0.5) - default x to the value of y made 50% transparent
@function -param-default($params, $target, $source, $opacity: null, $self-overlay: null) {
    $value: null;
    @if type-of($source) == "color" {
        $value: $source;
    } @else {
        $value: map.get($params, $source);
    }
    @if map.has-key($params, $target) or $value == null {
        @return $params;
    }
    @if $opacity != null {
        $value: color.change($value, $alpha: color.alpha($value) * $opacity);
    }
    @if $self-overlay != null {
        // this formula produces the same opacity value as overlaying the color on top
        // of itself $self-overlay times
        $value: color.change($value, $alpha: 1-(math.pow(1 - color.alpha($value), $self-overlay)));
    }
    @return map.set($params, $target, $value);
}

$-param-type-descriptions: (
    "color": "a CSS color (e.g. `red` or `#fff`)",
    "size": "a CSS size (e.g. `0`, `4px` or `50%`)",
    "border": "a 3-part border spec in the form `style width color` (e.g. `solid 1px red`)",
    "border-style": "a CSS border style (e.g. `dotted` or `solid`)",
    "border-style-not-none": "a CSS border style (e.g. `dotted` or `solid` but not `none`)",
    "duration": "a number with time duration units (e.g. `3s` or `250ms`)",
    "border-style-and-size": "either `none`, or a border-style and size (e.g. `solid 1px`), or a boolean (true -> `solid 1px` and false -> `none`)",
    "border-style-and-color": "a border-style and color (e.g. `solid red`)",
    "display": "`block` or `true` to show, `none` or `false` to hide"
);

// params that are copied to --ag-param-name variables
$-variable-param-types: (
    foreground-color: "color",
    data-color: "color",
    secondary-foreground-color: "color",
    header-foreground-color: "color",
    disabled-foreground-color: "color",
    background-color: "color",
    header-background-color: "color",
    subheader-background-color: "color",
    subheader-toolbar-background-color: "color",
    control-panel-background-color: "color",
    side-button-selected-background: "color",
    selected-row-background-color: "color",
    odd-row-background-color: "color",
    modal-overlay-background-color: "color",
    row-hover-color: "color",
    column-hover-color: "color",
    range-selection-border-color: "color",
    range-selection-border-style: "border-style",
    range-selection-background-color: "color",
    range-selection-background-color-2: "color",
    range-selection-background-color-3: "color",
    range-selection-background-color-4: "color",
    range-selection-highlight-color: "color",
    selected-tab-underline-color: "color",
    selected-tab-underline-width: "size",
    selected-tab-underline-transition-speed: "duration",
    range-selection-chart-category-background-color: "color",
    range-selection-chart-background-color: "color",
    header-cell-hover-background-color: "color",
    header-cell-moving-background-color: "color",
    value-change-value-highlight-background-color: "color",
    value-change-delta-up-color: "color",
    value-change-delta-down-color: "color",
    chip-background-color: "color",
    borders: "border-style-and-size",
    border-color: "color",
    borders-critical: "border-style-and-size",
    borders-secondary: "border-style-and-size",
    secondary-border-color: "color",
    borders-row: "border-style-and-size",
    row-border-color: "color",
    cell-horizontal-border: "border-style-and-color",
    borders-input: "border-style-and-size",
    input-border-color: "color",
    borders-input-invalid: "border-style-and-size",
    input-border-color-invalid: "color",
    borders-side-button: "border-style-and-size",
    border-radius: "size",
    header-column-separator-display: "display",
    header-column-separator-height: "size",
    header-column-separator-width: "size",
    header-column-separator-color: "color",
    header-column-resize-handle-display: none,
    header-column-resize-handle-height: "size",
    header-column-resize-handle-width: "size",
    header-column-resize-handle-color: "color",
    invalid-color: "color",
    input-disabled-border-color: "color",
    input-disabled-background-color: "color",
    checkbox-background-color: "color",
    checkbox-border-radius: "size",
    checkbox-checked-color: "color",
    checkbox-unchecked-color: "color",
    checkbox-indeterminate-color: "color",
    toggle-button-off-border-color: "color",
    toggle-button-off-background-color: "color",
    toggle-button-on-border-color: "color",
    toggle-button-on-background-color: "color",
    toggle-button-switch-background-color: "color",
    toggle-button-switch-border-color: "color",
    toggle-button-border-width: "size",
    toggle-button-height: "size",
    toggle-button-width: "size",
    input-focus-box-shadow: none,
    input-focus-border-color: none,
    minichart-selected-chart-color: "color",
    minichart-selected-page-color: "color",
    grid-size: "size",
    icon-size: "size",
    widget-container-horizontal-padding: "size",
    widget-container-vertical-padding: "size",
    widget-horizontal-spacing: "size",
    widget-vertical-spacing: "size",
    cell-horizontal-padding: "size",
    cell-widget-spacing: "size",
    row-height: "size",
    header-height: "size",
    list-item-height: "size",
    column-select-indent-size: "size",
    row-group-indent-size: "size",
    filter-tool-panel-group-indent: "size",
    tab-min-width: "size",
    menu-min-width: "size",
    side-bar-panel-width: "size",
    font-family: "any",
    font-size: "size",
    card-radius: "size",
    card-shadow: "any",
    popup-shadow: "any",
    alpine-active-color: "color",
    balham-active-color: "color",
    material-primary-color: "color",
    material-accent-color: "color",
);

// params that are not copied to CSS variables
$-non-variable-param-types: (
    suppress-native-widget-styling: "bool"
);

@mixin -validate-params($params, $theme: null) {
    $theme-variables: ();
    @if $theme {
        @include -validate-theme($theme);
        $theme-variables: map.get($-theme-variables, $theme);
    }

    $param-types: map.merge($-variable-param-types, $theme-variables);
    $error-count: 0;
    @each $name, $value in $params {
        @if string.index(meta.inspect($value), "var(") {
            // You can pass variable expressions as values and we'll just trust
            // that it's an appropriate value because we can't check at compile time
        } @else {
            $expected-type: map.get($param-types, $name);
            @if $expected-type {
                $validator-name: "-validate-#{$expected-type}";
                $validator: meta.get-function($validator-name);
                @if not $validator {
                    @error "Internal error: no validator function #{$validator-name}";
                }
                $is-valid: meta.call($validator, $value);
                @if not $is-valid {
                    $expected: map.get($-param-type-descriptions, $expected-type);
                    $expected: $expected-type !default;
                    @warn "Invalid value for parameter '#{$name}': #{meta.inspect($value)} -- expected #{$expected}";
                    $error-count: $error-count + 1;
                }
            } @else if not map.has-key($-non-variable-param-types, $name) {
                @warn "Unrecognised parameter '#{$name}'";
                $error-count: $error-count + 1;
            }
        }
    }
    @if $error-count > 0 {
        @error "#{$error-count} errors in theme params see warnings above for details";
    }
}

@function -validate-color($value) {
    @return meta.type-of($value) == "color";
}

@function -validate-size($value) {
    // TODO implement me
    @return true;
}

@function -validate-border($value) {
    // TODO implement me
    @return true;
}

@function -validate-border-style($value) {
    // TODO implement me
    // Note: check for style, number and color in any order
    @return true;
}

@function -validate-duration($value) {
    // TODO implement me
    @return true;
}

@function -validate-border-style-and-size($value) {
    // TODO implement me
    // Note: check for style and number in any order
    @return true;
}

@function -validate-bool($value) {
    @return meta.type-of($value) == "bool";
}

@function -validate-any($value) {
    @return true;
}