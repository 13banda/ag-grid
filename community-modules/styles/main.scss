
//
// This file defines the public Sass API to ag-Grid's styles.
// https://ag-grid.com/javascript-data-grid/styling-sass/
//

@use "sass:map";
@use "sass:list";
@use "sass:meta";

// Note: some customers may @import rather than @use this file, which will
// cause all definitions to be merged into their global namespace,
// so prefix all definitions with "ag-" or "-ag-" for private items

// Emit styles for the grid. This mixin validates the parameters passed to it,
// converts the parameters to CSS variables, and combines all the necessary CSS
// files for the grid and selected theme.
// See TODO: get URL
@mixin ag-grid-styles($params) {
    $theme: map.get($params, "theme");
    $theme: "alpine" !default;
    $params: map.remove($params, "theme");
    
    @include meta.load-css("./ag-grid.css");
    @include meta.load-css("./ag-theme-#{$theme}.css");
    
    .ag-theme-#{$theme} {
        @include ag-grid-variables($params, $theme);
    }
}

@mixin ag-grid-variables($params, $theme: null) {
    @include -ag-validate-params($params, $theme);
    
    @if $theme {
        $theme-color-blends: meta.get-function("-ag-theme-#{$theme}-color-blends");
        @if $theme-color-blends {
            $params: meta.call($theme-color-blends, $params);
        }
    }
    $params: ag-base-color-blends($params);

    @each $name, $value in $params {

    }
}

//
// PRIVATE IMPLEMENTATION
//

$-ag-theme-variables: (
    alpine: (alpine-active-color: "color"),
    balham: (balham-active-color: "color"),
    material: (material-primary-color: "color", material-accent-color: "color"),
    classic: (),
);

$-ag-themes: map.keys($-ag-theme-variables);

@mixin -ag-validate-theme($theme) {
    @if list.index($-ag-themes, $theme) {
        @error "Invalid theme #{$theme}, expected one of #{$-ag-themes}";
    }
}

@function -ag-base-color-blends($params) {
    $params: -ag-param-default($params, disabled-foreground-color,          foreground-color,                 $opacity: 0.5);
    $params: -ag-param-default($params, modal-overlay-background-color,     background-color,                 $opacity: 0.66);
    $params: -ag-param-default($params, range-selection-background-color,   range-selection-border-color,     $opacity: 0.5);
    $params: -ag-param-default($params, range-selection-background-color-2, range-selection-background-color, $self-overlay: 2);
    $params: -ag-param-default($params, range-selection-background-color-3, range-selection-background-color, $self-overlay: 3);
    $params: -ag-param-default($params, range-selection-background-color-4, range-selection-background-color, $self-overlay: 4);
    $params: -ag-param-default($params, border-color,                       foreground-color,                 $opacity: 0.25);
    $params: -ag-param-default($params, header-column-separator-color,      border-color,                     $opacity: 0.5);
    $params: -ag-param-default($params, header-column-resize-handle-color,  border-color,                     $opacity: 0.5);
    $params: -ag-param-default($params, input-disabled-border-color,        input-border-color,               $opacity: 0.3);
    @return $params;
}

@function -ag-theme-alpine-color-blends($params) {
    $params: -ag-param-default($params, alpine-active-color,          alpine-active-color,                 $opacity: 0.5);


    @return $params;
}

@function -ag-param-default($params, $target, $source, $opacity: null, $self-overlay: null) {
    Next up: allow $source to be a color
    @if map.has-key($params, $target) or not map.has-key($params, $source) {
        @return $params;
    }
    $value: map.get($params, $source);
    @if $opacity != null {
        $value: color.change($value, $alpha: color.alpha($value) * $opacity);
    }
    @if $self-overlay != null {
        // this formula produces the same opacity value as overlaying the color on top
        // of itself $self-overlay times
        $value: color.change($value, $alpha: 1-(math.pow(1 - color.alpha($value), $self-overlay)));
    }
    @return map.set($params, $target, $value);
}

$-ag-param-type-descriptions: (
    "color": "a CSS color (e.g. `red` or `#fff`)",
    "size": "a CSS size (e.g. `0`, `4px` or `50%`)",
    "border": "a 3-part border spec in the form `style width color` (e.g. `solid 1px red`)",
    "border-style": "a CSS border style (e.g. `dotted` or `solid`)",
    "border-style-not-none": "a CSS border style (e.g. `dotted` or `solid` but not `none`)",
    "duration": "a number with time duration units (e.g. `3s` or `250ms`)",
    "border-style-and-size": "either `none` or 2-element list of a border-style and size (e.g. `solid 1px`)",
    "display": "`true`, `false`, `block` (equivalent to `true`) or `none` (equivalent to `false`)"
);

$-ag-param-types: (
    foreground-color: "color",
    data-color: "color",
    secondary-foreground-color: "color",
    header-foreground-color: "color",
    disabled-foreground-color: "color",
    background-color: "color",
    header-background-color: "color",
    subheader-background-color: "color",
    subheader-toolbar-background-color: "color",
    control-panel-background-color: "color",
    side-button-selected-background: "color",
    selected-row-background-color: "color",
    odd-row-background-color: "color",
    modal-overlay-background-color: "color",
    row-hover-color: "color",
    column-hover-color: "color",
    range-selection-border-color: "color",
    range-selection-border-style: "border-style",
    range-selection-background-color: "color",
    range-selection-background-color-2: "color",
    range-selection-background-color-3: "color",
    range-selection-background-color-4: "color",
    range-selection-highlight-color: "color",
    selected-tab-underline-color: "color",
    selected-tab-underline-width: "size",
    selected-tab-underline-transition-speed: "duration",
    range-selection-chart-category-background-color: "color",
    range-selection-chart-background-color: "color",
    header-cell-hover-background-color: "color",
    header-cell-moving-background-color: "color",
    value-change-value-highlight-background-color: "color",
    value-change-delta-up-color: "color",
    value-change-delta-down-color: "color",
    chip-background-color: "color",
    borders: "border-style-and-size",
    border-color: "color",
    borders-critical: "border-style-and-size",
    borders-secondary: "border-style-and-size",
    secondary-border-color: "color",
    borders-row: "border-style-and-size",
    row-border-color: "color",
    cell-border-color: "color",
    cell-border-style: "border-style",
    borders-side-button: "border-style-and-size",
    border-radius: "size",
    header-column-separator-display: "display",
    header-column-separator-height: "size",
    header-column-separator-width: "size",
    header-column-separator-color: "color",
    header-column-resize-handle-display: none,
    header-column-resize-handle-height: 50"size",
    header-column-resize-handle-width: "size",
    header-column-resize-handle-color: "color",
    invalid-color: "color",
    input-border: "border",
    input-border-invalid: "border",
    input-disabled-border-color: "color",
    input-disabled-background-color: "color",
    checkbox-background-color: "color",
    checkbox-border-radius: "size",
    checkbox-checked-color: "color",
    checkbox-unchecked-color: "color",
    checkbox-indeterminate-color: "color",
    toggle-button-off-border-color: "color",
    toggle-button-off-background-color: "color",
    toggle-button-on-border-color: "color",
    toggle-button-on-background-color: "color",
    toggle-button-switch-background-color: "color",
    toggle-button-switch-border-color: "color",
    toggle-button-border-width: "size",
    toggle-button-height: "size",
    toggle-button-width: "size",
    input-focus-box-shadow: none,
    input-focus-border-color: none,
    minichart-selected-chart-color: "color",
    minichart-selected-page-color: "color",
    grid-size: "size",
    icon-size: "size",
    widget-container-horizontal-padding: "size",
    widget-container-vertical-padding: "size",
    widget-horizontal-spacing: "size",
    widget-vertical-spacing: "size",
    cell-horizontal-padding: "size",
    cell-widget-spacing: "size",
    row-height: "size",
    header-height: "size",
    list-item-height: "size",
    column-select-indent-size: "size",
    row-group-indent-size: "size",
    filter-tool-panel-group-indent: "size",
    tab-min-width: "size",
    menu-min-width: "size",
    side-bar-panel-width: "size",
    font-family: "any",
    font-size: "size",
    card-radius: "size",
    card-shadow: "any",
    popup-shadow: "any",
    alpine-active-color: "color",
    balham-active-color: "color",
    material-primary-color: "color",
    material-accent-color: "color",
);

@mixin -ag-validate-params($params, $theme: null) {
    $theme-variables: ();
    @if $theme {
        @include -ag-validate-theme($theme);
        $theme-variables: map.get($-ag-theme-variables, $theme);
    }

    $param-types: map.merge($-ag-param-types, $theme-variables);
    $errors: ();
    @each $name, $value in $params {
        $expected-type: map.get($param-types, $name);
        @if $expected-type {
            $validator-name: "-ag-validate-#{$expected-type}";
            $validator: meta.get-function($validator-name);
            @if not $validator {
                @error "Internal error: no validator function #{$validator-name}";
            }
            $is-valid: meta.call($validator);
            @if not $is-valid {
                $expected: map.get($-ag-param-type-descriptions, $expected-type);
                $expected: $expected-type !default;
                @warn "Invalid value for parameter '#{$name}': #{meta.inspect($value)} -- expected #{$expected}";
                $has-error: true
            }
        } @else {
            @warn "Unrecognised parameter '#{$name}'";
            $has-error: true
        }
    }
    @if $has-error {
        @error "Stopping compilation due to errors, see lines above for details";
    }
}

@function -ag-validate-color($name, $value) {
    @return meta.type-of($value) == "color";
}

@function -ag-validate-size($name, $value) {
    // TODO implement me
    @return true;
}

@function -ag-validate-border($name, $value) {
    // TODO implement me
    @return true;
}

@function -ag-validate-border-style($name, $value) {
    // TODO implement me
    // Note: check for style, number and color in any order
    @return true;
}

@function -ag-validate-duration($name, $value) {
    // TODO implement me
    @return true;
}

@function -ag-validate-border-style-and-size($name, $value) {
    // TODO implement me
    // Note: check for style and number in any order
    @return true;
}

@function -ag-validate-any($name, $value) {
    @return true;
}